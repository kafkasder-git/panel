name: GitHub Copilot Quality Gates

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  workflow_dispatch:

jobs:
  copilot-quality-check:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Check Copilot Architecture Compliance
        run: |
          echo "ü§ñ Checking GitHub Copilot architecture compliance..."
          
          # Check for direct Supabase usage in components/hooks
          DIRECT_SUPABASE=$(find . -name "*.ts" -o -name "*.tsx" | grep -E "(components|hooks)" | xargs grep -l "import.*supabase" | wc -l)
          
          if [ "$DIRECT_SUPABASE" -gt 0 ]; then
            echo "::warning::Found $DIRECT_SUPABASE files with direct Supabase usage. Use service layer instead."
            echo "Files with direct Supabase usage:"
            find . -name "*.ts" -o -name "*.tsx" | grep -E "(components|hooks)" | xargs grep -l "import.*supabase"
          else
            echo "‚úÖ No direct Supabase usage found in components/hooks"
          fi
          
          # Check console.log usage
          CONSOLE_USAGE=$(find . -name "*.ts" -o -name "*.tsx" | grep -v "test\|spec\|\.d\.ts" | xargs grep -c "console\.\(log\|warn\|error\)" | awk -F: '{sum += $2} END {print sum+0}')
          
          if [ "$CONSOLE_USAGE" -gt 5 ]; then
            echo "::warning::Found $CONSOLE_USAGE console.log usages. Use logger instead."
          else
            echo "‚úÖ Console.log usage is within acceptable limits: $CONSOLE_USAGE"
          fi
          
          # Check mock data usage
          MOCK_USAGE=$(find . -name "*.ts" -o -name "*.tsx" | grep -v "test\|spec\|\.d\.ts" | xargs grep -c "mock.*data\|fake.*data\|dummy.*data" | awk -F: '{sum += $2} END {print sum+0}')
          
          if [ "$MOCK_USAGE" -gt 0 ]; then
            echo "::error::Found $MOCK_USAGE mock data usages in production code. Remove mock data."
            exit 1
          else
            echo "‚úÖ No mock data usage found in production code"
          fi
          
          # Check TypeScript 'any' usage
          ANY_USAGE=$(find . -name "*.ts" -o -name "*.tsx" | grep -v "test\|spec\|\.d\.ts" | xargs grep -c ": any\|:any" | awk -F: '{sum += $2} END {print sum+0}')
          
          if [ "$ANY_USAGE" -gt 3 ]; then
            echo "::warning::Found $ANY_USAGE 'any' type usages. Use specific types instead."
          else
            echo "‚úÖ TypeScript 'any' usage is within acceptable limits: $ANY_USAGE"
          fi

      - name: Check Code Quality
        run: |
          echo "üîç Checking code quality..."
          
          # TypeScript compilation check
          npm run type-check:app
          
          # ESLint check
          npm run lint:check
          
          # Check for large files
          LARGE_FILES=$(find . -name "*.ts" -o -name "*.tsx" | xargs wc -l | awk '$1 > 500 {print $2}' | wc -l)
          
          if [ "$LARGE_FILES" -gt 5 ]; then
            echo "::warning::Found $LARGE_FILES files larger than 500 lines. Consider refactoring."
          else
            echo "‚úÖ File sizes are within acceptable limits"
          fi

      - name: Check Security Compliance
        run: |
          echo "üîí Checking security compliance..."
          
          # Check for hardcoded secrets
          SECRETS=$(find . -name "*.ts" -o -name "*.tsx" | xargs grep -i "password\|secret\|key\|token" | grep -v "process\.env\|import\|export" | wc -l)
          
          if [ "$SECRETS" -gt 0 ]; then
            echo "::warning::Found potential hardcoded secrets. Use environment variables instead."
          else
            echo "‚úÖ No hardcoded secrets found"
          fi
          
          # Check for XSS vulnerabilities
          XSS_VULNS=$(find . -name "*.tsx" | xargs grep -c "dangerouslySetInnerHTML" | awk -F: '{sum += $2} END {print sum+0}')
          
          if [ "$XSS_VULNS" -gt 0 ]; then
            echo "::warning::Found $XSS_VULNS potential XSS vulnerabilities. Review dangerouslySetInnerHTML usage."
          else
            echo "‚úÖ No XSS vulnerabilities found"
          fi

      - name: Check Performance
        run: |
          echo "‚ö° Checking performance..."
          
          # Check for missing memoization
          MEMO_USAGE=$(find . -name "*.tsx" | xargs grep -c "React\.memo\|useMemo\|useCallback" | awk -F: '{sum += $2} END {print sum+0}')
          COMPONENT_COUNT=$(find . -name "*.tsx" | wc -l)
          
          if [ "$MEMO_USAGE" -lt $((COMPONENT_COUNT / 2)) ]; then
            echo "::warning::Consider adding more memoization for performance optimization."
          else
            echo "‚úÖ Memoization usage is good: $MEMO_USAGE usages in $COMPONENT_COUNT components"
          fi
          
          # Check for lazy loading
          LAZY_USAGE=$(find . -name "*.tsx" | xargs grep -c "React\.lazy\|lazy(" | awk -F: '{sum += $2} END {print sum+0}')
          
          if [ "$LAZY_USAGE" -eq 0 ]; then
            echo "::info::Consider adding lazy loading for better performance."
          else
            echo "‚úÖ Lazy loading is implemented: $LAZY_USAGE usages"
          fi

      - name: Run Tests
        run: |
          echo "üß™ Running tests..."
          npm test -- --coverage --reporter=verbose

      - name: Check Test Coverage
        run: |
          echo "üìä Checking test coverage..."
          
          # Check if coverage report exists
          if [ -f "coverage/coverage-summary.json" ]; then
            COVERAGE=$(cat coverage/coverage-summary.json | jq '.total.lines.pct')
            echo "Test coverage: $COVERAGE%"
            
            if (( $(echo "$COVERAGE < 80" | bc -l) )); then
              echo "::error::Test coverage is below 80%. Current: $COVERAGE%"
              exit 1
            else
              echo "‚úÖ Test coverage is above 80%: $COVERAGE%"
            fi
          else
            echo "::warning::Coverage report not found. Run tests with coverage first."
          fi

      - name: Generate Quality Report
        run: |
          echo "üìã Generating quality report..."
          
          # Create quality report
          cat > quality-report.md << EOF
          # GitHub Copilot Quality Report
          
          ## Architecture Compliance
          - Direct Supabase Usage: $DIRECT_SUPABASE files
          - Console.log Usage: $CONSOLE_USAGE instances
          - Mock Data Usage: $MOCK_USAGE instances
          - TypeScript 'any' Usage: $ANY_USAGE instances
          
          ## Code Quality
          - Large Files (>500 lines): $LARGE_FILES files
          - TypeScript Compilation: ‚úÖ Passed
          - ESLint Check: ‚úÖ Passed
          
          ## Security
          - Hardcoded Secrets: $SECRETS instances
          - XSS Vulnerabilities: $XSS_VULNS instances
          
          ## Performance
          - Memoization Usage: $MEMO_USAGE instances
          - Lazy Loading: $LAZY_USAGE instances
          
          ## Test Coverage
          - Coverage: $COVERAGE%
          
          ## Summary
          $(if [ "$MOCK_USAGE" -eq 0 ] && [ "$COVERAGE" -ge 80 ]; then echo "‚úÖ All quality gates passed"; else echo "‚ùå Some quality gates failed"; fi)
          EOF
          
          echo "Quality report generated: quality-report.md"

      - name: Upload Quality Report
        uses: actions/upload-artifact@v4
        with:
          name: quality-report
          path: quality-report.md

      - name: Comment PR
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const report = fs.readFileSync('quality-report.md', 'utf8');
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## ü§ñ GitHub Copilot Quality Check Results\n\n${report}`
            });