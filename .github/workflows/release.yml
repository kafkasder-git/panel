name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version type to bump'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      release_notes:
        description: 'Release notes'
        required: false
        type: string

env:
  NODE_VERSION: '22'

jobs:
  release:
    name: Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      issues: write
      pull-requests: write
      id-token: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Run tests
        run: npm test

      - name: Create release archive
        run: |
          echo "📦 Creating release archive..."
          tar -czf kafkasder-management-panel-${{ github.run_number }}.tar.gz \
            --exclude='node_modules' \
            --exclude='.git' \
            --exclude='dist' \
            --exclude='.env*' \
            --exclude='*.log' \
            .

      - name: Generate changelog
        id: changelog
        run: |
          echo "📝 Generating changelog..."
          # Get the latest tag
          LATEST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $LATEST_TAG"

          # Generate changelog from commits
          echo "# Changelog" > changelog.md
          echo "" >> changelog.md
          echo "## [${{ github.ref_name }}] - $(date +%Y-%m-%d)" >> changelog.md
          echo "" >> changelog.md

          # Get commits since last tag
          if git rev-list $LATEST_TAG..HEAD --oneline >/dev/null 2>&1; then
            echo "### Features" >> changelog.md
            git log $LATEST_TAG..HEAD --oneline --grep="feat:" | sed 's/^/- /' >> changelog.md || echo "- No new features" >> changelog.md

            echo "" >> changelog.md
            echo "### Fixes" >> changelog.md
            git log $LATEST_TAG..HEAD --oneline --grep="fix:" | sed 's/^/- /' >> changelog.md || echo "- No bug fixes" >> changelog.md

            echo "" >> changelog.md
            echo "### Other Changes" >> changelog.md
            git log $LATEST_TAG..HEAD --oneline --grep-v="feat:\|fix:\|chore:\|docs:\|style:\|refactor:\|test:" | sed 's/^/- /' >> changelog.md || echo "- No other changes" >> changelog.md
          else
            echo "### Initial Release" >> changelog.md
            echo "- First production release" >> changelog.md
          fi

          echo "" >> changelog.md
          echo "---" >> changelog.md
          echo "Generated on $(date)" >> changelog.md

      - name: Read changelog
        id: read-changelog
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            const changelog = fs.readFileSync('changelog.md', 'utf8');
            core.setOutput('changelog', changelog);

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref_name }}
          release_name: Release ${{ github.ref_name }}
          body: ${{ steps.read-changelog.outputs.changelog }}
          draft: false
          prerelease: ${{ contains(github.ref_name, 'beta') || contains(github.ref_name, 'alpha') || contains(github.ref_name, 'rc') }}

      - name: Upload release assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./kafkasder-management-panel-${{ github.run_number }}.tar.gz
          asset_name: kafkasder-management-panel-${{ github.run_number }}.tar.gz
          asset_content_type: application/gzip

      - name: Upload build artifacts
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/index.html
          asset_name: index.html
          asset_content_type: text/html

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: release
    if: startsWith(github.ref, 'refs/tags/v')
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build for production
        run: npm run build
        env:
          NODE_ENV: production

      - name: Deploy to Vercel (Production)
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          vercel-args: '--prod'

      - name: Post-deployment notification
        run: |
          echo "🚀 Production deployment completed!"
          echo "Version: ${{ github.ref_name }}"
          echo "Environment: Production"
          echo "Status: ✅ Deployed successfully"
