openapi: 3.0.3
info:
  title: Kafkasder Management System API
  description: |
    Complete API documentation for Kafkasder Management System.
    This API provides endpoints for managing members, donations, beneficiaries, and more.
  version: 1.0.0
  contact:
    name: Kafkasder Development Team
    email: dev@kafkasder.com
  license:
    name: MIT
    url: https://opensource.org/licenses/MIT

servers:
  - url: https://api.kafkasder.com/v1
    description: Production server
  - url: https://staging-api.kafkasder.com/v1
    description: Staging server
  - url: http://localhost:3000/v1
    description: Development server

tags:
  - name: Authentication
    description: User authentication and authorization
  - name: Members
    description: Member management operations
  - name: Donations
    description: Donation tracking and management
  - name: Beneficiaries
    description: Beneficiary management
  - name: Aid Requests
    description: Aid request processing
  - name: Campaigns
    description: Campaign management
  - name: Financial
    description: Financial transactions
  - name: Kumbaras
    description: Donation box management

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT token from Supabase authentication

  schemas:
    Error:
      type: object
      properties:
        error:
          type: string
          description: Error message
        code:
          type: string
          description: Error code
        details:
          type: object
          description: Additional error details

    PaginationMeta:
      type: object
      properties:
        page:
          type: integer
          example: 1
        limit:
          type: integer
          example: 20
        total:
          type: integer
          example: 100
        totalPages:
          type: integer
          example: 5

    Member:
      type: object
      properties:
        id:
          type: string
          format: uuid
        member_number:
          type: string
          example: "UYE-2024-0001"
        tc_kimlik:
          type: string
          example: "12345678901"
        first_name:
          type: string
          example: "Ahmet"
        last_name:
          type: string
          example: "Yılmaz"
        email:
          type: string
          format: email
        phone:
          type: string
          example: "05551234567"
        birth_date:
          type: string
          format: date
        gender:
          type: string
          enum: [Erkek, Kadın, Diğer]
        city:
          type: string
        district:
          type: string
        membership_type:
          type: string
          enum: [Asil Üye, Fahri Üye, Onursal Üye]
        membership_status:
          type: string
          enum: [Aktif, Pasif, Askıda]
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    Donation:
      type: object
      properties:
        id:
          type: string
          format: uuid
        donation_number:
          type: string
          example: "BAG-2024-0001"
        donor_type:
          type: string
          enum: [Bireysel, Kurumsal, Anonim]
        donor_name:
          type: string
        donation_type:
          type: string
          enum: [Nakit, Zekat, Fitre, Sadaka, Kurban]
        amount:
          type: number
          format: decimal
          example: 1000.00
        payment_method:
          type: string
          enum: [Nakit, Kredi Kartı, Banka Havalesi, EFT]
        payment_date:
          type: string
          format: date
        status:
          type: string
          enum: [Beklemede, Onaylandı, İptal]
        created_at:
          type: string
          format: date-time

    Beneficiary:
      type: object
      properties:
        id:
          type: string
          format: uuid
        file_number:
          type: string
          example: "IHS-2024-0001"
        tc_kimlik:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        phone:
          type: string
        city:
          type: string
        district:
          type: string
        family_size:
          type: integer
        monthly_income:
          type: number
          format: decimal
        status:
          type: string
          enum: [Aktif, Pasif, Askıda]
        priority_level:
          type: string
          enum: [Normal, Yüksek, Acil]
        created_at:
          type: string
          format: date-time

paths:
  # ============================================================================
  # AUTHENTICATION
  # ============================================================================
  /auth/login:
    post:
      tags:
        - Authentication
      summary: User login
      description: Authenticate user and return JWT token
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                  user:
                    type: object
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: User logout
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful logout
        '401':
          description: Unauthorized

  # ============================================================================
  # MEMBERS
  # ============================================================================
  /members:
    get:
      tags:
        - Members
      summary: Get all members
      description: Retrieve paginated list of members with optional filters
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
            default: 1
        - name: limit
          in: query
          schema:
            type: integer
            default: 20
        - name: search
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
            enum: [Aktif, Pasif, Askıda]
        - name: city
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Member'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'
        '401':
          description: Unauthorized
        '500':
          description: Server error

    post:
      tags:
        - Members
      summary: Create new member
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
      responses:
        '201':
          description: Member created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        '400':
          description: Validation error
        '401':
          description: Unauthorized

  /members/{id}:
    get:
      tags:
        - Members
      summary: Get member by ID
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Member'
        '404':
          description: Member not found

    put:
      tags:
        - Members
      summary: Update member
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Member'
      responses:
        '200':
          description: Member updated successfully
        '404':
          description: Member not found

    delete:
      tags:
        - Members
      summary: Delete member
      security:
        - BearerAuth: []
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            format: uuid
      responses:
        '204':
          description: Member deleted successfully
        '404':
          description: Member not found

  # ============================================================================
  # DONATIONS
  # ============================================================================
  /donations:
    get:
      tags:
        - Donations
      summary: Get all donations
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
        - name: donor_type
          in: query
          schema:
            type: string
        - name: status
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Donation'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'

    post:
      tags:
        - Donations
      summary: Create new donation
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Donation'
      responses:
        '201':
          description: Donation created successfully

  # ============================================================================
  # BENEFICIARIES
  # ============================================================================
  /beneficiaries:
    get:
      tags:
        - Beneficiaries
      summary: Get all beneficiaries
      security:
        - BearerAuth: []
      parameters:
        - name: page
          in: query
          schema:
            type: integer
        - name: limit
          in: query
          schema:
            type: integer
        - name: status
          in: query
          schema:
            type: string
        - name: priority_level
          in: query
          schema:
            type: string
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/Beneficiary'
                  meta:
                    $ref: '#/components/schemas/PaginationMeta'

    post:
      tags:
        - Beneficiaries
      summary: Create new beneficiary
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Beneficiary'
      responses:
        '201':
          description: Beneficiary created successfully

  # ============================================================================
  # STATISTICS
  # ============================================================================
  /stats/dashboard:
    get:
      tags:
        - Statistics
      summary: Get dashboard statistics
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  totalMembers:
                    type: integer
                  totalDonations:
                    type: number
                  totalBeneficiaries:
                    type: integer
                  activeCampaigns:
                    type: integer
