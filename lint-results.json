
> kafkasder-management-panel@1.0.0 lint:app
> eslint components services contexts hooks lib stores types utils --ext ts,tsx --report-unused-disable-directives --max-warnings 0 --format json

[{"filePath":"C:\\Users\\isaha\\panel-3\\components\\AnimatedContainer.tsx","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":73,"column":26,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":73,"endColumn":43},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":73,"column":26,"nodeType":"MemberExpression","endLine":73,"endColumn":43}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview AnimatedContainer Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { motion } from 'motion/react';\r\nimport type { ReactNode } from 'react';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\ninterface AnimatedContainerProps {\r\n  children: ReactNode;\r\n  variant?: 'fadeIn' | 'slideUp' | 'slideDown' | 'slideLeft' | 'slideRight' | 'scale' | 'stagger';\r\n  delay?: number;\r\n  duration?: number;\r\n  className?: string;\r\n  staggerChildren?: number;\r\n}\r\n\r\n/**\r\n * AnimatedContainer function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function AnimatedContainer({\r\n  children,\r\n  variant = 'fadeIn',\r\n  delay = 0,\r\n  duration = 0.5,\r\n  className = '',\r\n  staggerChildren = 0.1,\r\n}: AnimatedContainerProps) {\r\n  const variants = {\r\n    fadeIn: {\r\n      initial: { opacity: 0 },\r\n      animate: { opacity: 1 },\r\n      exit: { opacity: 0 },\r\n    },\r\n    slideUp: {\r\n      initial: { opacity: 0, y: 30 },\r\n      animate: { opacity: 1, y: 0 },\r\n      exit: { opacity: 0, y: -30 },\r\n    },\r\n    slideDown: {\r\n      initial: { opacity: 0, y: -30 },\r\n      animate: { opacity: 1, y: 0 },\r\n      exit: { opacity: 0, y: 30 },\r\n    },\r\n    slideLeft: {\r\n      initial: { opacity: 0, x: 30 },\r\n      animate: { opacity: 1, x: 0 },\r\n      exit: { opacity: 0, x: -30 },\r\n    },\r\n    slideRight: {\r\n      initial: { opacity: 0, x: -30 },\r\n      animate: { opacity: 1, x: 0 },\r\n      exit: { opacity: 0, x: 30 },\r\n    },\r\n    scale: {\r\n      initial: { opacity: 0, scale: 0.8 },\r\n      animate: { opacity: 1, scale: 1 },\r\n      exit: { opacity: 0, scale: 0.8 },\r\n    },\r\n    stagger: {\r\n      animate: {\r\n        transition: { staggerChildren },\r\n      },\r\n    },\r\n  };\r\n\r\n  const currentVariant = variants[variant] ?? variants.fadeIn;\r\n\r\n  try {\r\n    if (variant === 'stagger') {\r\n      return (\r\n        <motion.div\r\n          className={className}\r\n          initial=\"initial\"\r\n          animate=\"animate\"\r\n          exit=\"exit\"\r\n          variants={currentVariant}\r\n          transition={{ duration, delay }}\r\n        >\r\n          {children}\r\n        </motion.div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <motion.div\r\n        className={className}\r\n        initial=\"initial\"\r\n        animate=\"animate\"\r\n        exit=\"exit\"\r\n        variants={currentVariant}\r\n        transition={{\r\n          duration,\r\n          delay,\r\n          ease: [0.4, 0.0, 0.2, 1], // Custom easing for smooth animations\r\n        }}\r\n      >\r\n        {children}\r\n      </motion.div>\r\n    );\r\n  } catch (error) {\r\n    // Fallback to regular div if motion fails\r\n    logger.warn('Motion animation failed, falling back to static content:', error);\r\n    return <div className={className}>{children}</div>;\r\n  }\r\n}\r\n\r\n// Specialized animation components\r\nexport const FadeIn = ({\r\n  children,\r\n  delay = 0,\r\n  className = '',\r\n}: {\r\n  children: ReactNode;\r\n  delay?: number;\r\n  className?: string;\r\n}) => (\r\n  <AnimatedContainer variant=\"fadeIn\" delay={delay} className={className}>\r\n    {children}\r\n  </AnimatedContainer>\r\n);\r\n\r\nexport const SlideUp = ({\r\n  children,\r\n  delay = 0,\r\n  className = '',\r\n}: {\r\n  children: ReactNode;\r\n  delay?: number;\r\n  className?: string;\r\n}) => (\r\n  <AnimatedContainer variant=\"slideUp\" delay={delay} className={className}>\r\n    {children}\r\n  </AnimatedContainer>\r\n);\r\n\r\nexport const SlideLeft = ({\r\n  children,\r\n  delay = 0,\r\n  className = '',\r\n}: {\r\n  children: ReactNode;\r\n  delay?: number;\r\n  className?: string;\r\n}) => (\r\n  <AnimatedContainer variant=\"slideLeft\" delay={delay} className={className}>\r\n    {children}\r\n  </AnimatedContainer>\r\n);\r\n\r\nexport const ScaleIn = ({\r\n  children,\r\n  delay = 0,\r\n  className = '',\r\n}: {\r\n  children: ReactNode;\r\n  delay?: number;\r\n  className?: string;\r\n}) => (\r\n  <AnimatedContainer variant=\"scale\" delay={delay} className={className}>\r\n    {children}\r\n  </AnimatedContainer>\r\n);\r\n\r\n// Staggered animation for lists\r\nexport const StaggerContainer = ({\r\n  children,\r\n  className = '',\r\n}: {\r\n  children: ReactNode;\r\n  className?: string;\r\n}) => (\r\n  <AnimatedContainer variant=\"stagger\" className={className}>\r\n    {children}\r\n  </AnimatedContainer>\r\n);\r\n\r\nexport const StaggerItem = ({\r\n  children,\r\n  className = '',\r\n}: {\r\n  children: ReactNode;\r\n  className?: string;\r\n}) => (\r\n  <motion.div\r\n    className={className}\r\n    variants={{\r\n      initial: { opacity: 0, y: 20 },\r\n      animate: { opacity: 1, y: 0 },\r\n    }}\r\n    transition={{ duration: 0.4, ease: [0.4, 0.0, 0.2, 1] }}\r\n  >\r\n    {children}\r\n  </motion.div>\r\n);\r\n\r\n// Page transition wrapper\r\nexport const PageTransition = ({\r\n  children,\r\n  className = '',\r\n}: {\r\n  children: ReactNode;\r\n  className?: string;\r\n}) => (\r\n  <motion.div\r\n    className={className}\r\n    initial={{ opacity: 0, scale: 0.98 }}\r\n    animate={{ opacity: 1, scale: 1 }}\r\n    exit={{ opacity: 0, scale: 1.02 }}\r\n    transition={{\r\n      duration: 0.3,\r\n      ease: [0.4, 0.0, 0.2, 1],\r\n    }}\r\n  >\r\n    {children}\r\n  </motion.div>\r\n);\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\EmptyState.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ErrorBoundary.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":111,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":111,"endColumn":31}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview ErrorBoundary Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { AlertTriangle, Home, RefreshCw } from 'lucide-react';\r\nimport { Component, type ErrorInfo, type ReactNode } from 'react';\r\nimport { Button } from './ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\ninterface Props {\r\n  children: ReactNode;\r\n  fallback?: ReactNode;\r\n}\r\n\r\ninterface State {\r\n  hasError: boolean;\r\n  error?: Error;\r\n  errorInfo?: ErrorInfo;\r\n}\r\n\r\n/**\r\n * ErrorBoundary Service\r\n * \r\n * Service class for handling errorboundary operations\r\n * \r\n * @class ErrorBoundary\r\n */\r\nexport class ErrorBoundary extends Component<Props, State> {\r\n  public state: State = {\r\n    hasError: false,\r\n  };\r\n\r\n  public static getDerivedStateFromError(error: Error): State {\r\n    return { hasError: true, error };\r\n  }\r\n\r\n  public componentDidCatch(error: Error, errorInfo: ErrorInfo) {\r\n    logger.error('Uncaught error:', error, errorInfo);\r\n    this.setState({ errorInfo });\r\n  }\r\n\r\n  private readonly handleRetry = () => {\r\n    this.setState({ hasError: false, error: undefined, errorInfo: undefined });\r\n  };\r\n\r\n  private readonly handleGoHome = () => {\r\n    window.location.href = '/';\r\n  };\r\n\r\n  public render() {\r\n    if (this.state.hasError) {\r\n      if (this.props.fallback) {\r\n        return this.props.fallback;\r\n      }\r\n\r\n      return (\r\n        <div className=\"min-h-screen bg-gradient-to-br from-red-50 to-orange-50 flex items-center justify-center p-4\">\r\n          <Card className=\"w-full max-w-md shadow-lg\">\r\n            <CardHeader className=\"text-center\">\r\n              <div className=\"mx-auto w-16 h-16 bg-red-100 rounded-full flex items-center justify-center mb-4\">\r\n                <AlertTriangle className=\"h-8 w-8 text-red-600\" />\r\n              </div>\r\n              <CardTitle className=\"text-xl text-red-800\">Bir Hata Olu┼ştu</CardTitle>\r\n              <p className=\"text-red-600 mt-2\">Beklenmeyen bir hata ile kar┼ş─▒la┼şt─▒k</p>\r\n            </CardHeader>\r\n\r\n            <CardContent className=\"space-y-4\">\r\n              <div className=\"flex flex-col gap-3\">\r\n                <Button onClick={this.handleRetry} className=\"flex items-center gap-2\">\r\n                  <RefreshCw className=\"h-4 w-4\" />\r\n                  Tekrar Dene\r\n                </Button>\r\n\r\n                <Button\r\n                  variant=\"outline\"\r\n                  onClick={this.handleGoHome}\r\n                  className=\"flex items-center gap-2\"\r\n                >\r\n                  <Home className=\"h-4 w-4\" />\r\n                  Ana Sayfaya D├Ân\r\n                </Button>\r\n              </div>\r\n\r\n              {this.state.error && (\r\n                <div className=\"text-sm text-gray-600 mt-4 p-3 bg-gray-50 rounded\">\r\n                  <strong>Hata:</strong> {this.state.error.message}\r\n                </div>\r\n              )}\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\n// Hook based error boundary for functional components\r\n/**\r\n * withErrorBoundary function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\n// HOC for error boundary\r\nexport const withErrorBoundary = <P extends object>(\r\n  Component: React.ComponentType<P>,\r\n  fallback?: ReactNode,\r\n) => {\r\n  const WrappedComponent = (props: P) => (\r\n    <ErrorBoundary fallback={fallback}>\r\n      <Component {...props} />\r\n    </ErrorBoundary>\r\n  );\r\n  \r\n  WrappedComponent.displayName = `withErrorBoundary(${Component.displayName ?? Component.name})`;\r\n  return WrappedComponent;\r\n};\r\n\r\nexport default ErrorBoundary;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\FloatingActionButton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\Header.tsx","messages":[{"ruleId":"@typescript-eslint/no-empty-function","severity":1,"message":"Unexpected empty arrow function.","line":79,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":79,"endColumn":30,"suggestions":[{"messageId":"suggestComment","data":{"name":"arrow function"},"fix":{"range":[2518,2518],"text":" /* empty */ "},"desc":"Add comment inside empty arrow function."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":1,"message":"Unexpected empty arrow function.","line":80,"column":29,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":80,"endColumn":31,"suggestions":[{"messageId":"suggestComment","data":{"name":"arrow function"},"fix":{"range":[2551,2551],"text":" /* empty */ "},"desc":"Add comment inside empty arrow function."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":1,"message":"Unexpected empty arrow function.","line":81,"column":33,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":81,"endColumn":35,"suggestions":[{"messageId":"suggestComment","data":{"name":"arrow function"},"fix":{"range":[2588,2588],"text":" /* empty */ "},"desc":"Add comment inside empty arrow function."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":292,"column":30,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":292,"endColumn":32,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[10740,10742],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":292,"column":45,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":292,"endColumn":47,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[10755,10757],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":292,"column":59,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":292,"endColumn":61,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[10769,10771],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":294,"column":75,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":294,"endColumn":77,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[10911,10913],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":300,"column":28,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":300,"endColumn":30,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[11224,11226],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":337,"column":22,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":337,"endColumn":24,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[12581,12583],"text":"."},"desc":"Remove unnecessary optional chain"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview Header Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport {\r\n  Building2,\r\n  Command,\r\n  LogOut,\r\n  Menu,\r\n  Moon,\r\n  Search,\r\n  Settings,\r\n  Sun,\r\n  User,\r\n  X,\r\n} from 'lucide-react';\r\nimport { useState } from 'react';\r\nimport { useSupabaseAuth } from '../contexts/SupabaseAuthContext';\r\nimport { Badge } from './ui/badge';\r\nimport { Button } from './ui/button';\r\n// SearchInput removed - using basic search instead\r\nimport { motion } from 'motion/react';\r\nimport { useUserPreferences } from '../hooks/useLocalStorage';\r\nimport { StoreErrorBoundary } from './StoreErrorBoundary';\r\nimport { NotificationBell } from './notifications/NotificationBell';\r\nimport { NotificationErrorBoundary } from './notifications/NotificationErrorBoundary';\r\nimport { Popover, PopoverContent, PopoverTrigger } from './ui/popover';\r\n// Enhanced UX imports\r\n// import { EnhancedSearchExperience } from './ux/EnhancedSearchExperience';\r\nimport { SmartCommandPalette } from './ux/SmartCommandPalette';\r\nimport { useCommandPalette } from './ux/hooks/useCommandPalette';\r\n// import { useUXAnalytics } from './ux/hooks/useUXAnalytics';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\n\r\ninterface HeaderProps {\r\n  onNavigateToProfile?: () => void;\r\n  onNavigateToSettings?: () => void;\r\n  onNavigateToUserManagement?: () => void;\r\n  notificationComponent?: React.ReactNode; // Modern notifications component\r\n  onNavigate?: (module: string, page?: string) => void; // For UX features\r\n  onQuickAction?: (actionId: string) => void; // For UX features\r\n  currentModule?: string; // Current active module\r\n  onMobileMenuToggle?: () => void; // Mobile menu toggle\r\n}\r\n\r\n/**\r\n * Header function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function Header({\r\n  onNavigateToProfile,\r\n  onNavigateToSettings,\r\n  onNavigateToUserManagement,\r\n  notificationComponent,\r\n  onNavigate,\r\n  onQuickAction,\r\n  currentModule = 'genel',\r\n  onMobileMenuToggle,\r\n}: HeaderProps) {\r\n  // Get real authenticated user\r\n  const { user, signOut } = useSupabaseAuth();\r\n  const [showEnhancedSearch, setShowEnhancedSearch] = useState(false);\r\n\r\n  // Enhanced UX features\r\n  const commandPalette = useCommandPalette({\r\n    shortcut: 'cmd+k',\r\n    onOpen: () => {\r\n      trackClick('header', 'command-palette-open');\r\n    },\r\n  });\r\n\r\n  // const { trackClick, trackSearch, trackFeatureUse } = useUXAnalytics();\r\n  const trackClick = () => {};\r\n  const trackSearch = () => {};\r\n  const trackFeatureUse = () => {};\r\n\r\n  const { preferences, updatePreference, addRecentSearch } = useUserPreferences();\r\n\r\n  const handleSearch = (value: string) => {\r\n    if (value.trim()) {\r\n      addRecentSearch(value);\r\n      trackSearch(value, 0); // Track search event\r\n      // Trigger enhanced search\r\n      setShowEnhancedSearch(true);\r\n    }\r\n  };\r\n\r\n  const toggleTheme = () => {\r\n    const newTheme = preferences.theme === 'light' ? 'dark' : 'light';\r\n    updatePreference('theme', newTheme);\r\n    document.documentElement.classList.toggle('dark', newTheme === 'dark');\r\n    trackFeatureUse('theme', 'toggle', { newTheme });\r\n  };\r\n\r\n  const handleCommandPaletteOpen = () => {\r\n    trackFeatureUse('command-palette', 'open', { trigger: 'manual' });\r\n    commandPalette.open();\r\n  };\r\n\r\n  return (\r\n    <header className=\"h-16 bg-gradient-to-r from-white to-slate-50/80 border-b border-slate-200/80 px-3 sm:px-6 flex items-center justify-between shadow-lg backdrop-blur-sm relative z-50\">\r\n      {/* Logo and Title */}\r\n      <motion.div\r\n        initial={{ opacity: 0, x: -20 }}\r\n        animate={{ opacity: 1, x: 0 }}\r\n        className=\"flex items-center gap-2 sm:gap-4 flex-shrink-0\"\r\n      >\r\n        <div className=\"flex items-center gap-2 sm:gap-3\">\r\n          <div className=\"w-8 h-8 sm:w-10 sm:h-10 bg-gradient-to-br from-primary via-blue-600 to-blue-800 rounded-xl flex items-center justify-center shadow-lg border border-blue-200/20\">\r\n            <Building2 className=\"w-4 h-4 sm:w-5 sm:h-5 text-white drop-shadow-sm\" />\r\n          </div>\r\n          <div className=\"hidden md:block\">\r\n            <h1 className=\"text-base sm:text-lg font-bold text-slate-900 tracking-tight\">\r\n              Dernek Y├Ânetim Sistemi\r\n            </h1>\r\n            <p className=\"text-xs text-slate-600 -mt-0.5 font-medium\">Hay─▒r ─░┼şleri Platformu</p>\r\n          </div>\r\n          <div className=\"block md:hidden\">\r\n            <h1 className=\"text-sm font-bold text-slate-900 tracking-tight\">Dernek</h1>\r\n          </div>\r\n        </div>\r\n      </motion.div>\r\n\r\n      {/* Mobile Menu Button - Visible on small screens */}\r\n      <motion.div\r\n        initial={{ opacity: 0, scale: 0.9 }}\r\n        animate={{ opacity: 1, scale: 1 }}\r\n        transition={{ delay: 0.1 }}\r\n        className=\"block sm:hidden\"\r\n      >\r\n        <Button\r\n          variant=\"ghost\"\r\n          size=\"sm\"\r\n          className=\"min-h-[44px] min-w-[44px] p-2\"\r\n          onClick={onMobileMenuToggle}\r\n          aria-label=\"Men├╝\"\r\n        >\r\n          <Menu className=\"w-5 h-5\" />\r\n        </Button>\r\n      </motion.div>\r\n\r\n      {/* Enhanced Search - Hidden on small screens */}\r\n      <motion.div\r\n        initial={{ opacity: 0, y: -10 }}\r\n        animate={{ opacity: 1, y: 0 }}\r\n        transition={{ delay: 0.1 }}\r\n        className=\"hidden sm:flex flex-1 max-w-md lg:max-w-xl mx-4 lg:mx-8 relative\"\r\n        data-onboarding=\"search\"\r\n      >\r\n        <div className=\"w-full relative\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Ak─▒ll─▒ arama... (ÔîİK ile komut paleti)\"\r\n            onChange={(e) => {\r\n              const query = e.target.value;\r\n              trackSearch(query, 0);\r\n              handleSearch(query);\r\n            }}\r\n            className=\"w-full px-4 py-2 border rounded-lg\"\r\n          />\r\n\r\n          {/* Command Palette Trigger Button */}\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            onClick={handleCommandPaletteOpen}\r\n            className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-6 w-6 p-0 opacity-60 hover:opacity-100\"\r\n            title=\"Komut Paleti (ÔîİK)\"\r\n          >\r\n            <Command className=\"w-3 h-3\" />\r\n          </Button>\r\n        </div>\r\n      </motion.div>\r\n\r\n      {/* Mobile Search & Command Buttons - Visible on small screens */}\r\n      <motion.div\r\n        initial={{ opacity: 0, y: -10 }}\r\n        animate={{ opacity: 1, y: 0 }}\r\n        transition={{ delay: 0.1 }}\r\n        className=\"block sm:hidden flex items-center gap-1\"\r\n      >\r\n        <Button\r\n          variant=\"ghost\"\r\n          size=\"sm\"\r\n          onClick={handleCommandPaletteOpen}\r\n          className=\"w-9 h-9 p-0 rounded-lg hover:bg-slate-100/80 transition-all duration-200 focus-corporate min-h-[44px] min-w-[44px]\"\r\n          title=\"Komut Paleti\"\r\n        >\r\n          <Command className=\"w-4 h-4 text-slate-700\" />\r\n        </Button>\r\n\r\n        <Button\r\n          variant=\"ghost\"\r\n          size=\"sm\"\r\n          onClick={(e: React.MouseEvent) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            trackClick('header', 'mobile-search-open');\r\n            setShowEnhancedSearch(true);\r\n          }}\r\n          className=\"w-9 h-9 p-0 rounded-lg hover:bg-slate-100/80 transition-all duration-200 focus-corporate min-h-[44px] min-w-[44px]\"\r\n          title=\"Arama\"\r\n        >\r\n          <Search className=\"w-4 h-4 text-slate-700\" />\r\n        </Button>\r\n      </motion.div>\r\n\r\n      {/* Right Actions */}\r\n      <motion.div\r\n        initial={{ opacity: 0, x: 20 }}\r\n        animate={{ opacity: 1, x: 0 }}\r\n        transition={{ delay: 0.2 }}\r\n        className=\"flex items-center gap-1 sm:gap-2 flex-shrink-0\"\r\n      >\r\n        {/* Frontend Status */}\r\n        <div className=\"flex items-center gap-2\">\r\n          <div className=\"flex items-center gap-1\" title=\"Frontend Mode\">\r\n            <div className=\"w-2 h-2 bg-green-500 rounded-full animate-pulse\" />\r\n            <span className=\"text-xs text-green-600\">Online</span>\r\n          </div>\r\n\r\n          {/* Status */}\r\n          <div className=\"flex items-center gap-1\" title=\"No Auth Required\">\r\n            <div className=\"w-2 h-2 bg-green-500 rounded-full\" />\r\n            <span className=\"text-xs text-green-600\">Pure</span>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Mobile Status */}\r\n        <div className=\"block sm:hidden\">\r\n          <div className=\"w-2 h-2 bg-green-500 rounded-full\" title=\"Online Mode\" />\r\n        </div>\r\n\r\n        {/* Theme Toggle */}\r\n        <Button\r\n          variant=\"ghost\"\r\n          size=\"sm\"\r\n          onClick={(e: React.MouseEvent) => {\r\n            e.preventDefault();\r\n            e.stopPropagation();\r\n            toggleTheme();\r\n          }}\r\n          className=\"w-9 h-9 p-0 rounded-lg hover:bg-slate-100/80 transition-all duration-200 focus-corporate min-h-[44px] min-w-[44px]\"\r\n          title={`${preferences.theme === 'light' ? 'Karanl─▒k' : 'Ayd─▒nl─▒k'} Mod`}\r\n        >\r\n          {preferences.theme === 'light' ? (\r\n            <Moon className=\"w-4 h-4 text-slate-700\" />\r\n          ) : (\r\n            <Sun className=\"w-4 h-4 text-slate-700\" />\r\n          )}\r\n        </Button>\r\n\r\n\r\n\r\n\r\n        {/* Smart Notifications - Use modern system if provided, fallback to legacy */}\r\n        {notificationComponent ?? (\r\n          <StoreErrorBoundary>\r\n            <NotificationErrorBoundary>\r\n              <NotificationBell size=\"sm\" />\r\n            </NotificationErrorBoundary>\r\n          </StoreErrorBoundary>\r\n        )}\r\n\r\n        {/* User Profile Menu */}\r\n        {user && (\r\n          <Popover>\r\n            <PopoverTrigger asChild>\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"sm\"\r\n                className=\"w-9 h-9 p-0 rounded-lg hover:bg-slate-100/80 transition-all duration-200 focus-corporate\"\r\n              >\r\n                <User className=\"w-4 h-4 text-slate-700\" />\r\n              </Button>\r\n            </PopoverTrigger>\r\n            <PopoverContent className=\"w-64 p-0 shadow-xl border-slate-200/60\" align=\"end\">\r\n              <div className=\"p-4 border-b border-slate-200/60 bg-gradient-to-r from-slate-50 to-white\">\r\n                <div className=\"space-y-2\">\r\n                  <div className=\"flex items-center gap-3\">\r\n                    <div className=\"w-10 h-10 bg-gradient-to-br from-primary to-blue-700 rounded-xl flex items-center justify-center shadow-lg\">\r\n                      <User className=\"w-5 h-5 text-white\" />\r\n                    </div>\r\n                    <div className=\"flex-1 min-w-0\">\r\n                      <p className=\"font-semibold text-slate-900 truncate\">\r\n                        {user?.user_metadata?.name ?? user?.email?.split('@')[0] ?? 'Kullan─▒c─▒'}\r\n                      </p>\r\n                      <p className=\"text-sm text-slate-600 truncate\">{user?.email ?? ''}</p>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"flex items-center justify-between\">\r\n                    <span className=\"text-xs text-slate-500\">Rol:</span>\r\n                    <Badge variant=\"outline\" className=\"text-xs\">\r\n                      {user?.role\r\n                        ? user.role.charAt(0).toUpperCase() + user.role.slice(1)\r\n                        : 'Kullan─▒c─▒'}\r\n                    </Badge>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"p-2\">\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  onClick={(e: React.MouseEvent) => {\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                    onNavigateToProfile?.();\r\n                  }}\r\n                  className=\"w-full justify-start gap-2 text-slate-700 hover:bg-slate-50 min-h-[44px]\"\r\n                >\r\n                  <User className=\"w-4 h-4\" />\r\n                  Profil Ayarlar─▒\r\n                </Button>\r\n\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  onClick={(e: React.MouseEvent) => {\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                    onNavigateToSettings?.();\r\n                  }}\r\n                  className=\"w-full justify-start gap-2 text-slate-700 hover:bg-slate-50 min-h-[44px]\"\r\n                >\r\n                  <Settings className=\"w-4 h-4\" />\r\n                  Sistem Ayarlar─▒\r\n                </Button>\r\n\r\n                {user?.role === 'admin' && (\r\n                  <Button\r\n                    variant=\"ghost\"\r\n                    size=\"sm\"\r\n                    onClick={(e: React.MouseEvent) => {\r\n                      e.preventDefault();\r\n                      e.stopPropagation();\r\n                      onNavigateToUserManagement?.();\r\n                    }}\r\n                    className=\"w-full justify-start gap-2 text-slate-700 hover:bg-slate-50 min-h-[44px]\"\r\n                  >\r\n                    <User className=\"w-4 h-4\" />\r\n                    Kullan─▒c─▒ Y├Ânetimi\r\n                  </Button>\r\n                )}\r\n\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  onClick={async (e: React.MouseEvent) => {\r\n                    e.preventDefault();\r\n                    e.stopPropagation();\r\n                    try {\r\n                      await signOut();\r\n                    } catch (error) {\r\n                      logger.error('Logout error:', error);\r\n                    }\r\n                  }}\r\n                  className=\"w-full justify-start gap-2 text-red-600 hover:bg-red-50 hover:text-red-700 min-h-[44px]\"\r\n                >\r\n                  <LogOut className=\"w-4 h-4\" />\r\n                  ├ç─▒k─▒┼ş Yap\r\n                </Button>\r\n              </div>\r\n            </PopoverContent>\r\n          </Popover>\r\n        )}\r\n      </motion.div>\r\n\r\n      {/* Enhanced UX Components */}\r\n      <SmartCommandPalette\r\n        isOpen={commandPalette.isOpen}\r\n        onClose={commandPalette.close}\r\n        onNavigate={(module, page) => {\r\n          trackFeatureUse('command-palette', 'navigate', { module, page });\r\n          onNavigate?.(module, page);\r\n        }}\r\n        onQuickAction={(actionId) => {\r\n          trackFeatureUse('command-palette', 'quick-action', { actionId });\r\n          onQuickAction?.(actionId);\r\n        }}\r\n        currentModule={currentModule}\r\n      />\r\n\r\n      {/* Mobile Enhanced Search Modal */}\r\n      {showEnhancedSearch && (\r\n        <div className=\"fixed inset-0 z-50 bg-black/50 flex items-start justify-center pt-20 sm:hidden\">\r\n          <div className=\"bg-white rounded-lg shadow-xl w-full mx-4 max-w-md\">\r\n            <div className=\"p-4\">\r\n              <div className=\"flex items-center justify-between mb-4\">\r\n                <h3 className=\"font-medium\">Ak─▒ll─▒ Arama</h3>\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  onClick={() => {\r\n                    setShowEnhancedSearch(false);\r\n                  }}\r\n                  className=\"h-6 w-6 p-0\"\r\n                >\r\n                  <X className=\"w-4 h-4\" />\r\n                </Button>\r\n              </div>\r\n\r\n              <input\r\n                type=\"text\"\r\n                placeholder=\"Ne ar─▒yorsunuz?\"\r\n                onChange={(e) => {\r\n                  const query = e.target.value;\r\n                  trackSearch(query, 0, 'mobile-enhanced');\r\n                  handleSearch(query);\r\n                }}\r\n                className=\"w-full px-4 py-2 border rounded-lg\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </header>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\LazyComponents.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\LoadingSpinner.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":30,"column":63,"nodeType":"MemberExpression","endLine":30,"endColumn":80}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview LoadingSpinner Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { Heart, Loader2 } from 'lucide-react';\r\nimport { motion } from 'motion/react';\r\nimport { cn } from './ui/utils';\r\n\r\ninterface LoadingSpinnerProps {\r\n  className?: string;\r\n  size?: 'sm' | 'md' | 'lg';\r\n}\r\n\r\n/**\r\n * LoadingSpinner function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function LoadingSpinner({ className, size = 'md' }: LoadingSpinnerProps) {\r\n  const sizeClasses = {\r\n    sm: 'w-4 h-4',\r\n    md: 'w-6 h-6',\r\n    lg: 'w-8 h-8',\r\n  };\r\n\r\n  return <Loader2 className={cn('animate-spin text-blue-600', sizeClasses[size], className)} />;\r\n}\r\n\r\n/**\r\n * PageLoading function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function PageLoading() {\r\n  return (\r\n    <div className=\"flex items-center justify-center min-h-[400px] bg-gradient-to-br from-slate-50/50 to-blue-50/30\">\r\n      <motion.div\r\n        initial={{ opacity: 0, scale: 0.8 }}\r\n        animate={{ opacity: 1, scale: 1 }}\r\n        className=\"flex flex-col items-center gap-6\"\r\n      >\r\n        <div className=\"relative\">\r\n          <div className=\"w-16 h-16 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-2xl flex items-center justify-center shadow-lg\">\r\n            <Heart className=\"w-8 h-8 text-white\" />\r\n          </div>\r\n          <Loader2 className=\"absolute -bottom-2 -right-2 w-6 h-6 animate-spin text-blue-600 bg-white rounded-full p-1 shadow-md\" />\r\n        </div>\r\n        <div className=\"text-center space-y-2\">\r\n          <p className=\"text-slate-700 font-medium\">Y├╝kleniyor...</p>\r\n          <p className=\"text-slate-500 text-sm\">L├╝tfen bekleyiniz</p>\r\n        </div>\r\n      </motion.div>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Export SkeletonLoader from this file to consolidate loading components\r\nexport { SkeletonLoader } from './SkeletonLoader';\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\MobileNavigation.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\PageLayout.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\PullToRefresh.tsx","messages":[{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":46,"column":9,"nodeType":"UnaryExpression","messageId":"constantShortCircuit","endLine":46,"endColumn":30},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":46,"column":9,"nodeType":"UnaryExpression","messageId":"neverNullish","endLine":46,"endColumn":30},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":66,"column":11,"nodeType":"UnaryExpression","messageId":"constantShortCircuit","endLine":66,"endColumn":19},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":66,"column":11,"nodeType":"UnaryExpression","messageId":"neverNullish","endLine":66,"endColumn":19},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":91,"column":9,"nodeType":"UnaryExpression","messageId":"constantShortCircuit","endLine":91,"endColumn":17},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":91,"column":9,"nodeType":"UnaryExpression","messageId":"neverNullish","endLine":91,"endColumn":17},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":142,"column":11,"nodeType":"Identifier","messageId":"neverNullish","endLine":142,"endColumn":20},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":202,"column":14,"nodeType":"Identifier","messageId":"neverNullish","endLine":202,"endColumn":23}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview PullToRefresh Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { useState, useRef, useEffect, useCallback } from 'react';\r\nimport { RefreshCw } from 'lucide-react';\r\nimport { cn } from './ui/utils';\r\nimport { motion, AnimatePresence } from 'motion/react';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\ninterface PullToRefreshProps {\r\n  onRefresh: () => Promise<void> | void;\r\n  children: React.ReactNode;\r\n  threshold?: number;\r\n  className?: string;\r\n  disabled?: boolean;\r\n}\r\n\r\n/**\r\n * PullToRefresh function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function PullToRefresh({\r\n  onRefresh,\r\n  children,\r\n  threshold = 80,\r\n  className,\r\n  disabled = false,\r\n}: PullToRefreshProps) {\r\n  const [isPulling, setIsPulling] = useState(false);\r\n  const [isRefreshing, setIsRefreshing] = useState(false);\r\n  const [pullDistance, setPullDistance] = useState(0);\r\n  const [canPull, setCanPull] = useState(false);\r\n\r\n  const containerRef = useRef<HTMLDivElement>(null);\r\n  const startYRef = useRef<number>(0);\r\n  const isScrollingRef = useRef<boolean>(false);\r\n\r\n  // Check if we're at the top and can pull\r\n  const checkCanPull = useCallback(() => {\r\n    if (!containerRef.current ?? disabled) return false;\r\n    const element = containerRef.current;\r\n    return element.scrollTop <= 0;\r\n  }, [disabled]);\r\n\r\n  // Handle touch start\r\n  const handleTouchStart = useCallback(\r\n    (e: TouchEvent) => {\r\n      if (!checkCanPull()) return;\r\n\r\n      startYRef.current = e.touches[0].clientY;\r\n      isScrollingRef.current = false;\r\n      setCanPull(true);\r\n    },\r\n    [checkCanPull],\r\n  );\r\n\r\n  // Handle touch move\r\n  const handleTouchMove = useCallback(\r\n    (e: TouchEvent) => {\r\n      if (!canPull ?? disabled) return;\r\n\r\n      const currentY = e.touches[0].clientY;\r\n      const deltaY = currentY - startYRef.current;\r\n\r\n      // Only allow pulling down\r\n      if (deltaY > 0) {\r\n        e.preventDefault();\r\n\r\n        // Calculate pull distance with diminishing returns\r\n        const distance = Math.min(deltaY * 0.5, threshold * 1.5);\r\n        setPullDistance(distance);\r\n\r\n        // Set pulling state when distance is significant\r\n        if (distance > 10) {\r\n          setIsPulling(true);\r\n          isScrollingRef.current = true;\r\n        }\r\n      }\r\n    },\r\n    [canPull, disabled, threshold],\r\n  );\r\n\r\n  // Handle touch end\r\n  const handleTouchEnd = useCallback(async () => {\r\n    if (!canPull ?? disabled) return;\r\n\r\n    setCanPull(false);\r\n\r\n    if (pullDistance >= threshold && !isRefreshing) {\r\n      setIsRefreshing(true);\r\n      try {\r\n        await onRefresh();\r\n      } catch (error) {\r\n        logger.error('Refresh failed:', error);\r\n      } finally {\r\n        setIsRefreshing(false);\r\n      }\r\n    }\r\n\r\n    setIsPulling(false);\r\n    setPullDistance(0);\r\n    isScrollingRef.current = false;\r\n  }, [canPull, disabled, pullDistance, threshold, isRefreshing, onRefresh]);\r\n\r\n  // Attach event listeners\r\n  useEffect(() => {\r\n    const element = containerRef.current;\r\n    if (!element) return;\r\n\r\n    element.addEventListener('touchstart', handleTouchStart, { passive: false });\r\n    element.addEventListener('touchmove', handleTouchMove, { passive: false });\r\n    element.addEventListener('touchend', handleTouchEnd, { passive: true });\r\n\r\n    return () => {\r\n      element.removeEventListener('touchstart', handleTouchStart);\r\n      element.removeEventListener('touchmove', handleTouchMove);\r\n      element.removeEventListener('touchend', handleTouchEnd);\r\n    };\r\n  }, [handleTouchStart, handleTouchMove, handleTouchEnd]);\r\n\r\n  // Calculate progress\r\n  const progress = Math.min(pullDistance / threshold, 1);\r\n  const isTriggered = pullDistance >= threshold;\r\n\r\n  return (\r\n    <div\r\n      ref={containerRef}\r\n      className={cn('relative overflow-auto touch-pan-y', className)}\r\n      style={{\r\n        WebkitOverflowScrolling: 'touch',\r\n        overscrollBehavior: 'contain',\r\n      }}\r\n    >\r\n      {/* Pull Indicator */}\r\n      <AnimatePresence>\r\n        {(isPulling ?? isRefreshing) && (\r\n          <motion.div\r\n            initial={{ opacity: 0, y: -60 }}\r\n            animate={{\r\n              opacity: 1,\r\n              y: Math.max(-60 + pullDistance * 0.3, -60),\r\n            }}\r\n            exit={{ opacity: 0, y: -60 }}\r\n            className=\"absolute top-0 left-1/2 -translate-x-1/2 z-50 bg-white/90 backdrop-blur-sm border border-slate-200 rounded-full p-4 shadow-lg\"\r\n            style={{\r\n              transform: `translateX(-50%) translateY(${Math.max(-60 + pullDistance * 0.3, -60)}px)`,\r\n            }}\r\n          >\r\n            <motion.div\r\n              animate={{\r\n                rotate: isRefreshing ? 360 : progress * 360,\r\n                scale: isTriggered ? 1.1 : 0.8 + progress * 0.3,\r\n              }}\r\n              transition={{\r\n                rotate: {\r\n                  duration: isRefreshing ? 1 : 0,\r\n                  repeat: isRefreshing ? Infinity : 0,\r\n                  ease: isRefreshing ? 'linear' : 'easeOut',\r\n                },\r\n                scale: { duration: 0.2 },\r\n              }}\r\n              className={cn(\r\n                'transition-colors duration-200',\r\n                isTriggered ? 'text-primary' : 'text-slate-400',\r\n              )}\r\n            >\r\n              <RefreshCw className=\"w-6 h-6\" />\r\n            </motion.div>\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n\r\n      {/* Progress Bar */}\r\n      <AnimatePresence>\r\n        {isPulling && !isRefreshing && (\r\n          <motion.div\r\n            initial={{ opacity: 0 }}\r\n            animate={{ opacity: 1 }}\r\n            exit={{ opacity: 0 }}\r\n            className=\"absolute top-0 left-0 right-0 h-1 bg-slate-100 z-40\"\r\n          >\r\n            <motion.div\r\n              className={cn(\r\n                'h-full transition-colors duration-200',\r\n                isTriggered ? 'bg-primary' : 'bg-slate-300',\r\n              )}\r\n              style={{ width: `${progress * 100}%` }}\r\n            />\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n\r\n      {/* Content */}\r\n      <motion.div\r\n        animate={{\r\n          y: isPulling ?? isRefreshing ? pullDistance * 0.3 : 0,\r\n        }}\r\n        transition={{ type: 'spring', damping: 20, stiffness: 300 }}\r\n      >\r\n        {children}\r\n      </motion.div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\QuickStats.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\RecentActivity.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getActivities' is assigned a value but never used.","line":26,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":20},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'getActivities' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":26,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":26,"endColumn":20},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":45,"column":12,"nodeType":"MemberExpression","endLine":45,"endColumn":23},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":55,"column":12,"nodeType":"MemberExpression","endLine":55,"endColumn":24},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":74,"column":25,"nodeType":"MemberExpression","endLine":74,"endColumn":41},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":75,"column":10,"nodeType":"MemberExpression","endLine":75,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview RecentActivity Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { Card, CardContent, CardHeader, CardTitle } from './ui/card';\r\nimport { Badge } from './ui/badge';\r\nimport { Avatar, AvatarFallback, AvatarImage } from './ui/avatar';\r\nimport { Button } from './ui/button';\r\nimport { Heart, Users, HelpingHand, Calendar, MoreHorizontal } from 'lucide-react';\r\n\r\ninterface Activity {\r\n  id: number;\r\n  type: 'donation' | 'member' | 'aid' | 'event';\r\n  title: string;\r\n  description: string;\r\n  timestamp: string;\r\n  user?: string;\r\n  amount?: number;\r\n  status?: 'success' | 'pending' | 'failed';\r\n}\r\n\r\n// Activity data will be fetched from API\r\nconst getActivities = async (): Promise<Activity[]> => {\r\n  // TODO: Implement real API call to fetch activities\r\n  return [];\r\n};\r\n\r\n/**\r\n * RecentActivity function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function RecentActivity() {\r\n  const getActivityIcon = (type: Activity['type']) => {\r\n    const icons = {\r\n      donation: <Heart className=\"w-4 h-4\" />,\r\n      member: <Users className=\"w-4 h-4\" />,\r\n      aid: <HelpingHand className=\"w-4 h-4\" />,\r\n      event: <Calendar className=\"w-4 h-4\" />,\r\n    };\r\n    return icons[type];\r\n  };\r\n\r\n  const getActivityColor = (type: Activity['type']) => {\r\n    const colors = {\r\n      donation: 'text-red-600 bg-red-50',\r\n      member: 'text-blue-600 bg-blue-50',\r\n      aid: 'text-purple-600 bg-purple-50',\r\n      event: 'text-green-600 bg-green-50',\r\n    };\r\n    return colors[type];\r\n  };\r\n\r\n  const getStatusBadge = (status?: Activity['status']) => {\r\n    if (!status) return null;\r\n\r\n    const variants = {\r\n      success: 'bg-green-100 text-green-800',\r\n      pending: 'bg-yellow-100 text-yellow-800',\r\n      failed: 'bg-red-100 text-red-800',\r\n    };\r\n\r\n    const labels = {\r\n      success: 'Tamamland─▒',\r\n      pending: 'Beklemede',\r\n      failed: 'Ba┼şar─▒s─▒z',\r\n    };\r\n\r\n    return (\r\n      <Badge className={variants[status]} variant=\"secondary\">\r\n        {labels[status]}\r\n      </Badge>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Card className=\"shadow-md border-0\">\r\n      <CardHeader className=\"flex flex-row items-center justify-between pb-3\">\r\n        <CardTitle className=\"text-lg\">Son Aktiviteler</CardTitle>\r\n        <Button variant=\"ghost\" size=\"sm\">\r\n          <MoreHorizontal className=\"w-4 h-4\" />\r\n        </Button>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-3 lg:space-y-4 max-h-96 overflow-y-auto scrollbar-thin px-6 py-6\">\r\n        {mockActivities.length > 0 ? (\r\n          [].map((activity) => ( // TODO: Replace with real data from getActivities()\r\n            <div\r\n              key={activity.id}\r\n              className=\"flex items-start gap-4 p-4 hover:bg-slate-50/80 rounded-xl transition-all duration-200 border border-transparent hover:border-slate-200/60 cursor-pointer group\"\r\n            >\r\n              <div\r\n                className={`p-2.5 rounded-xl shadow-sm ${getActivityColor(activity.type)} group-hover:scale-105 transition-transform duration-200 border border-white/20`}\r\n              >\r\n                {getActivityIcon(activity.type)}\r\n              </div>\r\n\r\n              <div className=\"flex-1 min-w-0\">\r\n                <div className=\"flex items-center justify-between mb-1.5\">\r\n                  <h4 className=\"font-semibold text-sm text-slate-900 truncate tracking-tight\">\r\n                    {activity.title}\r\n                  </h4>\r\n                  {activity.amount && (\r\n                    <span className=\"text-sm font-bold text-emerald-700 bg-emerald-50/80 px-2 py-1 rounded-lg border border-emerald-200/60\">\r\n                      Ôé║{activity.amount.toLocaleString()}\r\n                    </span>\r\n                  )}\r\n                </div>\r\n\r\n                <p className=\"text-sm text-slate-600 mb-2.5 font-medium\">{activity.description}</p>\r\n\r\n                <div className=\"flex items-center justify-between\">\r\n                  <span className=\"text-xs text-slate-500 font-medium\">{activity.timestamp}</span>\r\n                  {getStatusBadge(activity.status)}\r\n                </div>\r\n              </div>\r\n\r\n              {activity.user && (\r\n                <Avatar className=\"w-9 h-9 border-2 border-white shadow-sm group-hover:scale-105 transition-transform duration-200\">\r\n                  <AvatarImage src=\"\" alt={activity.user} />\r\n                  <AvatarFallback className=\"bg-slate-100 text-slate-700 text-xs font-semibold border border-slate-200/60\">\r\n                    {activity.user\r\n                      .split(' ')\r\n                      .map((n) => n[0])\r\n                      .join('')}\r\n                  </AvatarFallback>\r\n                </Avatar>\r\n              )}\r\n            </div>\r\n          ))\r\n        ) : (\r\n          <div className=\"text-center py-8 text-gray-500\">\r\n            <Calendar className=\"w-12 h-12 mx-auto mb-3 text-gray-400\" />\r\n            <p className=\"text-sm\">Hen├╝z aktivite bulunmuyor</p>\r\n            <p className=\"text-xs text-gray-400 mt-1\">Yeni i┼şlemler burada g├Âr├╝necek</p>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ResponsiveCard.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":228,"column":9,"nodeType":"MemberExpression","endLine":228,"endColumn":32},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":233,"column":39,"nodeType":"MemberExpression","endLine":233,"endColumn":58}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview ResponsiveCard Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { forwardRef } from 'react';\r\nimport { cn } from './ui/utils';\r\nimport { Card } from './ui/card';\r\nimport { motion } from 'motion/react';\r\n\r\ninterface ResponsiveCardProps {\r\n  variant?: 'default' | 'mobile' | 'compact';\r\n  hoverable?: boolean;\r\n  interactive?: boolean;\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  onClick?: () => void;\r\n}\r\n\r\nexport const ResponsiveCard = forwardRef<HTMLDivElement, ResponsiveCardProps>(\r\n  (\r\n    { className, variant = 'default', hoverable = false, interactive = false, children, ...props },\r\n    ref,\r\n  ) => {\r\n    const baseClasses = cn(\r\n      'transition-all duration-200',\r\n      // Responsive padding\r\n      variant === 'mobile' && 'p-3 sm:p-4 md:p-6',\r\n      variant === 'compact' && 'p-2 sm:p-3',\r\n      variant === 'default' && 'p-4 sm:p-6',\r\n      // Hover effects\r\n      hoverable && 'hover:shadow-lg hover:-translate-y-1',\r\n      // Interactive states\r\n      interactive && 'cursor-pointer hover:bg-slate-50 active:scale-95',\r\n      className,\r\n    );\r\n\r\n    if (interactive) {\r\n      return (\r\n        <motion.div\r\n          ref={ref}\r\n          whileHover={{ y: -2, boxShadow: '0 10px 25px -5px rgba(0, 0, 0, 0.1)' }}\r\n          whileTap={{ scale: 0.98 }}\r\n          transition={{ type: 'spring', damping: 25, stiffness: 300 }}\r\n        >\r\n          <Card className={baseClasses} {...props}>\r\n            {children}\r\n          </Card>\r\n        </motion.div>\r\n      );\r\n    }\r\n\r\n    return (\r\n      <Card ref={ref} className={baseClasses} {...props}>\r\n        {children}\r\n      </Card>\r\n    );\r\n  },\r\n);\r\n\r\nResponsiveCard.displayName = 'ResponsiveCard';\r\n\r\n// Grid wrapper for responsive card layouts\r\ninterface ResponsiveCardGridProps {\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  cols?: {\r\n    default?: number;\r\n    sm?: number;\r\n    md?: number;\r\n    lg?: number;\r\n    xl?: number;\r\n  };\r\n  gap?: 'sm' | 'md' | 'lg';\r\n}\r\n\r\n/**\r\n * ResponsiveCardGrid function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function ResponsiveCardGrid({\r\n  children,\r\n  className,\r\n  cols = { default: 1, sm: 2, lg: 3 },\r\n  gap = 'md',\r\n}: ResponsiveCardGridProps) {\r\n  const gridClasses = cn(\r\n    'grid',\r\n    // Grid columns responsive\r\n    cols.default === 1 && 'grid-cols-1',\r\n    cols.default === 2 && 'grid-cols-2',\r\n    cols.default === 3 && 'grid-cols-3',\r\n    cols.default === 4 && 'grid-cols-4',\r\n    cols.sm && `sm:grid-cols-${cols.sm}`,\r\n    cols.md && `md:grid-cols-${cols.md}`,\r\n    cols.lg && `lg:grid-cols-${cols.lg}`,\r\n    cols.xl && `xl:grid-cols-${cols.xl}`,\r\n    // Gap sizes\r\n    gap === 'sm' && 'gap-3 sm:gap-4',\r\n    gap === 'md' && 'gap-4 sm:gap-6',\r\n    gap === 'lg' && 'gap-6 sm:gap-8',\r\n    className,\r\n  );\r\n\r\n  return <div className={gridClasses}>{children}</div>;\r\n}\r\n\r\n// Info card specifically for mobile optimization\r\ninterface MobileInfoCardProps {\r\n  icon: React.ReactNode;\r\n  title: string;\r\n  value: string | number;\r\n  badge?: string | number;\r\n  color?: string;\r\n  onClick?: () => void;\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * MobileInfoCard function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function MobileInfoCard({\r\n  icon,\r\n  title,\r\n  value,\r\n  badge,\r\n  color = 'text-primary',\r\n  onClick,\r\n  className,\r\n}: MobileInfoCardProps) {\r\n  const isInteractive = !!onClick;\r\n\r\n  return (\r\n    <ResponsiveCard\r\n      variant=\"mobile\"\r\n      interactive={isInteractive}\r\n      onClick={onClick}\r\n      className={cn(\r\n        'relative overflow-hidden',\r\n        // Mobile optimized sizing\r\n        'min-h-[100px] sm:min-h-[120px]',\r\n        'w-full',\r\n        className,\r\n      )}\r\n    >\r\n      {/* Background pattern for visual interest */}\r\n      <div className=\"absolute top-0 right-0 w-16 h-16 opacity-5\">\r\n        <div className={cn('w-full h-full', color.replace('text-', 'bg-'))}>{icon}</div>\r\n      </div>\r\n\r\n      <div className=\"relative flex flex-col h-full\">\r\n        {/* Icon and Badge */}\r\n        <div className=\"flex items-start justify-between mb-2\">\r\n          <div className={cn('p-2 rounded-lg bg-slate-50', color)}>{icon}</div>\r\n          {badge && (\r\n            <span className=\"bg-primary text-white text-xs px-2 py-1 rounded-full font-medium\">\r\n              {badge}\r\n            </span>\r\n          )}\r\n        </div>\r\n\r\n        {/* Content */}\r\n        <div className=\"flex-1 flex flex-col justify-end\">\r\n          <div className=\"text-2xl sm:text-3xl font-bold text-slate-900 mb-1\">{value}</div>\r\n          <div className=\"text-sm text-slate-600 font-medium\">{title}</div>\r\n        </div>\r\n      </div>\r\n    </ResponsiveCard>\r\n  );\r\n}\r\n\r\n// Touch-friendly button card for mobile actions\r\ninterface TouchActionCardProps {\r\n  icon: React.ReactNode;\r\n  title: string;\r\n  description?: string;\r\n  onClick: () => void;\r\n  variant?: 'primary' | 'secondary' | 'success' | 'warning' | 'danger';\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * TouchActionCard function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function TouchActionCard({\r\n  icon,\r\n  title,\r\n  description,\r\n  onClick,\r\n  variant = 'primary',\r\n  className,\r\n}: TouchActionCardProps) {\r\n  const variantClasses = {\r\n    primary: 'border-primary/20 hover:border-primary/40 hover:bg-primary/5',\r\n    secondary: 'border-slate-200 hover:border-slate-300 hover:bg-slate-50',\r\n    success: 'border-green-200 hover:border-green-300 hover:bg-green-50',\r\n    warning: 'border-amber-200 hover:border-amber-300 hover:bg-amber-50',\r\n    danger: 'border-red-200 hover:border-red-300 hover:bg-red-50',\r\n  };\r\n\r\n  const iconColors = {\r\n    primary: 'text-primary',\r\n    secondary: 'text-slate-600',\r\n    success: 'text-green-600',\r\n    warning: 'text-amber-600',\r\n    danger: 'text-red-600',\r\n  };\r\n\r\n  return (\r\n    <motion.button\r\n      onClick={onClick}\r\n      whileHover={{ scale: 1.02 }}\r\n      whileTap={{ scale: 0.98 }}\r\n      className={cn(\r\n        'w-full p-6 rounded-xl border-2 transition-all duration-200',\r\n        'focus:outline-none focus:ring-2 focus:ring-primary/20',\r\n        'min-h-[88px]', // Touch-friendly minimum height\r\n        variantClasses[variant],\r\n        className,\r\n      )}\r\n    >\r\n      <div className=\"flex items-center gap-4\">\r\n        <div className={cn('text-xl', iconColors[variant])}>{icon}</div>\r\n        <div className=\"flex-1 text-left\">\r\n          <div className=\"font-semibold text-slate-900 mb-1\">{title}</div>\r\n          {description && <div className=\"text-sm text-slate-600\">{description}</div>}\r\n        </div>\r\n        <div className=\"text-slate-400\">\r\n          <svg className=\"w-5 h-5\" fill=\"none\" stroke=\"currentColor\" viewBox=\"0 0 24 24\">\r\n            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M9 5l7 7-7 7\" />\r\n          </svg>\r\n        </div>\r\n      </div>\r\n    </motion.button>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\SafeWrapper.tsx","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":50,"column":29,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":50,"endColumn":31,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1153,1155],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":80,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":80,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2084,2087],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2084,2087],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2379,2382],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2379,2382],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":92,"column":53,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":92,"endColumn":67}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview SafeWrapper Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport React from 'react';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\ninterface SafeWrapperProps {\r\n  children: React.ReactNode;\r\n  fallback?: React.ReactNode;\r\n  componentName?: string;\r\n}\r\n\r\ninterface SafeWrapperState {\r\n  hasError: boolean;\r\n  error?: Error;\r\n}\r\n\r\n/**\r\n * SafeWrapper Service\r\n * \r\n * Service class for handling safewrapper operations\r\n * \r\n * @class SafeWrapper\r\n */\r\nexport class SafeWrapper extends React.Component<SafeWrapperProps, SafeWrapperState> {\r\n  constructor(props: SafeWrapperProps) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError(error: Error): SafeWrapperState {\r\n    return { hasError: true, error };\r\n  }\r\n\r\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\r\n    logger.error(\r\n      `SafeWrapper caught error in ${this.props.componentName ?? 'Unknown Component'}:`,\r\n      error,\r\n      errorInfo,\r\n    );\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      return (\r\n        this.props.fallback || (\r\n          <div className=\"p-4 bg-red-50 border border-red-200 rounded-lg\">\r\n            <h3 className=\"text-red-800 font-medium\">Bile┼şen Y├╝kleme Hatas─▒</h3>\r\n            <p className=\"text-red-600 text-sm mt-1\">\r\n              {this.props.componentName} bile┼şeni y├╝klenirken bir hata olu┼ştu.\r\n            </p>\r\n            <button\r\n              onClick={() => {\r\n                this.setState({ hasError: false });\r\n              }}\r\n              className=\"mt-2 text-xs bg-red-100 hover:bg-red-200 text-red-700 px-2 py-1 rounded\"\r\n            >\r\n              Tekrar Dene\r\n            </button>\r\n          </div>\r\n        )\r\n      );\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\n// Higher-order component for safer component rendering\r\n/**\r\n * withSafeWrapper function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function withSafeWrapper<P extends Record<string, any> = {}>(\r\n  Component: React.ComponentType<P>,\r\n  componentName?: string,\r\n) {\r\n  const WrappedComponent = React.forwardRef<React.ComponentRef<typeof Component>, P>(\r\n    (props, ref) => (\r\n      <SafeWrapper componentName={componentName ?? Component.name}>\r\n        <Component {...(props as any)} ref={ref} />\r\n      </SafeWrapper>\r\n    ),\r\n  );\r\n\r\n  WrappedComponent.displayName = `withSafeWrapper(${Component.name ?? 'Component'})`;\r\n\r\n  return WrappedComponent;\r\n}\r\n\r\n// Hook for safe component rendering\r\n/**\r\n * useSafeRender function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useSafeRender() {\r\n  return {\r\n    renderSafely: (component: React.ReactNode, fallback?: React.ReactNode) => (\r\n      <SafeWrapper fallback={fallback}>{component}</SafeWrapper>\r\n    ),\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\Sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\SkeletonLoader.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\StoreErrorBoundary.tsx","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'react' import is duplicated.","line":9,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":9,"endColumn":42}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview StoreErrorBoundary Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport type { ReactNode } from 'react';\r\nimport React, { Component } from 'react';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\ninterface Props {\r\n  children: ReactNode;\r\n  fallback?: ReactNode;\r\n}\r\n\r\ninterface State {\r\n  hasError: boolean;\r\n  error?: Error;\r\n}\r\n\r\n/**\r\n * StoreErrorBoundary Service\r\n * \r\n * Service class for handling storeerrorboundary operations\r\n * \r\n * @class StoreErrorBoundary\r\n */\r\nexport class StoreErrorBoundary extends Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError(error: Error): State {\r\n    return { hasError: true, error };\r\n  }\r\n\r\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\r\n    logger.error('Store initialization error:', error, errorInfo);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      // Fallback UI for store initialization errors\r\n      if (this.props.fallback) {\r\n        return this.props.fallback;\r\n      }\r\n\r\n      return (\r\n        <div className=\"h-screen flex items-center justify-center bg-gradient-to-br from-slate-50 via-gray-50 to-slate-100\">\r\n          <div className=\"flex flex-col items-center gap-4 p-8 bg-white rounded-lg shadow-lg\">\r\n            <div className=\"text-red-600 text-lg font-medium\">Sistem Ba┼şlat─▒lamad─▒</div>\r\n            <div className=\"text-gray-600 text-sm text-center max-w-md\">\r\n              Uygulama ba┼şlat─▒l─▒rken bir hata olu┼ştu. Sayfay─▒ yenilemeyi deneyin.\r\n            </div>\r\n            <button\r\n              onClick={() => {\r\n                window.location.reload();\r\n              }}\r\n              className=\"px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors\"\r\n            >\r\n              Sayfay─▒ Yenile\r\n            </button>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\SupabaseConnectionStatus.tsx","messages":[{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":34,"column":37,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1164,1206],"text":"Supabase Dashboard&apos;dan proje URL'nizi al─▒n"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1164,1206],"text":"Supabase Dashboard&lsquo;dan proje URL'nizi al─▒n"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1164,1206],"text":"Supabase Dashboard&#39;dan proje URL'nizi al─▒n"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1164,1206],"text":"Supabase Dashboard&rsquo;dan proje URL'nizi al─▒n"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":34,"column":51,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1164,1206],"text":"Supabase Dashboard'dan proje URL&apos;nizi al─▒n"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1164,1206],"text":"Supabase Dashboard'dan proje URL&lsquo;nizi al─▒n"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1164,1206],"text":"Supabase Dashboard'dan proje URL&#39;nizi al─▒n"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1164,1206],"text":"Supabase Dashboard'dan proje URL&rsquo;nizi al─▒n"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":35,"column":36,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1231,1259],"text":"Supabase Anon Key&apos;inizi al─▒n"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1231,1259],"text":"Supabase Anon Key&lsquo;inizi al─▒n"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1231,1259],"text":"Supabase Anon Key&#39;inizi al─▒n"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1231,1259],"text":"Supabase Anon Key&rsquo;inizi al─▒n"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":36,"column":29,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[1284,1322],"text":"Proje root&apos;unda .env dosyas─▒ olu┼şturun"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[1284,1322],"text":"Proje root&lsquo;unda .env dosyas─▒ olu┼şturun"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[1284,1322],"text":"Proje root&#39;unda .env dosyas─▒ olu┼şturun"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[1284,1322],"text":"Proje root&rsquo;unda .env dosyas─▒ olu┼şturun"},"desc":"Replace with `&rsquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`'` can be escaped with `&apos;`, `&lsquo;`, `&#39;`, `&rsquo;`.","line":83,"column":37,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&apos;"},"fix":{"range":[2791,2822],"text":"Supabase proje URL&apos;si do─şru mu?"},"desc":"Replace with `&apos;`."},{"messageId":"replaceWithAlt","data":{"alt":"&lsquo;"},"fix":{"range":[2791,2822],"text":"Supabase proje URL&lsquo;si do─şru mu?"},"desc":"Replace with `&lsquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#39;"},"fix":{"range":[2791,2822],"text":"Supabase proje URL&#39;si do─şru mu?"},"desc":"Replace with `&#39;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rsquo;"},"fix":{"range":[2791,2822],"text":"Supabase proje URL&rsquo;si do─şru mu?"},"desc":"Replace with `&rsquo;`."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview SupabaseConnectionStatus Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport React from 'react';\r\nimport { useSupabaseConnection, isSupabaseConfigured } from '../hooks/useSupabaseConnection';\r\nimport { Alert, AlertDescription } from './ui/alert';\r\nimport { CheckCircle, XCircle, AlertTriangle, Loader2 } from 'lucide-react';\r\n\r\n/**\r\n * SupabaseConnectionStatus function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function SupabaseConnectionStatus() {\r\n  const { isConnected, isLoading, error, projectUrl } = useSupabaseConnection();\r\n  const isConfigured = isSupabaseConfigured();\r\n\r\n  if (!isConfigured) {\r\n    return (\r\n      <Alert variant=\"destructive\" className=\"m-4\">\r\n        <AlertTriangle className=\"h-4 w-4\" />\r\n        <AlertDescription>\r\n          <div className=\"space-y-2\">\r\n            <p>\r\n              <strong>Supabase Konfig├╝rasyonu Eksik</strong>\r\n            </p>\r\n            <p>L├╝tfen a┼şa─ş─▒daki ad─▒mlar─▒ takip edin:</p>\r\n            <ol className=\"list-decimal list-inside space-y-1 text-sm\">\r\n              <li>Supabase Dashboard'dan proje URL'nizi al─▒n</li>\r\n              <li>Supabase Anon Key'inizi al─▒n</li>\r\n              <li>Proje root'unda .env dosyas─▒ olu┼şturun</li>\r\n              <li>VITE_SUPABASE_URL ve VITE_SUPABASE_ANON_KEY de─şerlerini ekleyin</li>\r\n            </ol>\r\n          </div>\r\n        </AlertDescription>\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <Alert className=\"m-4\">\r\n        <Loader2 className=\"h-4 w-4 animate-spin\" />\r\n        <AlertDescription>Supabase ba─şlant─▒s─▒ test ediliyor...</AlertDescription>\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  if (isConnected) {\r\n    return (\r\n      <Alert variant=\"default\" className=\"m-4 border-green-200 bg-green-50\">\r\n        <CheckCircle className=\"h-4 w-4 text-green-600\" />\r\n        <AlertDescription className=\"text-green-800\">\r\n          <div className=\"space-y-1\">\r\n            <p>\r\n              <strong>Ô£à Supabase Ba─şlant─▒s─▒ Ba┼şar─▒l─▒</strong>\r\n            </p>\r\n            <p className=\"text-sm\">Proje URL: {projectUrl}</p>\r\n            {error && <p className=\"text-xs text-amber-600\">{error}</p>}\r\n          </div>\r\n        </AlertDescription>\r\n      </Alert>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Alert variant=\"destructive\" className=\"m-4\">\r\n      <XCircle className=\"h-4 w-4\" />\r\n      <AlertDescription>\r\n        <div className=\"space-y-2\">\r\n          <p>\r\n            <strong>ÔØî Supabase Ba─şlant─▒s─▒ Ba┼şar─▒s─▒z</strong>\r\n          </p>\r\n          <p className=\"text-sm\">{error}</p>\r\n          <div className=\"text-xs space-y-1\">\r\n            <p>Kontrol edilecekler:</p>\r\n            <ul className=\"list-disc list-inside\">\r\n              <li>Supabase proje URL'si do─şru mu?</li>\r\n              <li>Anon key do─şru mu?</li>\r\n              <li>Proje aktif mi?</li>\r\n              <li>─░nternet ba─şlant─▒s─▒ var m─▒?</li>\r\n            </ul>\r\n          </div>\r\n        </div>\r\n      </AlertDescription>\r\n    </Alert>\r\n  );\r\n}\r\n\r\nexport default SupabaseConnectionStatus;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ToastProvider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\__tests__\\Button.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":17,"column":4,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":17,"endColumn":7,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[405,408],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[405,408],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview Button Component Unit Tests\r\n * @description Tests for the basic Button UI component\r\n */\r\n\r\nimport { describe, it, expect, vi } from 'vitest';\r\nimport { render, screen, fireEvent } from '@testing-library/react';\r\n\r\n// Mock Button component if it doesn't exist\r\nconst ButtonComponent = ({\r\n  children,\r\n  onClick,\r\n  disabled,\r\n  variant = 'default',\r\n  size = 'md',\r\n  ...props\r\n}: any) => {\r\n  return (\r\n    <button\r\n      onClick={onClick}\r\n      disabled={disabled}\r\n      className={`btn btn-${variant} btn-${size}`}\r\n      {...props}\r\n    >\r\n      {children}\r\n    </button>\r\n  );\r\n};\r\n\r\ndescribe('Button Component', () => {\r\n  it('should render button with text content', () => {\r\n    render(<ButtonComponent>Click me</ButtonComponent>);\r\n\r\n    const button = screen.getByRole('button', { name: /click me/i });\r\n    expect(button).toBeInTheDocument();\r\n  });\r\n\r\n  it('should render button with custom text', () => {\r\n    render(<ButtonComponent>Test Button</ButtonComponent>);\r\n\r\n    const button = screen.getByRole('button', { name: /test button/i });\r\n    expect(button).toBeInTheDocument();\r\n  });\r\n\r\n  it('should handle click events', () => {\r\n    const handleClick = vi.fn();\r\n\r\n    render(<ButtonComponent onClick={handleClick}>Click me</ButtonComponent>);\r\n\r\n    const button = screen.getByRole('button');\r\n    fireEvent.click(button);\r\n\r\n    expect(handleClick).toHaveBeenCalledTimes(1);\r\n  });\r\n\r\n  it('should not call onClick when disabled', () => {\r\n    const handleClick = vi.fn();\r\n\r\n    render(\r\n      <ButtonComponent onClick={handleClick} disabled>\r\n        Disabled Button\r\n      </ButtonComponent>,\r\n    );\r\n\r\n    const button = screen.getByRole('button');\r\n    fireEvent.click(button);\r\n\r\n    expect(handleClick).not.toHaveBeenCalled();\r\n  });\r\n\r\n  it('should render disabled button', () => {\r\n    render(<ButtonComponent disabled>Disabled Button</ButtonComponent>);\r\n\r\n    const button = screen.getByRole('button');\r\n    expect(button).toBeDisabled();\r\n  });\r\n\r\n  it('should render enabled button by default', () => {\r\n    render(<ButtonComponent>Enabled Button</ButtonComponent>);\r\n\r\n    const button = screen.getByRole('button');\r\n    expect(button).not.toBeDisabled();\r\n  });\r\n\r\n  it('should render with different variants', () => {\r\n    const { rerender } = render(<ButtonComponent variant=\"primary\">Primary</ButtonComponent>);\r\n\r\n    let button = screen.getByRole('button');\r\n    expect(button).toHaveClass('btn-primary');\r\n\r\n    rerender(<ButtonComponent variant=\"secondary\">Secondary</ButtonComponent>);\r\n    button = screen.getByRole('button');\r\n    expect(button).toHaveClass('btn-secondary');\r\n  });\r\n\r\n  it('should render with different sizes', () => {\r\n    const { rerender } = render(<ButtonComponent size=\"sm\">Small</ButtonComponent>);\r\n\r\n    let button = screen.getByRole('button');\r\n    expect(button).toHaveClass('btn-sm');\r\n\r\n    rerender(<ButtonComponent size=\"lg\">Large</ButtonComponent>);\r\n    button = screen.getByRole('button');\r\n    expect(button).toHaveClass('btn-lg');\r\n  });\r\n\r\n  it('should render button with additional props', () => {\r\n    render(\r\n      <ButtonComponent type=\"submit\" id=\"submit-button\" aria-label=\"Submit form\">\r\n        Submit\r\n      </ButtonComponent>,\r\n    );\r\n\r\n    const button = screen.getByRole('button');\r\n    expect(button).toHaveAttribute('type', 'submit');\r\n    expect(button).toHaveAttribute('id', 'submit-button');\r\n    expect(button).toHaveAttribute('aria-label', 'Submit form');\r\n  });\r\n\r\n  it('should handle keyboard events', () => {\r\n    const handleClick = vi.fn();\r\n\r\n    render(<ButtonComponent onClick={handleClick}>Keyboard Test</ButtonComponent>);\r\n\r\n    const button = screen.getByRole('button');\r\n\r\n    // Test Enter key\r\n    fireEvent.keyDown(button, { key: 'Enter', code: 'Enter' });\r\n    expect(handleClick).toHaveBeenCalledTimes(1);\r\n\r\n    // Test Space key\r\n    fireEvent.keyDown(button, { key: ' ', code: 'Space' });\r\n    expect(handleClick).toHaveBeenCalledTimes(2);\r\n  });\r\n\r\n  it('should have correct accessibility attributes', () => {\r\n    render(<ButtonComponent>Accessible Button</ButtonComponent>);\r\n\r\n    const button = screen.getByRole('button');\r\n    expect(button).toHaveAttribute('type', 'button');\r\n  });\r\n\r\n  it('should render custom className', () => {\r\n    render(<ButtonComponent className=\"custom-class\">Custom Button</ButtonComponent>);\r\n\r\n    const button = screen.getByRole('button');\r\n    expect(button).toHaveClass('custom-class');\r\n  });\r\n\r\n  it('should handle loading state', () => {\r\n    const { rerender } = render(<ButtonComponent loading>Loading Button</ButtonComponent>);\r\n\r\n    let button = screen.getByRole('button');\r\n    expect(button).toHaveClass('btn-loading');\r\n    expect(button).toBeDisabled();\r\n\r\n    rerender(<ButtonComponent loading={false}>Loaded Button</ButtonComponent>);\r\n    button = screen.getByRole('button');\r\n    expect(button).not.toHaveClass('btn-loading');\r\n    expect(button).not.toBeDisabled();\r\n  });\r\n\r\n  it('should handle icon buttons', () => {\r\n    render(\r\n      <ButtonComponent>\r\n        <span>­şöı</span>\r\n        Search\r\n      </ButtonComponent>,\r\n    );\r\n\r\n    const button = screen.getByRole('button');\r\n    expect(button).toHaveTextContent('­şöı');\r\n    expect(button).toHaveTextContent('Search');\r\n  });\r\n\r\n  it('should have correct button type', () => {\r\n    const { rerender } = render(<ButtonComponent type=\"button\">Button Type</ButtonComponent>);\r\n\r\n    let button = screen.getByRole('button');\r\n    expect(button).toHaveAttribute('type', 'button');\r\n\r\n    rerender(<ButtonComponent type=\"submit\">Submit Type</ButtonComponent>);\r\n    button = screen.getByRole('button');\r\n    expect(button).toHaveAttribute('type', 'submit');\r\n  });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\__tests__\\Header.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\__tests__\\LoadingSpinner.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\accessibility\\AccessibilityEnhancements.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'deviceInfo' is assigned a value but never used.","line":128,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":128,"endColumn":44},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'deviceInfo' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":128,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":128,"endColumn":44},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'applyAccessibilitySettings'. Either include it or remove the dependency array.","line":135,"column":6,"nodeType":"ArrayExpression","endLine":135,"endColumn":34,"suggestions":[{"desc":"Update the dependencies array to be: [settings, onSettingsChange, applyAccessibilitySettings]","fix":{"range":[3689,3717],"text":"[settings, onSettingsChange, applyAccessibilitySettings]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":203,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5615,5618],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5615,5618],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has missing dependencies: 'announceToScreenReader' and 'performAccessibilityChecks'. Either include them or remove the dependency array.","line":234,"column":6,"nodeType":"ArrayExpression","endLine":234,"endColumn":45,"suggestions":[{"desc":"Update the dependencies array to be: [announceToScreenReader, onScanComplete, performAccessibilityChecks, triggerHapticFeedback]","fix":{"range":[6592,6631],"text":"[announceToScreenReader, onScanComplete, performAccessibilityChecks, triggerHapticFeedback]"}}]},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":301,"column":13,"nodeType":"UnaryExpression","messageId":"constantShortCircuit","endLine":301,"endColumn":17},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":301,"column":13,"nodeType":"UnaryExpression","messageId":"neverNullish","endLine":301,"endColumn":17},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":417,"column":34,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":419,"endColumn":13},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":420,"column":15,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":420,"endColumn":29}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview AccessibilityEnhancements Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { motion, AnimatePresence } from 'motion/react';\r\nimport {\r\n  Eye,\r\n  Volume2,\r\n  Type,\r\n  Contrast,\r\n  MousePointer,\r\n  Check,\r\n  X,\r\n  AlertTriangle,\r\n  Info,\r\n  Zap,\r\n  Focus,\r\n  Cpu,\r\n} from 'lucide-react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Badge } from '../ui/badge';\r\nimport { Button } from '../ui/button';\r\nimport { Switch } from '../ui/switch';\r\nimport { Slider } from '../ui/slider';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';\r\nimport { useAdvancedMobile } from '../../hooks/useAdvancedMobile';\r\n\r\n// Eri┼şilebilirlik ayarlar─▒\r\ninterface AccessibilitySettings {\r\n  // G├Ârsel ayarlar\r\n  highContrast: boolean;\r\n  fontSize: number; // 1-3 aras─▒\r\n  colorBlindSupport: boolean;\r\n  reducedMotion: boolean;\r\n  darkMode: boolean;\r\n\r\n  // Ses ayarlar─▒\r\n  screenReader: boolean;\r\n  audioDescriptions: boolean;\r\n  soundEffects: boolean;\r\n  volume: number; // 0-100\r\n\r\n  // Motor ayarlar─▒\r\n  keyboardNavigation: boolean;\r\n  largeClickTargets: boolean;\r\n  stickyKeys: boolean;\r\n  slowKeys: boolean;\r\n\r\n  // Bili┼şsel ayarlar─▒\r\n  simplifiedInterface: boolean;\r\n  readingAssistance: boolean;\r\n  focusIndicators: boolean;\r\n  errorPrevention: boolean;\r\n\r\n  // Dil ayarlar─▒\r\n  language: string;\r\n  readingLevel: 'simple' | 'standard' | 'advanced';\r\n}\r\n\r\n// Eri┼şilebilirlik istatistikleri\r\ninterface AccessibilityStats {\r\n  totalChecks: number;\r\n  passedChecks: number;\r\n  failedChecks: number;\r\n  warnings: number;\r\n  score: number; // 0-100\r\n  lastScan: Date;\r\n  issues: {\r\n    type: 'error' | 'warning' | 'info';\r\n    category: 'color' | 'contrast' | 'keyboard' | 'screen_reader' | 'focus' | 'alt_text';\r\n    message: string;\r\n    element?: string;\r\n    suggestion: string;\r\n  }[];\r\n}\r\n\r\n// Varsay─▒lan ayarlar\r\nconst defaultSettings: AccessibilitySettings = {\r\n  highContrast: false,\r\n  fontSize: 1,\r\n  colorBlindSupport: false,\r\n  reducedMotion: false,\r\n  darkMode: false,\r\n  screenReader: false,\r\n  audioDescriptions: false,\r\n  soundEffects: true,\r\n  volume: 50,\r\n  keyboardNavigation: true,\r\n  largeClickTargets: false,\r\n  stickyKeys: false,\r\n  slowKeys: false,\r\n  simplifiedInterface: false,\r\n  readingAssistance: false,\r\n  focusIndicators: true,\r\n  errorPrevention: true,\r\n  language: 'tr',\r\n  readingLevel: 'standard',\r\n};\r\n\r\ninterface AccessibilityEnhancementsProps {\r\n  className?: string;\r\n  onSettingsChange?: (settings: AccessibilitySettings) => void;\r\n  onScanComplete?: (stats: AccessibilityStats) => void;\r\n}\r\n\r\n/**\r\n * AccessibilityEnhancements function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function AccessibilityEnhancements({\r\n  className = '',\r\n  onSettingsChange,\r\n  onScanComplete,\r\n}: AccessibilityEnhancementsProps) {\r\n  const [settings, setSettings] = useState<AccessibilitySettings>(defaultSettings);\r\n  const [activeTab, setActiveTab] = useState('visual');\r\n  const [isScanning, setIsScanning] = useState(false);\r\n  const [scanResults, setScanResults] = useState<AccessibilityStats | null>(null);\r\n  const [showQuickAccess, setShowQuickAccess] = useState(false);\r\n  const [announcements, setAnnouncements] = useState<string[]>([]);\r\n\r\n  const { triggerHapticFeedback, deviceInfo } = useAdvancedMobile();\r\n  const announcementRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Eri┼şilebilirlik ayarlar─▒n─▒ uygula\r\n  useEffect(() => {\r\n    applyAccessibilitySettings(settings);\r\n    onSettingsChange?.(settings);\r\n  }, [settings, onSettingsChange]);\r\n\r\n  // Ekran okuyucu duyurular─▒\r\n  useEffect(() => {\r\n    if (announcements.length > 0 && announcementRef.current) {\r\n      (announcementRef.current as HTMLElement).focus();\r\n    }\r\n  }, [announcements]);\r\n\r\n  // Eri┼şilebilirlik ayarlar─▒n─▒ DOM'a uygula\r\n  const applyAccessibilitySettings = useCallback((newSettings: AccessibilitySettings) => {\r\n    const root = document.documentElement;\r\n\r\n    // Font boyutu\r\n    root.style.setProperty('--font-size-multiplier', newSettings.fontSize.toString());\r\n\r\n    // Y├╝ksek kontrast\r\n    if (newSettings.highContrast) {\r\n      root.classList.add('high-contrast');\r\n    } else {\r\n      root.classList.remove('high-contrast');\r\n    }\r\n\r\n    // Renk k├Âr├╝ deste─şi\r\n    if (newSettings.colorBlindSupport) {\r\n      root.classList.add('colorblind-support');\r\n    } else {\r\n      root.classList.remove('colorblind-support');\r\n    }\r\n\r\n    // Azalt─▒lm─▒┼ş hareket\r\n    if (newSettings.reducedMotion) {\r\n      root.classList.add('reduced-motion');\r\n    } else {\r\n      root.classList.remove('reduced-motion');\r\n    }\r\n\r\n    // Karanl─▒k mod\r\n    if (newSettings.darkMode) {\r\n      root.classList.add('dark');\r\n    } else {\r\n      root.classList.remove('dark');\r\n    }\r\n\r\n    // B├╝y├╝k t─▒klama alanlar─▒\r\n    if (newSettings.largeClickTargets) {\r\n      root.classList.add('large-targets');\r\n    } else {\r\n      root.classList.remove('large-targets');\r\n    }\r\n\r\n    // Basitle┼ştirilmi┼ş aray├╝z\r\n    if (newSettings.simplifiedInterface) {\r\n      root.classList.add('simplified-interface');\r\n    } else {\r\n      root.classList.remove('simplified-interface');\r\n    }\r\n\r\n    // Odak g├Âstergeleri\r\n    if (newSettings.focusIndicators) {\r\n      root.classList.add('focus-indicators');\r\n    } else {\r\n      root.classList.remove('focus-indicators');\r\n    }\r\n  }, []);\r\n\r\n  // Ayar de─şi┼ştirme\r\n  const updateSetting = useCallback(\r\n    (key: keyof AccessibilitySettings, value: any) => {\r\n      setSettings((prev) => ({ ...prev, [key]: value }));\r\n      triggerHapticFeedback('light');\r\n    },\r\n    [triggerHapticFeedback],\r\n  );\r\n\r\n  // Eri┼şilebilirlik taramas─▒\r\n  const runAccessibilityScan = useCallback(async () => {\r\n    setIsScanning(true);\r\n    triggerHapticFeedback('medium');\r\n\r\n    // Sim├╝le edilmi┼ş tarama s├╝reci\r\n    const issues = await performAccessibilityChecks();\r\n\r\n    const stats: AccessibilityStats = {\r\n      totalChecks: 25,\r\n      passedChecks: 25 - issues.length,\r\n      failedChecks: issues.filter((i) => i.type === 'error').length,\r\n      warnings: issues.filter((i) => i.type === 'warning').length,\r\n      score: Math.round(((25 - issues.length) / 25) * 100),\r\n      lastScan: new Date(),\r\n      issues,\r\n    };\r\n\r\n    setScanResults(stats);\r\n    setIsScanning(false);\r\n    onScanComplete?.(stats);\r\n\r\n    // Sonu├ğlar─▒ duyur\r\n    announceToScreenReader(`Eri┼şilebilirlik taramas─▒ tamamland─▒. ${stats.score} puan al─▒nd─▒.`);\r\n  }, [onScanComplete, triggerHapticFeedback]);\r\n\r\n  // Eri┼şilebilirlik kontrolleri\r\n  const performAccessibilityChecks = async (): Promise<AccessibilityStats['issues']> => {\r\n    const issues: AccessibilityStats['issues'] = [];\r\n\r\n    // Renk kontrast─▒ kontrol├╝\r\n    const contrastIssues = checkColorContrast();\r\n    issues.push(...contrastIssues);\r\n\r\n    // Alt text kontrol├╝\r\n    const altTextIssues = checkAltText();\r\n    issues.push(...altTextIssues);\r\n\r\n    // Klavye navigasyonu kontrol├╝\r\n    const keyboardIssues = checkKeyboardNavigation();\r\n    issues.push(...keyboardIssues);\r\n\r\n    // Odak y├Ânetimi kontrol├╝\r\n    const focusIssues = checkFocusManagement();\r\n    issues.push(...focusIssues);\r\n\r\n    // ARIA etiketleri kontrol├╝\r\n    const ariaIssues = checkARIALabels();\r\n    issues.push(...ariaIssues);\r\n\r\n    return issues;\r\n  };\r\n\r\n  // Renk kontrast─▒ kontrol├╝\r\n  const checkColorContrast = (): AccessibilityStats['issues'] => {\r\n    const issues: AccessibilityStats['issues'] = [];\r\n\r\n    // Basit kontrast kontrol├╝\r\n    const textElements = document.querySelectorAll('p, h1, h2, h3, h4, h5, h6, span, a');\r\n    textElements.forEach((element, index) => {\r\n      if (index < 5) {\r\n        // ─░lk 5 element i├ğin kontrol\r\n        const styles = window.getComputedStyle(element);\r\n        const {color} = styles;\r\n        const {backgroundColor} = styles;\r\n\r\n        // Basit kontrast hesaplama (ger├ğek uygulamada daha geli┼şmi┼ş algoritma kullan─▒l─▒r)\r\n        if (color === backgroundColor) {\r\n          issues.push({\r\n            type: 'error',\r\n            category: 'contrast',\r\n            message: 'Metin ve arka plan rengi ayn─▒',\r\n            element: element.tagName,\r\n            suggestion: 'Metin ve arka plan renkleri aras─▒nda yeterli kontrast sa─şlay─▒n',\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    return issues;\r\n  };\r\n\r\n  // Alt text kontrol├╝\r\n  const checkAltText = (): AccessibilityStats['issues'] => {\r\n    const issues: AccessibilityStats['issues'] = [];\r\n\r\n    const images = document.querySelectorAll('img');\r\n    images.forEach((img, index) => {\r\n      if (index < 10) {\r\n        // ─░lk 10 resim i├ğin kontrol\r\n        const alt = img.getAttribute('alt');\r\n        if (!alt ?? alt.trim() === '') {\r\n          issues.push({\r\n            type: 'error',\r\n            category: 'alt_text',\r\n            message: 'Resim i├ğin alt text eksik',\r\n            element: 'img',\r\n            suggestion: 'T├╝m resimler i├ğin a├ğ─▒klay─▒c─▒ alt text ekleyin',\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    return issues;\r\n  };\r\n\r\n  // Klavye navigasyonu kontrol├╝\r\n  const checkKeyboardNavigation = (): AccessibilityStats['issues'] => {\r\n    const issues: AccessibilityStats['issues'] = [];\r\n\r\n    const interactiveElements = document.querySelectorAll('button, a, input, select, textarea');\r\n    interactiveElements.forEach((element, index) => {\r\n      if (index < 10) {\r\n        // ─░lk 10 element i├ğin kontrol\r\n        const tabIndex = element.getAttribute('tabindex');\r\n        if (tabIndex === '-1') {\r\n          issues.push({\r\n            type: 'warning',\r\n            category: 'keyboard',\r\n            message: 'Element klavye ile eri┼şilemiyor',\r\n            element: element.tagName,\r\n            suggestion: 'T├╝m etkile┼şimli elementlerin klavye ile eri┼şilebilir oldu─şundan emin olun',\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    return issues;\r\n  };\r\n\r\n  // Odak y├Ânetimi kontrol├╝\r\n  const checkFocusManagement = (): AccessibilityStats['issues'] => {\r\n    const issues: AccessibilityStats['issues'] = [];\r\n\r\n    // Basit odak kontrol├╝\r\n    const focusableElements = document.querySelectorAll('[tabindex]:not([tabindex=\"-1\"])');\r\n    if (focusableElements.length === 0) {\r\n      issues.push({\r\n        type: 'warning',\r\n        category: 'focus',\r\n        message: 'Sayfada odaklanabilir element bulunamad─▒',\r\n        element: 'document',\r\n        suggestion: 'Klavye navigasyonu i├ğin odaklanabilir elementler ekleyin',\r\n      });\r\n    }\r\n\r\n    return issues;\r\n  };\r\n\r\n  // ARIA etiketleri kontrol├╝\r\n  const checkARIALabels = (): AccessibilityStats['issues'] => {\r\n    const issues: AccessibilityStats['issues'] = [];\r\n\r\n    const formElements = document.querySelectorAll('input, select, textarea');\r\n    formElements.forEach((element, index) => {\r\n      if (index < 5) {\r\n        // ─░lk 5 form element i├ğin kontrol\r\n        const ariaLabel = element.getAttribute('aria-label');\r\n        const ariaLabelledBy = element.getAttribute('aria-labelledby');\r\n        const id = element.getAttribute('id');\r\n\r\n        if (!ariaLabel && !ariaLabelledBy && !id) {\r\n          issues.push({\r\n            type: 'warning',\r\n            category: 'screen_reader',\r\n            message: 'Form elementi i├ğin etiket eksik',\r\n            element: element.tagName,\r\n            suggestion: 'Form elementleri i├ğin aria-label veya aria-labelledby ekleyin',\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    return issues;\r\n  };\r\n\r\n  // Ekran okuyucu duyurusu\r\n  const announceToScreenReader = useCallback(\r\n    (message: string) => {\r\n      if (settings.screenReader) {\r\n        setAnnouncements((prev) => [...prev, message]);\r\n\r\n        // 5 saniye sonra duyuruyu kald─▒r\r\n        setTimeout(() => {\r\n          setAnnouncements((prev) => prev.slice(1));\r\n        }, 5000);\r\n      }\r\n    },\r\n    [settings.screenReader],\r\n  );\r\n\r\n  // H─▒zl─▒ eri┼şim tu┼şlar─▒\r\n  const handleQuickAccess = useCallback(\r\n    (action: string) => {\r\n      switch (action) {\r\n        case 'contrast':\r\n          updateSetting('highContrast', !settings.highContrast);\r\n          announceToScreenReader(\r\n            settings.highContrast ? 'Y├╝ksek kontrast kapat─▒ld─▒' : 'Y├╝ksek kontrast a├ğ─▒ld─▒',\r\n          );\r\n          break;\r\n        case 'font':\r\n          const newFontSize = settings.fontSize >= 3 ? 1 : settings.fontSize + 0.5;\r\n          updateSetting('fontSize', newFontSize);\r\n          announceToScreenReader(`Font boyutu ${newFontSize} olarak ayarland─▒`);\r\n          break;\r\n        case 'focus':\r\n          const firstFocusable = document.querySelector(\r\n            '[tabindex]:not([tabindex=\"-1\"]), button, a, input, select, textarea',\r\n          )!;\r\n          if (firstFocusable) {\r\n            (firstFocusable as HTMLElement).focus();\r\n            announceToScreenReader('─░lk etkile┼şimli elemente odakland─▒');\r\n          }\r\n          break;\r\n        case 'scan':\r\n          runAccessibilityScan();\r\n          break;\r\n      }\r\n    },\r\n    [settings, updateSetting, announceToScreenReader, runAccessibilityScan],\r\n  );\r\n\r\n  // Klavye k─▒sayollar─▒\r\n  useEffect(() => {\r\n    const handleKeyDown = (event: KeyboardEvent) => {\r\n      if (event.altKey) {\r\n        switch (event.key) {\r\n          case '1':\r\n            event.preventDefault();\r\n            handleQuickAccess('contrast');\r\n            break;\r\n          case '2':\r\n            event.preventDefault();\r\n            handleQuickAccess('font');\r\n            break;\r\n          case '3':\r\n            event.preventDefault();\r\n            handleQuickAccess('focus');\r\n            break;\r\n          case '4':\r\n            event.preventDefault();\r\n            handleQuickAccess('scan');\r\n            break;\r\n          case 'a':\r\n            event.preventDefault();\r\n            setShowQuickAccess(!showQuickAccess);\r\n            break;\r\n        }\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      document.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [handleQuickAccess, showQuickAccess]);\r\n\r\n  return (\r\n    <div className={`w-full max-w-6xl mx-auto ${className}`}>\r\n      {/* Ekran Okuyucu Duyurular─▒ */}\r\n      <div ref={announcementRef} className=\"sr-only\" aria-live=\"polite\" aria-atomic=\"true\">\r\n        {announcements[0]}\r\n      </div>\r\n\r\n      {/* H─▒zl─▒ Eri┼şim Butonlar─▒ */}\r\n      <AnimatePresence>\r\n        {showQuickAccess && (\r\n          <motion.div\r\n            initial={{ opacity: 0, y: -20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: -20 }}\r\n            className=\"fixed top-4 right-4 z-50\"\r\n          >\r\n            <Card className=\"shadow-xl border-0 bg-white/95 backdrop-blur-sm\">\r\n              <CardHeader className=\"pb-2\">\r\n                <CardTitle className=\"text-sm font-semibold text-gray-900\">\r\n                  H─▒zl─▒ Eri┼şim (Alt + A)\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-2\">\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={() => {\r\n                    handleQuickAccess('contrast');\r\n                  }}\r\n                  className=\"w-full justify-start gap-2\"\r\n                >\r\n                  <Contrast className=\"w-4 h-4\" />\r\n                  Kontrast (Alt+1)\r\n                </Button>\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={() => {\r\n                    handleQuickAccess('font');\r\n                  }}\r\n                  className=\"w-full justify-start gap-2\"\r\n                >\r\n                  <Type className=\"w-4 h-4\" />\r\n                  Font (Alt+2)\r\n                </Button>\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={() => {\r\n                    handleQuickAccess('focus');\r\n                  }}\r\n                  className=\"w-full justify-start gap-2\"\r\n                >\r\n                  <Focus className=\"w-4 h-4\" />\r\n                  Odak (Alt+3)\r\n                </Button>\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={() => {\r\n                    handleQuickAccess('scan');\r\n                  }}\r\n                  className=\"w-full justify-start gap-2\"\r\n                >\r\n                  <Zap className=\"w-4 h-4\" />\r\n                  Tarama (Alt+4)\r\n                </Button>\r\n              </CardContent>\r\n            </Card>\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n\r\n      <Card className=\"shadow-xl border-0 bg-white/95 backdrop-blur-sm\">\r\n        <CardHeader className=\"pb-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-3\">\r\n              <Eye className=\"w-6 h-6 text-blue-600\" />\r\n              <div>\r\n                <CardTitle className=\"text-xl font-semibold text-gray-900\">\r\n                  Eri┼şilebilirlik Merkezi\r\n                </CardTitle>\r\n                <p className=\"text-sm text-gray-600\">T├╝m kullan─▒c─▒lar i├ğin eri┼şilebilir deneyim</p>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"flex items-center gap-2\">\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={() => {\r\n                  setShowQuickAccess(!showQuickAccess);\r\n                }}\r\n                className=\"gap-2\"\r\n              >\r\n                <Zap className=\"w-4 h-4\" />\r\n                H─▒zl─▒ Eri┼şim (Alt+A)\r\n              </Button>\r\n\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={runAccessibilityScan}\r\n                disabled={isScanning}\r\n                className=\"gap-2\"\r\n              >\r\n                {isScanning ? (\r\n                  <>\r\n                    <div className=\"w-4 h-4 border-2 border-blue-600 border-t-transparent rounded-full animate-spin\" />\r\n                    Tara...\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <Zap className=\"w-4 h-4\" />\r\n                    Eri┼şilebilirlik Tara\r\n                  </>\r\n                )}\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        </CardHeader>\r\n\r\n        <CardContent className=\"p-0\">\r\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\r\n            <TabsList className=\"grid w-full grid-cols-5 mx-6 mb-4\">\r\n              <TabsTrigger value=\"visual\" className=\"flex items-center gap-2\">\r\n                <Eye className=\"w-4 h-4\" />\r\n                G├Ârsel\r\n              </TabsTrigger>\r\n              <TabsTrigger value=\"audio\" className=\"flex items-center gap-2\">\r\n                <Volume2 className=\"w-4 h-4\" />\r\n                Ses\r\n              </TabsTrigger>\r\n              <TabsTrigger value=\"motor\" className=\"flex items-center gap-2\">\r\n                <MousePointer className=\"w-4 h-4\" />\r\n                Motor\r\n              </TabsTrigger>\r\n              <TabsTrigger value=\"cognitive\" className=\"flex items-center gap-2\">\r\n                <Cpu className=\"w-4 h-4\" />\r\n                Bili┼şsel\r\n              </TabsTrigger>\r\n              <TabsTrigger value=\"results\" className=\"flex items-center gap-2\">\r\n                <Check className=\"w-4 h-4\" />\r\n                Sonu├ğlar\r\n              </TabsTrigger>\r\n            </TabsList>\r\n\r\n            <TabsContent value=\"visual\" className=\"px-6 pb-6\">\r\n              <div className=\"space-y-6\">\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                  <Card>\r\n                    <CardHeader>\r\n                      <CardTitle className=\"flex items-center gap-2\">\r\n                        <Contrast className=\"w-5 h-5 text-blue-600\" />\r\n                        G├Ârsel Ayarlar\r\n                      </CardTitle>\r\n                    </CardHeader>\r\n                    <CardContent className=\"space-y-4\">\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <div>\r\n                          <p className=\"font-medium text-gray-700\">Y├╝ksek Kontrast</p>\r\n                          <p className=\"text-sm text-gray-500\">Daha belirgin renkler</p>\r\n                        </div>\r\n                        <Switch\r\n                          checked={settings.highContrast}\r\n                          onCheckedChange={(checked) => {\r\n                            updateSetting('highContrast', checked);\r\n                          }}\r\n                        />\r\n                      </div>\r\n\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <div>\r\n                          <p className=\"font-medium text-gray-700\">Renk K├Âr├╝ Deste─şi</p>\r\n                          <p className=\"text-sm text-gray-500\">Renk k├Âr├╝ kullan─▒c─▒lar i├ğin</p>\r\n                        </div>\r\n                        <Switch\r\n                          checked={settings.colorBlindSupport}\r\n                          onCheckedChange={(checked) => {\r\n                            updateSetting('colorBlindSupport', checked);\r\n                          }}\r\n                        />\r\n                      </div>\r\n\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <div>\r\n                          <p className=\"font-medium text-gray-700\">Karanl─▒k Mod</p>\r\n                          <p className=\"text-sm text-gray-500\">G├Âz yorgunlu─şunu azalt─▒r</p>\r\n                        </div>\r\n                        <Switch\r\n                          checked={settings.darkMode}\r\n                          onCheckedChange={(checked) => {\r\n                            updateSetting('darkMode', checked);\r\n                          }}\r\n                        />\r\n                      </div>\r\n\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <div>\r\n                          <p className=\"font-medium text-gray-700\">Azalt─▒lm─▒┼ş Hareket</p>\r\n                          <p className=\"text-sm text-gray-500\">Animasyonlar─▒ azalt─▒r</p>\r\n                        </div>\r\n                        <Switch\r\n                          checked={settings.reducedMotion}\r\n                          onCheckedChange={(checked) => {\r\n                            updateSetting('reducedMotion', checked);\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n\r\n                  <Card>\r\n                    <CardHeader>\r\n                      <CardTitle className=\"flex items-center gap-2\">\r\n                        <Type className=\"w-5 h-5 text-green-600\" />\r\n                        Metin Ayarlar─▒\r\n                      </CardTitle>\r\n                    </CardHeader>\r\n                    <CardContent className=\"space-y-4\">\r\n                      <div>\r\n                        <div className=\"flex items-center justify-between mb-2\">\r\n                          <p className=\"font-medium text-gray-700\">Font Boyutu</p>\r\n                          <Badge variant=\"outline\">{settings.fontSize}x</Badge>\r\n                        </div>\r\n                        <Slider\r\n                          value={[settings.fontSize]}\r\n                          onValueChange={([value]) => {\r\n                            updateSetting('fontSize', value);\r\n                          }}\r\n                          min={1}\r\n                          max={3}\r\n                          step={0.5}\r\n                          className=\"w-full\"\r\n                        />\r\n                        <div className=\"flex justify-between text-xs text-gray-500 mt-1\">\r\n                          <span>K├╝├ğ├╝k</span>\r\n                          <span>B├╝y├╝k</span>\r\n                        </div>\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n                </div>\r\n              </div>\r\n            </TabsContent>\r\n\r\n            <TabsContent value=\"audio\" className=\"px-6 pb-6\">\r\n              <div className=\"space-y-6\">\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                  <Card>\r\n                    <CardHeader>\r\n                      <CardTitle className=\"flex items-center gap-2\">\r\n                        <Volume2 className=\"w-5 h-5 text-purple-600\" />\r\n                        Ses Ayarlar─▒\r\n                      </CardTitle>\r\n                    </CardHeader>\r\n                    <CardContent className=\"space-y-4\">\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <div>\r\n                          <p className=\"font-medium text-gray-700\">Ekran Okuyucu</p>\r\n                          <p className=\"text-sm text-gray-500\">Sesli okuma deste─şi</p>\r\n                        </div>\r\n                        <Switch\r\n                          checked={settings.screenReader}\r\n                          onCheckedChange={(checked) => {\r\n                            updateSetting('screenReader', checked);\r\n                          }}\r\n                        />\r\n                      </div>\r\n\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <div>\r\n                          <p className=\"font-medium text-gray-700\">Ses Efektleri</p>\r\n                          <p className=\"text-sm text-gray-500\">Etkile┼şim sesleri</p>\r\n                        </div>\r\n                        <Switch\r\n                          checked={settings.soundEffects}\r\n                          onCheckedChange={(checked) => {\r\n                            updateSetting('soundEffects', checked);\r\n                          }}\r\n                        />\r\n                      </div>\r\n\r\n                      <div>\r\n                        <div className=\"flex items-center justify-between mb-2\">\r\n                          <p className=\"font-medium text-gray-700\">Ses Seviyesi</p>\r\n                          <Badge variant=\"outline\">{settings.volume}%</Badge>\r\n                        </div>\r\n                        <Slider\r\n                          value={[settings.volume]}\r\n                          onValueChange={([value]) => {\r\n                            updateSetting('volume', value);\r\n                          }}\r\n                          min={0}\r\n                          max={100}\r\n                          step={10}\r\n                          className=\"w-full\"\r\n                        />\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n                </div>\r\n              </div>\r\n            </TabsContent>\r\n\r\n            <TabsContent value=\"motor\" className=\"px-6 pb-6\">\r\n              <div className=\"space-y-6\">\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                  <Card>\r\n                    <CardHeader>\r\n                      <CardTitle className=\"flex items-center gap-2\">\r\n                        <MousePointer className=\"w-5 h-5 text-orange-600\" />\r\n                        Motor Ayarlar─▒\r\n                      </CardTitle>\r\n                    </CardHeader>\r\n                    <CardContent className=\"space-y-4\">\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <div>\r\n                          <p className=\"font-medium text-gray-700\">Klavye Navigasyonu</p>\r\n                          <p className=\"text-sm text-gray-500\">Tab ile gezinme</p>\r\n                        </div>\r\n                        <Switch\r\n                          checked={settings.keyboardNavigation}\r\n                          onCheckedChange={(checked) => {\r\n                            updateSetting('keyboardNavigation', checked);\r\n                          }}\r\n                        />\r\n                      </div>\r\n\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <div>\r\n                          <p className=\"font-medium text-gray-700\">B├╝y├╝k T─▒klama Alanlar─▒</p>\r\n                          <p className=\"text-sm text-gray-500\">Daha kolay t─▒klama</p>\r\n                        </div>\r\n                        <Switch\r\n                          checked={settings.largeClickTargets}\r\n                          onCheckedChange={(checked) => {\r\n                            updateSetting('largeClickTargets', checked);\r\n                          }}\r\n                        />\r\n                      </div>\r\n\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <div>\r\n                          <p className=\"font-medium text-gray-700\">Yap─▒┼şkan Tu┼şlar</p>\r\n                          <p className=\"text-sm text-gray-500\">Modifier tu┼şlar─▒ kilitle</p>\r\n                        </div>\r\n                        <Switch\r\n                          checked={settings.stickyKeys}\r\n                          onCheckedChange={(checked) => {\r\n                            updateSetting('stickyKeys', checked);\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n                </div>\r\n              </div>\r\n            </TabsContent>\r\n\r\n            <TabsContent value=\"cognitive\" className=\"px-6 pb-6\">\r\n              <div className=\"space-y-6\">\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                  <Card>\r\n                    <CardHeader>\r\n                      <CardTitle className=\"flex items-center gap-2\">\r\n                        <Cpu className=\"w-5 h-5 text-indigo-600\" />\r\n                        Bili┼şsel Ayarlar\r\n                      </CardTitle>\r\n                    </CardHeader>\r\n                    <CardContent className=\"space-y-4\">\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <div>\r\n                          <p className=\"font-medium text-gray-700\">Basitle┼ştirilmi┼ş Aray├╝z</p>\r\n                          <p className=\"text-sm text-gray-500\">Daha az karma┼ş─▒k</p>\r\n                        </div>\r\n                        <Switch\r\n                          checked={settings.simplifiedInterface}\r\n                          onCheckedChange={(checked) => {\r\n                            updateSetting('simplifiedInterface', checked);\r\n                          }}\r\n                        />\r\n                      </div>\r\n\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <div>\r\n                          <p className=\"font-medium text-gray-700\">Okuma Yard─▒m─▒</p>\r\n                          <p className=\"text-sm text-gray-500\">Metin a├ğ─▒klamalar─▒</p>\r\n                        </div>\r\n                        <Switch\r\n                          checked={settings.readingAssistance}\r\n                          onCheckedChange={(checked) => {\r\n                            updateSetting('readingAssistance', checked);\r\n                          }}\r\n                        />\r\n                      </div>\r\n\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <div>\r\n                          <p className=\"font-medium text-gray-700\">Odak G├Âstergeleri</p>\r\n                          <p className=\"text-sm text-gray-500\">Aktif element vurgusu</p>\r\n                        </div>\r\n                        <Switch\r\n                          checked={settings.focusIndicators}\r\n                          onCheckedChange={(checked) => {\r\n                            updateSetting('focusIndicators', checked);\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    </CardContent>\r\n                  </Card>\r\n                </div>\r\n              </div>\r\n            </TabsContent>\r\n\r\n            <TabsContent value=\"results\" className=\"px-6 pb-6\">\r\n              <div className=\"space-y-6\">\r\n                {scanResults ? (\r\n                  <>\r\n                    <Card>\r\n                      <CardHeader>\r\n                        <CardTitle className=\"flex items-center gap-2\">\r\n                          <Check className=\"w-5 h-5 text-green-600\" />\r\n                          Tarama Sonu├ğlar─▒\r\n                        </CardTitle>\r\n                      </CardHeader>\r\n                      <CardContent>\r\n                        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 mb-6\">\r\n                          <div className=\"text-center p-4 bg-green-50 rounded-lg\">\r\n                            <p className=\"text-2xl font-bold text-green-600\">{scanResults.score}</p>\r\n                            <p className=\"text-sm text-gray-600\">Eri┼şilebilirlik Skoru</p>\r\n                          </div>\r\n                          <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\r\n                            <p className=\"text-2xl font-bold text-blue-600\">\r\n                              {scanResults.passedChecks}\r\n                            </p>\r\n                            <p className=\"text-sm text-gray-600\">Ge├ğen Kontrol</p>\r\n                          </div>\r\n                          <div className=\"text-center p-4 bg-red-50 rounded-lg\">\r\n                            <p className=\"text-2xl font-bold text-red-600\">\r\n                              {scanResults.failedChecks}\r\n                            </p>\r\n                            <p className=\"text-sm text-gray-600\">Ba┼şar─▒s─▒z Kontrol</p>\r\n                          </div>\r\n                          <div className=\"text-center p-4 bg-yellow-50 rounded-lg\">\r\n                            <p className=\"text-2xl font-bold text-yellow-600\">\r\n                              {scanResults.warnings}\r\n                            </p>\r\n                            <p className=\"text-sm text-gray-600\">Uyar─▒</p>\r\n                          </div>\r\n                        </div>\r\n\r\n                        <div className=\"space-y-3\">\r\n                          <h4 className=\"font-semibold text-gray-900\">Tespit Edilen Sorunlar</h4>\r\n                          {scanResults.issues.length > 0 ? (\r\n                            scanResults.issues.map((issue, index) => (\r\n                              <div\r\n                                key={index}\r\n                                className={`p-3 rounded-lg border ${\r\n                                  issue.type === 'error'\r\n                                    ? 'bg-red-50 border-red-200'\r\n                                    : issue.type === 'warning'\r\n                                      ? 'bg-yellow-50 border-yellow-200'\r\n                                      : 'bg-blue-50 border-blue-200'\r\n                                }`}\r\n                              >\r\n                                <div className=\"flex items-start gap-3\">\r\n                                  {issue.type === 'error' ? (\r\n                                    <X className=\"w-5 h-5 text-red-600 mt-0.5\" />\r\n                                  ) : issue.type === 'warning' ? (\r\n                                    <AlertTriangle className=\"w-5 h-5 text-yellow-600 mt-0.5\" />\r\n                                  ) : (\r\n                                    <Info className=\"w-5 h-5 text-blue-600 mt-0.5\" />\r\n                                  )}\r\n                                  <div className=\"flex-1\">\r\n                                    <p className=\"font-medium text-gray-900\">{issue.message}</p>\r\n                                    <p className=\"text-sm text-gray-600 mt-1\">{issue.suggestion}</p>\r\n                                    <div className=\"flex items-center gap-2 mt-2\">\r\n                                      <Badge variant=\"outline\" className=\"text-xs\">\r\n                                        {issue.category}\r\n                                      </Badge>\r\n                                      {issue.element && (\r\n                                        <Badge variant=\"secondary\" className=\"text-xs\">\r\n                                          {issue.element}\r\n                                        </Badge>\r\n                                      )}\r\n                                    </div>\r\n                                  </div>\r\n                                </div>\r\n                              </div>\r\n                            ))\r\n                          ) : (\r\n                            <div className=\"text-center py-8\">\r\n                              <Check className=\"w-12 h-12 text-green-600 mx-auto mb-4\" />\r\n                              <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\r\n                                Harika! Hi├ğ sorun bulunamad─▒\r\n                              </h3>\r\n                              <p className=\"text-gray-500\">\r\n                                Sayfa eri┼şilebilirlik standartlar─▒na uygun\r\n                              </p>\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </CardContent>\r\n                    </Card>\r\n                  </>\r\n                ) : (\r\n                  <div className=\"text-center py-12\">\r\n                    <Zap className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\r\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\r\n                      Hen├╝z Tarama Yap─▒lmad─▒\r\n                    </h3>\r\n                    <p className=\"text-gray-500 mb-4\">\r\n                      Eri┼şilebilirlik sorunlar─▒n─▒ tespit etmek i├ğin tarama yap─▒n\r\n                    </p>\r\n                    <Button onClick={runAccessibilityScan} disabled={isScanning}>\r\n                      {isScanning ? 'Taran─▒yor...' : 'Tarama Ba┼şlat'}\r\n                    </Button>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </TabsContent>\r\n          </Tabs>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AccessibilityEnhancements;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\analytics\\AdvancedAnalyticsDashboard.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_onNavigate' is defined but never used.","line":134,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":134,"endColumn":26,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\app\\AppNavigation.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":11,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":11,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":12,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":12,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[298,301],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[298,301],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[398,401],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[398,401],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":190,"column":16,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":190,"endColumn":39},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":198,"column":16,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":198,"endColumn":39},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":206,"column":16,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":206,"endColumn":37},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":214,"column":16,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":214,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":257,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":257,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7396,7399],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7396,7399],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":258,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":258,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7428,7431],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7428,7431],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":265,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":265,"endColumn":73},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":415,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":415,"endColumn":31},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":416,"column":24,"nodeType":"MemberExpression","endLine":416,"endColumn":52},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":418,"column":7,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":418,"endColumn":20},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":426,"column":25,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":426,"endColumn":53},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":426,"column":25,"nodeType":"MemberExpression","endLine":426,"endColumn":53},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":427,"column":12,"nodeType":"MemberExpression","endLine":427,"endColumn":40},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":431,"column":7,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":431,"endColumn":27}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview AppNavigation Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport React from 'react';\r\n\r\n// Lazy loaded page components with better organization\r\nexport const createLazyComponent = (\r\n  importFn: () => Promise<{ default: any }>,\r\n  displayName: string,\r\n) => {\r\n  const Component = React.lazy(importFn);\r\n  (Component as any).displayName = displayName;\r\n  return Component;\r\n};\r\n\r\n// Dashboard removed - using EnhancedDashboard\r\n\r\n// AI Assistant removed\r\n\r\n// Aid Management (Yard─▒m) Module - Enhanced version\r\nexport const BeneficiariesPage = createLazyComponent(\r\n  () =>\r\n    import('../pages/BeneficiariesPageEnhanced').then((m) => ({\r\n      default: m.BeneficiariesPageEnhanced,\r\n    })),\r\n  'BeneficiariesPage',\r\n);\r\n\r\nexport const BeneficiaryDetailPageComprehensive = createLazyComponent(\r\n  () =>\r\n    import('../pages/BeneficiaryDetailPageComprehensive').then((m) => ({\r\n      default: m.BeneficiaryDetailPageComprehensive,\r\n    })),\r\n  'BeneficiaryDetailPageComprehensive',\r\n);\r\n\r\nexport const AidApplicationsPage = createLazyComponent(\r\n  () => import('../pages/AidApplicationsPage').then((m) => ({ default: m.AidApplicationsPage })),\r\n  'AidApplicationsPage',\r\n);\r\n\r\nexport const AllAidListPage = createLazyComponent(\r\n  () => import('../pages/AllAidListPage').then((m) => ({ default: m.AllAidListPage })),\r\n  'AllAidListPage',\r\n);\r\n\r\nexport const CashAidVaultPage = createLazyComponent(\r\n  () => import('../pages/CashAidVaultPage').then((m) => ({ default: m.CashAidVaultPage })),\r\n  'CashAidVaultPage',\r\n);\r\n\r\nexport const BankPaymentOrdersPage = createLazyComponent(\r\n  () =>\r\n    import('../pages/BankPaymentOrdersPage').then((m) => ({ default: m.BankPaymentOrdersPage })),\r\n  'BankPaymentOrdersPage',\r\n);\r\n\r\nexport const CashAidTransactionsPage = createLazyComponent(\r\n  () =>\r\n    import('../pages/CashAidTransactionsPage').then((m) => ({\r\n      default: m.CashAidTransactionsPage,\r\n    })),\r\n  'CashAidTransactionsPage',\r\n);\r\n\r\nexport const InKindAidTransactionsPage = createLazyComponent(\r\n  () =>\r\n    import('../pages/InKindAidTransactionsPage').then((m) => ({\r\n      default: m.InKindAidTransactionsPage,\r\n    })),\r\n  'InKindAidTransactionsPage',\r\n);\r\n\r\nexport const ServiceTrackingPage = createLazyComponent(\r\n  () => import('../pages/ServiceTrackingPage').then((m) => ({ default: m.ServiceTrackingPage })),\r\n  'ServiceTrackingPage',\r\n);\r\n\r\nexport const HospitalReferralPage = createLazyComponent(\r\n  () => import('../pages/HospitalReferralPage').then((m) => ({ default: m.HospitalReferralPage })),\r\n  'HospitalReferralPage',\r\n);\r\n\r\nexport const ApplicationWorkflowPage = createLazyComponent(\r\n  () => import('../pages/ApplicationWorkflowPage'),\r\n  'ApplicationWorkflowPage',\r\n);\r\n\r\nexport const DocumentManagementPage = createLazyComponent(\r\n  () => import('../pages/DocumentManagementPage'),\r\n  'DocumentManagementPage',\r\n);\r\n\r\nexport const InventoryManagementPage = createLazyComponent(\r\n  () => import('../pages/InventoryManagementPage'),\r\n  'InventoryManagementPage',\r\n);\r\n\r\nexport const AppointmentSchedulingPage = createLazyComponent(\r\n  () => import('../pages/AppointmentSchedulingPage'),\r\n  'AppointmentSchedulingPage',\r\n);\r\n\r\nexport const CaseManagementPage = createLazyComponent(\r\n  () => import('../pages/CaseManagementPage'),\r\n  'CaseManagementPage',\r\n);\r\n\r\nexport const DistributionTrackingPage = createLazyComponent(\r\n  () => import('../pages/DistributionTrackingPage'),\r\n  'DistributionTrackingPage',\r\n);\r\n\r\n// Donations (Ba─ş─▒┼ş) Module\r\nexport const DonationsPage = createLazyComponent(\r\n  () => import('../pages/DonationsPage').then((m) => ({ default: m.DonationsPage })),\r\n  'DonationsPage',\r\n);\r\n\r\nexport const KumbaraPage = createLazyComponent(\r\n  () => import('../pages/KumbaraPage').then((m) => ({ default: m.KumbaraPage })),\r\n  'KumbaraPage',\r\n);\r\n\r\n// DonationReportsPage removed\r\n\r\n// Members (├£ye) Module\r\nexport const MembersPage = createLazyComponent(\r\n  () => import('../pages/MembersPage').then((m) => ({ default: m.MembersPage })),\r\n  'MembersPage',\r\n);\r\n\r\nexport const MembershipFeesPage = createLazyComponent(\r\n  () => import('../pages/MembershipFeesPage').then((m) => ({ default: m.MembershipFeesPage })),\r\n  'MembershipFeesPage',\r\n);\r\n\r\nexport const NewMemberPage = createLazyComponent(\r\n  () => import('../pages/NewMemberPage').then((m) => ({ default: m.NewMemberPage })),\r\n  'NewMemberPage',\r\n);\r\n\r\n// Scholarship (Burs) Module\r\nexport const BursStudentsPage = createLazyComponent(\r\n  () => import('../pages/BursStudentsPage').then((m) => ({ default: m.BursStudentsPage })),\r\n  'BursStudentsPage',\r\n);\r\n\r\nexport const BursApplicationsPage = createLazyComponent(\r\n  () => import('../pages/BursApplicationsPage').then((m) => ({ default: m.BursApplicationsPage })),\r\n  'BursApplicationsPage',\r\n);\r\n\r\n// Finance (Fon) Module\r\nexport const FinanceIncomePage = createLazyComponent(\r\n  () => import('../pages/FinanceIncomePage').then((m) => ({ default: m.FinanceIncomePage })),\r\n  'FinanceIncomePage',\r\n);\r\n\r\n// FinanceReportsPage removed\r\n\r\n// Communication (Mesaj) Module\r\n\r\nexport const InternalMessagingPage = createLazyComponent(\r\n  () =>\r\n    import('../pages/InternalMessagingPage').then((m) => ({ default: m.InternalMessagingPage })),\r\n  'InternalMessagingPage',\r\n);\r\n\r\n// Work/Events (─░┼ş) Module\r\nexport const EventsPage = createLazyComponent(\r\n  () => import('../pages/EventsPage').then((m) => ({ default: m.EventsPage })),\r\n  'EventsPage',\r\n);\r\n\r\n// MeetingsPage removed\r\n// TasksPage removed\r\n\r\n// Partners Module\r\n// Partner pages removed\r\n\r\n// Legal (Hukuki) Module\r\nexport const LegalConsultationPage = createLazyComponent(\r\n  () =>\r\n    import('../pages/LegalConsultationPage').then((m) => ({\r\n      default: m.LegalConsultationPage ?? m.default,\r\n    })),\r\n  'LegalConsultationPage',\r\n);\r\n\r\nexport const LawyerAssignmentsPage = createLazyComponent(\r\n  () =>\r\n    import('../pages/LawyerAssignmentsPage').then((m) => ({\r\n      default: m.LawyerAssignmentsPage ?? m.default,\r\n    })),\r\n  'LawyerAssignmentsPage',\r\n);\r\n\r\nexport const LawsuitTrackingPage = createLazyComponent(\r\n  () =>\r\n    import('../pages/LawsuitTrackingPage').then((m) => ({\r\n      default: m.LawsuitTrackingPage ?? m.default,\r\n    })),\r\n  'LawsuitTrackingPage',\r\n);\r\n\r\nexport const LegalDocumentsPage = createLazyComponent(\r\n  () =>\r\n    import('../pages/LegalDocumentsPage').then((m) => ({\r\n      default: m.LegalDocumentsPage ?? m.default,\r\n    })),\r\n  'LegalDocumentsPage',\r\n);\r\n\r\n// LegalReportsPage removed\r\n\r\n\r\n// System Management Module\r\nexport const ProfilePage = createLazyComponent(\r\n  () => import('../pages/ProfilePage').then((m) => ({ default: m.ProfilePage })),\r\n  'ProfilePage',\r\n);\r\n\r\n// SystemSettingsPage removed\r\n\r\nexport const UserManagementPage = createLazyComponent(\r\n  () =>\r\n    import('../pages/UserManagementPageReal').then((m) => ({ default: m.UserManagementPageReal })),\r\n  'UserManagementPage',\r\n);\r\n\r\n// Data Management\r\n\r\n// Demo components removed\r\n\r\n// Enhanced Dashboard\r\nexport const EnhancedDashboard = createLazyComponent(\r\n  () => import('../ui/EnhancedDashboard'),\r\n  'EnhancedDashboard',\r\n);\r\n\r\n// Reporting & Analytics Module - Removed (components deleted)\r\n\r\n/**\r\n * Navigation Configuration\r\n */\r\n/**\r\n * RouteConfig Interface\r\n * \r\n * @interface RouteConfig\r\n */\r\nexport interface RouteConfig {\r\n  component: React.LazyExoticComponent<any>;\r\n  props?: Record<string, any>;\r\n  skeletonVariant?: 'detail' | 'table' | 'form' | 'dashboard';\r\n}\r\n\r\n/**\r\n * Route Registry - Centralized route management\r\n */\r\nexport const ROUTE_REGISTRY: Record<string, Record<string, RouteConfig>> = {\r\n  // AI Assistant Module removed\r\n\r\n  // Aid Management Module\r\n  yardim: {\r\n    '/yardim/ihtiyac-sahipleri': {\r\n      component: BeneficiariesPage,\r\n      skeletonVariant: 'table',\r\n      props: {},\r\n    },\r\n    '/yardim/basvurular': {\r\n      component: AidApplicationsPage,\r\n      skeletonVariant: 'table',\r\n    },\r\n    '/yardim/liste': {\r\n      component: AllAidListPage,\r\n      skeletonVariant: 'table',\r\n    },\r\n    '/yardim/nakdi-vezne': {\r\n      component: CashAidVaultPage,\r\n      skeletonVariant: 'table',\r\n    },\r\n    '/yardim/banka-odeme': {\r\n      component: BankPaymentOrdersPage,\r\n      skeletonVariant: 'table',\r\n    },\r\n    '/yardim/nakdi-islemler': {\r\n      component: CashAidTransactionsPage,\r\n      skeletonVariant: 'table',\r\n    },\r\n    '/yardim/ayni-islemler': {\r\n      component: InKindAidTransactionsPage,\r\n      skeletonVariant: 'table',\r\n    },\r\n    '/yardim/hizmet-takip': {\r\n      component: ServiceTrackingPage,\r\n      skeletonVariant: 'table',\r\n    },\r\n    '/yardim/hastane-sevk': {\r\n      component: HospitalReferralPage,\r\n      skeletonVariant: 'form',\r\n    },\r\n    '/yardim/surecler': {\r\n      component: ApplicationWorkflowPage,\r\n      skeletonVariant: 'dashboard',\r\n    },\r\n    '/yardim/belgeler': {\r\n      component: DocumentManagementPage,\r\n      skeletonVariant: 'table',\r\n    },\r\n    '/yardim/envanter': {\r\n      component: InventoryManagementPage,\r\n      skeletonVariant: 'table',\r\n    },\r\n    '/yardim/randevular': {\r\n      component: AppointmentSchedulingPage,\r\n      skeletonVariant: 'table',\r\n    },\r\n    '/yardim/vaka-yonetimi': {\r\n      component: CaseManagementPage,\r\n      skeletonVariant: 'dashboard',\r\n    },\r\n    '/yardim/dagitim-takip': {\r\n      component: DistributionTrackingPage,\r\n      skeletonVariant: 'table',\r\n    },\r\n    default: {\r\n      component: BeneficiariesPage,\r\n      skeletonVariant: 'table',\r\n      props: {},\r\n    },\r\n  },\r\n\r\n  // Other modules\r\n  genel: {\r\n    default: {\r\n      component: EnhancedDashboard,\r\n      skeletonVariant: 'dashboard',\r\n      props: {},\r\n    },\r\n  },\r\n\r\n  bagis: {\r\n    '/bagis/kumbara': { component: KumbaraPage, skeletonVariant: 'dashboard' },\r\n    default: { component: DonationsPage, skeletonVariant: 'table' },\r\n  },\r\n\r\n  uye: {\r\n    '/uye/aidat': { component: MembershipFeesPage, skeletonVariant: 'table' },\r\n    '/uye/yeni': { component: NewMemberPage, skeletonVariant: 'form' },\r\n    default: { component: MembersPage, skeletonVariant: 'table' },\r\n  },\r\n\r\n  burs: {\r\n    '/burs/ogrenciler': { component: BursStudentsPage, skeletonVariant: 'table' },\r\n    '/burs/basvurular': { component: BursApplicationsPage, skeletonVariant: 'table' },\r\n    default: { component: BursStudentsPage, skeletonVariant: 'table' },\r\n  },\r\n\r\n  fon: {\r\n    '/fon/gelir-gider': { component: FinanceIncomePage, skeletonVariant: 'dashboard' },\r\n    default: { component: FinanceIncomePage, skeletonVariant: 'dashboard' },\r\n  },\r\n\r\n  mesaj: {\r\n    '/mesaj/kurum-ici': { component: InternalMessagingPage, skeletonVariant: 'dashboard' },\r\n    default: { component: InternalMessagingPage, skeletonVariant: 'dashboard' },\r\n  },\r\n\r\n  is: {\r\n    '/is/etkinlikler': { component: EventsPage, skeletonVariant: 'table' },\r\n    default: { component: EventsPage, skeletonVariant: 'table' },\r\n  },\r\n\r\n  // Partner module removed\r\n\r\n  hukuki: {\r\n    '/hukuki/danismanlik': { component: LegalConsultationPage, skeletonVariant: 'dashboard' },\r\n    '/hukuki/avukatlar': { component: LawyerAssignmentsPage, skeletonVariant: 'table' },\r\n    '/hukuki/davalar': { component: LawsuitTrackingPage, skeletonVariant: 'table' },\r\n    '/hukuki/belgeler': { component: LegalDocumentsPage, skeletonVariant: 'table' },\r\n    default: { component: LegalConsultationPage, skeletonVariant: 'dashboard' },\r\n  },\r\n\r\n  // Reporting & Analytics Module - Removed (components deleted)\r\n\r\n  // System pages\r\n  profile: {\r\n    default: { component: ProfilePage, skeletonVariant: 'detail' },\r\n  },\r\n\r\n  // Settings module removed\r\n\r\n  'user-management': {\r\n    default: { component: UserManagementPage, skeletonVariant: 'table' },\r\n  },\r\n\r\n\r\n  // Demo routes removed\r\n};\r\n\r\n/**\r\n * Get route configuration for current navigation state\r\n */\r\n/**\r\n * getRouteConfig function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function getRouteConfig(activeModule: string, currentSubPage?: string): RouteConfig {\r\n  const moduleRoutes = ROUTE_REGISTRY[activeModule];\r\n\r\n  if (!moduleRoutes) {\r\n    return {\r\n      component: EnhancedDashboard,\r\n      skeletonVariant: 'dashboard',\r\n    };\r\n  }\r\n\r\n  // First try to find exact sub-page match\r\n  if (currentSubPage && moduleRoutes[currentSubPage]) {\r\n    return moduleRoutes[currentSubPage];\r\n  }\r\n\r\n  // Fallback to default for module\r\n  if (moduleRoutes.default) {\r\n    return moduleRoutes.default;\r\n  }\r\n\r\n  // Final fallback\r\n  return {\r\n    component: EnhancedDashboard,\r\n    skeletonVariant: 'dashboard',\r\n  };\r\n}\r\n\r\nexport default {\r\n  ROUTE_REGISTRY,\r\n  getRouteConfig,\r\n  createLazyComponent,\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\app\\NavigationManager.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":58,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":58,"endColumn":30},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'navigationState.activeModule'. Either exclude it or remove the dependency array.","line":123,"column":5,"nodeType":"ArrayExpression","endLine":123,"endColumn":53,"suggestions":[{"desc":"Update the dependencies array to be: [updatePreference]","fix":{"range":[3728,3776],"text":"[updatePreference]"}}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview NavigationManager Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport React, { createContext, useCallback, useContext, useEffect, useMemo, useState } from 'react';\r\nimport { useUserPreferences } from '../../hooks/useLocalStorage';\r\n// import { useUXAnalytics } from '../../components/ux/hooks/useUXAnalytics';\r\nimport monitoringService from '../../services/monitoringService';\r\n\r\n/**\r\n * NavigationState Interface\r\n * \r\n * @interface NavigationState\r\n */\r\nexport interface NavigationState {\r\n  activeModule: string;\r\n  currentPage: string;\r\n  currentSubPage: string;\r\n  loading: boolean;\r\n  selectedBeneficiaryId: string | null;\r\n}\r\n\r\n/**\r\n * NavigationActions Interface\r\n * \r\n * @interface NavigationActions\r\n */\r\nexport interface NavigationActions {\r\n  setActiveModule: (moduleId: string) => void;\r\n  setCurrentPage: (page: string) => void;\r\n  setCurrentSubPage: (subPage: string) => void;\r\n  setLoading: (isLoading: boolean) => void;\r\n  setSelectedBeneficiaryId: (id: string | null) => void;\r\n  navigateToBeneficiaryDetail: (beneficiaryId: string | number) => void;\r\n  backToBeneficiariesList: () => void;\r\n  subPageChange: (href: string) => void;\r\n  moduleChange: (moduleId: string) => void;\r\n  navigateToProfile: () => void;\r\n  navigateToSettings: () => void;\r\n  backToMain: () => void;\r\n  navigateToUserManagement: () => void;\r\n  // Demo navigation functions removed\r\n}\r\n\r\ninterface NavigationContextType extends NavigationState, NavigationActions { }\r\n\r\nconst NavigationContext = createContext<NavigationContextType | undefined>(undefined);\r\n\r\n/**\r\n * useNavigation function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useNavigation() {\r\n  const context = useContext(NavigationContext);\r\n  if (!context) {\r\n    throw new Error('useNavigation must be used within a NavigationProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\ninterface NavigationProviderProps {\r\n  children: React.ReactNode;\r\n  initialModule?: string;\r\n  initialPage?: string;\r\n  initialSubPage?: string;\r\n}\r\n\r\n/**\r\n * NavigationProvider function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function NavigationProvider({\r\n  children,\r\n  initialModule = 'genel',\r\n  initialPage = 'list',\r\n  initialSubPage = '',\r\n}: NavigationProviderProps) {\r\n  // const { trackNavigation } = useUXAnalytics();\r\n  const { preferences, updatePreference } = useUserPreferences();\r\n\r\n  // Navigation state\r\n  const [navigationState, setNavigationState] = useState<NavigationState>({\r\n    activeModule: initialModule,\r\n    currentPage: initialPage,\r\n    currentSubPage: initialSubPage,\r\n    loading: false,\r\n    selectedBeneficiaryId: null,\r\n  });\r\n\r\n  // Initialize from preferences\r\n  useEffect(() => {\r\n    const savedModule = preferences.lastModule;\r\n    if (savedModule && savedModule !== navigationState.activeModule) {\r\n      setNavigationState((prev) => ({\r\n        ...prev,\r\n        activeModule: savedModule,\r\n      }));\r\n    }\r\n  }, [preferences.lastModule, navigationState.activeModule]);\r\n\r\n  // Navigation actions\r\n  const setActiveModule = useCallback(\r\n    (moduleId: string) => {\r\n      // trackNavigation(navigationState.activeModule, moduleId, 'sidebar');\r\n      setNavigationState((prev) => ({\r\n        ...prev,\r\n        activeModule: moduleId,\r\n        currentPage: 'list',\r\n        currentSubPage: '',\r\n        loading: false,\r\n        selectedBeneficiaryId: null, // Reset selected beneficiary on module change\r\n      }));\r\n      monitoringService.trackFeatureUsage('navigation', 'module_change', { moduleId });\r\n      updatePreference('lastModule', moduleId);\r\n    },\r\n    [navigationState.activeModule, updatePreference],\r\n  );\r\n\r\n  const setCurrentPage = useCallback(\r\n    (page: string) => {\r\n      setNavigationState((prev) => ({\r\n        ...prev,\r\n        currentPage: page,\r\n        loading: false,\r\n      }));\r\n    },\r\n    [],\r\n  );\r\n\r\n  const setCurrentSubPage = useCallback(\r\n    (subPage: string) => {\r\n      setNavigationState((prev) => ({\r\n        ...prev,\r\n        currentSubPage: subPage,\r\n        loading: false,\r\n      }));\r\n    },\r\n    [],\r\n  );\r\n\r\n  const setLoading = useCallback((isLoading: boolean) => {\r\n    setNavigationState((prev) => ({ ...prev, loading: isLoading }));\r\n  }, []);\r\n\r\n  const setSelectedBeneficiaryId = useCallback((id: string | null) => {\r\n    setNavigationState((prev) => ({ ...prev, selectedBeneficiaryId: id }));\r\n  }, []);\r\n\r\n  // Complex navigation actions\r\n  const navigateToBeneficiaryDetail = useCallback(\r\n    (beneficiaryId: string | number) => {\r\n      const id = typeof beneficiaryId === 'number' ? beneficiaryId.toString() : beneficiaryId;\r\n      setSelectedBeneficiaryId(id);\r\n      setCurrentPage('detail');\r\n    },\r\n    [setSelectedBeneficiaryId, setCurrentPage],\r\n  );\r\n\r\n  const backToBeneficiariesList = useCallback(() => {\r\n    setCurrentPage('list');\r\n    setSelectedBeneficiaryId(null);\r\n  }, [setCurrentPage, setSelectedBeneficiaryId]);\r\n\r\n  const subPageChange = useCallback(\r\n    (href: string) => {\r\n      setCurrentSubPage(href);\r\n    },\r\n    [setCurrentSubPage],\r\n  );\r\n\r\n  const moduleChange = useCallback(\r\n    (moduleId: string) => {\r\n      setActiveModule(moduleId);\r\n    },\r\n    [setActiveModule],\r\n  );\r\n\r\n  const navigateToProfile = useCallback(() => {\r\n    setNavigationState({\r\n      activeModule: 'profile',\r\n      currentPage: 'profile',\r\n      currentSubPage: '',\r\n      loading: false,\r\n      selectedBeneficiaryId: null,\r\n    });\r\n  }, []);\r\n\r\n  const navigateToSettings = useCallback(() => {\r\n    setNavigationState({\r\n      activeModule: 'settings',\r\n      currentPage: 'settings',\r\n      currentSubPage: '',\r\n      loading: false,\r\n      selectedBeneficiaryId: null,\r\n    });\r\n  }, []);\r\n\r\n  const backToMain = useCallback(() => {\r\n    setCurrentPage('list');\r\n    setActiveModule('genel');\r\n  }, [setCurrentPage, setActiveModule]);\r\n\r\n  const navigateToUserManagement = useCallback(() => {\r\n    setCurrentPage('user-management');\r\n    setActiveModule('user-management');\r\n  }, [setCurrentPage, setActiveModule]);\r\n\r\n  // Demo navigation functions removed\r\n\r\n  // Memoized context value\r\n  const contextValue = useMemo(\r\n    () => ({\r\n      // State\r\n      ...navigationState,\r\n\r\n      // Basic actions\r\n      setActiveModule,\r\n      setCurrentPage,\r\n      setCurrentSubPage,\r\n      setLoading,\r\n      setSelectedBeneficiaryId,\r\n\r\n      // Complex actions\r\n      navigateToBeneficiaryDetail,\r\n      backToBeneficiariesList,\r\n      subPageChange,\r\n      moduleChange,\r\n      navigateToProfile,\r\n      navigateToSettings,\r\n      backToMain,\r\n      navigateToUserManagement,\r\n      // Demo navigation functions removed\r\n    }),\r\n    [\r\n      navigationState,\r\n      setActiveModule,\r\n      setCurrentPage,\r\n      setCurrentSubPage,\r\n      setLoading,\r\n      setSelectedBeneficiaryId,\r\n      navigateToBeneficiaryDetail,\r\n      backToBeneficiariesList,\r\n      subPageChange,\r\n      moduleChange,\r\n      navigateToProfile,\r\n      navigateToSettings,\r\n      backToMain,\r\n      navigateToUserManagement,\r\n      // Demo navigation functions removed\r\n    ],\r\n  );\r\n\r\n  return React.createElement(NavigationContext.Provider, { value: contextValue }, children);\r\n\r\n}\r\n\r\nexport default NavigationProvider;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\app\\PageRenderer.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1419,1422],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1419,1422],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":53,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":53,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1439,1442],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1439,1442],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":72,"column":9,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":72,"endColumn":63},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":75,"column":80,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":75,"endColumn":82,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2374,2376],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview PageRenderer Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport React, { lazy, Suspense, useMemo } from 'react';\r\nimport { PageTransition } from '../AnimatedContainer';\r\nimport { SkeletonLoader } from '../LoadingSpinner';\r\nimport { getRouteConfig } from './AppNavigation';\r\nimport { useNavigation } from './NavigationManager';\r\n\r\n// Lazy load large components for better performance\r\nconst BeneficiaryDetailPageComprehensive = lazy(\r\n  () => import('../pages/BeneficiaryDetailPageComprehensive'),\r\n);\r\n\r\n// Demo components removed\r\n\r\n// MeetingsPage removed\r\n\r\n// AI Assistant page removed\r\n\r\ninterface PageRendererProps {\r\n  onQuickAction?: (actionId: string) => void;\r\n}\r\n\r\n/**\r\n * PageRenderer function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function PageRenderer({ onQuickAction }: PageRendererProps) {\r\n  const {\r\n    activeModule,\r\n    currentPage,\r\n    currentSubPage,\r\n    selectedBeneficiaryId,\r\n    navigateToBeneficiaryDetail,\r\n    backToBeneficiariesList,\r\n    moduleChange,\r\n  } = useNavigation();\r\n\r\n  const renderCurrentPage = useMemo(() => {\r\n    const getSkeletonFallback = (variant: 'detail' | 'table' | 'form' | 'dashboard') => (\r\n      <SkeletonLoader variant={variant} />\r\n    );\r\n\r\n    const renderPageWithTransition = (\r\n      PageComponent: React.ComponentType<any>,\r\n      props: any = {},\r\n      skeletonVariant: 'detail' | 'table' | 'form' | 'dashboard' = 'detail',\r\n    ) => (\r\n      <Suspense fallback={getSkeletonFallback(skeletonVariant)}>\r\n        <PageTransition>\r\n          <PageComponent {...props} />\r\n        </PageTransition>\r\n      </Suspense>\r\n    );\r\n\r\n    // Special pages first (system pages)\r\n    const specialPages = {\r\n      profile: { variant: 'detail' as const },\r\n      settings: { variant: 'detail' as const },\r\n      'user-management': { variant: 'table' as const },\r\n      'modern-showcase': { variant: 'dashboard' as const },\r\n      'form-table-showcase': { variant: 'dashboard' as const },\r\n    };\r\n\r\n    if (specialPages[currentPage as keyof typeof specialPages]) {\r\n      const routeConfig = getRouteConfig(currentPage);\r\n      const { variant } = specialPages[currentPage as keyof typeof specialPages];\r\n      return renderPageWithTransition(routeConfig.component, routeConfig.props || {}, variant);\r\n    }\r\n\r\n    // Aid management module with detail page handling\r\n    if (activeModule === 'yardim') {\r\n      if (currentPage === 'detail' && selectedBeneficiaryId) {\r\n        return renderPageWithTransition(\r\n          BeneficiaryDetailPageComprehensive,\r\n          {\r\n            beneficiaryId: selectedBeneficiaryId,\r\n            onBack: backToBeneficiariesList,\r\n          },\r\n          'detail',\r\n        );\r\n      }\r\n    }\r\n\r\n    // Get route configuration based on current state\r\n    const routeConfig = getRouteConfig(activeModule, currentSubPage);\r\n\r\n    // Prepare props based on the current route\r\n    let componentProps = { ...routeConfig.props };\r\n\r\n    // Add special props for specific components\r\n    if (activeModule === 'genel') {\r\n      componentProps = {\r\n        ...componentProps,\r\n        onNavigate: moduleChange,\r\n        onQuickAction,\r\n      };\r\n    } else if (\r\n      activeModule === 'yardim' &&\r\n      (currentSubPage === '/yardim/ihtiyac-sahipleri' || !currentSubPage)\r\n    ) {\r\n      // Beneficiaries page - both default and explicit route\r\n      componentProps = {\r\n        ...componentProps,\r\n        onNavigateToDetail: navigateToBeneficiaryDetail,\r\n      };\r\n    }\r\n\r\n    return renderPageWithTransition(\r\n      routeConfig.component,\r\n      componentProps,\r\n      routeConfig.skeletonVariant ?? 'detail',\r\n    );\r\n  }, [\r\n    currentPage,\r\n    currentSubPage,\r\n    activeModule,\r\n    selectedBeneficiaryId,\r\n    navigateToBeneficiaryDetail,\r\n    backToBeneficiariesList,\r\n    moduleChange,\r\n    onQuickAction,\r\n  ]);\r\n\r\n  return <>{renderCurrentPage}</>;\r\n}\r\n\r\nexport default PageRenderer;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\app\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\auth\\LoginPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":78,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":19},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":78,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":19},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":87,"column":9,"nodeType":"MemberExpression","endLine":87,"endColumn":26}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview LoginPage Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { motion } from 'motion/react';\r\nimport { Eye, EyeOff, Lock, Mail, Shield, AlertCircle } from 'lucide-react';\r\nimport { Button } from '../ui/button';\r\nimport { Input } from '../ui/input';\r\nimport { Label } from '../ui/label';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card';\r\nimport { Checkbox } from '../ui/checkbox';\r\nimport { Alert, AlertDescription } from '../ui/alert';\r\nimport { useSupabaseAuth } from '../../contexts/SupabaseAuthContext';\r\n\r\ninterface LoginPageProps {\r\n  onLoginSuccess?: () => void;\r\n}\r\n\r\n/**\r\n * LoginPage function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function LoginPage({ onLoginSuccess }: LoginPageProps) {\r\n  const { signIn, isLoading, error, clearError } = useSupabaseAuth();\r\n  const [credentials, setCredentials] = useState({\r\n    email: '',\r\n    password: '',\r\n    rememberMe: false,\r\n  });\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [formErrors, setFormErrors] = useState<Record<string, string>>({});\r\n\r\n  // Clear errors when user starts typing\r\n  useEffect(() => {\r\n    if (error) {\r\n      const timer = setTimeout(() => {\r\n        clearError();\r\n      }, 5000);\r\n      return () => {\r\n        clearTimeout(timer);\r\n      };\r\n    }\r\n  }, [error, clearError]);\r\n\r\n  const validateForm = (): boolean => {\r\n    const errors: Record<string, string> = {};\r\n\r\n    if (!credentials.email) {\r\n      errors.email = 'Kullan─▒c─▒ ad─▒ gerekli';\r\n    }\r\n\r\n    if (!credentials.password) {\r\n      errors.password = '┼Şifre gerekli';\r\n    } else if (credentials.password.length < 6) {\r\n      errors.password = '┼Şifre en az 6 karakter olmal─▒';\r\n    }\r\n\r\n    setFormErrors(errors);\r\n    return Object.keys(errors).length === 0;\r\n  };\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n\r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      await signIn(credentials.email, credentials.password);\r\n      onLoginSuccess?.();\r\n    } catch (error) {\r\n      // Error is handled in SupabaseAuthContext\r\n    }\r\n  };\r\n\r\n  const handleInputChange = (field: string, value: string | boolean) => {\r\n    setCredentials((prev) => ({ ...prev, [field]: value }));\r\n\r\n    // Clear field error when user starts typing\r\n    if (formErrors[field]) {\r\n      setFormErrors((prev) => ({ ...prev, [field]: '' }));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-slate-50 via-white to-slate-100\">\r\n      {/* Background Decorations */}\r\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\r\n        <div className=\"absolute top-1/4 left-1/4 w-32 h-32 bg-primary/5 rounded-full blur-3xl\" />\r\n        <div className=\"absolute bottom-1/4 right-1/4 w-40 h-40 bg-blue-500/5 rounded-full blur-3xl\" />\r\n        <div className=\"absolute top-1/2 right-1/3 w-24 h-24 bg-emerald-500/5 rounded-full blur-2xl\" />\r\n      </div>\r\n\r\n      <motion.div\r\n        initial={{ opacity: 0, y: 20 }}\r\n        animate={{ opacity: 1, y: 0 }}\r\n        transition={{ duration: 0.5 }}\r\n        className=\"w-full max-w-md relative z-10\"\r\n      >\r\n        <Card className=\"border-slate-200/60 shadow-xl bg-white/95 backdrop-blur-sm\">\r\n          <CardHeader className=\"space-y-4 text-center pb-6\">\r\n            <motion.div\r\n              initial={{ scale: 0 }}\r\n              animate={{ scale: 1 }}\r\n              transition={{ delay: 0.2, type: 'spring', stiffness: 200 }}\r\n              className=\"w-16 h-16 mx-auto bg-gradient-to-br from-primary via-blue-600 to-blue-800 rounded-2xl flex items-center justify-center shadow-lg\"\r\n            >\r\n              <Shield className=\"w-8 h-8 text-white\" />\r\n            </motion.div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <CardTitle className=\"text-2xl font-bold text-slate-900 tracking-tight\">\r\n                Dernek Y├Ânetim Sistemi\r\n              </CardTitle>\r\n              <CardDescription className=\"text-slate-600 font-medium\">\r\n                Hesab─▒n─▒zla giri┼ş yap─▒n\r\n              </CardDescription>\r\n            </div>\r\n          </CardHeader>\r\n\r\n          <CardContent className=\"space-y-6\">\r\n            {error && (\r\n              <motion.div\r\n                initial={{ opacity: 0, scale: 0.95 }}\r\n                animate={{ opacity: 1, scale: 1 }}\r\n                transition={{ duration: 0.2 }}\r\n              >\r\n                <Alert variant=\"destructive\" className=\"border-red-300\">\r\n                  <AlertCircle className=\"h-4 w-4\" />\r\n                  <AlertDescription>{error}</AlertDescription>\r\n                </Alert>\r\n              </motion.div>\r\n            )}\r\n\r\n            <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"email\" className=\"text-slate-700 font-semibold\">\r\n                  Kullan─▒c─▒ Ad─▒\r\n                </Label>\r\n                <div className=\"relative\">\r\n                  <Mail className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-500\" />\r\n                  <Input\r\n                    id=\"email\"\r\n                    type=\"text\"\r\n                    placeholder=\"admin, manager, operator, viewer\"\r\n                    value={credentials.email}\r\n                    onChange={(e) => {\r\n                      handleInputChange('email', e.target.value);\r\n                    }}\r\n                    className={`pl-10 h-12 bg-white border-slate-300 focus:border-primary focus:ring-primary/20 ${\r\n                      formErrors.email ? 'border-red-300 focus:border-red-400' : ''\r\n                    }`}\r\n                    disabled={isLoading}\r\n                  />\r\n                </div>\r\n                {formErrors.email && (\r\n                  <p className=\"text-sm text-red-600 font-medium\">{formErrors.email}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"password\" className=\"text-slate-700 font-semibold\">\r\n                  ┼Şifre\r\n                </Label>\r\n                <div className=\"relative\">\r\n                  <Lock className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-slate-500\" />\r\n                  <Input\r\n                    id=\"password\"\r\n                    type={showPassword ? 'text' : 'password'}\r\n                    placeholder=\"ÔÇóÔÇóÔÇóÔÇóÔÇóÔÇóÔÇóÔÇó\"\r\n                    value={credentials.password}\r\n                    onChange={(e) => {\r\n                      handleInputChange('password', e.target.value);\r\n                    }}\r\n                    className={`pl-10 pr-10 h-12 bg-white border-slate-300 focus:border-primary focus:ring-primary/20 ${\r\n                      formErrors.password ? 'border-red-300 focus:border-red-400' : ''\r\n                    }`}\r\n                    disabled={isLoading}\r\n                  />\r\n                  <button\r\n                    type=\"button\"\r\n                    onClick={() => {\r\n                      setShowPassword(!showPassword);\r\n                    }}\r\n                    className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-slate-500 hover:text-slate-700 transition-colors\"\r\n                    disabled={isLoading}\r\n                  >\r\n                    {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\r\n                  </button>\r\n                </div>\r\n                {formErrors.password && (\r\n                  <p className=\"text-sm text-red-600 font-medium\">{formErrors.password}</p>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"flex items-center space-x-2\">\r\n                <Checkbox\r\n                  id=\"rememberMe\"\r\n                  checked={credentials.rememberMe}\r\n                  onCheckedChange={(checked: boolean) => {\r\n                    handleInputChange('rememberMe', checked);\r\n                  }}\r\n                  disabled={isLoading}\r\n                />\r\n                <Label\r\n                  htmlFor=\"rememberMe\"\r\n                  className=\"text-sm text-slate-600 font-medium cursor-pointer\"\r\n                >\r\n                  Beni hat─▒rla\r\n                </Label>\r\n              </div>\r\n\r\n              <Button\r\n                type=\"submit\"\r\n                disabled={isLoading}\r\n                className=\"w-full h-12 bg-gradient-to-r from-primary to-blue-700 hover:from-primary/90 hover:to-blue-700/90 text-white font-semibold shadow-lg hover:shadow-xl transition-all duration-200 disabled:opacity-50\"\r\n              >\r\n                {isLoading ? (\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <div className=\"w-4 h-4 border-2 border-white/30 border-t-white rounded-full animate-spin\" />\r\n                    Giri┼ş yap─▒l─▒yor...\r\n                  </div>\r\n                ) : (\r\n                  'Giri┼ş Yap'\r\n                )}\r\n              </Button>\r\n            </form>\r\n\r\n            <div className=\"pt-4 text-center\">\r\n              <p className=\"text-xs text-slate-500\">\r\n                ┼Şifrenizi mi unuttunuz?{' '}\r\n                <button className=\"text-primary hover:underline font-medium\">\r\n                  S─▒f─▒rlama talebi\r\n                </button>\r\n              </p>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <motion.div\r\n          initial={{ opacity: 0 }}\r\n          animate={{ opacity: 1 }}\r\n          transition={{ delay: 0.5 }}\r\n          className=\"mt-8 text-center\"\r\n        >\r\n          <p className=\"text-xs text-slate-500\">\r\n            ┬® 2024 Dernek Y├Ânetim Sistemi. T├╝m haklar─▒ sakl─▒d─▒r.\r\n          </p>\r\n        </motion.div>\r\n      </motion.div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\auth\\PermissionGuard.tsx","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":48,"column":16,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":48,"endColumn":18,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1301,1303],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":60,"column":16,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":60,"endColumn":18,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1566,1568],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":70,"column":18,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":70,"endColumn":20,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1907,1909],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":86,"column":18,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":86,"endColumn":20,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2345,2347],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":201,"column":10,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":201,"endColumn":28},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":201,"column":10,"nodeType":"MemberExpression","endLine":201,"endColumn":28},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":212,"column":10,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":212,"endColumn":22},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":212,"column":10,"nodeType":"MemberExpression","endLine":212,"endColumn":22}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview PermissionGuard Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport type { ReactNode } from 'react';\r\nimport { Permission, UserRole } from '../../types/auth';\r\nimport { usePermissions } from '../../hooks/usePermissions';\r\nimport { UnauthorizedPage } from './UnauthorizedPage';\r\nimport { Alert, AlertDescription } from '../ui/alert';\r\nimport { ShieldX } from 'lucide-react';\r\n\r\ninterface PermissionGuardProps {\r\n  children: ReactNode;\r\n  permission?: Permission;\r\n  role?: UserRole;\r\n  permissions?: Permission[];\r\n  roles?: UserRole[];\r\n  requireAll?: boolean; // true for AND, false for OR logic\r\n  fallback?: ReactNode;\r\n  showAlert?: boolean; // Show inline alert instead of full page\r\n}\r\n\r\n/**\r\n * PermissionGuard function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function PermissionGuard({\r\n  children,\r\n  permission,\r\n  role,\r\n  permissions,\r\n  roles,\r\n  requireAll = true,\r\n  fallback,\r\n  showAlert = false,\r\n}: PermissionGuardProps) {\r\n  const { checkPermission, hasRole, hasAllPermissions, hasAnyPermission, hasAnyRole } =\r\n    usePermissions();\r\n\r\n  // Check single permission\r\n  if (permission && !checkPermission(permission)) {\r\n    return (\r\n      fallback ||\r\n      (showAlert ? (\r\n        <PermissionAlert permission={permission} />\r\n      ) : (\r\n        <UnauthorizedPage requiredPermission={permission} />\r\n      ))\r\n    );\r\n  }\r\n\r\n  // Check single role\r\n  if (role && !hasRole(role)) {\r\n    return (\r\n      fallback || (showAlert ? <RoleAlert role={role} /> : <UnauthorizedPage requiredRole={role} />)\r\n    );\r\n  }\r\n\r\n  // Check multiple permissions\r\n  if (permissions && permissions.length > 0) {\r\n    const hasAccess = requireAll ? hasAllPermissions(permissions) : hasAnyPermission(permissions);\r\n\r\n    if (!hasAccess) {\r\n      return (\r\n        fallback ||\r\n        (showAlert ? (\r\n          <PermissionsAlert permissions={permissions} requireAll={requireAll} />\r\n        ) : (\r\n          <UnauthorizedPage requiredPermission={permissions[0]} />\r\n        ))\r\n      );\r\n    }\r\n  }\r\n\r\n  // Check multiple roles\r\n  if (roles && roles.length > 0) {\r\n    const hasAccess = requireAll ? roles.every((r) => hasRole(r)) : hasAnyRole(roles);\r\n\r\n    if (!hasAccess) {\r\n      return (\r\n        fallback ||\r\n        (showAlert ? (\r\n          <RolesAlert roles={roles} requireAll={requireAll} />\r\n        ) : (\r\n          <UnauthorizedPage requiredRole={roles[0]} />\r\n        ))\r\n      );\r\n    }\r\n  }\r\n\r\n  return <>{children}</>;\r\n}\r\n\r\n// Inline alert components\r\nfunction PermissionAlert({ permission }: { permission: Permission }) {\r\n  return (\r\n    <Alert variant=\"destructive\" className=\"m-4\">\r\n      <ShieldX className=\"h-4 w-4\" />\r\n      <AlertDescription>\r\n        Bu i┼şlem i├ğin <strong>{getPermissionLabel(permission)}</strong> izni gerekli.\r\n      </AlertDescription>\r\n    </Alert>\r\n  );\r\n}\r\n\r\nfunction RoleAlert({ role }: { role: UserRole }) {\r\n  return (\r\n    <Alert variant=\"destructive\" className=\"m-4\">\r\n      <ShieldX className=\"h-4 w-4\" />\r\n      <AlertDescription>\r\n        Bu i┼şlem i├ğin <strong>{getRoleLabel(role)}</strong> rol├╝ gerekli.\r\n      </AlertDescription>\r\n    </Alert>\r\n  );\r\n}\r\n\r\nfunction PermissionsAlert({\r\n  permissions,\r\n  requireAll,\r\n}: {\r\n  permissions: Permission[];\r\n  requireAll: boolean;\r\n}) {\r\n  return (\r\n    <Alert variant=\"destructive\" className=\"m-4\">\r\n      <ShieldX className=\"h-4 w-4\" />\r\n      <AlertDescription>\r\n        Bu i┼şlem i├ğin {requireAll ? 't├╝m' : 'en az bir'} izin gerekli:\r\n        <ul className=\"mt-2 list-disc list-inside\">\r\n          {permissions.map((p) => (\r\n            <li key={p} className=\"text-sm\">\r\n              {getPermissionLabel(p)}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </AlertDescription>\r\n    </Alert>\r\n  );\r\n}\r\n\r\nfunction RolesAlert({ roles, requireAll }: { roles: UserRole[]; requireAll: boolean }) {\r\n  return (\r\n    <Alert variant=\"destructive\" className=\"m-4\">\r\n      <ShieldX className=\"h-4 w-4\" />\r\n      <AlertDescription>\r\n        Bu i┼şlem i├ğin {requireAll ? 't├╝m' : 'en az bir'} rol gerekli:\r\n        <ul className=\"mt-2 list-disc list-inside\">\r\n          {roles.map((r) => (\r\n            <li key={r} className=\"text-sm\">\r\n              {getRoleLabel(r)}\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </AlertDescription>\r\n    </Alert>\r\n  );\r\n}\r\n\r\n// Helper functions\r\nfunction getPermissionLabel(permission: Permission): string {\r\n  const labels: Record<Permission, string> = {\r\n    [Permission.VIEW_DASHBOARD]: 'Dashboard G├Âr├╝nt├╝leme',\r\n    [Permission.VIEW_DONATIONS]: 'Ba─ş─▒┼şlar─▒ G├Âr├╝nt├╝leme',\r\n    [Permission.CREATE_DONATION]: 'Ba─ş─▒┼ş Olu┼şturma',\r\n    [Permission.EDIT_DONATION]: 'Ba─ş─▒┼ş D├╝zenleme',\r\n    [Permission.DELETE_DONATION]: 'Ba─ş─▒┼ş Silme',\r\n    [Permission.VIEW_MEMBERS]: '├£yeleri G├Âr├╝nt├╝leme',\r\n    [Permission.CREATE_MEMBER]: '├£ye Olu┼şturma',\r\n    [Permission.EDIT_MEMBER]: '├£ye D├╝zenleme',\r\n    [Permission.DELETE_MEMBER]: '├£ye Silme',\r\n    [Permission.VIEW_AID]: 'Yard─▒mlar─▒ G├Âr├╝nt├╝leme',\r\n    [Permission.CREATE_AID]: 'Yard─▒m Olu┼şturma',\r\n    [Permission.EDIT_AID]: 'Yard─▒m D├╝zenleme',\r\n    [Permission.DELETE_AID]: 'Yard─▒m Silme',\r\n    [Permission.APPROVE_AID]: 'Yard─▒m Onaylama',\r\n    [Permission.VIEW_FINANCE]: 'Finans─▒ G├Âr├╝nt├╝leme',\r\n    [Permission.CREATE_FINANCE]: 'Finans Kayd─▒ Olu┼şturma',\r\n    [Permission.EDIT_FINANCE]: 'Finans D├╝zenleme',\r\n    [Permission.DELETE_FINANCE]: 'Finans Silme',\r\n    [Permission.VIEW_MESSAGES]: 'Mesajlar─▒ G├Âr├╝nt├╝leme',\r\n    [Permission.SEND_MESSAGES]: 'Mesaj G├Ânderme',\r\n    [Permission.VIEW_EVENTS]: 'Etkinlikleri G├Âr├╝nt├╝leme',\r\n    [Permission.CREATE_EVENT]: 'Etkinlik Olu┼şturma',\r\n    [Permission.EDIT_EVENT]: 'Etkinlik D├╝zenleme',\r\n    [Permission.DELETE_EVENT]: 'Etkinlik Silme',\r\n    [Permission.VIEW_SETTINGS]: 'Ayarlar─▒ G├Âr├╝nt├╝leme',\r\n    [Permission.EDIT_SETTINGS]: 'Ayarlar─▒ D├╝zenleme',\r\n    [Permission.VIEW_USERS]: 'Kullan─▒c─▒lar─▒ G├Âr├╝nt├╝leme',\r\n    [Permission.CREATE_USER]: 'Kullan─▒c─▒ Olu┼şturma',\r\n    [Permission.EDIT_USER]: 'Kullan─▒c─▒ D├╝zenleme',\r\n    [Permission.DELETE_USER]: 'Kullan─▒c─▒ Silme',\r\n    [Permission.VIEW_REPORTS]: 'Raporlar─▒ G├Âr├╝nt├╝leme',\r\n    [Permission.EXPORT_REPORTS]: 'Rapor D─▒┼şa Aktarma',\r\n  };\r\n\r\n  return labels[permission] ?? permission;\r\n}\r\n\r\nfunction getRoleLabel(role: UserRole): string {\r\n  const labels: Record<UserRole, string> = {\r\n    [UserRole.ADMIN]: 'Sistem Y├Âneticisi',\r\n    [UserRole.MANAGER]: 'Dernek M├╝d├╝r├╝',\r\n    [UserRole.OPERATOR]: 'Operat├Âr',\r\n    [UserRole.VIEWER]: 'G├Âr├╝nt├╝leyici',\r\n  };\r\n\r\n  return labels[role] ?? role;\r\n}\r\n\r\n// Convenience components\r\n/**\r\n * AdminOnly function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function AdminOnly({\r\n  children,\r\n  fallback,\r\n  showAlert,\r\n}: {\r\n  children: ReactNode;\r\n  fallback?: ReactNode;\r\n  showAlert?: boolean;\r\n}) {\r\n  return (\r\n    <PermissionGuard role={UserRole.ADMIN} fallback={fallback} showAlert={showAlert}>\r\n      {children}\r\n    </PermissionGuard>\r\n  );\r\n}\r\n\r\n/**\r\n * ManagerOnly function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function ManagerOnly({\r\n  children,\r\n  fallback,\r\n  showAlert,\r\n}: {\r\n  children: ReactNode;\r\n  fallback?: ReactNode;\r\n  showAlert?: boolean;\r\n}) {\r\n  return (\r\n    <PermissionGuard\r\n      roles={[UserRole.ADMIN, UserRole.MANAGER]}\r\n      requireAll={false}\r\n      fallback={fallback}\r\n      showAlert={showAlert}\r\n    >\r\n      {children}\r\n    </PermissionGuard>\r\n  );\r\n}\r\n\r\n/**\r\n * OperatorOnly function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function OperatorOnly({\r\n  children,\r\n  fallback,\r\n  showAlert,\r\n}: {\r\n  children: ReactNode;\r\n  fallback?: ReactNode;\r\n  showAlert?: boolean;\r\n}) {\r\n  return (\r\n    <PermissionGuard\r\n      roles={[UserRole.ADMIN, UserRole.MANAGER, UserRole.OPERATOR]}\r\n      requireAll={false}\r\n      fallback={fallback}\r\n      showAlert={showAlert}\r\n    >\r\n      {children}\r\n    </PermissionGuard>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\auth\\ProtectedRoute.tsx","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'../../types/auth' import is duplicated.","line":11,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":11,"endColumn":45},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":57,"column":21,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":57,"endColumn":23,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1696,1698],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'permission' is defined but never used.","line":102,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":13},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'permission' is defined but never used. Allowed unused args must match /^_/u.","line":102,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":13}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview ProtectedRoute Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport type { ReactNode } from 'react';\r\nimport { useSupabaseAuth } from '../../contexts/SupabaseAuthContext';\r\nimport type { Permission } from '../../types/auth';\r\nimport { UserRole } from '../../types/auth';\r\nimport { UnauthorizedPage } from './UnauthorizedPage';\r\nimport { LoadingSpinner } from '../LoadingSpinner';\r\nimport { LoginPage } from './LoginPage';\r\n\r\ninterface ProtectedRouteProps {\r\n  children: ReactNode;\r\n  requireAuth?: boolean;\r\n  requiredPermission?: Permission;\r\n  requiredRole?: UserRole;\r\n  fallback?: ReactNode;\r\n}\r\n\r\n/**\r\n * ProtectedRoute function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function ProtectedRoute({\r\n  children,\r\n  requireAuth = true,\r\n  requiredPermission,\r\n  requiredRole,\r\n  fallback,\r\n}: ProtectedRouteProps) {\r\n  const { isAuthenticated, isLoading } = useSupabaseAuth();\r\n\r\n  // Temporary: Basic auth check only for now\r\n  const checkPermission = () => isAuthenticated;\r\n  const hasRole = () => isAuthenticated;\r\n\r\n  // Show loading while checking authentication\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"h-screen flex items-center justify-center bg-gradient-to-br from-slate-50 via-white to-slate-100\">\r\n        <div className=\"flex flex-col items-center gap-4\">\r\n          <LoadingSpinner size=\"lg\" />\r\n          <p className=\"text-sm text-slate-600 animate-pulse\">Kimlik do─şrulan─▒yor...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Check if authentication is required\r\n  if (requireAuth && !isAuthenticated) {\r\n    return fallback || <LoginPage />;\r\n  }\r\n\r\n  // Check role requirement\r\n  if (requiredRole && !hasRole()) {\r\n    return <UnauthorizedPage requiredRole={requiredRole} />;\r\n  }\r\n\r\n  // Check permission requirement\r\n  if (requiredPermission && !checkPermission()) {\r\n    return <UnauthorizedPage requiredPermission={requiredPermission} />;\r\n  }\r\n\r\n  return <>{children}</>;\r\n}\r\n\r\n// Convenience components for common protection patterns\r\n/**\r\n * AdminRoute function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function AdminRoute({ children }: { children: ReactNode }) {\r\n  return <ProtectedRoute requiredRole={UserRole.ADMIN}>{children}</ProtectedRoute>;\r\n}\r\n\r\n/**\r\n * ManagerRoute function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function ManagerRoute({ children }: { children: ReactNode }) {\r\n  return <ProtectedRoute requiredRole={UserRole.MANAGER}>{children}</ProtectedRoute>;\r\n}\r\n\r\n/**\r\n * PermissionGuard function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function PermissionGuard({\r\n  children,\r\n  permission,\r\n  fallback,\r\n}: {\r\n  children: ReactNode;\r\n  permission: Permission;\r\n  fallback?: ReactNode;\r\n}) {\r\n  const { isAuthenticated } = useSupabaseAuth();\r\n\r\n  if (!isAuthenticated) {\r\n    return fallback ?? null;\r\n  }\r\n\r\n  return <>{children}</>;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\auth\\UnauthorizedPage.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":139,"column":56,"nodeType":"MemberExpression","endLine":139,"endColumn":81},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":144,"column":57,"nodeType":"MemberExpression","endLine":144,"endColumn":94}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview UnauthorizedPage Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { motion } from 'motion/react';\r\nimport { ShieldX, ArrowLeft, Home, AlertTriangle } from 'lucide-react';\r\nimport { Button } from '../ui/button';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card';\r\nimport { Badge } from '../ui/badge';\r\nimport { useAuth } from '../../contexts/AuthContext';\r\nimport { Permission, UserRole } from '../../types/auth';\r\n\r\ninterface UnauthorizedPageProps {\r\n  requiredRole?: UserRole;\r\n  requiredPermission?: Permission;\r\n  onBack?: () => void;\r\n  onGoHome?: () => void;\r\n}\r\n\r\nconst ROLE_LABELS: Record<UserRole, string> = {\r\n  [UserRole.ADMIN]: 'Sistem Y├Âneticisi',\r\n  [UserRole.MANAGER]: 'Dernek M├╝d├╝r├╝',\r\n  [UserRole.OPERATOR]: 'Operat├Âr',\r\n  [UserRole.VIEWER]: 'G├Âr├╝nt├╝leyici',\r\n};\r\n\r\nconst PERMISSION_LABELS: Record<Permission, string> = {\r\n  [Permission.VIEW_DASHBOARD]: 'Dashboard G├Âr├╝nt├╝leme',\r\n  [Permission.VIEW_DONATIONS]: 'Ba─ş─▒┼şlar─▒ G├Âr├╝nt├╝leme',\r\n  [Permission.CREATE_DONATION]: 'Ba─ş─▒┼ş Olu┼şturma',\r\n  [Permission.EDIT_DONATION]: 'Ba─ş─▒┼ş D├╝zenleme',\r\n  [Permission.DELETE_DONATION]: 'Ba─ş─▒┼ş Silme',\r\n  [Permission.VIEW_MEMBERS]: '├£yeleri G├Âr├╝nt├╝leme',\r\n  [Permission.CREATE_MEMBER]: '├£ye Olu┼şturma',\r\n  [Permission.EDIT_MEMBER]: '├£ye D├╝zenleme',\r\n  [Permission.DELETE_MEMBER]: '├£ye Silme',\r\n  [Permission.VIEW_AID]: 'Yard─▒mlar─▒ G├Âr├╝nt├╝leme',\r\n  [Permission.CREATE_AID]: 'Yard─▒m Olu┼şturma',\r\n  [Permission.EDIT_AID]: 'Yard─▒m D├╝zenleme',\r\n  [Permission.DELETE_AID]: 'Yard─▒m Silme',\r\n  [Permission.APPROVE_AID]: 'Yard─▒m Onaylama',\r\n  [Permission.VIEW_FINANCE]: 'Finans─▒ G├Âr├╝nt├╝leme',\r\n  [Permission.CREATE_FINANCE]: 'Finans Kayd─▒ Olu┼şturma',\r\n  [Permission.EDIT_FINANCE]: 'Finans D├╝zenleme',\r\n  [Permission.DELETE_FINANCE]: 'Finans Silme',\r\n  [Permission.VIEW_MESSAGES]: 'Mesajlar─▒ G├Âr├╝nt├╝leme',\r\n  [Permission.SEND_MESSAGES]: 'Mesaj G├Ânderme',\r\n  [Permission.VIEW_EVENTS]: 'Etkinlikleri G├Âr├╝nt├╝leme',\r\n  [Permission.CREATE_EVENT]: 'Etkinlik Olu┼şturma',\r\n  [Permission.EDIT_EVENT]: 'Etkinlik D├╝zenleme',\r\n  [Permission.DELETE_EVENT]: 'Etkinlik Silme',\r\n  [Permission.VIEW_SETTINGS]: 'Ayarlar─▒ G├Âr├╝nt├╝leme',\r\n  [Permission.EDIT_SETTINGS]: 'Ayarlar─▒ D├╝zenleme',\r\n  [Permission.VIEW_USERS]: 'Kullan─▒c─▒lar─▒ G├Âr├╝nt├╝leme',\r\n  [Permission.CREATE_USER]: 'Kullan─▒c─▒ Olu┼şturma',\r\n  [Permission.EDIT_USER]: 'Kullan─▒c─▒ D├╝zenleme',\r\n  [Permission.DELETE_USER]: 'Kullan─▒c─▒ Silme',\r\n  [Permission.VIEW_REPORTS]: 'Raporlar─▒ G├Âr├╝nt├╝leme',\r\n  [Permission.EXPORT_REPORTS]: 'Rapor D─▒┼şa Aktarma',\r\n};\r\n\r\n/**\r\n * UnauthorizedPage function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function UnauthorizedPage({\r\n  requiredRole,\r\n  requiredPermission,\r\n  onBack,\r\n  onGoHome,\r\n}: UnauthorizedPageProps) {\r\n  const { user, logout } = useAuth();\r\n\r\n  const handleBack = () => {\r\n    if (onBack) {\r\n      onBack();\r\n    } else {\r\n      window.history.back();\r\n    }\r\n  };\r\n\r\n  const handleGoHome = () => {\r\n    if (onGoHome) {\r\n      onGoHome();\r\n    } else {\r\n      window.location.href = '/';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex items-center justify-center p-4 bg-gradient-to-br from-slate-50 via-white to-slate-100\">\r\n      {/* Background Decorations */}\r\n      <div className=\"absolute inset-0 overflow-hidden pointer-events-none\">\r\n        <div className=\"absolute top-1/4 left-1/4 w-32 h-32 bg-red-500/5 rounded-full blur-3xl\" />\r\n        <div className=\"absolute bottom-1/4 right-1/4 w-40 h-40 bg-orange-500/5 rounded-full blur-3xl\" />\r\n      </div>\r\n\r\n      <motion.div\r\n        initial={{ opacity: 0, y: 20 }}\r\n        animate={{ opacity: 1, y: 0 }}\r\n        transition={{ duration: 0.5 }}\r\n        className=\"w-full max-w-lg relative z-10\"\r\n      >\r\n        <Card className=\"border-red-200/60 shadow-xl bg-white/95 backdrop-blur-sm\">\r\n          <CardHeader className=\"space-y-4 text-center pb-6\">\r\n            <motion.div\r\n              initial={{ scale: 0 }}\r\n              animate={{ scale: 1 }}\r\n              transition={{ delay: 0.2, type: 'spring', stiffness: 200 }}\r\n              className=\"w-16 h-16 mx-auto bg-gradient-to-br from-red-500 to-red-600 rounded-2xl flex items-center justify-center shadow-lg\"\r\n            >\r\n              <ShieldX className=\"w-8 h-8 text-white\" />\r\n            </motion.div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <CardTitle className=\"text-2xl font-bold text-slate-900 tracking-tight\">\r\n                Eri┼şim Reddedildi\r\n              </CardTitle>\r\n              <CardDescription className=\"text-slate-600 font-medium\">\r\n                Bu sayfaya eri┼şim yetkiniz bulunmuyor\r\n              </CardDescription>\r\n            </div>\r\n          </CardHeader>\r\n\r\n          <CardContent className=\"space-y-6\">\r\n            <div className=\"bg-red-50/80 border border-red-200 rounded-xl p-4\">\r\n              <div className=\"flex items-start gap-3\">\r\n                <AlertTriangle className=\"w-5 h-5 text-red-600 mt-0.5 flex-shrink-0\" />\r\n                <div className=\"space-y-2\">\r\n                  <p className=\"text-red-800 font-semibold text-sm\">Yetersiz Yetki</p>\r\n                  <div className=\"text-red-700 text-sm space-y-1\">\r\n                    {requiredRole && (\r\n                      <p>\r\n                        <strong>Gerekli Rol:</strong> {ROLE_LABELS[requiredRole]}\r\n                      </p>\r\n                    )}\r\n                    {requiredPermission && (\r\n                      <p>\r\n                        <strong>Gerekli ─░zin:</strong> {PERMISSION_LABELS[requiredPermission]}\r\n                      </p>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n\r\n            {user && (\r\n              <div className=\"bg-slate-50/80 border border-slate-200 rounded-xl p-4\">\r\n                <div className=\"space-y-3\">\r\n                  <p className=\"text-slate-700 font-semibold text-sm\">Mevcut Kullan─▒c─▒ Bilgileri</p>\r\n                  <div className=\"space-y-2\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-slate-600 text-sm\">Kullan─▒c─▒:</span>\r\n                      <span className=\"text-slate-900 font-medium text-sm\">{user.name}</span>\r\n                    </div>\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <span className=\"text-slate-600 text-sm\">Rol:</span>\r\n                      <Badge variant=\"outline\" className=\"text-xs\">\r\n                        {ROLE_LABELS[user.role]}\r\n                      </Badge>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            <div className=\"space-y-3\">\r\n              <Button\r\n                onClick={handleBack}\r\n                variant=\"outline\"\r\n                className=\"w-full h-12 font-semibold border-slate-300 hover:bg-slate-50\"\r\n              >\r\n                <ArrowLeft className=\"w-4 h-4 mr-2\" />\r\n                Geri D├Ân\r\n              </Button>\r\n\r\n              <Button\r\n                onClick={handleGoHome}\r\n                className=\"w-full h-12 bg-gradient-to-r from-primary to-blue-700 hover:from-primary/90 hover:to-blue-700/90 text-white font-semibold\"\r\n              >\r\n                <Home className=\"w-4 h-4 mr-2\" />\r\n                Ana Sayfaya Git\r\n              </Button>\r\n\r\n              <Button\r\n                onClick={logout}\r\n                variant=\"ghost\"\r\n                className=\"w-full h-10 text-slate-600 hover:text-slate-800 font-medium\"\r\n              >\r\n                Farkl─▒ Hesapla Giri┼ş Yap\r\n              </Button>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <motion.div\r\n          initial={{ opacity: 0 }}\r\n          animate={{ opacity: 1 }}\r\n          transition={{ delay: 0.5 }}\r\n          className=\"mt-8 text-center\"\r\n        >\r\n          <p className=\"text-xs text-slate-500\">\r\n            Eri┼şim sorunlar─▒ i├ğin sistem y├Âneticinizle ileti┼şime ge├ğin.\r\n          </p>\r\n        </motion.div>\r\n      </motion.div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\automation\\SmartAutomationSystem.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1531,1534],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1531,1534],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1605,1608],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1605,1608],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1711,1714],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1711,1714],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'selectedAutomation' is assigned a value but never used.","line":280,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":280,"endColumn":28},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'selectedAutomation' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":280,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":280,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'deviceInfo' is assigned a value but never used.","line":282,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":282,"endColumn":44},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'deviceInfo' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":282,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":282,"endColumn":44},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":700,"column":25,"nodeType":"Identifier","messageId":"neverNullish","endLine":700,"endColumn":36}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview SmartAutomationSystem Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport React, { useState, useCallback } from 'react';\r\nimport { motion, AnimatePresence } from 'motion/react';\r\nimport {\r\n  Zap,\r\n  Play,\r\n  Pause,\r\n  Plus,\r\n  Edit,\r\n  Trash2,\r\n  Clock,\r\n  Bell,\r\n  CheckCircle,\r\n  Activity,\r\n  BarChart3,\r\n  Search,\r\n  Upload,\r\n} from 'lucide-react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Badge } from '../ui/badge';\r\nimport { Button } from '../ui/button';\r\nimport { Input } from '../ui/input';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\nimport { Switch } from '../ui/switch';\r\nimport { Textarea } from '../ui/textarea';\r\nimport { useAdvancedMobile } from '../../hooks/useAdvancedMobile';\r\n\r\n// Otomasyon t├╝rleri\r\nexport type AutomationType =\r\n  | 'workflow'\r\n  | 'notification'\r\n  | 'report'\r\n  | 'data_sync'\r\n  | 'approval'\r\n  | 'reminder';\r\n\r\nexport type AutomationStatus = 'active' | 'paused' | 'draft' | 'error' | 'completed';\r\n\r\nexport type TriggerType = 'time' | 'event' | 'condition' | 'manual' | 'api';\r\n\r\n/**\r\n * AutomationRule Interface\r\n * \r\n * @interface AutomationRule\r\n */\r\nexport interface AutomationRule {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  type: AutomationType;\r\n  status: AutomationStatus;\r\n  trigger: {\r\n    type: TriggerType;\r\n    config: any;\r\n  };\r\n  actions: {\r\n    id: string;\r\n    type: string;\r\n    config: any;\r\n    order: number;\r\n  }[];\r\n  conditions?: {\r\n    field: string;\r\n    operator: string;\r\n    value: any;\r\n  }[];\r\n  schedule?: {\r\n    frequency: 'daily' | 'weekly' | 'monthly' | 'custom';\r\n    time: string;\r\n    days?: number[];\r\n    customCron?: string;\r\n  };\r\n  lastRun?: Date;\r\n  nextRun?: Date;\r\n  runCount: number;\r\n  successCount: number;\r\n  errorCount: number;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n  createdBy: string;\r\n  tags: string[];\r\n}\r\n\r\n// Mock otomasyon verileri\r\nconst mockAutomations: AutomationRule[] = [\r\n  {\r\n    id: '1',\r\n    name: 'G├╝nl├╝k Ba─ş─▒┼ş Raporu',\r\n    description: \"Her g├╝n saat 09:00'da g├╝nl├╝k ba─ş─▒┼ş raporunu e-posta ile g├Ânder\",\r\n    type: 'report',\r\n    status: 'active',\r\n    trigger: {\r\n      type: 'time',\r\n      config: { time: '09:00', timezone: 'Europe/Istanbul' },\r\n    },\r\n    actions: [\r\n      {\r\n        id: 'action1',\r\n        type: 'email_report',\r\n        config: {\r\n          recipients: ['admin@kafkasdernegi.org', 'muhasebe@kafkasdernegi.org'],\r\n          template: 'daily_donation_report',\r\n          includeCharts: true,\r\n        },\r\n        order: 1,\r\n      },\r\n    ],\r\n    schedule: {\r\n      frequency: 'daily',\r\n      time: '09:00',\r\n    },\r\n    lastRun: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 saat ├Ânce\r\n    nextRun: new Date(Date.now() + 22 * 60 * 60 * 1000), // 22 saat sonra\r\n    runCount: 45,\r\n    successCount: 44,\r\n    errorCount: 1,\r\n    createdAt: new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // 30 g├╝n ├Ânce\r\n    updatedAt: new Date(Date.now() - 2 * 60 * 60 * 1000),\r\n    createdBy: 'admin',\r\n    tags: ['rapor', 'ba─ş─▒┼ş', 'g├╝nl├╝k'],\r\n  },\r\n  {\r\n    id: '2',\r\n    name: 'Yeni Ba┼şvuru Bildirimi',\r\n    description: 'Yeni yard─▒m ba┼şvurusu geldi─şinde ilgili ekibe bildirim g├Ânder',\r\n    type: 'notification',\r\n    status: 'active',\r\n    trigger: {\r\n      type: 'event',\r\n      config: { event: 'new_beneficiary_application' },\r\n    },\r\n    actions: [\r\n      {\r\n        id: 'action2',\r\n        type: 'push_notification',\r\n        config: {\r\n          recipients: ['social_team'],\r\n          message: 'Yeni yard─▒m ba┼şvurusu: {{beneficiary_name}}',\r\n          priority: 'high',\r\n        },\r\n        order: 1,\r\n      },\r\n      {\r\n        id: 'action3',\r\n        type: 'email_notification',\r\n        config: {\r\n          recipients: ['social@kafkasdernegi.org'],\r\n          template: 'new_application_alert',\r\n          data: ['beneficiary_name', 'application_type', 'urgency_level'],\r\n        },\r\n        order: 2,\r\n      },\r\n    ],\r\n    conditions: [{ field: 'urgency_level', operator: '>=', value: 'medium' }],\r\n    lastRun: new Date(Date.now() - 15 * 60 * 1000), // 15 dakika ├Ânce\r\n    nextRun: undefined,\r\n    runCount: 23,\r\n    successCount: 23,\r\n    errorCount: 0,\r\n    createdAt: new Date(Date.now() - 15 * 24 * 60 * 60 * 1000), // 15 g├╝n ├Ânce\r\n    updatedAt: new Date(Date.now() - 15 * 60 * 1000),\r\n    createdBy: 'social_team',\r\n    tags: ['bildirim', 'ba┼şvuru', 'acil'],\r\n  },\r\n  {\r\n    id: '3',\r\n    name: 'Ayl─▒k Mali Rapor',\r\n    description: 'Her ay─▒n sonunda mali raporu haz─▒rla ve y├Ânetime g├Ânder',\r\n    type: 'report',\r\n    status: 'active',\r\n    trigger: {\r\n      type: 'time',\r\n      config: { day: 'last', time: '18:00' },\r\n    },\r\n    actions: [\r\n      {\r\n        id: 'action4',\r\n        type: 'generate_report',\r\n        config: {\r\n          reportType: 'financial_summary',\r\n          period: 'monthly',\r\n          includeCharts: true,\r\n          format: 'pdf',\r\n        },\r\n        order: 1,\r\n      },\r\n      {\r\n        id: 'action5',\r\n        type: 'email_report',\r\n        config: {\r\n          recipients: ['management@kafkasdernegi.org'],\r\n          subject: 'Ayl─▒k Mali Rapor - {{month}} {{year}}',\r\n          attachment: true,\r\n        },\r\n        order: 2,\r\n      },\r\n    ],\r\n    schedule: {\r\n      frequency: 'monthly',\r\n      time: '18:00',\r\n    },\r\n    lastRun: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000), // 5 g├╝n ├Ânce\r\n    nextRun: new Date(Date.now() + 25 * 24 * 60 * 60 * 1000), // 25 g├╝n sonra\r\n    runCount: 6,\r\n    successCount: 6,\r\n    errorCount: 0,\r\n    createdAt: new Date(Date.now() - 6 * 30 * 24 * 60 * 60 * 1000), // 6 ay ├Ânce\r\n    updatedAt: new Date(Date.now() - 5 * 24 * 60 * 60 * 1000),\r\n    createdBy: 'finance_team',\r\n    tags: ['rapor', 'mali', 'ayl─▒k'],\r\n  },\r\n  {\r\n    id: '4',\r\n    name: 'Ba─ş─▒┼ş Te┼şekk├╝r Mesaj─▒',\r\n    description: 'Ba─ş─▒┼ş yap─▒ld─▒─ş─▒nda otomatik te┼şekk├╝r e-postas─▒ g├Ânder',\r\n    type: 'notification',\r\n    status: 'paused',\r\n    trigger: {\r\n      type: 'event',\r\n      config: { event: 'donation_received' },\r\n    },\r\n    actions: [\r\n      {\r\n        id: 'action6',\r\n        type: 'email_notification',\r\n        config: {\r\n          recipients: ['{{donor_email}}'],\r\n          template: 'donation_thank_you',\r\n          data: ['donor_name', 'donation_amount', 'donation_date'],\r\n        },\r\n        order: 1,\r\n      },\r\n    ],\r\n    lastRun: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 7 g├╝n ├Ânce\r\n    nextRun: undefined,\r\n    runCount: 156,\r\n    successCount: 154,\r\n    errorCount: 2,\r\n    createdAt: new Date(Date.now() - 3 * 30 * 24 * 60 * 60 * 1000), // 3 ay ├Ânce\r\n    updatedAt: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000),\r\n    createdBy: 'marketing_team',\r\n    tags: ['te┼şekk├╝r', 'ba─ş─▒┼ş', 'e-posta'],\r\n  },\r\n];\r\n\r\ninterface SmartAutomationSystemProps {\r\n  className?: string;\r\n  onAutomationToggle?: (automationId: string, status: AutomationStatus) => void;\r\n  onAutomationEdit?: (automation: AutomationRule) => void;\r\n  onAutomationDelete?: (automationId: string) => void;\r\n  onAutomationRun?: (automationId: string) => void;\r\n}\r\n\r\n/**\r\n * SmartAutomationSystem function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function SmartAutomationSystem({\r\n  className = '',\r\n  onAutomationToggle,\r\n  onAutomationEdit,\r\n  onAutomationDelete,\r\n  onAutomationRun,\r\n}: SmartAutomationSystemProps) {\r\n  const [automations, setAutomations] = useState<AutomationRule[]>(mockAutomations);\r\n  const [activeTab, setActiveTab] = useState('all');\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [filterType, setFilterType] = useState<AutomationType | 'all'>('all');\r\n  const [filterStatus, setFilterStatus] = useState<AutomationStatus | 'all'>('all');\r\n  const [showCreateForm, setShowCreateForm] = useState(false);\r\n  const [selectedAutomation, setSelectedAutomation] = useState<AutomationRule | null>(null);\r\n\r\n  const { triggerHapticFeedback, deviceInfo } = useAdvancedMobile();\r\n\r\n  // Filtrelenmi┼ş otomasyonlar\r\n  const filteredAutomations = automations.filter((automation) => {\r\n    const matchesTab =\r\n      activeTab === 'all' ||\r\n      (activeTab === 'active' && automation.status === 'active') ||\r\n      (activeTab === 'paused' && automation.status === 'paused') ||\r\n      (activeTab === 'draft' && automation.status === 'draft');\r\n\r\n    const matchesSearch =\r\n      searchQuery === '' ||\r\n      automation.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      automation.description.toLowerCase().includes(searchQuery.toLowerCase());\r\n\r\n    const matchesType = filterType === 'all' || automation.type === filterType;\r\n    const matchesStatus = filterStatus === 'all' || automation.status === filterStatus;\r\n\r\n    return matchesTab && matchesSearch && matchesType && matchesStatus;\r\n  });\r\n\r\n  // Otomasyon t├╝r├╝ ikonlar─▒\r\n  const getAutomationIcon = (type: AutomationType) => {\r\n    switch (type) {\r\n      case 'workflow':\r\n        return Activity;\r\n      case 'notification':\r\n        return Bell;\r\n      case 'report':\r\n        return BarChart3;\r\n      case 'data_sync':\r\n        return Upload;\r\n      case 'approval':\r\n        return CheckCircle;\r\n      case 'reminder':\r\n        return Clock;\r\n      default:\r\n        return Zap;\r\n    }\r\n  };\r\n\r\n  // Otomasyon t├╝r├╝ renkleri\r\n  const getAutomationColor = (type: AutomationType) => {\r\n    switch (type) {\r\n      case 'workflow':\r\n        return 'text-blue-600 bg-blue-100';\r\n      case 'notification':\r\n        return 'text-green-600 bg-green-100';\r\n      case 'report':\r\n        return 'text-purple-600 bg-purple-100';\r\n      case 'data_sync':\r\n        return 'text-orange-600 bg-orange-100';\r\n      case 'approval':\r\n        return 'text-yellow-600 bg-yellow-100';\r\n      case 'reminder':\r\n        return 'text-red-600 bg-red-100';\r\n      default:\r\n        return 'text-gray-600 bg-gray-100';\r\n    }\r\n  };\r\n\r\n  // Durum renkleri\r\n  const getStatusColor = (status: AutomationStatus) => {\r\n    switch (status) {\r\n      case 'active':\r\n        return 'text-green-600 bg-green-100 border-green-200';\r\n      case 'paused':\r\n        return 'text-yellow-600 bg-yellow-100 border-yellow-200';\r\n      case 'draft':\r\n        return 'text-gray-600 bg-gray-100 border-gray-200';\r\n      case 'error':\r\n        return 'text-red-600 bg-red-100 border-red-200';\r\n      case 'completed':\r\n        return 'text-blue-600 bg-blue-100 border-blue-200';\r\n      default:\r\n        return 'text-gray-600 bg-gray-100 border-gray-200';\r\n    }\r\n  };\r\n\r\n  // Zaman format─▒\r\n  const getTimeAgo = (date: Date): string => {\r\n    const now = new Date();\r\n    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);\r\n\r\n    if (diffInSeconds < 60) return 'Az ├Ânce';\r\n    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} dakika ├Ânce`;\r\n    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} saat ├Ânce`;\r\n    return `${Math.floor(diffInSeconds / 86400)} g├╝n ├Ânce`;\r\n  };\r\n\r\n  // Otomasyon durumunu de─şi┼ştir\r\n  const handleToggleStatus = useCallback(\r\n    (automationId: string) => {\r\n      setAutomations((prev) =>\r\n        prev.map((automation) =>\r\n          automation.id === automationId\r\n            ? {\r\n                ...automation,\r\n                status: automation.status === 'active' ? 'paused' : 'active',\r\n                updatedAt: new Date(),\r\n              }\r\n            : automation,\r\n        ),\r\n      );\r\n      onAutomationToggle?.(automationId, 'active');\r\n      triggerHapticFeedback('medium');\r\n    },\r\n    [onAutomationToggle, triggerHapticFeedback],\r\n  );\r\n\r\n  // Otomasyonu d├╝zenle\r\n  const handleEdit = useCallback(\r\n    (automation: AutomationRule) => {\r\n      setSelectedAutomation(automation);\r\n      onAutomationEdit?.(automation);\r\n      triggerHapticFeedback('light');\r\n    },\r\n    [onAutomationEdit, triggerHapticFeedback],\r\n  );\r\n\r\n  // Otomasyonu sil\r\n  const handleDelete = useCallback(\r\n    (automationId: string) => {\r\n      setAutomations((prev) => prev.filter((a) => a.id !== automationId));\r\n      onAutomationDelete?.(automationId);\r\n      triggerHapticFeedback('light');\r\n    },\r\n    [onAutomationDelete, triggerHapticFeedback],\r\n  );\r\n\r\n  // Otomasyonu ├ğal─▒┼şt─▒r\r\n  const handleRun = useCallback(\r\n    (automationId: string) => {\r\n      onAutomationRun?.(automationId);\r\n      triggerHapticFeedback('medium');\r\n    },\r\n    [onAutomationRun, triggerHapticFeedback],\r\n  );\r\n\r\n  // Ba┼şar─▒ oran─▒ hesapla\r\n  const getSuccessRate = (automation: AutomationRule): number => {\r\n    if (automation.runCount === 0) return 0;\r\n    return Math.round((automation.successCount / automation.runCount) * 100);\r\n  };\r\n\r\n  // ─░statistikler\r\n  const stats = {\r\n    total: automations.length,\r\n    active: automations.filter((a) => a.status === 'active').length,\r\n    paused: automations.filter((a) => a.status === 'paused').length,\r\n    totalRuns: automations.reduce((sum, a) => sum + a.runCount, 0),\r\n    successRate:\r\n      automations.length > 0\r\n        ? Math.round(\r\n            automations.reduce((sum, a) => sum + getSuccessRate(a), 0) / automations.length,\r\n          )\r\n        : 0,\r\n  };\r\n\r\n  return (\r\n    <div className={`w-full max-w-6xl mx-auto ${className}`}>\r\n      <Card className=\"shadow-xl border-0 bg-white/95 backdrop-blur-sm\">\r\n        <CardHeader className=\"pb-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-3\">\r\n              <Zap className=\"w-6 h-6 text-blue-600\" />\r\n              <div>\r\n                <CardTitle className=\"text-xl font-semibold text-gray-900\">\r\n                  Ak─▒ll─▒ Otomasyon Sistemi\r\n                </CardTitle>\r\n                <p className=\"text-sm text-gray-600\">\r\n                  {stats.total} otomasyon, {stats.active} aktif, %{stats.successRate} ba┼şar─▒ oran─▒\r\n                </p>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"flex items-center gap-2\">\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={() => {\r\n                  setShowCreateForm(!showCreateForm);\r\n                }}\r\n                className=\"gap-2\"\r\n              >\r\n                <Plus className=\"w-4 h-4\" />\r\n                Yeni Otomasyon\r\n              </Button>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Arama ve Filtreler */}\r\n          <div className=\"flex flex-col sm:flex-row gap-3 mt-4\">\r\n            <div className=\"relative flex-1\">\r\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\r\n              <Input\r\n                placeholder=\"Otomasyonlarda ara...\"\r\n                value={searchQuery}\r\n                onChange={(e) => {\r\n                  setSearchQuery(e.target.value);\r\n                }}\r\n                className=\"pl-10\"\r\n              />\r\n            </div>\r\n\r\n            <Select\r\n              value={filterType}\r\n              onValueChange={(value) => {\r\n                setFilterType(value as AutomationType | 'all');\r\n              }}\r\n            >\r\n              <SelectTrigger className=\"w-[150px]\">\r\n                <SelectValue placeholder=\"T├╝r\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"all\">T├╝m T├╝rler</SelectItem>\r\n                <SelectItem value=\"workflow\">─░┼ş Ak─▒┼ş─▒</SelectItem>\r\n                <SelectItem value=\"notification\">Bildirim</SelectItem>\r\n                <SelectItem value=\"report\">Rapor</SelectItem>\r\n                <SelectItem value=\"data_sync\">Veri Senkronizasyonu</SelectItem>\r\n                <SelectItem value=\"approval\">Onay</SelectItem>\r\n                <SelectItem value=\"reminder\">Hat─▒rlatma</SelectItem>\r\n              </SelectContent>\r\n            </Select>\r\n\r\n            <Select\r\n              value={filterStatus}\r\n              onValueChange={(value) => {\r\n                setFilterStatus(value as AutomationStatus | 'all');\r\n              }}\r\n            >\r\n              <SelectTrigger className=\"w-[150px]\">\r\n                <SelectValue placeholder=\"Durum\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"all\">T├╝m Durumlar</SelectItem>\r\n                <SelectItem value=\"active\">Aktif</SelectItem>\r\n                <SelectItem value=\"paused\">Duraklat─▒lm─▒┼ş</SelectItem>\r\n                <SelectItem value=\"draft\">Taslak</SelectItem>\r\n                <SelectItem value=\"error\">Hata</SelectItem>\r\n                <SelectItem value=\"completed\">Tamamland─▒</SelectItem>\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n        </CardHeader>\r\n\r\n        <CardContent className=\"p-0\">\r\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\r\n            <TabsList className=\"grid w-full grid-cols-4 mx-6 mb-4\">\r\n              <TabsTrigger value=\"all\" className=\"flex items-center gap-2\">\r\n                <Activity className=\"w-4 h-4\" />\r\n                T├╝m├╝ ({stats.total})\r\n              </TabsTrigger>\r\n              <TabsTrigger value=\"active\" className=\"flex items-center gap-2\">\r\n                <Play className=\"w-4 h-4\" />\r\n                Aktif ({stats.active})\r\n              </TabsTrigger>\r\n              <TabsTrigger value=\"paused\" className=\"flex items-center gap-2\">\r\n                <Pause className=\"w-4 h-4\" />\r\n                Duraklat─▒lm─▒┼ş ({stats.paused})\r\n              </TabsTrigger>\r\n              <TabsTrigger value=\"draft\" className=\"flex items-center gap-2\">\r\n                <Edit className=\"w-4 h-4\" />\r\n                Taslak ({automations.filter((a) => a.status === 'draft').length})\r\n              </TabsTrigger>\r\n            </TabsList>\r\n\r\n            <TabsContent value={activeTab} className=\"px-6 pb-6\">\r\n              <div className=\"space-y-4\">\r\n                <AnimatePresence>\r\n                  {filteredAutomations.map((automation, index) => {\r\n                    const IconComponent = getAutomationIcon(automation.type);\r\n                    const colorClass = getAutomationColor(automation.type);\r\n                    const statusClass = getStatusColor(automation.status);\r\n                    const successRate = getSuccessRate(automation);\r\n\r\n                    return (\r\n                      <motion.div\r\n                        key={automation.id}\r\n                        initial={{ opacity: 0, y: 20 }}\r\n                        animate={{ opacity: 1, y: 0 }}\r\n                        exit={{ opacity: 0, y: -20 }}\r\n                        transition={{ delay: index * 0.05 }}\r\n                        className=\"p-6 rounded-lg border-2 bg-white shadow-sm hover:shadow-md transition-all duration-200\"\r\n                      >\r\n                        <div className=\"flex items-start justify-between mb-4\">\r\n                          <div className=\"flex items-start gap-4\">\r\n                            <div className={`p-3 rounded-lg ${colorClass} flex-shrink-0`}>\r\n                              <IconComponent className=\"w-6 h-6\" />\r\n                            </div>\r\n\r\n                            <div className=\"flex-1\">\r\n                              <div className=\"flex items-center gap-3 mb-2\">\r\n                                <h3 className=\"text-lg font-semibold text-gray-900\">\r\n                                  {automation.name}\r\n                                </h3>\r\n                                <Badge variant=\"outline\" className={`text-xs ${statusClass}`}>\r\n                                  {automation.status === 'active'\r\n                                    ? 'Aktif'\r\n                                    : automation.status === 'paused'\r\n                                      ? 'Duraklat─▒lm─▒┼ş'\r\n                                      : automation.status === 'draft'\r\n                                        ? 'Taslak'\r\n                                        : automation.status === 'error'\r\n                                          ? 'Hata'\r\n                                          : 'Tamamland─▒'}\r\n                                </Badge>\r\n                              </div>\r\n\r\n                              <p className=\"text-gray-600 mb-3\">{automation.description}</p>\r\n\r\n                              <div className=\"flex flex-wrap gap-2 mb-3\">\r\n                                {automation.tags.map((tag, tagIndex) => (\r\n                                  <Badge key={tagIndex} variant=\"secondary\" className=\"text-xs\">\r\n                                    {tag}\r\n                                  </Badge>\r\n                                ))}\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n\r\n                          <div className=\"flex items-center gap-2\">\r\n                            <Button\r\n                              variant=\"outline\"\r\n                              size=\"sm\"\r\n                              onClick={() => {\r\n                                handleRun(automation.id);\r\n                              }}\r\n                              className=\"gap-2\"\r\n                            >\r\n                              <Play className=\"w-4 h-4\" />\r\n                              ├çal─▒┼şt─▒r\r\n                            </Button>\r\n\r\n                            <Button\r\n                              variant=\"outline\"\r\n                              size=\"sm\"\r\n                              onClick={() => {\r\n                                handleEdit(automation);\r\n                              }}\r\n                              className=\"gap-2\"\r\n                            >\r\n                              <Edit className=\"w-4 h-4\" />\r\n                              D├╝zenle\r\n                            </Button>\r\n\r\n                            <Button\r\n                              variant=\"outline\"\r\n                              size=\"sm\"\r\n                              onClick={() => {\r\n                                handleToggleStatus(automation.id);\r\n                              }}\r\n                              className=\"gap-2\"\r\n                            >\r\n                              {automation.status === 'active' ? (\r\n                                <>\r\n                                  <Pause className=\"w-4 h-4\" />\r\n                                  Duraklat\r\n                                </>\r\n                              ) : (\r\n                                <>\r\n                                  <Play className=\"w-4 h-4\" />\r\n                                  Ba┼şlat\r\n                                </>\r\n                              )}\r\n                            </Button>\r\n\r\n                            <Button\r\n                              variant=\"outline\"\r\n                              size=\"sm\"\r\n                              onClick={() => {\r\n                                handleDelete(automation.id);\r\n                              }}\r\n                              className=\"gap-2 text-red-600 hover:text-red-700\"\r\n                            >\r\n                              <Trash2 className=\"w-4 h-4\" />\r\n                              Sil\r\n                            </Button>\r\n                          </div>\r\n                        </div>\r\n\r\n                        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4 pt-4 border-t border-gray-200\">\r\n                          <div className=\"text-center\">\r\n                            <p className=\"text-2xl font-bold text-gray-900\">\r\n                              {automation.runCount}\r\n                            </p>\r\n                            <p className=\"text-sm text-gray-600\">Toplam ├çal─▒┼şma</p>\r\n                          </div>\r\n\r\n                          <div className=\"text-center\">\r\n                            <p className=\"text-2xl font-bold text-green-600\">{successRate}%</p>\r\n                            <p className=\"text-sm text-gray-600\">Ba┼şar─▒ Oran─▒</p>\r\n                          </div>\r\n\r\n                          <div className=\"text-center\">\r\n                            <p className=\"text-sm text-gray-600\">Son ├çal─▒┼şma</p>\r\n                            <p className=\"text-sm font-medium text-gray-900\">\r\n                              {automation.lastRun ? getTimeAgo(automation.lastRun) : 'Hi├ğ'}\r\n                            </p>\r\n                          </div>\r\n\r\n                          <div className=\"text-center\">\r\n                            <p className=\"text-sm text-gray-600\">Sonraki ├çal─▒┼şma</p>\r\n                            <p className=\"text-sm font-medium text-gray-900\">\r\n                              {automation.nextRun ? getTimeAgo(automation.nextRun) : 'Belirsiz'}\r\n                            </p>\r\n                          </div>\r\n                        </div>\r\n                      </motion.div>\r\n                    );\r\n                  })}\r\n                </AnimatePresence>\r\n\r\n                {filteredAutomations.length === 0 && (\r\n                  <div className=\"text-center py-12\">\r\n                    <Zap className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\r\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Otomasyon Bulunamad─▒</h3>\r\n                    <p className=\"text-gray-500\">\r\n                      {(searchQuery ?? filterType !== 'all') || filterStatus !== 'all'\r\n                        ? 'Arama kriterlerinize uygun otomasyon bulunamad─▒'\r\n                        : 'Hen├╝z otomasyon bulunmuyor'}\r\n                    </p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </TabsContent>\r\n          </Tabs>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Yeni Otomasyon Formu */}\r\n      <AnimatePresence>\r\n        {showCreateForm && (\r\n          <motion.div\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: -20 }}\r\n            className=\"mt-6\"\r\n          >\r\n            <Card className=\"shadow-lg border-0 bg-white/95 backdrop-blur-sm\">\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <Plus className=\"w-5 h-5 text-blue-600\" />\r\n                  Yeni Otomasyon Olu┼ştur\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-6\">\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                  <div className=\"space-y-4\">\r\n                    <div>\r\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                        Otomasyon Ad─▒\r\n                      </label>\r\n                      <Input placeholder=\"├ûrn: G├╝nl├╝k Ba─ş─▒┼ş Raporu\" />\r\n                    </div>\r\n\r\n                    <div>\r\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                        A├ğ─▒klama\r\n                      </label>\r\n                      <Textarea placeholder=\"Otomasyonun ne yapt─▒─ş─▒n─▒ a├ğ─▒klay─▒n...\" rows={3} />\r\n                    </div>\r\n\r\n                    <div>\r\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                        Otomasyon T├╝r├╝\r\n                      </label>\r\n                      <Select>\r\n                        <SelectTrigger>\r\n                          <SelectValue placeholder=\"T├╝r se├ğin\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"workflow\">─░┼ş Ak─▒┼ş─▒</SelectItem>\r\n                          <SelectItem value=\"notification\">Bildirim</SelectItem>\r\n                          <SelectItem value=\"report\">Rapor</SelectItem>\r\n                          <SelectItem value=\"data_sync\">Veri Senkronizasyonu</SelectItem>\r\n                          <SelectItem value=\"approval\">Onay</SelectItem>\r\n                          <SelectItem value=\"reminder\">Hat─▒rlatma</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"space-y-4\">\r\n                    <div>\r\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                        Tetikleyici T├╝r├╝\r\n                      </label>\r\n                      <Select>\r\n                        <SelectTrigger>\r\n                          <SelectValue placeholder=\"Tetikleyici se├ğin\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"time\">Zaman</SelectItem>\r\n                          <SelectItem value=\"event\">Olay</SelectItem>\r\n                          <SelectItem value=\"condition\">Ko┼şul</SelectItem>\r\n                          <SelectItem value=\"manual\">Manuel</SelectItem>\r\n                          <SelectItem value=\"api\">API</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n\r\n                    <div>\r\n                      <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                        Etiketler\r\n                      </label>\r\n                      <Input placeholder=\"rapor, g├╝nl├╝k, ba─ş─▒┼ş (virg├╝lle ay─▒r─▒n)\" />\r\n                    </div>\r\n\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div>\r\n                        <p className=\"font-medium text-gray-700\">Otomatik Ba┼şlat</p>\r\n                        <p className=\"text-sm text-gray-500\">\r\n                          Olu┼şturulduktan sonra otomatik ba┼şlat\r\n                        </p>\r\n                      </div>\r\n                      <Switch defaultChecked />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"flex justify-end gap-3\">\r\n                  <Button\r\n                    variant=\"outline\"\r\n                    onClick={() => {\r\n                      setShowCreateForm(false);\r\n                    }}\r\n                  >\r\n                    ─░ptal\r\n                  </Button>\r\n                  <Button className=\"gap-2\">\r\n                    <Plus className=\"w-4 h-4\" />\r\n                    Otomasyon Olu┼ştur\r\n                  </Button>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SmartAutomationSystem;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\beneficiary\\BeneficiaryAidHistory.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'beneficiaryId' is defined but never used.","line":38,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":16},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'beneficiaryId' is defined but never used. Allowed unused args must match /^_/u.","line":38,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":219,"column":74,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":219,"endColumn":77,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7464,7467],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7464,7467],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview BeneficiaryAidHistory Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { Calendar, DollarSign, FileText, Gift, HandHeart, Heart, Package } from 'lucide-react';\r\nimport { useState } from 'react';\r\nimport { Badge } from '../ui/badge';\r\nimport { Button } from '../ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Input } from '../ui/input';\r\n\r\ninterface AidRecord {\r\n  id: string;\r\n  date: string;\r\n  type: 'Nakdi' | 'Ayni' | 'Hizmet';\r\n  category: string;\r\n  amount?: number;\r\n  description: string;\r\n  status: 'Tamamland─▒' | 'Beklemede' | '─░ptal';\r\n  approvedBy: string;\r\n}\r\n\r\ninterface BeneficiaryAidHistoryProps {\r\n  beneficiaryId: string;\r\n  aidHistory?: AidRecord[];\r\n}\r\n\r\n/**\r\n * BeneficiaryAidHistory function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function BeneficiaryAidHistory({\r\n  beneficiaryId,\r\n  aidHistory = [],\r\n}: BeneficiaryAidHistoryProps) {\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [filterType, setFilterType] = useState('all');\r\n  const [filterStatus, setFilterStatus] = useState('all');\r\n\r\n  // Mock data if no aid history provided\r\n  const mockAidHistory: AidRecord[] = [\r\n    {\r\n      id: '1',\r\n      date: '2024-01-15',\r\n      type: 'Nakdi',\r\n      category: 'G─▒da Yard─▒m─▒',\r\n      amount: 500,\r\n      description: 'Ayl─▒k g─▒da deste─şi',\r\n      status: 'Tamamland─▒',\r\n      approvedBy: 'Ahmet Y─▒lmaz',\r\n    },\r\n    {\r\n      id: '2',\r\n      date: '2024-02-01',\r\n      type: 'Ayni',\r\n      category: 'Giyim Yard─▒m─▒',\r\n      description: 'K─▒┼ş k─▒yafetleri paketi',\r\n      status: 'Tamamland─▒',\r\n      approvedBy: 'Fatma Demir',\r\n    },\r\n    {\r\n      id: '3',\r\n      date: '2024-02-15',\r\n      type: 'Hizmet',\r\n      category: 'Sa─şl─▒k Hizmeti',\r\n      description: 'Hastane sevk i┼şlemi',\r\n      status: 'Beklemede',\r\n      approvedBy: 'Dr. Mehmet ├ûz',\r\n    },\r\n  ];\r\n\r\n  const records = aidHistory.length > 0 ? aidHistory : mockAidHistory;\r\n\r\n  const filteredRecords = records.filter((record) => {\r\n    const matchesSearch =\r\n      record.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      record.category.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesType = filterType === 'all' || record.type === filterType;\r\n    const matchesStatus = filterStatus === 'all' || record.status === filterStatus;\r\n\r\n    return matchesSearch && matchesType && matchesStatus;\r\n  });\r\n\r\n  const totalCashAid = records\r\n    .filter((record) => record.type === 'Nakdi' && record.amount)\r\n    .reduce((total, record) => total + (record.amount ?? 0), 0);\r\n\r\n  const getTypeIcon = (type: string) => {\r\n    switch (type) {\r\n      case 'Nakdi':\r\n        return <DollarSign className=\"w-4 h-4\" />;\r\n      case 'Ayni':\r\n        return <Package className=\"w-4 h-4\" />;\r\n      case 'Hizmet':\r\n        return <Heart className=\"w-4 h-4\" />;\r\n      default:\r\n        return <Gift className=\"w-4 h-4\" />;\r\n    }\r\n  };\r\n\r\n  const getStatusColor = (status: string) => {\r\n    switch (status) {\r\n      case 'Tamamland─▒':\r\n        return 'default';\r\n      case 'Beklemede':\r\n        return 'secondary';\r\n      case '─░ptal':\r\n        return 'destructive';\r\n      default:\r\n        return 'outline';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Yard─▒m ├ûzeti */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n        <Card>\r\n          <CardContent className=\"p-4 text-center\">\r\n            <HandHeart className=\"w-8 h-8 mx-auto mb-2 text-primary\" />\r\n            <p className=\"text-2xl font-bold\">{records.length}</p>\r\n            <p className=\"text-sm text-gray-600\">Toplam Yard─▒m</p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-4 text-center\">\r\n            <DollarSign className=\"w-8 h-8 mx-auto mb-2 text-green-600\" />\r\n            <p className=\"text-2xl font-bold\">{totalCashAid.toLocaleString('tr-TR')} Ôé║</p>\r\n            <p className=\"text-sm text-gray-600\">Nakdi Yard─▒m</p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-4 text-center\">\r\n            <Package className=\"w-8 h-8 mx-auto mb-2 text-blue-600\" />\r\n            <p className=\"text-2xl font-bold\">{records.filter((r) => r.type === 'Ayni').length}</p>\r\n            <p className=\"text-sm text-gray-600\">Ayni Yard─▒m</p>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-4 text-center\">\r\n            <Heart className=\"w-8 h-8 mx-auto mb-2 text-red-600\" />\r\n            <p className=\"text-2xl font-bold\">\r\n              {records.filter((r) => r.type === 'Hizmet').length}\r\n            </p>\r\n            <p className=\"text-sm text-gray-600\">Hizmet Yard─▒m─▒</p>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Yard─▒m Ge├ğmi┼şi */}\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex items-center justify-between\">\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Calendar className=\"w-5 h-5\" />\r\n              Yard─▒m Ge├ğmi┼şi\r\n            </CardTitle>\r\n            <div className=\"flex items-center gap-2\">\r\n              <Input\r\n                placeholder=\"Yard─▒m ara...\"\r\n                value={searchTerm}\r\n                onChange={(e) => {\r\n                  setSearchTerm(e.target.value);\r\n                }}\r\n                className=\"w-48\"\r\n              />\r\n              <select\r\n                value={filterType}\r\n                onChange={(e) => {\r\n                  setFilterType(e.target.value);\r\n                }}\r\n                className=\"px-3 py-2 border rounded-md text-sm\"\r\n              >\r\n                <option value=\"all\">T├╝m T├╝rler</option>\r\n                <option value=\"Nakdi\">Nakdi</option>\r\n                <option value=\"Ayni\">Ayni</option>\r\n                <option value=\"Hizmet\">Hizmet</option>\r\n              </select>\r\n              <select\r\n                value={filterStatus}\r\n                onChange={(e) => {\r\n                  setFilterStatus(e.target.value);\r\n                }}\r\n                className=\"px-3 py-2 border rounded-md text-sm\"\r\n              >\r\n                <option value=\"all\">T├╝m Durumlar</option>\r\n                <option value=\"Tamamland─▒\">Tamamland─▒</option>\r\n                <option value=\"Beklemede\">Beklemede</option>\r\n                <option value=\"─░ptal\">─░ptal</option>\r\n              </select>\r\n            </div>\r\n          </div>\r\n        </CardHeader>\r\n\r\n        <CardContent>\r\n          {filteredRecords.length > 0 ? (\r\n            <div className=\"space-y-3\">\r\n              {filteredRecords.map((record) => (\r\n                <div\r\n                  key={record.id}\r\n                  className=\"flex items-center justify-between p-4 border rounded-lg hover:bg-gray-50\"\r\n                >\r\n                  <div className=\"flex items-center gap-3\">\r\n                    <div className=\"p-2 bg-gray-100 rounded-full\">{getTypeIcon(record.type)}</div>\r\n                    <div>\r\n                      <div className=\"flex items-center gap-2 mb-1\">\r\n                        <h4 className=\"font-medium\">{record.category}</h4>\r\n                        <Badge variant=\"outline\" className=\"text-xs\">\r\n                          {record.type}\r\n                        </Badge>\r\n                        <Badge variant={getStatusColor(record.status) as any} className=\"text-xs\">\r\n                          {record.status}\r\n                        </Badge>\r\n                      </div>\r\n                      <p className=\"text-sm text-gray-600\">{record.description}</p>\r\n                      <div className=\"flex items-center gap-4 text-xs text-gray-500 mt-1\">\r\n                        <span className=\"flex items-center gap-1\">\r\n                          <Calendar className=\"w-3 h-3\" />\r\n                          {new Date(record.date).toLocaleDateString('tr-TR')}\r\n                        </span>\r\n                        <span>Onaylayan: {record.approvedBy}</span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"text-right\">\r\n                    {record.amount && (\r\n                      <p className=\"font-bold text-green-600\">\r\n                        {record.amount.toLocaleString('tr-TR')} Ôé║\r\n                      </p>\r\n                    )}\r\n                    <Button variant=\"ghost\" size=\"sm\" className=\"mt-1\">\r\n                      <FileText className=\"w-4 h-4\" />\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <div className=\"text-center py-8 text-gray-500\">\r\n              <HandHeart className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\r\n              <p>Yard─▒m ge├ğmi┼şi bulunmuyor</p>\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\beneficiary\\BeneficiaryDocuments.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":29,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":29,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[729,732],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[729,732],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'beneficiaryId' is defined but never used.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":16},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'beneficiaryId' is defined but never used. Allowed unused args must match /^_/u.","line":41,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1246,1249],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1246,1249],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1554,1557],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1554,1557],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":55,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":55,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1701,1703],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":82,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":19},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":82,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":95,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":95,"endColumn":19},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":95,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":95,"endColumn":19}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview BeneficiaryDocuments Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport {\r\n  Camera,\r\n  Download,\r\n  Eye,\r\n  File,\r\n  FileSpreadsheet,\r\n  FileText,\r\n  Image as ImageIcon,\r\n  Trash2,\r\n  Upload,\r\n} from 'lucide-react';\r\nimport { useState } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { Badge } from '../ui/badge';\r\nimport { Button } from '../ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle } from '../ui/dialog';\r\nimport { Input } from '../ui/input';\r\n\r\ninterface BeneficiaryDocumentsProps {\r\n  beneficiaryId: string;\r\n  documents?: any[];\r\n  onDocumentUpload?: (files: File[]) => void;\r\n  onDocumentDelete?: (documentId: string) => void;\r\n}\r\n\r\n/**\r\n * BeneficiaryDocuments function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function BeneficiaryDocuments({\r\n  beneficiaryId,\r\n  documents = [],\r\n  onDocumentUpload,\r\n  onDocumentDelete,\r\n}: BeneficiaryDocumentsProps) {\r\n  const [isDocumentModalOpen, setIsDocumentModalOpen] = useState(false);\r\n  const [uploadedFiles, setUploadedFiles] = useState<any[]>(documents);\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const [uploadProgress, setUploadProgress] = useState(0);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [selectedFileType, setSelectedFileType] = useState('all');\r\n  const [previewFile, setPreviewFile] = useState<any>(null);\r\n\r\n  const handleFileUpload = async (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const files = Array.from(event.target.files || []);\r\n    if (files.length === 0) return;\r\n\r\n    setIsUploading(true);\r\n    setUploadProgress(0);\r\n\r\n    try {\r\n      // Simulate upload progress\r\n      for (let i = 0; i <= 100; i += 10) {\r\n        setUploadProgress(i);\r\n        await new Promise((resolve) => setTimeout(resolve, 100));\r\n      }\r\n\r\n      // Create file objects\r\n      const newFiles = files.map((file, index) => ({\r\n        id: Date.now() + index,\r\n        name: file.name,\r\n        size: file.size,\r\n        type: file.type,\r\n        uploadDate: new Date(),\r\n        url: URL.createObjectURL(file),\r\n      }));\r\n\r\n      setUploadedFiles((prev) => [...prev, ...newFiles]);\r\n      onDocumentUpload?.(files);\r\n\r\n      toast.success(`${files.length} dosya ba┼şar─▒yla y├╝klendi!`);\r\n    } catch (error) {\r\n      toast.error('Dosya y├╝kleme hatas─▒!');\r\n    } finally {\r\n      setIsUploading(false);\r\n      setUploadProgress(0);\r\n    }\r\n  };\r\n\r\n  const handleDeleteFile = async (fileId: string) => {\r\n    try {\r\n      setUploadedFiles((prev) => prev.filter((file) => file.id !== fileId));\r\n      onDocumentDelete?.(fileId);\r\n      toast.success('Dosya silindi!');\r\n    } catch (error) {\r\n      toast.error('Dosya silme hatas─▒!');\r\n    }\r\n  };\r\n\r\n  const getFileIcon = (fileType: string) => {\r\n    if (fileType.startsWith('image/')) return <ImageIcon className=\"w-4 h-4\" />;\r\n    if (fileType.includes('spreadsheet') || fileType.includes('excel'))\r\n      return <FileSpreadsheet className=\"w-4 h-4\" />;\r\n    if (fileType.includes('pdf') || fileType.includes('text'))\r\n      return <FileText className=\"w-4 h-4\" />;\r\n    return <File className=\"w-4 h-4\" />;\r\n  };\r\n\r\n  const filteredFiles = uploadedFiles.filter((file) => {\r\n    const matchesSearch = file.name.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesType = selectedFileType === 'all' || file.type.includes(selectedFileType);\r\n    return matchesSearch && matchesType;\r\n  });\r\n\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center justify-between\">\r\n            <span className=\"flex items-center gap-2\">\r\n              <FileText className=\"w-5 h-5\" />\r\n              Belgeler\r\n            </span>\r\n            <Button\r\n              size=\"sm\"\r\n              onClick={() => {\r\n                setIsDocumentModalOpen(true);\r\n              }}\r\n            >\r\n              <Upload className=\"w-4 h-4 mr-2\" />\r\n              Belge Y├╝kle\r\n            </Button>\r\n          </CardTitle>\r\n        </CardHeader>\r\n\r\n        <CardContent>\r\n          {uploadedFiles.length > 0 ? (\r\n            <div className=\"space-y-2\">\r\n              {uploadedFiles.slice(0, 3).map((file) => (\r\n                <div key={file.id} className=\"flex items-center justify-between p-2 border rounded\">\r\n                  <div className=\"flex items-center gap-2\">\r\n                    {getFileIcon(file.type)}\r\n                    <span className=\"text-sm\">{file.name}</span>\r\n                    <Badge variant=\"outline\" className=\"text-xs\">\r\n                      {(file.size / 1024).toFixed(1)} KB\r\n                    </Badge>\r\n                  </div>\r\n                  <div className=\"flex items-center gap-1\">\r\n                    <Button\r\n                      variant=\"ghost\"\r\n                      size=\"sm\"\r\n                      onClick={() => {\r\n                        setPreviewFile(file);\r\n                      }}\r\n                    >\r\n                      <Eye className=\"w-3 h-3\" />\r\n                    </Button>\r\n                    <Button variant=\"ghost\" size=\"sm\" onClick={() => handleDeleteFile(file.id)}>\r\n                      <Trash2 className=\"w-3 h-3\" />\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n\r\n              {uploadedFiles.length > 3 && (\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  className=\"w-full\"\r\n                  onClick={() => {\r\n                    setIsDocumentModalOpen(true);\r\n                  }}\r\n                >\r\n                  +{uploadedFiles.length - 3} belge daha...\r\n                </Button>\r\n              )}\r\n            </div>\r\n          ) : (\r\n            <div className=\"text-center py-8 text-gray-500\">\r\n              <FileText className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\r\n              <p>Hen├╝z belge y├╝klenmemi┼ş</p>\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                className=\"mt-2\"\r\n                onClick={() => {\r\n                  setIsDocumentModalOpen(true);\r\n                }}\r\n              >\r\n                ─░lk belgeyi y├╝kle\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Document Upload Modal */}\r\n      <Dialog open={isDocumentModalOpen} onOpenChange={setIsDocumentModalOpen}>\r\n        <DialogContent className=\"max-w-4xl max-h-[80vh] overflow-y-auto\">\r\n          <DialogHeader>\r\n            <DialogTitle>Belge Y├Ânetimi</DialogTitle>\r\n          </DialogHeader>\r\n\r\n          <div className=\"space-y-4\">\r\n            {/* Upload Area */}\r\n            <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-6 text-center\">\r\n              <Upload className=\"w-12 h-12 mx-auto mb-4 text-gray-400\" />\r\n              <p className=\"text-lg font-medium mb-2\">Dosyalar─▒ buraya s├╝r├╝kleyin</p>\r\n              <p className=\"text-sm text-gray-500 mb-4\">veya bilgisayar─▒n─▒zdan se├ğin</p>\r\n\r\n              <div className=\"flex justify-center gap-2\">\r\n                <label htmlFor=\"file-upload\">\r\n                  <Button asChild>\r\n                    <span>\r\n                      <FileText className=\"w-4 h-4 mr-2\" />\r\n                      Dosya Se├ğ\r\n                    </span>\r\n                  </Button>\r\n                </label>\r\n                <input\r\n                  id=\"file-upload\"\r\n                  type=\"file\"\r\n                  multiple\r\n                  className=\"hidden\"\r\n                  onChange={handleFileUpload}\r\n                  accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png,.xlsx,.xls\"\r\n                />\r\n\r\n                <Button variant=\"outline\">\r\n                  <Camera className=\"w-4 h-4 mr-2\" />\r\n                  Foto─şraf ├çek\r\n                </Button>\r\n              </div>\r\n\r\n              {isUploading && (\r\n                <div className=\"mt-4\">\r\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\r\n                    <div\r\n                      className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\r\n                      style={{ width: `${uploadProgress}%` }}\r\n                    />\r\n                  </div>\r\n                  <p className=\"text-sm text-gray-600 mt-1\">Y├╝kleniyor... {uploadProgress}%</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* Search and Filter */}\r\n            <div className=\"flex gap-2\">\r\n              <div className=\"flex-1\">\r\n                <Input\r\n                  placeholder=\"Belge ara...\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => {\r\n                    setSearchTerm(e.target.value);\r\n                  }}\r\n                  className=\"w-full\"\r\n                />\r\n              </div>\r\n              <select\r\n                value={selectedFileType}\r\n                onChange={(e) => {\r\n                  setSelectedFileType(e.target.value);\r\n                }}\r\n                className=\"px-3 py-2 border rounded-md\"\r\n              >\r\n                <option value=\"all\">T├╝m Dosyalar</option>\r\n                <option value=\"image\">Resimler</option>\r\n                <option value=\"pdf\">PDF</option>\r\n                <option value=\"document\">Dok├╝manlar</option>\r\n                <option value=\"spreadsheet\">Excel</option>\r\n              </select>\r\n            </div>\r\n\r\n            {/* File List */}\r\n            <div className=\"max-h-60 overflow-y-auto\">\r\n              <div className=\"grid grid-cols-1 gap-2\">\r\n                {filteredFiles.map((file) => (\r\n                  <div\r\n                    key={file.id}\r\n                    className=\"flex items-center justify-between p-3 border rounded hover:bg-gray-50\"\r\n                  >\r\n                    <div className=\"flex items-center gap-3\">\r\n                      {getFileIcon(file.type)}\r\n                      <div>\r\n                        <p className=\"text-sm font-medium\">{file.name}</p>\r\n                        <p className=\"text-xs text-gray-500\">\r\n                          {(file.size / 1024).toFixed(1)} KB ÔÇó{' '}\r\n                          {new Date(file.uploadDate).toLocaleDateString('tr-TR')}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"flex items-center gap-1\">\r\n                      <Button\r\n                        variant=\"ghost\"\r\n                        size=\"sm\"\r\n                        onClick={() => {\r\n                          setPreviewFile(file);\r\n                        }}\r\n                      >\r\n                        <Eye className=\"w-4 h-4\" />\r\n                      </Button>\r\n                      <Button variant=\"ghost\" size=\"sm\">\r\n                        <Download className=\"w-4 h-4\" />\r\n                      </Button>\r\n                      <Button variant=\"ghost\" size=\"sm\" onClick={() => handleDeleteFile(file.id)}>\r\n                        <Trash2 className=\"w-4 h-4\" />\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <DialogFooter>\r\n            <Button\r\n              variant=\"outline\"\r\n              onClick={() => {\r\n                setIsDocumentModalOpen(false);\r\n              }}\r\n            >\r\n              Kapat\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {/* File Preview Modal */}\r\n      {previewFile && (\r\n        <Dialog\r\n          open={!!previewFile}\r\n          onOpenChange={() => {\r\n            setPreviewFile(null);\r\n          }}\r\n        >\r\n          <DialogContent className=\"max-w-4xl max-h-[80vh]\">\r\n            <DialogHeader>\r\n              <DialogTitle>{previewFile.name}</DialogTitle>\r\n            </DialogHeader>\r\n\r\n            <div className=\"flex-1 overflow-auto\">\r\n              {previewFile.type.startsWith('image/') ? (\r\n                <img src={previewFile.url} alt={previewFile.name} className=\"max-w-full h-auto\" />\r\n              ) : (\r\n                <div className=\"text-center py-8\">\r\n                  <FileText className=\"w-16 h-16 mx-auto mb-4 text-gray-400\" />\r\n                  <p>Bu dosya t├╝r├╝ ├Ânizlenemez</p>\r\n                  <Button className=\"mt-2\">\r\n                    <Download className=\"w-4 h-4 mr-2\" />\r\n                    ─░ndir\r\n                  </Button>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </DialogContent>\r\n        </Dialog>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\beneficiary\\BeneficiaryFamily.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'beneficiaryId' is defined but never used.","line":43,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":16},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'beneficiaryId' is defined but never used. Allowed unused args must match /^_/u.","line":43,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":16}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview BeneficiaryFamily Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { Edit3, Heart, Plus, Trash2, User, Users } from 'lucide-react';\r\nimport { useState } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { Badge } from '../ui/badge';\r\nimport { Button } from '../ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle } from '../ui/dialog';\r\nimport { Input } from '../ui/input';\r\nimport { Label } from '../ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\n\r\ninterface FamilyMember {\r\n  id: string;\r\n  name: string;\r\n  relationship: string;\r\n  age?: number;\r\n  occupation?: string;\r\n  income?: number;\r\n  healthStatus?: string;\r\n}\r\n\r\ninterface BeneficiaryFamilyProps {\r\n  beneficiaryId: string;\r\n  familyMembers?: FamilyMember[];\r\n  editMode: boolean;\r\n  onFamilyUpdate: (members: FamilyMember[]) => void;\r\n}\r\n\r\n/**\r\n * BeneficiaryFamily function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function BeneficiaryFamily({\r\n  beneficiaryId,\r\n  familyMembers = [],\r\n  editMode,\r\n  onFamilyUpdate,\r\n}: BeneficiaryFamilyProps) {\r\n  const [isAddMemberModalOpen, setIsAddMemberModalOpen] = useState(false);\r\n  const [editingMember, setEditingMember] = useState<FamilyMember | null>(null);\r\n  const [newMember, setNewMember] = useState<Partial<FamilyMember>>({\r\n    name: '',\r\n    relationship: '',\r\n    age: 0,\r\n    occupation: '',\r\n    income: 0,\r\n    healthStatus: 'Sa─şl─▒kl─▒',\r\n  });\r\n\r\n  const relationships = [\r\n    'E┼ş',\r\n    '├çocuk',\r\n    'Anne',\r\n    'Baba',\r\n    'Karde┼ş',\r\n    'B├╝y├╝kanne',\r\n    'B├╝y├╝kbaba',\r\n    'Di─şer',\r\n  ];\r\n\r\n  const healthStatuses = ['Sa─şl─▒kl─▒', 'Kronik Hastal─▒k', 'Engelli', 'Ya┼şl─▒l─▒k', 'Di─şer'];\r\n\r\n  const occupations = [\r\n    '─░┼şsiz',\r\n    'Emekli',\r\n    'Memur',\r\n    '─░┼ş├ği',\r\n    'Serbest Meslek',\r\n    '├û─şrenci',\r\n    'Ev Han─▒m─▒',\r\n  ];\r\n\r\n  const handleAddMember = () => {\r\n    if (!newMember.name || !newMember.relationship) {\r\n      toast.error('Ad ve yak─▒nl─▒k derecesi zorunludur!');\r\n      return;\r\n    }\r\n\r\n    const member: FamilyMember = {\r\n      id: Date.now().toString(),\r\n      name: newMember.name,\r\n      relationship: newMember.relationship,\r\n      age: newMember.age,\r\n      occupation: newMember.occupation,\r\n      income: newMember.income,\r\n      healthStatus: newMember.healthStatus,\r\n    };\r\n\r\n    const updatedMembers = [...familyMembers, member];\r\n    onFamilyUpdate(updatedMembers);\r\n\r\n    setNewMember({\r\n      name: '',\r\n      relationship: '',\r\n      age: 0,\r\n      occupation: '',\r\n      income: 0,\r\n      healthStatus: 'Sa─şl─▒kl─▒',\r\n    });\r\n\r\n    setIsAddMemberModalOpen(false);\r\n    toast.success('Aile ├╝yesi eklendi!');\r\n  };\r\n\r\n  const handleEditMember = (member: FamilyMember) => {\r\n    setEditingMember(member);\r\n    setNewMember(member);\r\n    setIsAddMemberModalOpen(true);\r\n  };\r\n\r\n  const handleUpdateMember = () => {\r\n    if (!editingMember || !newMember.name || !newMember.relationship) {\r\n      toast.error('Ad ve yak─▒nl─▒k derecesi zorunludur!');\r\n      return;\r\n    }\r\n\r\n    const updatedMembers = familyMembers.map((member) =>\r\n      member.id === editingMember.id ? ({ ...member, ...newMember } as FamilyMember) : member,\r\n    );\r\n\r\n    onFamilyUpdate(updatedMembers);\r\n\r\n    setEditingMember(null);\r\n    setNewMember({\r\n      name: '',\r\n      relationship: '',\r\n      age: 0,\r\n      occupation: '',\r\n      income: 0,\r\n      healthStatus: 'Sa─şl─▒kl─▒',\r\n    });\r\n\r\n    setIsAddMemberModalOpen(false);\r\n    toast.success('Aile ├╝yesi g├╝ncellendi!');\r\n  };\r\n\r\n  const handleDeleteMember = (memberId: string) => {\r\n    const updatedMembers = familyMembers.filter((member) => member.id !== memberId);\r\n    onFamilyUpdate(updatedMembers);\r\n    toast.success('Aile ├╝yesi silindi!');\r\n  };\r\n\r\n  const totalFamilyIncome = familyMembers.reduce(\r\n    (total, member) => total + (member.income ?? 0),\r\n    0,\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex items-center justify-between\">\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Users className=\"w-5 h-5\" />\r\n              Aile Bilgileri\r\n            </CardTitle>\r\n            {editMode && (\r\n              <Button\r\n                size=\"sm\"\r\n                onClick={() => {\r\n                  setIsAddMemberModalOpen(true);\r\n                }}\r\n              >\r\n                <Plus className=\"w-4 h-4 mr-2\" />\r\n                Aile ├£yesi Ekle\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </CardHeader>\r\n\r\n        <CardContent>\r\n          {familyMembers.length > 0 ? (\r\n            <div className=\"space-y-4\">\r\n              {/* Aile ├ûzeti */}\r\n              <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4 p-4 bg-gray-50 rounded-lg\">\r\n                <div className=\"text-center\">\r\n                  <p className=\"text-2xl font-bold text-primary\">{familyMembers.length}</p>\r\n                  <p className=\"text-sm text-gray-600\">Aile ├£yesi</p>\r\n                </div>\r\n                <div className=\"text-center\">\r\n                  <p className=\"text-2xl font-bold text-green-600\">\r\n                    {totalFamilyIncome.toLocaleString('tr-TR')} Ôé║\r\n                  </p>\r\n                  <p className=\"text-sm text-gray-600\">Toplam Gelir</p>\r\n                </div>\r\n                <div className=\"text-center\">\r\n                  <p className=\"text-2xl font-bold text-blue-600\">\r\n                    {Math.round(totalFamilyIncome / (familyMembers.length + 1)).toLocaleString(\r\n                      'tr-TR',\r\n                    )}{' '}\r\n                    Ôé║\r\n                  </p>\r\n                  <p className=\"text-sm text-gray-600\">Ki┼şi Ba┼ş─▒ Gelir</p>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Aile ├£yeleri Listesi */}\r\n              <div className=\"space-y-3\">\r\n                {familyMembers.map((member) => (\r\n                  <div\r\n                    key={member.id}\r\n                    className=\"flex items-center justify-between p-3 border rounded-lg\"\r\n                  >\r\n                    <div className=\"flex items-center gap-3\">\r\n                      <User className=\"w-8 h-8 p-1.5 bg-gray-100 rounded-full\" />\r\n                      <div>\r\n                        <h4 className=\"font-medium\">{member.name}</h4>\r\n                        <div className=\"flex items-center gap-2 text-sm text-gray-600\">\r\n                          <Badge variant=\"outline\" className=\"text-xs\">\r\n                            {member.relationship}\r\n                          </Badge>\r\n                          {member.age && <span>{member.age} ya┼ş</span>}\r\n                          {member.occupation && <span>ÔÇó {member.occupation}</span>}\r\n                        </div>\r\n                        {member.income && member.income > 0 && (\r\n                          <p className=\"text-sm text-green-600\">\r\n                            Gelir: {member.income.toLocaleString('tr-TR')} Ôé║\r\n                          </p>\r\n                        )}\r\n                        {member.healthStatus && member.healthStatus !== 'Sa─şl─▒kl─▒' && (\r\n                          <Badge variant=\"secondary\" className=\"text-xs mt-1\">\r\n                            <Heart className=\"w-3 h-3 mr-1\" />\r\n                            {member.healthStatus}\r\n                          </Badge>\r\n                        )}\r\n                      </div>\r\n                    </div>\r\n\r\n                    {editMode && (\r\n                      <div className=\"flex items-center gap-1\">\r\n                        <Button\r\n                          variant=\"ghost\"\r\n                          size=\"sm\"\r\n                          onClick={() => {\r\n                            handleEditMember(member);\r\n                          }}\r\n                        >\r\n                          <Edit3 className=\"w-4 h-4\" />\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"ghost\"\r\n                          size=\"sm\"\r\n                          onClick={() => {\r\n                            handleDeleteMember(member.id);\r\n                          }}\r\n                        >\r\n                          <Trash2 className=\"w-4 h-4\" />\r\n                        </Button>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          ) : (\r\n            <div className=\"text-center py-8 text-gray-500\">\r\n              <Users className=\"w-12 h-12 mx-auto mb-2 opacity-50\" />\r\n              <p>Aile ├╝yesi bilgisi bulunmuyor</p>\r\n              {editMode && (\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  className=\"mt-2\"\r\n                  onClick={() => {\r\n                    setIsAddMemberModalOpen(true);\r\n                  }}\r\n                >\r\n                  ─░lk aile ├╝yesini ekle\r\n                </Button>\r\n              )}\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Add/Edit Family Member Modal */}\r\n      <Dialog open={isAddMemberModalOpen} onOpenChange={setIsAddMemberModalOpen}>\r\n        <DialogContent className=\"max-w-md\">\r\n          <DialogHeader>\r\n            <DialogTitle>{editingMember ? 'Aile ├£yesi D├╝zenle' : 'Aile ├£yesi Ekle'}</DialogTitle>\r\n          </DialogHeader>\r\n\r\n          <div className=\"space-y-4\">\r\n            <div>\r\n              <Label htmlFor=\"memberName\">Ad Soyad *</Label>\r\n              <Input\r\n                id=\"memberName\"\r\n                value={newMember.name ?? ''}\r\n                onChange={(e) => {\r\n                  setNewMember((prev) => ({ ...prev, name: e.target.value }));\r\n                }}\r\n                placeholder=\"Aile ├╝yesi ad─▒\"\r\n              />\r\n            </div>\r\n\r\n            <div>\r\n              <Label htmlFor=\"relationship\">Yak─▒nl─▒k Derecesi *</Label>\r\n              <Select\r\n                value={newMember.relationship ?? ''}\r\n                onValueChange={(value: string) => {\r\n                  setNewMember((prev) => ({ ...prev, relationship: value }));\r\n                }}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Yak─▒nl─▒k derecesi se├ğin\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  {relationships.map((rel) => (\r\n                    <SelectItem key={rel} value={rel}>\r\n                      {rel}\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n\r\n            <div className=\"grid grid-cols-2 gap-4\">\r\n              <div>\r\n                <Label htmlFor=\"memberAge\">Ya┼ş</Label>\r\n                <Input\r\n                  id=\"memberAge\"\r\n                  type=\"number\"\r\n                  value={newMember.age ?? ''}\r\n                  onChange={(e) => {\r\n                    setNewMember((prev) => ({ ...prev, age: parseInt(e.target.value) || 0 }));\r\n                  }}\r\n                  placeholder=\"Ya┼ş\"\r\n                  min=\"0\"\r\n                  max=\"120\"\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"memberIncome\">Gelir (Ôé║)</Label>\r\n                <Input\r\n                  id=\"memberIncome\"\r\n                  type=\"number\"\r\n                  value={newMember.income ?? ''}\r\n                  onChange={(e) => {\r\n                    setNewMember((prev) => ({ ...prev, income: parseInt(e.target.value) || 0 }));\r\n                  }}\r\n                  placeholder=\"Ayl─▒k gelir\"\r\n                  min=\"0\"\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <div>\r\n              <Label htmlFor=\"memberOccupation\">Meslek</Label>\r\n              <Select\r\n                value={newMember.occupation ?? ''}\r\n                onValueChange={(value: string) => {\r\n                  setNewMember((prev) => ({ ...prev, occupation: value }));\r\n                }}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Meslek se├ğin\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  {occupations.map((occ) => (\r\n                    <SelectItem key={occ} value={occ}>\r\n                      {occ}\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n\r\n            <div>\r\n              <Label htmlFor=\"memberHealth\">Sa─şl─▒k Durumu</Label>\r\n              <Select\r\n                value={newMember.healthStatus ?? 'Sa─şl─▒kl─▒'}\r\n                onValueChange={(value: string) => {\r\n                  setNewMember((prev) => ({ ...prev, healthStatus: value }));\r\n                }}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Sa─şl─▒k durumu se├ğin\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  {healthStatuses.map((status) => (\r\n                    <SelectItem key={status} value={status}>\r\n                      {status}\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n          </div>\r\n\r\n          <DialogFooter>\r\n            <Button\r\n              variant=\"outline\"\r\n              onClick={() => {\r\n                setIsAddMemberModalOpen(false);\r\n                setEditingMember(null);\r\n                setNewMember({\r\n                  name: '',\r\n                  relationship: '',\r\n                  age: 0,\r\n                  occupation: '',\r\n                  income: 0,\r\n                  healthStatus: 'Sa─şl─▒kl─▒',\r\n                });\r\n              }}\r\n            >\r\n              ─░ptal\r\n            </Button>\r\n            <Button onClick={editingMember ? handleUpdateMember : handleAddMember}>\r\n              {editingMember ? 'G├╝ncelle' : 'Ekle'}\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\beneficiary\\BeneficiaryFinancial.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[530,533],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[530,533],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[593,596],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[593,596],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview BeneficiaryFinancial Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { CreditCard, DollarSign, PiggyBank, TrendingDown, TrendingUp, Wallet } from 'lucide-react';\r\nimport { Badge } from '../ui/badge';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Input } from '../ui/input';\r\nimport { Label } from '../ui/label';\r\nimport { Progress } from '../ui/progress';\r\n\r\ninterface BeneficiaryFinancialProps {\r\n  beneficiary: any;\r\n  editMode: boolean;\r\n  onUpdate: (field: string, value: any) => void;\r\n}\r\n\r\n/**\r\n * BeneficiaryFinancial function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function BeneficiaryFinancial({\r\n  beneficiary,\r\n  editMode,\r\n  onUpdate,\r\n}: BeneficiaryFinancialProps) {\r\n  const monthlyIncome = beneficiary?.monthlyIncome ?? 0;\r\n  const monthlyExpenses = beneficiary?.monthlyExpenses ?? 0;\r\n  const savings = beneficiary?.savings ?? 0;\r\n  const debts = beneficiary?.debts ?? 0;\r\n\r\n  const netIncome = monthlyIncome - monthlyExpenses;\r\n  const financialHealth = netIncome > 0 ? 'positive' : netIncome === 0 ? 'neutral' : 'negative';\r\n\r\n  return (\r\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n      {/* Mali Durum ├ûzeti */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Wallet className=\"w-5 h-5\" />\r\n            Mali Durum ├ûzeti\r\n          </CardTitle>\r\n        </CardHeader>\r\n\r\n        <CardContent className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-2 gap-4\">\r\n            <div className=\"text-center p-4 bg-green-50 rounded-lg\">\r\n              <TrendingUp className=\"w-8 h-8 mx-auto mb-2 text-green-600\" />\r\n              <p className=\"text-2xl font-bold text-green-600\">\r\n                {monthlyIncome.toLocaleString('tr-TR')} Ôé║\r\n              </p>\r\n              <p className=\"text-sm text-gray-600\">Ayl─▒k Gelir</p>\r\n            </div>\r\n\r\n            <div className=\"text-center p-4 bg-red-50 rounded-lg\">\r\n              <TrendingDown className=\"w-8 h-8 mx-auto mb-2 text-red-600\" />\r\n              <p className=\"text-2xl font-bold text-red-600\">\r\n                {monthlyExpenses.toLocaleString('tr-TR')} Ôé║\r\n              </p>\r\n              <p className=\"text-sm text-gray-600\">Ayl─▒k Gider</p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"p-4 border rounded-lg\">\r\n            <div className=\"flex items-center justify-between mb-2\">\r\n              <span className=\"text-sm font-medium\">Net Durum</span>\r\n              <Badge\r\n                variant={\r\n                  financialHealth === 'positive'\r\n                    ? 'default'\r\n                    : financialHealth === 'neutral'\r\n                      ? 'secondary'\r\n                      : 'destructive'\r\n                }\r\n              >\r\n                {netIncome.toLocaleString('tr-TR')} Ôé║\r\n              </Badge>\r\n            </div>\r\n            <Progress\r\n              value={Math.min(100, Math.max(0, (netIncome / monthlyIncome) * 100))}\r\n              className=\"h-2\"\r\n            />\r\n          </div>\r\n\r\n          {savings > 0 && (\r\n            <div className=\"flex items-center justify-between p-3 bg-blue-50 rounded-lg\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <PiggyBank className=\"w-5 h-5 text-blue-600\" />\r\n                <span className=\"font-medium\">Birikimler</span>\r\n              </div>\r\n              <span className=\"font-bold text-blue-600\">{savings.toLocaleString('tr-TR')} Ôé║</span>\r\n            </div>\r\n          )}\r\n\r\n          {debts > 0 && (\r\n            <div className=\"flex items-center justify-between p-3 bg-orange-50 rounded-lg\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <CreditCard className=\"w-5 h-5 text-orange-600\" />\r\n                <span className=\"font-medium\">Bor├ğlar</span>\r\n              </div>\r\n              <span className=\"font-bold text-orange-600\">{debts.toLocaleString('tr-TR')} Ôé║</span>\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Gelir Detaylar─▒ */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <DollarSign className=\"w-5 h-5\" />\r\n            Gelir ve Gider Detaylar─▒\r\n          </CardTitle>\r\n        </CardHeader>\r\n\r\n        <CardContent className=\"space-y-4\">\r\n          <div>\r\n            <Label htmlFor=\"monthlyIncome\">Ayl─▒k Gelir (Ôé║)</Label>\r\n            {editMode ? (\r\n              <Input\r\n                id=\"monthlyIncome\"\r\n                type=\"number\"\r\n                value={monthlyIncome}\r\n                onChange={(e) => {\r\n                  onUpdate('monthlyIncome', parseInt(e.target.value) || 0);\r\n                }}\r\n                placeholder=\"Ayl─▒k gelir\"\r\n                min=\"0\"\r\n              />\r\n            ) : (\r\n              <p className=\"p-2 text-sm\">{monthlyIncome.toLocaleString('tr-TR')} Ôé║</p>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <Label htmlFor=\"incomeSource\">Gelir Kayna─ş─▒</Label>\r\n            {editMode ? (\r\n              <Input\r\n                id=\"incomeSource\"\r\n                value={beneficiary?.incomeSource ?? ''}\r\n                onChange={(e) => {\r\n                  onUpdate('incomeSource', e.target.value);\r\n                }}\r\n                placeholder=\"Gelir kayna─ş─▒ (maa┼ş, emekli maa┼ş─▒, vb.)\"\r\n              />\r\n            ) : (\r\n              <p className=\"p-2 text-sm\">{beneficiary?.incomeSource ?? '-'}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <Label htmlFor=\"monthlyExpenses\">Ayl─▒k Gider (Ôé║)</Label>\r\n            {editMode ? (\r\n              <Input\r\n                id=\"monthlyExpenses\"\r\n                type=\"number\"\r\n                value={monthlyExpenses}\r\n                onChange={(e) => {\r\n                  onUpdate('monthlyExpenses', parseInt(e.target.value) || 0);\r\n                }}\r\n                placeholder=\"Ayl─▒k gider\"\r\n                min=\"0\"\r\n              />\r\n            ) : (\r\n              <p className=\"p-2 text-sm\">{monthlyExpenses.toLocaleString('tr-TR')} Ôé║</p>\r\n            )}\r\n          </div>\r\n\r\n          {editMode && (\r\n            <>\r\n              <div>\r\n                <Label htmlFor=\"savings\">Birikimler (Ôé║)</Label>\r\n                <Input\r\n                  id=\"savings\"\r\n                  type=\"number\"\r\n                  value={savings}\r\n                  onChange={(e) => {\r\n                    onUpdate('savings', parseInt(e.target.value) || 0);\r\n                  }}\r\n                  placeholder=\"Mevcut birikimler\"\r\n                  min=\"0\"\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor=\"debts\">Bor├ğlar (Ôé║)</Label>\r\n                <Input\r\n                  id=\"debts\"\r\n                  type=\"number\"\r\n                  value={debts}\r\n                  onChange={(e) => {\r\n                    onUpdate('debts', parseInt(e.target.value) || 0);\r\n                  }}\r\n                  placeholder=\"Mevcut bor├ğlar\"\r\n                  min=\"0\"\r\n                />\r\n              </div>\r\n            </>\r\n          )}\r\n\r\n          {/* Mali Durum De─şerlendirmesi */}\r\n          <div className=\"mt-6 p-4 border rounded-lg\">\r\n            <h4 className=\"font-medium mb-2\">Mali Durum De─şerlendirmesi</h4>\r\n            <div className=\"space-y-2 text-sm\">\r\n              <div className=\"flex justify-between\">\r\n                <span>Gelir/Gider Oran─▒:</span>\r\n                <Badge variant={financialHealth === 'positive' ? 'default' : 'destructive'}>\r\n                  {monthlyExpenses > 0 ? (monthlyIncome / monthlyExpenses).toFixed(2) : 'ÔêŞ'}\r\n                </Badge>\r\n              </div>\r\n              <div className=\"flex justify-between\">\r\n                <span>Yard─▒m ─░htiyac─▒:</span>\r\n                <Badge\r\n                  variant={\r\n                    netIncome < 0 ? 'destructive' : netIncome < 1000 ? 'secondary' : 'default'\r\n                  }\r\n                >\r\n                  {netIncome < 0 ? 'Y├╝ksek' : netIncome < 1000 ? 'Orta' : 'D├╝┼ş├╝k'}\r\n                </Badge>\r\n              </div>\r\n              <div className=\"flex justify-between\">\r\n                <span>├ûncelik Seviyesi:</span>\r\n                <Badge\r\n                  variant={\r\n                    netIncome < -1000 ? 'destructive' : netIncome < 0 ? 'secondary' : 'default'\r\n                  }\r\n                >\r\n                  {netIncome < -1000 ? 'Acil' : netIncome < 0 ? 'Y├╝ksek' : 'Normal'}\r\n                </Badge>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\beneficiary\\BeneficiaryHeader.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":14,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":14,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[428,431],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[428,431],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview BeneficiaryHeader Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { Calendar, Edit3, Mail, MapPin, Phone, Save, User, X } from 'lucide-react';\r\nimport { Badge } from '../ui/badge';\r\nimport { Button } from '../ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\n\r\ninterface BeneficiaryHeaderProps {\r\n  beneficiary: any;\r\n  editMode: boolean;\r\n  onEditToggle: () => void;\r\n  onSave: () => void;\r\n  onBack?: () => void;\r\n}\r\n\r\n/**\r\n * BeneficiaryHeader function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function BeneficiaryHeader({\r\n  beneficiary,\r\n  editMode,\r\n  onEditToggle,\r\n  onSave,\r\n  onBack,\r\n}: BeneficiaryHeaderProps) {\r\n  return (\r\n    <Card className=\"mb-6\">\r\n      <CardHeader className=\"pb-4\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <div className=\"flex items-center gap-3\">\r\n            {onBack && (\r\n              <Button variant=\"ghost\" size=\"sm\" onClick={onBack}>\r\n                <X className=\"w-4 h-4\" />\r\n              </Button>\r\n            )}\r\n            <div>\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <User className=\"w-5 h-5\" />\r\n                {beneficiary?.name ?? '─░htiya├ğ Sahibi Detay─▒'}\r\n              </CardTitle>\r\n              <div className=\"flex items-center gap-2 mt-1\">\r\n                <Badge variant=\"outline\" className=\"text-xs\">\r\n                  ID: {beneficiary?.id ?? 'N/A'}\r\n                </Badge>\r\n                <Badge\r\n                  variant={beneficiary?.status === 'Aktif' ? 'default' : 'secondary'}\r\n                  className=\"text-xs\"\r\n                >\r\n                  {beneficiary?.status ?? 'Bilinmiyor'}\r\n                </Badge>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"flex items-center gap-2\">\r\n            {editMode ? (\r\n              <>\r\n                <Button size=\"sm\" onClick={onSave}>\r\n                  <Save className=\"w-4 h-4 mr-2\" />\r\n                  Kaydet\r\n                </Button>\r\n                <Button variant=\"outline\" size=\"sm\" onClick={onEditToggle}>\r\n                  <X className=\"w-4 h-4 mr-2\" />\r\n                  ─░ptal\r\n                </Button>\r\n              </>\r\n            ) : (\r\n              <Button variant=\"outline\" size=\"sm\" onClick={onEditToggle}>\r\n                <Edit3 className=\"w-4 h-4 mr-2\" />\r\n                D├╝zenle\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </CardHeader>\r\n\r\n      <CardContent>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\r\n            <Phone className=\"w-4 h-4\" />\r\n            <span>{beneficiary?.phone ?? 'Telefon bilgisi yok'}</span>\r\n          </div>\r\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\r\n            <Mail className=\"w-4 h-4\" />\r\n            <span>{beneficiary?.email ?? 'E-mail bilgisi yok'}</span>\r\n          </div>\r\n          <div className=\"flex items-center gap-2 text-sm text-gray-600\">\r\n            <MapPin className=\"w-4 h-4\" />\r\n            <span>{beneficiary?.address ?? 'Adres bilgisi yok'}</span>\r\n          </div>\r\n        </div>\r\n\r\n        {beneficiary?.registrationDate && (\r\n          <div className=\"mt-4 pt-4 border-t\">\r\n            <div className=\"flex items-center gap-2 text-sm text-gray-500\">\r\n              <Calendar className=\"w-4 h-4\" />\r\n              <span>\r\n                Kay─▒t Tarihi: {new Date(beneficiary.registrationDate).toLocaleDateString('tr-TR')}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\beneficiary\\BeneficiaryHealthInfo.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[620,623],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[620,623],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[683,686],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[683,686],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":52,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":52,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1348,1350],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":70,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_' is defined but never used.","line":71,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":24},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":187,"column":32,"nodeType":"MemberExpression","endLine":187,"endColumn":64}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview BeneficiaryHealthInfo Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { Activity, AlertTriangle, Heart, Plus } from 'lucide-react';\r\nimport { useState } from 'react';\r\nimport { Badge } from '../ui/badge';\r\nimport { Button } from '../ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Checkbox } from '../ui/checkbox';\r\nimport { Input } from '../ui/input';\r\nimport { Label } from '../ui/label';\r\nimport { Textarea } from '../ui/textarea';\r\n\r\ninterface BeneficiaryHealthInfoProps {\r\n  beneficiary: any;\r\n  editMode: boolean;\r\n  onUpdate: (field: string, value: any) => void;\r\n}\r\n\r\nconst healthConditions = [\r\n  'Diyabet',\r\n  'Hipertansiyon',\r\n  'Kalp Hastal─▒─ş─▒',\r\n  'Ast─▒m',\r\n  'B├Âbrek Hastal─▒─ş─▒',\r\n  'Karaci─şer Hastal─▒─ş─▒',\r\n  'Kanser',\r\n  'Depresyon',\r\n  'Anksiyete',\r\n  'Artrit',\r\n  'Osteoporoz',\r\n  'Y├╝ksek Kolesterol',\r\n  'Y├╝ksek Tansiyon',\r\n];\r\n\r\n/**\r\n * BeneficiaryHealthInfo function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function BeneficiaryHealthInfo({\r\n  beneficiary,\r\n  editMode,\r\n  onUpdate,\r\n}: BeneficiaryHealthInfoProps) {\r\n  const [healthConditionsState, setHealthConditionsState] = useState<Record<string, boolean>>(\r\n    beneficiary?.healthConditions || {},\r\n  );\r\n  const [newCondition, setNewCondition] = useState('');\r\n\r\n  const handleConditionChange = (condition: string, checked: boolean) => {\r\n    const updated = { ...healthConditionsState, [condition]: checked };\r\n    setHealthConditionsState(updated);\r\n    onUpdate('healthConditions', updated);\r\n  };\r\n\r\n  const addCustomCondition = () => {\r\n    if (newCondition.trim()) {\r\n      handleConditionChange(newCondition.trim(), true);\r\n      setNewCondition('');\r\n    }\r\n  };\r\n\r\n  const activeConditions = Object.entries(healthConditionsState)\r\n    .filter(([_, active]) => active)\r\n    .map(([condition, _]) => condition);\r\n\r\n  return (\r\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n      {/* Sa─şl─▒k Durumu ├ûzeti */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Heart className=\"w-5 h-5\" />\r\n            Sa─şl─▒k Durumu ├ûzeti\r\n          </CardTitle>\r\n        </CardHeader>\r\n\r\n        <CardContent className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 gap-4\">\r\n            <div className=\"p-4 bg-gray-50 rounded-lg\">\r\n              <div className=\"flex items-center justify-between mb-2\">\r\n                <span className=\"font-medium\">Genel Sa─şl─▒k Durumu</span>\r\n                <Badge\r\n                  variant={\r\n                    activeConditions.length === 0\r\n                      ? 'default'\r\n                      : activeConditions.length < 3\r\n                        ? 'secondary'\r\n                        : 'destructive'\r\n                  }\r\n                >\r\n                  {activeConditions.length === 0\r\n                    ? 'Sa─şl─▒kl─▒'\r\n                    : activeConditions.length < 3\r\n                      ? 'Orta Risk'\r\n                      : 'Y├╝ksek Risk'}\r\n                </Badge>\r\n              </div>\r\n\r\n              <div className=\"text-sm text-gray-600\">\r\n                <p>Aktif Sa─şl─▒k Sorunu: {activeConditions.length}</p>\r\n                <p>\r\n                  Risk Seviyesi:{' '}\r\n                  {activeConditions.length === 0\r\n                    ? 'D├╝┼ş├╝k'\r\n                    : activeConditions.length < 3\r\n                      ? 'Orta'\r\n                      : 'Y├╝ksek'}\r\n                </p>\r\n              </div>\r\n            </div>\r\n\r\n            {activeConditions.length > 0 && (\r\n              <div>\r\n                <h4 className=\"font-medium mb-2 flex items-center gap-2\">\r\n                  <AlertTriangle className=\"w-4 h-4 text-orange-500\" />\r\n                  Mevcut Sa─şl─▒k Sorunlar─▒\r\n                </h4>\r\n                <div className=\"flex flex-wrap gap-2\">\r\n                  {activeConditions.map((condition) => (\r\n                    <Badge key={condition} variant=\"outline\" className=\"text-xs\">\r\n                      {condition}\r\n                    </Badge>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <Label htmlFor=\"bloodType\">Kan Grubu</Label>\r\n            {editMode ? (\r\n              <Input\r\n                id=\"bloodType\"\r\n                value={beneficiary?.bloodType ?? ''}\r\n                onChange={(e) => {\r\n                  onUpdate('bloodType', e.target.value);\r\n                }}\r\n                placeholder=\"Kan grubu (A+, B-, vb.)\"\r\n              />\r\n            ) : (\r\n              <p className=\"p-2 text-sm\">{beneficiary?.bloodType ?? '-'}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <Label htmlFor=\"emergencyContact\">Acil Durum ─░leti┼şim</Label>\r\n            {editMode ? (\r\n              <Input\r\n                id=\"emergencyContact\"\r\n                value={beneficiary?.emergencyContact ?? ''}\r\n                onChange={(e) => {\r\n                  onUpdate('emergencyContact', e.target.value);\r\n                }}\r\n                placeholder=\"Acil durum ileti┼şim bilgisi\"\r\n              />\r\n            ) : (\r\n              <p className=\"p-2 text-sm\">{beneficiary?.emergencyContact ?? '-'}</p>\r\n            )}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Sa─şl─▒k Ko┼şullar─▒ */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Activity className=\"w-5 h-5\" />\r\n            Sa─şl─▒k Ko┼şullar─▒\r\n          </CardTitle>\r\n        </CardHeader>\r\n\r\n        <CardContent className=\"space-y-4\">\r\n          {editMode ? (\r\n            <>\r\n              <div className=\"space-y-3 max-h-60 overflow-y-auto\">\r\n                {healthConditions.map((condition) => (\r\n                  <div key={condition} className=\"flex items-center space-x-2\">\r\n                    <Checkbox\r\n                      id={condition}\r\n                      checked={healthConditionsState[condition] ?? false}\r\n                      onCheckedChange={(checked: boolean) => {\r\n                        handleConditionChange(condition, checked);\r\n                      }}\r\n                    />\r\n                    <Label htmlFor={condition} className=\"text-sm\">\r\n                      {condition}\r\n                    </Label>\r\n                  </div>\r\n                ))}\r\n              </div>\r\n\r\n              {/* ├ûzel Durum Ekleme */}\r\n              <div className=\"pt-4 border-t\">\r\n                <Label htmlFor=\"customCondition\">├ûzel Sa─şl─▒k Durumu</Label>\r\n                <div className=\"flex gap-2 mt-1\">\r\n                  <Input\r\n                    id=\"customCondition\"\r\n                    value={newCondition}\r\n                    onChange={(e) => {\r\n                      setNewCondition(e.target.value);\r\n                    }}\r\n                    placeholder=\"├ûzel sa─şl─▒k durumu ekle\"\r\n                    className=\"flex-1\"\r\n                  />\r\n                  <Button size=\"sm\" onClick={addCustomCondition}>\r\n                    <Plus className=\"w-4 h-4\" />\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </>\r\n          ) : (\r\n            <div className=\"space-y-3\">\r\n              {activeConditions.length > 0 ? (\r\n                activeConditions.map((condition) => (\r\n                  <div key={condition} className=\"flex items-center gap-2 p-2 bg-orange-50 rounded\">\r\n                    <AlertTriangle className=\"w-4 h-4 text-orange-500\" />\r\n                    <span className=\"text-sm\">{condition}</span>\r\n                  </div>\r\n                ))\r\n              ) : (\r\n                <div className=\"text-center py-4 text-gray-500\">\r\n                  <Heart className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\r\n                  <p>Bilinen sa─şl─▒k sorunu yok</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n\r\n          {/* Sa─şl─▒k Notlar─▒ */}\r\n          <div className=\"pt-4 border-t\">\r\n            <Label htmlFor=\"healthNotes\">Sa─şl─▒k Notlar─▒</Label>\r\n            {editMode ? (\r\n              <Textarea\r\n                id=\"healthNotes\"\r\n                value={beneficiary?.healthNotes ?? ''}\r\n                onChange={(e) => {\r\n                  onUpdate('healthNotes', e.target.value);\r\n                }}\r\n                placeholder=\"├ûzel sa─şl─▒k notlar─▒, ila├ğ kullan─▒m─▒, vb.\"\r\n                rows={3}\r\n              />\r\n            ) : (\r\n              <p className=\"p-2 text-sm\">{beneficiary?.healthNotes ?? 'Sa─şl─▒k notu bulunmuyor'}</p>\r\n            )}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\beneficiary\\BeneficiaryPersonalInfo.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[537,540],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[537,540],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[600,603],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[600,603],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview BeneficiaryPersonalInfo Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { Phone, User } from 'lucide-react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Input } from '../ui/input';\r\nimport { Label } from '../ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\nimport { Textarea } from '../ui/textarea';\r\n\r\ninterface BeneficiaryPersonalInfoProps {\r\n  beneficiary: any;\r\n  editMode: boolean;\r\n  onUpdate: (field: string, value: any) => void;\r\n}\r\n\r\n/**\r\n * BeneficiaryPersonalInfo function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function BeneficiaryPersonalInfo({\r\n  beneficiary,\r\n  editMode,\r\n  onUpdate,\r\n}: BeneficiaryPersonalInfoProps) {\r\n  const maritalStatuses = ['Bekar', 'Evli', 'Dul', 'Bo┼şanm─▒┼ş'];\r\n  const educationLevels = ['─░lkokul', 'Ortaokul', 'Lise', '├£niversite', 'Y├╝ksek Lisans', 'Doktora'];\r\n  const occupations = [\r\n    '─░┼şsiz',\r\n    'Emekli',\r\n    'Memur',\r\n    '─░┼ş├ği',\r\n    'Serbest Meslek',\r\n    '├û─şrenci',\r\n    'Ev Han─▒m─▒',\r\n  ];\r\n\r\n  return (\r\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6\">\r\n      {/* Ki┼şisel Bilgiler */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <User className=\"w-5 h-5\" />\r\n            Ki┼şisel Bilgiler\r\n          </CardTitle>\r\n        </CardHeader>\r\n\r\n        <CardContent className=\"space-y-4\">\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <div>\r\n              <Label htmlFor=\"name\">Ad Soyad *</Label>\r\n              {editMode ? (\r\n                <Input\r\n                  id=\"name\"\r\n                  value={beneficiary?.name ?? ''}\r\n                  onChange={(e) => {\r\n                    onUpdate('name', e.target.value);\r\n                  }}\r\n                  placeholder=\"Ad soyad giriniz\"\r\n                />\r\n              ) : (\r\n                <p className=\"p-2 text-sm\">{beneficiary?.name ?? '-'}</p>\r\n              )}\r\n            </div>\r\n\r\n            <div>\r\n              <Label htmlFor=\"tcNo\">TC Kimlik No *</Label>\r\n              {editMode ? (\r\n                <Input\r\n                  id=\"tcNo\"\r\n                  value={beneficiary?.tcNo ?? ''}\r\n                  onChange={(e) => {\r\n                    onUpdate('tcNo', e.target.value);\r\n                  }}\r\n                  placeholder=\"TC Kimlik No\"\r\n                  maxLength={11}\r\n                />\r\n              ) : (\r\n                <p className=\"p-2 text-sm\">{beneficiary?.tcNo ?? '-'}</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <div>\r\n              <Label htmlFor=\"birthDate\">Do─şum Tarihi</Label>\r\n              {editMode ? (\r\n                <Input\r\n                  id=\"birthDate\"\r\n                  type=\"date\"\r\n                  value={beneficiary?.birthDate ?? ''}\r\n                  onChange={(e) => {\r\n                    onUpdate('birthDate', e.target.value);\r\n                  }}\r\n                />\r\n              ) : (\r\n                <p className=\"p-2 text-sm\">\r\n                  {beneficiary?.birthDate\r\n                    ? new Date(beneficiary.birthDate).toLocaleDateString('tr-TR')\r\n                    : '-'}\r\n                </p>\r\n              )}\r\n            </div>\r\n\r\n            <div>\r\n              <Label htmlFor=\"gender\">Cinsiyet</Label>\r\n              {editMode ? (\r\n                <Select\r\n                  value={beneficiary?.gender ?? ''}\r\n                  onValueChange={(value: string) => {\r\n                    onUpdate('gender', value);\r\n                  }}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Cinsiyet se├ğin\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"Erkek\">Erkek</SelectItem>\r\n                    <SelectItem value=\"Kad─▒n\">Kad─▒n</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              ) : (\r\n                <p className=\"p-2 text-sm\">{beneficiary?.gender ?? '-'}</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <div>\r\n              <Label htmlFor=\"maritalStatus\">Medeni Durum</Label>\r\n              {editMode ? (\r\n                <Select\r\n                  value={beneficiary?.maritalStatus ?? ''}\r\n                  onValueChange={(value: string) => {\r\n                    onUpdate('maritalStatus', value);\r\n                  }}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Medeni durum se├ğin\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    {maritalStatuses.map((status) => (\r\n                      <SelectItem key={status} value={status}>\r\n                        {status}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n              ) : (\r\n                <p className=\"p-2 text-sm\">{beneficiary?.maritalStatus ?? '-'}</p>\r\n              )}\r\n            </div>\r\n\r\n            <div>\r\n              <Label htmlFor=\"education\">E─şitim Durumu</Label>\r\n              {editMode ? (\r\n                <Select\r\n                  value={beneficiary?.education ?? ''}\r\n                  onValueChange={(value: string) => {\r\n                    onUpdate('education', value);\r\n                  }}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"E─şitim durumu se├ğin\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    {educationLevels.map((level) => (\r\n                      <SelectItem key={level} value={level}>\r\n                        {level}\r\n                      </SelectItem>\r\n                    ))}\r\n                  </SelectContent>\r\n                </Select>\r\n              ) : (\r\n                <p className=\"p-2 text-sm\">{beneficiary?.education ?? '-'}</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <div>\r\n            <Label htmlFor=\"occupation\">Meslek</Label>\r\n            {editMode ? (\r\n              <Select\r\n                value={beneficiary?.occupation ?? ''}\r\n                onValueChange={(value: string) => {\r\n                  onUpdate('occupation', value);\r\n                }}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue placeholder=\"Meslek se├ğin\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  {occupations.map((occupation) => (\r\n                    <SelectItem key={occupation} value={occupation}>\r\n                      {occupation}\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            ) : (\r\n              <p className=\"p-2 text-sm\">{beneficiary?.occupation ?? '-'}</p>\r\n            )}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* ─░leti┼şim Bilgileri */}\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Phone className=\"w-5 h-5\" />\r\n            ─░leti┼şim Bilgileri\r\n          </CardTitle>\r\n        </CardHeader>\r\n\r\n        <CardContent className=\"space-y-4\">\r\n          <div>\r\n            <Label htmlFor=\"phone\">Telefon *</Label>\r\n            {editMode ? (\r\n              <Input\r\n                id=\"phone\"\r\n                value={beneficiary?.phone ?? ''}\r\n                onChange={(e) => {\r\n                  onUpdate('phone', e.target.value);\r\n                }}\r\n                placeholder=\"Telefon numaras─▒\"\r\n              />\r\n            ) : (\r\n              <p className=\"p-2 text-sm\">{beneficiary?.phone ?? '-'}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <Label htmlFor=\"email\">E-mail</Label>\r\n            {editMode ? (\r\n              <Input\r\n                id=\"email\"\r\n                type=\"email\"\r\n                value={beneficiary?.email ?? ''}\r\n                onChange={(e) => {\r\n                  onUpdate('email', e.target.value);\r\n                }}\r\n                placeholder=\"E-mail adresi\"\r\n              />\r\n            ) : (\r\n              <p className=\"p-2 text-sm\">{beneficiary?.email ?? '-'}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <Label htmlFor=\"address\">Adres</Label>\r\n            {editMode ? (\r\n              <Textarea\r\n                id=\"address\"\r\n                value={beneficiary?.address ?? ''}\r\n                onChange={(e) => {\r\n                  onUpdate('address', e.target.value);\r\n                }}\r\n                placeholder=\"Tam adres bilgisi\"\r\n                rows={3}\r\n              />\r\n            ) : (\r\n              <p className=\"p-2 text-sm\">{beneficiary?.address ?? '-'}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n            <div>\r\n              <Label htmlFor=\"city\">─░l</Label>\r\n              {editMode ? (\r\n                <Input\r\n                  id=\"city\"\r\n                  value={beneficiary?.city ?? ''}\r\n                  onChange={(e) => {\r\n                    onUpdate('city', e.target.value);\r\n                  }}\r\n                  placeholder=\"─░l\"\r\n                />\r\n              ) : (\r\n                <p className=\"p-2 text-sm\">{beneficiary?.city ?? '-'}</p>\r\n              )}\r\n            </div>\r\n\r\n            <div>\r\n              <Label htmlFor=\"district\">─░l├ğe</Label>\r\n              {editMode ? (\r\n                <Input\r\n                  id=\"district\"\r\n                  value={beneficiary?.district ?? ''}\r\n                  onChange={(e) => {\r\n                    onUpdate('district', e.target.value);\r\n                  }}\r\n                  placeholder=\"─░l├ğe\"\r\n                />\r\n              ) : (\r\n                <p className=\"p-2 text-sm\">{beneficiary?.district ?? '-'}</p>\r\n              )}\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\beneficiary\\__tests__\\BeneficiaryOptimized.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2544,2547],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2544,2547],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { fireEvent, render, screen, waitFor } from '@testing-library/react';\r\nimport { vi } from 'vitest';\r\nimport { BeneficiaryOptimized } from '../BeneficiaryOptimized';\r\n\r\n// Mock services\r\nvi.mock('../../../services/supabaseBeneficiariesService', () => ({\r\n  supabaseBeneficiariesService: {\r\n    getBeneficiary: vi.fn(),\r\n    createBeneficiary: vi.fn(),\r\n    updateBeneficiary: vi.fn(),\r\n  },\r\n}));\r\n\r\n// Mock toast\r\nvi.mock('sonner', () => ({\r\n  toast: {\r\n    success: vi.fn(),\r\n    error: vi.fn(),\r\n  },\r\n}));\r\n\r\ndescribe('BeneficiaryOptimized', () => {\r\n  const mockBeneficiary = {\r\n    id: 'test-1',\r\n    name: 'Test User',\r\n    tcNo: '12345678901',\r\n    phone: '0555-123-4567',\r\n    email: 'test@example.com',\r\n    address: 'Test Address',\r\n    city: 'Test City',\r\n    district: 'Test District',\r\n    birthDate: '1990-01-01',\r\n    gender: 'Erkek',\r\n    maritalStatus: 'Bekar',\r\n    education: 'Lise',\r\n    occupation: 'Test Job',\r\n    status: 'Aktif',\r\n    registrationDate: '2024-01-01',\r\n  };\r\n\r\n  beforeEach(() => {\r\n    vi.clearAllMocks();\r\n  });\r\n\r\n  it('renders beneficiary header correctly', async () => {\r\n    render(<BeneficiaryOptimized beneficiaryId=\"test-1\" />);\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('─░htiya├ğ Sahibi Detay─▒')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  it('handles demo mode when no beneficiaryId provided', async () => {\r\n    render(<BeneficiaryOptimized />);\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Ahmet Y─▒lmaz')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  it('switches between tabs correctly', async () => {\r\n    render(<BeneficiaryOptimized />);\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Ki┼şisel Bilgiler')).toBeInTheDocument();\r\n    });\r\n\r\n    // Click family tab\r\n    fireEvent.click(screen.getByText('Aile Bilgileri'));\r\n\r\n    // Should show family content\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Aile Bilgileri')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  it('handles edit mode toggle', async () => {\r\n    render(<BeneficiaryOptimized />);\r\n\r\n    await waitFor(() => {\r\n      const editButton = screen.getByText('D├╝zenle');\r\n      fireEvent.click(editButton);\r\n    });\r\n\r\n    await waitFor(() => {\r\n      expect(screen.getByText('Kaydet')).toBeInTheDocument();\r\n      expect(screen.getByText('─░ptal')).toBeInTheDocument();\r\n    });\r\n  });\r\n\r\n  it('handles save operation', async () => {\r\n    const { beneficiariesService } = await import('../../../services/beneficiariesService');\r\n    (beneficiariesService.update as any).mockResolvedValue({ data: mockBeneficiary });\r\n\r\n    render(<BeneficiaryOptimized beneficiaryId=\"test-1\" />);\r\n\r\n    await waitFor(() => {\r\n      const editButton = screen.getByText('D├╝zenle');\r\n      fireEvent.click(editButton);\r\n    });\r\n\r\n    await waitFor(() => {\r\n      const saveButton = screen.getByText('Kaydet');\r\n      fireEvent.click(saveButton);\r\n    });\r\n\r\n    await waitFor(() => {\r\n      expect(supabaseBeneficiariesService.updateBeneficiary).toHaveBeenCalledWith(\r\n        'test-1',\r\n        expect.any(Object),\r\n      );\r\n    });\r\n  });\r\n\r\n  it('displays loading state initially', () => {\r\n    render(<BeneficiaryOptimized beneficiaryId=\"test-1\" />);\r\n\r\n    // Should show loading initially\r\n    expect(screen.getByTestId('skeleton-loader')).toBeInTheDocument();\r\n  });\r\n\r\n  it('handles back navigation', async () => {\r\n    const onBack = vi.fn();\r\n    render(<BeneficiaryOptimized onBack={onBack} />);\r\n\r\n    await waitFor(() => {\r\n      const backButton = screen.getByRole('button', { name: /close/i });\r\n      fireEvent.click(backButton);\r\n    });\r\n\r\n    expect(onBack).toHaveBeenCalled();\r\n  });\r\n\r\n  it('lazy loads heavy sections', async () => {\r\n    render(<BeneficiaryOptimized />);\r\n\r\n    await waitFor(() => {\r\n      // Click financial tab\r\n      fireEvent.click(screen.getByText('Mali Durum'));\r\n    });\r\n\r\n    // Should show loading for lazy component\r\n    expect(screen.getByTestId('skeleton-loader')).toBeInTheDocument();\r\n  });\r\n\r\n  it('handles field updates correctly', async () => {\r\n    render(<BeneficiaryOptimized />);\r\n\r\n    await waitFor(() => {\r\n      const editButton = screen.getByText('D├╝zenle');\r\n      fireEvent.click(editButton);\r\n    });\r\n\r\n    // Update should be handled internally\r\n    // This tests the component structure\r\n    expect(screen.getByText('Ki┼şisel Bilgiler')).toBeInTheDocument();\r\n  });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\beneficiary\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\charts\\LazyCharts.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":55,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":55,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1337,1340],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1337,1340],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1473,1476],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1473,1476],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":67,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1602,1605],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1602,1605],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1730,1733],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1730,1733],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":79,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":79,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1857,1860],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1857,1860],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":86,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":86,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":86,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":86,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2031,2034],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2031,2034],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview LazyCharts Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport React, { lazy, Suspense } from 'react';\r\nimport { SkeletonLoader } from '../LoadingSpinner';\r\n\r\n// Lazy load chart components to reduce initial bundle size\r\nconst InteractiveChart = lazy(() =>\r\n  import('../ui/InteractiveChart').then((module) => ({\r\n    default: module.InteractiveChart,\r\n  })),\r\n);\r\n\r\nconst AreaChart = lazy(() =>\r\n  import('recharts').then((module) => ({\r\n    default: module.AreaChart,\r\n  })),\r\n);\r\n\r\nconst LineChart = lazy(() =>\r\n  import('recharts').then((module) => ({\r\n    default: module.LineChart,\r\n  })),\r\n);\r\n\r\nconst BarChart = lazy(() =>\r\n  import('recharts').then((module) => ({\r\n    default: module.BarChart,\r\n  })),\r\n);\r\n\r\nconst PieChart = lazy(() =>\r\n  import('recharts').then((module) => ({\r\n    default: module.PieChart,\r\n  })),\r\n);\r\n\r\n// Chart wrapper with loading fallback\r\ninterface LazyChartWrapperProps {\r\n  children: React.ReactNode;\r\n  height?: number;\r\n}\r\n\r\nexport const LazyChartWrapper = ({ children, height = 300 }: LazyChartWrapperProps) => (\r\n  <Suspense fallback={<SkeletonLoader variant=\"dashboard\" />}>\r\n    <div style={{ height }}>{children}</div>\r\n  </Suspense>\r\n);\r\n\r\n// Optimized chart components\r\nexport const LazyInteractiveChart = (props: any) => (\r\n  <LazyChartWrapper>\r\n    <InteractiveChart {...props} />\r\n  </LazyChartWrapper>\r\n);\r\n\r\nexport const LazyAreaChart = (props: any) => (\r\n  <LazyChartWrapper>\r\n    <AreaChart {...props} />\r\n  </LazyChartWrapper>\r\n);\r\n\r\nexport const LazyLineChart = (props: any) => (\r\n  <LazyChartWrapper>\r\n    <LineChart {...props} />\r\n  </LazyChartWrapper>\r\n);\r\n\r\nexport const LazyBarChart = (props: any) => (\r\n  <LazyChartWrapper>\r\n    <BarChart {...props} />\r\n  </LazyChartWrapper>\r\n);\r\n\r\nexport const LazyPieChart = (props: any) => (\r\n  <LazyChartWrapper>\r\n    <PieChart {...props} />\r\n  </LazyChartWrapper>\r\n);\r\n\r\n// Chart performance optimization hook\r\nexport const useChartOptimization = (data: any[]) => {\r\n  const optimizedData = React.useMemo(() => {\r\n    // Limit data points for performance\r\n    if (data.length > 100) {\r\n      const step = Math.ceil(data.length / 100);\r\n      return data.filter((_, index) => index % step === 0);\r\n    }\r\n    return data;\r\n  }, [data]);\r\n\r\n  return optimizedData;\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\data\\ExportModal.tsx","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'../../types/data' import is duplicated.","line":37,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":37,"endColumn":53},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1444,1447],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1444,1447],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":66,"column":13,"nodeType":"ChainExpression","messageId":"alwaysTruthy","endLine":66,"endColumn":47},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":66,"column":13,"nodeType":"MemberExpression","endLine":66,"endColumn":39},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":66,"column":39,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":66,"endColumn":41,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[2068,2070],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":68,"column":20,"nodeType":"ChainExpression","messageId":"alwaysTruthy","endLine":68,"endColumn":55},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":68,"column":20,"nodeType":"MemberExpression","endLine":68,"endColumn":46},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":68,"column":46,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":68,"endColumn":48,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[2157,2159],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isExporting' is assigned a value but never used.","line":83,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":22},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'isExporting' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":83,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":83,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'progress' is defined but never used.","line":84,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":84,"endColumn":26},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'progress' is defined but never used. Allowed unused args must match /^_/u.","line":84,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":84,"endColumn":26},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":148,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":148,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4219,4221],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":149,"column":24,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":149,"endColumn":26,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4258,4260],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":178,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":178,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5230,5233],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5230,5233],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":249,"column":16,"nodeType":"MemberExpression","endLine":249,"endColumn":45},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":249,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":249,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7921,7923],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":329,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":329,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10723,10726],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10723,10726],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":347,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":347,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11383,11386],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11383,11386],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":405,"column":30,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":405,"endColumn":47,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[13315,13316],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":405,"column":69,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":405,"endColumn":86,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[13354,13355],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":458,"column":24,"nodeType":"MemberExpression","endLine":458,"endColumn":53},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":458,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":458,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[15363,15365],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":471,"column":33,"nodeType":"MemberExpression","endLine":471,"endColumn":44},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":471,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":471,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[15894,15896],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview ExportModal Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { motion, AnimatePresence } from 'motion/react';\r\nimport {\r\n  Download,\r\n  FileText,\r\n  Table,\r\n  File,\r\n  Calendar,\r\n  Settings,\r\n  CheckCircle,\r\n  AlertCircle,\r\n  Loader2,\r\n} from 'lucide-react';\r\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '../ui/dialog';\r\nimport { Button } from '../ui/button';\r\nimport { Label } from '../ui/label';\r\nimport { Input } from '../ui/input';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\nimport { Checkbox } from '../ui/checkbox';\r\nimport { Switch } from '../ui/switch';\r\nimport { Calendar as CalendarComponent } from '../ui/calendar';\r\nimport { Popover, PopoverContent, PopoverTrigger } from '../ui/popover';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';\r\nimport { Separator } from '../ui/separator';\r\nimport { Progress } from '../ui/progress';\r\nimport { useDataExport } from '../../hooks/useDataExport';\r\nimport { useIsMobile } from '../../hooks/useTouchDevice';\r\nimport { cn } from '../ui/utils';\r\nimport type { ExportConfig, ExportResult } from '../../types/data';\r\nimport { EXPORT_TEMPLATES } from '../../types/data';\r\n\r\ninterface ExportModalProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  data: any[];\r\n  dataType: keyof typeof EXPORT_TEMPLATES;\r\n  title?: string;\r\n  defaultConfig?: Partial<ExportConfig>;\r\n}\r\n\r\n/**\r\n * ExportModal function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function ExportModal({\r\n  isOpen,\r\n  onClose,\r\n  data,\r\n  dataType,\r\n  title = 'Veri D─▒┼şa Aktarma',\r\n  defaultConfig = {},\r\n}: ExportModalProps) {\r\n  const isMobile = useIsMobile();\r\n  const [config, setConfig] = useState<ExportConfig>(() => ({\r\n    format: 'csv',\r\n    filename: `${dataType}-export-${new Date().toISOString().slice(0, 10)}`,\r\n    fields: EXPORT_TEMPLATES[dataType]?.fields || [],\r\n    includeHeaders: true,\r\n    customHeaders: EXPORT_TEMPLATES[dataType]?.headers || {},\r\n    orientation: 'portrait',\r\n    pageSize: 'A4',\r\n    compression: false,\r\n    ...defaultConfig,\r\n  }));\r\n\r\n  const [dateRange, setDateRange] = useState<{ start: Date | null; end: Date | null }>({\r\n    start: null,\r\n    end: null,\r\n  });\r\n\r\n  const [step, setStep] = useState<'config' | 'preview' | 'export' | 'complete'>('config');\r\n  const [result, setResult] = useState<ExportResult | null>(null);\r\n\r\n  const { isExporting, progress, exportData, cancelExport } = useDataExport({\r\n    onProgress: (progress) => {\r\n      // Progress is handled by the hook's internal state\r\n    },\r\n    onComplete: (result) => {\r\n      setResult(result);\r\n      setStep('complete');\r\n    },\r\n    onError: (error) => {\r\n      setResult({\r\n        success: false,\r\n        filename: '',\r\n        size: 0,\r\n        recordCount: 0,\r\n        error,\r\n      });\r\n      setStep('complete');\r\n    },\r\n  });\r\n\r\n  // Reset state when modal opens\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      setStep('config');\r\n      setResult(null);\r\n    }\r\n  }, [isOpen]);\r\n\r\n  // Available formats\r\n  const formats = [\r\n    {\r\n      value: 'csv',\r\n      label: 'CSV',\r\n      icon: <Table className=\"w-4 h-4\" />,\r\n      description: 'Hesap tablolar─▒nda a├ğ─▒labilen format',\r\n    },\r\n    {\r\n      value: 'excel',\r\n      label: 'Excel',\r\n      icon: <FileText className=\"w-4 h-4\" />,\r\n      description: 'Microsoft Excel format─▒',\r\n    },\r\n    {\r\n      value: 'pdf',\r\n      label: 'PDF',\r\n      icon: <File className=\"w-4 h-4\" />,\r\n      description: 'Yazd─▒rma i├ğin PDF format',\r\n    },\r\n    {\r\n      value: 'json',\r\n      label: 'JSON',\r\n      icon: <Settings className=\"w-4 h-4\" />,\r\n      description: 'Programatik kullan─▒m i├ğin',\r\n    },\r\n  ];\r\n\r\n  // Get available fields\r\n  const availableFields =\r\n    data.length > 0 ? Object.keys(data[0]).filter((key) => !key.startsWith('_')) : [];\r\n\r\n  // Handle field selection\r\n  const handleFieldToggle = (field: string, checked: boolean) => {\r\n    setConfig((prev) => ({\r\n      ...prev,\r\n      fields: checked\r\n        ? [...(prev.fields || []), field]\r\n        : (prev.fields || []).filter((f) => f !== field),\r\n    }));\r\n  };\r\n\r\n  // Handle date range\r\n  const handleDateRangeChange = (start: Date | null, end: Date | null) => {\r\n    setDateRange({ start, end });\r\n    setConfig((prev) => ({\r\n      ...prev,\r\n      dateRange: start && end ? { start, end } : undefined,\r\n    }));\r\n  };\r\n\r\n  // Start export\r\n  const handleExport = async () => {\r\n    setStep('export');\r\n    await exportData(data, config);\r\n  };\r\n\r\n  // Render format selection\r\n  const renderFormatSelection = () => (\r\n    <div className=\"space-y-4\">\r\n      <Label className=\"text-base font-medium\">D─▒┼şa aktarma format─▒</Label>\r\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3\">\r\n        {formats.map((format) => (\r\n          <motion.div key={format.value} whileHover={{ scale: 1.02 }} whileTap={{ scale: 0.98 }}>\r\n            <button\r\n              type=\"button\"\r\n              onClick={() => {\r\n                setConfig((prev) => ({ ...prev, format: format.value as any }));\r\n              }}\r\n              className={cn(\r\n                'w-full p-4 rounded-lg border-2 transition-all duration-200 text-left',\r\n                config.format === format.value\r\n                  ? 'border-primary bg-primary/5 shadow-md'\r\n                  : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50',\r\n              )}\r\n            >\r\n              <div className=\"flex items-start gap-3\">\r\n                <div\r\n                  className={cn(\r\n                    'w-8 h-8 rounded-lg flex items-center justify-center',\r\n                    config.format === format.value\r\n                      ? 'bg-primary text-white'\r\n                      : 'bg-gray-100 text-gray-600',\r\n                  )}\r\n                >\r\n                  {format.icon}\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <div className=\"font-medium text-gray-900\">{format.label}</div>\r\n                  <div className=\"text-sm text-gray-600 mt-1\">{format.description}</div>\r\n                </div>\r\n                {config.format === format.value && <CheckCircle className=\"w-5 h-5 text-primary\" />}\r\n              </div>\r\n            </button>\r\n          </motion.div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  // Render field selection\r\n  const renderFieldSelection = () => (\r\n    <div className=\"space-y-4\">\r\n      <div className=\"flex items-center justify-between\">\r\n        <Label className=\"text-base font-medium\">Dahil edilecek alanlar</Label>\r\n        <div className=\"flex gap-2\">\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={() => {\r\n              setConfig((prev) => ({ ...prev, fields: availableFields }));\r\n            }}\r\n          >\r\n            T├╝m├╝n├╝ Se├ğ\r\n          </Button>\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={() => {\r\n              setConfig((prev) => ({ ...prev, fields: [] }));\r\n            }}\r\n          >\r\n            Hi├ğbirini Se├ğme\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2 max-h-64 overflow-y-auto\">\r\n        {availableFields.map((field) => (\r\n          <div key={field} className=\"flex items-center space-x-2 p-2 rounded hover:bg-gray-50\">\r\n            <Checkbox\r\n              id={field}\r\n              checked={config.fields?.includes(field)}\r\n              onCheckedChange={(checked) => {\r\n                handleFieldToggle(field, checked as boolean);\r\n              }}\r\n            />\r\n            <label htmlFor={field} className=\"text-sm font-medium cursor-pointer flex-1\">\r\n              {config.customHeaders?.[field] || field}\r\n            </label>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  // Render options\r\n  const renderOptions = () => (\r\n    <div className=\"space-y-6\">\r\n      {/* Filename */}\r\n      <div className=\"space-y-2\">\r\n        <Label htmlFor=\"filename\">Dosya ad─▒</Label>\r\n        <Input\r\n          id=\"filename\"\r\n          value={config.filename}\r\n          onChange={(e) => {\r\n            setConfig((prev) => ({ ...prev, filename: e.target.value }));\r\n          }}\r\n          placeholder=\"export-filename\"\r\n        />\r\n      </div>\r\n\r\n      {/* Date Range */}\r\n      <div className=\"space-y-2\">\r\n        <Label>Tarih aral─▒─ş─▒ (iste─şe ba─şl─▒)</Label>\r\n        <div className=\"flex gap-2\">\r\n          <Popover>\r\n            <PopoverTrigger asChild>\r\n              <Button variant=\"outline\" className=\"flex-1 justify-start text-left\">\r\n                <Calendar className=\"w-4 h-4 mr-2\" />\r\n                {dateRange.start ? dateRange.start.toLocaleDateString('tr-TR') : 'Ba┼şlang─▒├ğ'}\r\n              </Button>\r\n            </PopoverTrigger>\r\n            <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n              <CalendarComponent\r\n                mode=\"single\"\r\n                selected={dateRange.start ?? undefined}\r\n                onSelect={(date) => {\r\n                  handleDateRangeChange(date ?? null, dateRange.end);\r\n                }}\r\n                initialFocus\r\n              />\r\n            </PopoverContent>\r\n          </Popover>\r\n\r\n          <Popover>\r\n            <PopoverTrigger asChild>\r\n              <Button variant=\"outline\" className=\"flex-1 justify-start text-left\">\r\n                <Calendar className=\"w-4 h-4 mr-2\" />\r\n                {dateRange.end ? dateRange.end.toLocaleDateString('tr-TR') : 'Biti┼ş'}\r\n              </Button>\r\n            </PopoverTrigger>\r\n            <PopoverContent className=\"w-auto p-0\" align=\"start\">\r\n              <CalendarComponent\r\n                mode=\"single\"\r\n                selected={dateRange.end ?? undefined}\r\n                onSelect={(date) => {\r\n                  handleDateRangeChange(dateRange.start, date ?? null);\r\n                }}\r\n                initialFocus\r\n              />\r\n            </PopoverContent>\r\n          </Popover>\r\n        </div>\r\n      </div>\r\n\r\n      {/* PDF Options */}\r\n      {config.format === 'pdf' && (\r\n        <div className=\"space-y-4\">\r\n          <Separator />\r\n          <Label className=\"text-base font-medium\">PDF Se├ğenekleri</Label>\r\n\r\n          <div className=\"grid grid-cols-2 gap-4\">\r\n            <div className=\"space-y-2\">\r\n              <Label>Y├Ânlendirme</Label>\r\n              <Select\r\n                value={config.orientation}\r\n                onValueChange={(value) => {\r\n                  setConfig((prev) => ({ ...prev, orientation: value as any }));\r\n                }}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"portrait\">Dikey</SelectItem>\r\n                  <SelectItem value=\"landscape\">Yatay</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <Label>Sayfa Boyutu</Label>\r\n              <Select\r\n                value={config.pageSize}\r\n                onValueChange={(value) => {\r\n                  setConfig((prev) => ({ ...prev, pageSize: value as any }));\r\n                }}\r\n              >\r\n                <SelectTrigger>\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"A4\">A4</SelectItem>\r\n                  <SelectItem value=\"A3\">A3</SelectItem>\r\n                  <SelectItem value=\"Letter\">Letter</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Advanced Options */}\r\n      <div className=\"space-y-4\">\r\n        <Separator />\r\n        <Label className=\"text-base font-medium\">Geli┼şmi┼ş Se├ğenekler</Label>\r\n\r\n        <div className=\"space-y-3\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <Label htmlFor=\"headers\" className=\"text-sm\">\r\n              Ba┼şl─▒k sat─▒r─▒n─▒ dahil et\r\n            </Label>\r\n            <Switch\r\n              id=\"headers\"\r\n              checked={config.includeHeaders}\r\n              onCheckedChange={(checked) => {\r\n                setConfig((prev) => ({ ...prev, includeHeaders: checked }));\r\n              }}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"flex items-center justify-between\">\r\n            <Label htmlFor=\"compression\" className=\"text-sm\">\r\n              S─▒k─▒┼şt─▒rma (b├╝y├╝k dosyalar i├ğin)\r\n            </Label>\r\n            <Switch\r\n              id=\"compression\"\r\n              checked={config.compression}\r\n              onCheckedChange={(checked) => {\r\n                setConfig((prev) => ({ ...prev, compression: checked }));\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  // Render preview\r\n  const renderPreview = () => {\r\n    const filteredData = config.dateRange\r\n      ? data.filter((item) => {\r\n          const itemDate = new Date(item.date ?? item.createdAt ?? item.timestamp);\r\n          return itemDate >= config.dateRange!.start && itemDate <= config.dateRange!.end;\r\n        })\r\n      : data;\r\n\r\n    return (\r\n      <div className=\"space-y-4\">\r\n        <div className=\"bg-blue-50 border border-blue-200 rounded-lg p-4\">\r\n          <div className=\"flex items-center gap-2 text-blue-800\">\r\n            <AlertCircle className=\"w-5 h-5\" />\r\n            <span className=\"font-medium\">D─▒┼şa aktarma ├Âzeti</span>\r\n          </div>\r\n          <div className=\"mt-2 space-y-1 text-sm text-blue-700\">\r\n            <p>\r\n              ÔÇó Format: <strong>{config.format.toUpperCase()}</strong>\r\n            </p>\r\n            <p>\r\n              ÔÇó Kay─▒t say─▒s─▒: <strong>{filteredData.length}</strong>\r\n            </p>\r\n            <p>\r\n              ÔÇó Alan say─▒s─▒: <strong>{config.fields?.length ?? 0}</strong>\r\n            </p>\r\n            <p>\r\n              ÔÇó Dosya ad─▒:{' '}\r\n              <strong>\r\n                {config.filename}.{config.format}\r\n              </strong>\r\n            </p>\r\n            {config.dateRange && (\r\n              <p>\r\n                ÔÇó Tarih aral─▒─ş─▒:{' '}\r\n                <strong>\r\n                  {config.dateRange.start.toLocaleDateString('tr-TR')} -{' '}\r\n                  {config.dateRange.end.toLocaleDateString('tr-TR')}\r\n                </strong>\r\n              </p>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Preview table */}\r\n        <div className=\"border rounded-lg overflow-hidden\">\r\n          <div className=\"bg-gray-50 px-4 py-2 border-b\">\r\n            <span className=\"text-sm font-medium text-gray-700\">├ûnizleme (ilk 5 kay─▒t)</span>\r\n          </div>\r\n          <div className=\"overflow-x-auto\">\r\n            <table className=\"w-full text-sm\">\r\n              <thead className=\"bg-gray-50\">\r\n                <tr>\r\n                  {config.fields?.map((field) => (\r\n                    <th\r\n                      key={field}\r\n                      className=\"px-3 py-2 text-left font-medium text-gray-700 border-r last:border-r-0\"\r\n                    >\r\n                      {config.customHeaders?.[field] || field}\r\n                    </th>\r\n                  ))}\r\n                </tr>\r\n              </thead>\r\n              <tbody>\r\n                {filteredData.slice(0, 5).map((item, index) => (\r\n                  <tr key={index} className=\"border-t\">\r\n                    {config.fields?.map((field) => (\r\n                      <td\r\n                        key={field}\r\n                        className=\"px-3 py-2 border-r last:border-r-0 truncate max-w-32\"\r\n                      >\r\n                        {String(item[field] || '')}\r\n                      </td>\r\n                    ))}\r\n                  </tr>\r\n                ))}\r\n              </tbody>\r\n            </table>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Render export progress\r\n  const renderExportProgress = () => (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"text-center\">\r\n        <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\r\n          <Loader2 className=\"w-8 h-8 text-primary animate-spin\" />\r\n        </div>\r\n        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">D─▒┼şa aktar─▒l─▒yor...</h3>\r\n        <p className=\"text-gray-600\">Verileriniz haz─▒rlan─▒yor, l├╝tfen bekleyin.</p>\r\n      </div>\r\n\r\n      <div className=\"space-y-2\">\r\n        <div className=\"flex justify-between text-sm\">\r\n          <span>─░lerleme</span>\r\n          <span>{progress}%</span>\r\n        </div>\r\n        <Progress value={progress} className=\"h-2\" />\r\n      </div>\r\n\r\n      <Button variant=\"outline\" onClick={cancelExport} className=\"w-full\">\r\n        ─░ptal Et\r\n      </Button>\r\n    </div>\r\n  );\r\n\r\n  // Render completion\r\n  const renderCompletion = () => (\r\n    <div className=\"space-y-6\">\r\n      <div className=\"text-center\">\r\n        <div\r\n          className={cn(\r\n            'w-16 h-16 rounded-full flex items-center justify-center mx-auto mb-4',\r\n            result?.success ? 'bg-green-100' : 'bg-red-100',\r\n          )}\r\n        >\r\n          {result?.success ? (\r\n            <CheckCircle className=\"w-8 h-8 text-green-600\" />\r\n          ) : (\r\n            <AlertCircle className=\"w-8 h-8 text-red-600\" />\r\n          )}\r\n        </div>\r\n\r\n        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\r\n          {result?.success ? 'D─▒┼şa aktarma tamamland─▒!' : 'D─▒┼şa aktarma ba┼şar─▒s─▒z'}\r\n        </h3>\r\n\r\n        <p className=\"text-gray-600\">{result?.message ?? result?.error}</p>\r\n      </div>\r\n\r\n      {result?.success && (\r\n        <div className=\"bg-green-50 border border-green-200 rounded-lg p-4\">\r\n          <div className=\"space-y-2 text-sm text-green-800\">\r\n            <p>\r\n              ÔÇó <strong>{result.recordCount}</strong> kay─▒t d─▒┼şa aktar─▒ld─▒\r\n            </p>\r\n            <p>\r\n              ÔÇó Dosya boyutu: <strong>{(result.size / 1024).toFixed(1)} KB</strong>\r\n            </p>\r\n            <p>\r\n              ÔÇó Dosya ad─▒: <strong>{result.filename}</strong>\r\n            </p>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      <div className=\"flex gap-2\">\r\n        <Button onClick={onClose} className=\"flex-1\">\r\n          Kapat\r\n        </Button>\r\n        <Button\r\n          variant=\"outline\"\r\n          onClick={() => {\r\n            setStep('config');\r\n          }}\r\n          className=\"flex-1\"\r\n        >\r\n          Yeni D─▒┼şa Aktarma\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={onClose}>\r\n      <DialogContent\r\n        className={cn(\r\n          'max-w-4xl max-h-[90vh] overflow-y-auto',\r\n          isMobile && 'mx-4 max-w-[calc(100vw-2rem)]',\r\n        )}\r\n      >\r\n        <DialogHeader>\r\n          <DialogTitle className=\"flex items-center gap-2\">\r\n            <Download className=\"w-5 h-5\" />\r\n            {title}\r\n          </DialogTitle>\r\n          <DialogDescription>\r\n            {data.length} kay─▒t i├ğin d─▒┼şa aktarma se├ğeneklerini yap─▒land─▒r─▒n\r\n          </DialogDescription>\r\n        </DialogHeader>\r\n\r\n        <div className=\"space-y-6\">\r\n          {/* Step indicators */}\r\n          {step !== 'export' && step !== 'complete' && (\r\n            <div className=\"flex items-center justify-center space-x-4\">\r\n              {[\r\n                { key: 'config', label: 'Yap─▒land─▒rma' },\r\n                { key: 'preview', label: '├ûnizleme' },\r\n              ].map((s, index) => (\r\n                <div key={s.key} className=\"flex items-center\">\r\n                  <div\r\n                    className={cn(\r\n                      'w-8 h-8 rounded-full flex items-center justify-center text-sm font-medium',\r\n                      step === s.key ? 'bg-primary text-white' : 'bg-gray-200 text-gray-600',\r\n                    )}\r\n                  >\r\n                    {index + 1}\r\n                  </div>\r\n                  <span\r\n                    className={cn(\r\n                      'ml-2 text-sm',\r\n                      step === s.key ? 'text-primary font-medium' : 'text-gray-600',\r\n                    )}\r\n                  >\r\n                    {s.label}\r\n                  </span>\r\n                  {index < 1 && <div className=\"w-12 h-0.5 bg-gray-200 mx-4\" />}\r\n                </div>\r\n              ))}\r\n            </div>\r\n          )}\r\n\r\n          {/* Content */}\r\n          <AnimatePresence mode=\"wait\">\r\n            {step === 'config' && (\r\n              <motion.div\r\n                key=\"config\"\r\n                initial={{ opacity: 0, x: 20 }}\r\n                animate={{ opacity: 1, x: 0 }}\r\n                exit={{ opacity: 0, x: -20 }}\r\n                className=\"space-y-6\"\r\n              >\r\n                <Tabs defaultValue=\"format\" className=\"w-full\">\r\n                  <TabsList className=\"grid w-full grid-cols-3\">\r\n                    <TabsTrigger value=\"format\">Format</TabsTrigger>\r\n                    <TabsTrigger value=\"fields\">Alanlar</TabsTrigger>\r\n                    <TabsTrigger value=\"options\">Se├ğenekler</TabsTrigger>\r\n                  </TabsList>\r\n\r\n                  <TabsContent value=\"format\" className=\"space-y-4 mt-6\">\r\n                    {renderFormatSelection()}\r\n                  </TabsContent>\r\n\r\n                  <TabsContent value=\"fields\" className=\"space-y-4 mt-6\">\r\n                    {renderFieldSelection()}\r\n                  </TabsContent>\r\n\r\n                  <TabsContent value=\"options\" className=\"space-y-4 mt-6\">\r\n                    {renderOptions()}\r\n                  </TabsContent>\r\n                </Tabs>\r\n\r\n                <div className=\"flex justify-between pt-4 border-t\">\r\n                  <Button variant=\"outline\" onClick={onClose}>\r\n                    ─░ptal\r\n                  </Button>\r\n                  <Button\r\n                    onClick={() => {\r\n                      setStep('preview');\r\n                    }}\r\n                    disabled={!config.fields?.length}\r\n                  >\r\n                    ├ûnizleme\r\n                  </Button>\r\n                </div>\r\n              </motion.div>\r\n            )}\r\n\r\n            {step === 'preview' && (\r\n              <motion.div\r\n                key=\"preview\"\r\n                initial={{ opacity: 0, x: 20 }}\r\n                animate={{ opacity: 1, x: 0 }}\r\n                exit={{ opacity: 0, x: -20 }}\r\n              >\r\n                {renderPreview()}\r\n\r\n                <div className=\"flex justify-between pt-4 border-t\">\r\n                  <Button\r\n                    variant=\"outline\"\r\n                    onClick={() => {\r\n                      setStep('config');\r\n                    }}\r\n                  >\r\n                    Geri\r\n                  </Button>\r\n                  <Button onClick={handleExport}>\r\n                    <Download className=\"w-4 h-4 mr-2\" />\r\n                    D─▒┼şa Aktar\r\n                  </Button>\r\n                </div>\r\n              </motion.div>\r\n            )}\r\n\r\n            {step === 'export' && (\r\n              <motion.div\r\n                key=\"export\"\r\n                initial={{ opacity: 0, scale: 0.95 }}\r\n                animate={{ opacity: 1, scale: 1 }}\r\n                exit={{ opacity: 0, scale: 0.95 }}\r\n              >\r\n                {renderExportProgress()}\r\n              </motion.div>\r\n            )}\r\n\r\n            {step === 'complete' && (\r\n              <motion.div\r\n                key=\"complete\"\r\n                initial={{ opacity: 0, scale: 0.95 }}\r\n                animate={{ opacity: 1, scale: 1 }}\r\n                exit={{ opacity: 0, scale: 0.95 }}\r\n              >\r\n                {renderCompletion()}\r\n              </motion.div>\r\n            )}\r\n          </AnimatePresence>\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\data\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\forms\\BeneficiaryForm.tsx","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":174,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":174,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6004,6006],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":190,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":190,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6375,6377],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":195,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":195,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6541,6543],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":208,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":208,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6821,6823],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":441,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":441,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14122,14125],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14122,14125],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":462,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":462,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15092,15095],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15092,15095],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":576,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":576,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[18839,18841],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":647,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":647,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[21251,21253],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":672,"column":98,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":672,"endColumn":101,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22289,22292],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22289,22292],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview BeneficiaryForm Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { Building, CreditCard, Heart, MapPin, Phone, Save, User, X, Camera } from 'lucide-react';\r\nimport { useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { toast } from 'sonner';\r\nimport { z } from 'zod';\r\n// import type { AidType, BeneficiaryCategory, BeneficiaryFormData } from '../../types/beneficiary';\r\nimport { Button } from '../ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Checkbox } from '../ui/checkbox';\r\nimport { Input } from '../ui/input';\r\nimport { Label } from '../ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\nimport { Textarea } from '../ui/textarea';\r\nimport { CameraScanner } from '../ui/camera-scanner';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\nimport type { OCRResult } from '../../services/ocrService';\r\n// Form validation schema\r\nconst beneficiarySchema = z.object({\r\n  // Temel bilgiler\r\n  full_name: z.string().min(2, 'Ad soyad en az 2 karakter olmal─▒d─▒r'),\r\n  identity_no: z.string().regex(/^[0-9]{11}$/, 'Kimlik numaras─▒ 11 haneli olmal─▒d─▒r'),\r\n  nationality: z.string().min(2, 'Uyruk belirtilmelidir'),\r\n  country: z.string().length(2, '├£lke kodu 2 karakter olmal─▒d─▒r'),\r\n\r\n  // ─░leti┼şim\r\n  phone: z.string().regex(/^(\\+90|0)?5[0-9]{9}$/, 'Ge├ğerli telefon numaras─▒ giriniz'),\r\n  email: z.string().email('Ge├ğerli e-posta adresi giriniz').optional().or(z.literal('')),\r\n\r\n  // Adres\r\n  city: z.string().min(2, '┼Şehir belirtilmelidir'),\r\n  settlement: z.string().min(2, 'Yerle┼şim yeri belirtilmelidir'),\r\n  neighborhood: z.string().optional(),\r\n  address: z.string().min(10, 'Adres en az 10 karakter olmal─▒d─▒r'),\r\n\r\n  // Demografik\r\n  household_size: z\r\n    .number()\r\n    .min(1, 'Hane b├╝y├╝kl├╝─ş├╝ en az 1 olmal─▒d─▒r')\r\n    .max(20, 'Hane b├╝y├╝kl├╝─ş├╝ en fazla 20 olabilir'),\r\n  birth_date: z.string().optional(),\r\n  gender: z.enum(['male', 'female', 'other']).optional(),\r\n\r\n  // Yard─▒m\r\n  category: z.enum(['g─▒da', 'nakdi', 'e─şitim', 'sa─şl─▒k', 'bar─▒nma', 'giyim', 'di─şer']),\r\n  aid_type: z.enum(['acil', 'd├╝zenli', '├Âzel']),\r\n  fund_region: z.string().min(2, 'B├Âlge belirtilmelidir'),\r\n\r\n  // Ba─şlant─▒lar\r\n  linked_orphan: z.boolean().optional(),\r\n  linked_card: z.boolean().optional(),\r\n  card_no: z.string().optional(),\r\n\r\n  // Ek bilgiler\r\n  opened_by_unit: z.string().min(2, 'A├ğan birim belirtilmelidir'),\r\n  iban: z.string().optional(),\r\n  notes: z.string().optional(),\r\n\r\n  // Aile ├╝yeleri\r\n  family_members: z.array(z.object({\r\n    name: z.string().min(2, '─░sim en az 2 karakter olmal─▒d─▒r'),\r\n    surname: z.string().min(2, 'Soyisim en az 2 karakter olmal─▒d─▒r'),\r\n    phone: z.string().regex(/^(\\+90|0)?5[0-9]{9}$/, 'Ge├ğerli telefon numaras─▒ giriniz'),\r\n    email: z.string().email('Ge├ğerli e-posta adresi giriniz').optional().or(z.literal('')),\r\n    birth_date: z.string().optional(),\r\n    gender: z.enum(['male', 'female', 'other']).optional(),\r\n    identity_number: z.string().optional(),\r\n  })).optional(),\r\n\r\n  // ─░htiya├ğlar\r\n  needs: z.array(z.object({\r\n    type: z.string().min(2, '─░htiya├ğ t├╝r├╝ belirtilmelidir'),\r\n    description: z.string().min(10, 'A├ğ─▒klama en az 10 karakter olmal─▒d─▒r'),\r\n    priority: z.enum(['d├╝┼ş├╝k', 'orta', 'y├╝ksek']),\r\n    estimated_cost: z.number().min(0, 'Maliyet negatif olamaz').optional(),\r\n  })).optional(),\r\n\r\n  // Sa─şl─▒k bilgileri\r\n  health_info: z.object({\r\n    has_chronic_disease: z.boolean().optional(),\r\n    chronic_diseases: z.array(z.string()).optional(),\r\n    medications: z.array(z.string()).optional(),\r\n    allergies: z.array(z.string()).optional(),\r\n    disability_status: z.enum(['yok', 'hafif', 'orta', 'a─ş─▒r']).optional(),\r\n  }).optional(),\r\n\r\n  // Di─şer bilgiler\r\n  other_info: z.object({\r\n    education_level: z.enum(['okur_yazar_de─şil', 'ilkokul', 'ortaokul', 'lise', '├╝niversite', 'y├╝ksek_lisans', 'doktora']).optional(),\r\n    occupation: z.string().optional(),\r\n    income_source: z.string().optional(),\r\n    hobbies: z.array(z.string()).optional(),\r\n    special_skills: z.array(z.string()).optional(),\r\n  }).optional(),\r\n\r\n  // Belgeler\r\n  documents: z.object({\r\n    photos: z.array(z.any()).optional(),\r\n    files: z.array(z.any()).optional(),\r\n  }).optional(),\r\n});\r\n\r\ntype BeneficiaryFormData = z.infer<typeof beneficiarySchema>;\r\n\r\ninterface BeneficiaryFormProps {\r\n  initialData?: Partial<BeneficiaryFormData>;\r\n  onSubmit: (data: BeneficiaryFormData) => Promise<void>;\r\n  onCancel?: () => void;\r\n  isLoading?: boolean;\r\n}\r\n\r\nexport default function BeneficiaryForm({\r\n  initialData,\r\n  onSubmit,\r\n  onCancel,\r\n  isLoading = false,\r\n}: BeneficiaryFormProps) {\r\n  const [currentStep, setCurrentStep] = useState(1);\r\n  const [isCameraOpen, setIsCameraOpen] = useState(false);\r\n  const totalSteps = 6;\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting },\r\n    watch,\r\n    setValue,\r\n    getValues,\r\n  } = useForm<BeneficiaryFormData>({\r\n    resolver: zodResolver(beneficiarySchema),\r\n    defaultValues: {\r\n      family_members: [],\r\n      needs: [],\r\n      health_info: {},\r\n      other_info: {},\r\n      documents: {},\r\n      ...initialData,\r\n    },\r\n  });\r\n\r\n  const watchedValues = watch();\r\n\r\n  const handleFormSubmit = async (data: BeneficiaryFormData) => {\r\n    try {\r\n      await onSubmit(data);\r\n      toast.success('Yard─▒m alan─▒ ba┼şar─▒yla kaydedildi');\r\n    } catch (error) {\r\n      toast.error('Kay─▒t s─▒ras─▒nda bir hata olu┼ştu');\r\n      logger.error('Form submission error:', error);\r\n    }\r\n  };\r\n\r\n  const nextStep = () => {\r\n    if (currentStep < totalSteps) {\r\n      setCurrentStep(currentStep + 1);\r\n    }\r\n  };\r\n\r\n  const prevStep = () => {\r\n    if (currentStep > 1) {\r\n      setCurrentStep(currentStep - 1);\r\n    }\r\n  };\r\n\r\n  const addFamilyMember = () => {\r\n    const currentMembers = getValues('family_members') || [];\r\n    setValue('family_members', [\r\n      ...currentMembers,\r\n      {\r\n        name: '',\r\n        surname: '',\r\n        phone: '',\r\n        email: '',\r\n        birth_date: '',\r\n        gender: 'male',\r\n        identity_number: '',\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const removeFamilyMember = (index: number) => {\r\n    const currentMembers = getValues('family_members') || [];\r\n    setValue('family_members', currentMembers.filter((_, i) => i !== index));\r\n  };\r\n\r\n  const addNeed = () => {\r\n    const currentNeeds = getValues('needs') || [];\r\n    setValue('needs', [\r\n      ...currentNeeds,\r\n      {\r\n        type: '',\r\n        description: '',\r\n        priority: 'orta',\r\n        estimated_cost: 0,\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const removeNeed = (index: number) => {\r\n    const currentNeeds = getValues('needs') || [];\r\n    setValue('needs', currentNeeds.filter((_, i) => i !== index));\r\n  };\r\n\r\n  // OCR sonucunu forma doldur\r\n  const handleOCRResult = (result: OCRResult) => {\r\n    try {\r\n      if (result.fullName) {\r\n        setValue('full_name', result.fullName);\r\n      }\r\n      \r\n      if (result.identityNumber) {\r\n        setValue('identity_no', result.identityNumber);\r\n      }\r\n      \r\n      if (result.nationality) {\r\n        setValue('nationality', result.nationality);\r\n      }\r\n      \r\n      if (result.country) {\r\n        setValue('country', result.country);\r\n      }\r\n      \r\n      if (result.birthDate) {\r\n        setValue('birth_date', result.birthDate);\r\n      }\r\n      \r\n      if (result.gender) {\r\n        setValue('gender', result.gender);\r\n      }\r\n\r\n      toast.success('Belge bilgileri forma otomatik olarak dolduruldu');\r\n      logger.info('OCR sonucu forma dolduruldu', result);\r\n    } catch (error) {\r\n      toast.error('Form doldurma s─▒ras─▒nda hata olu┼ştu');\r\n      logger.error('OCR sonucu form doldurma hatas─▒:', error);\r\n    }\r\n  };\r\n\r\n  const renderStep1 = () => (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <User className=\"h-5 w-5\" />\r\n          Temel Bilgiler\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-4\">\r\n        {/* Kamera Tarama Butonu */}\r\n        <div className=\"mb-4 p-4 bg-blue-50 border border-blue-200 rounded-lg\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div>\r\n              <h4 className=\"font-medium text-blue-900\">H─▒zl─▒ Kay─▒t</h4>\r\n              <p className=\"text-sm text-blue-700\">\r\n                Kimlik veya pasaport belgenizi kameraya g├Âstererek bilgileri otomatik doldurun\r\n              </p>\r\n            </div>\r\n            <Button\r\n              type=\"button\"\r\n              onClick={() => { setIsCameraOpen(true); }}\r\n              variant=\"outline\"\r\n              className=\"flex items-center gap-2 border-blue-300 text-blue-700 hover:bg-blue-100\"\r\n            >\r\n              <Camera className=\"h-4 w-4\" />\r\n              Kamera ile Tara\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n          <div>\r\n            <Label htmlFor=\"full_name\">Ad Soyad *</Label>\r\n            <Input\r\n              id=\"full_name\"\r\n              {...register('full_name')}\r\n              placeholder=\"Ad Soyad\"\r\n            />\r\n            {errors.full_name && (\r\n              <p className=\"text-sm text-red-500\">{errors.full_name.message}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <Label htmlFor=\"identity_no\">Kimlik Numaras─▒ *</Label>\r\n            <Input\r\n              id=\"identity_no\"\r\n              {...register('identity_no')}\r\n              placeholder=\"11 haneli kimlik numaras─▒\"\r\n            />\r\n            {errors.identity_no && (\r\n              <p className=\"text-sm text-red-500\">{errors.identity_no.message}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <Label htmlFor=\"nationality\">Uyruk *</Label>\r\n            <Input\r\n              id=\"nationality\"\r\n              {...register('nationality')}\r\n              placeholder=\"Uyruk\"\r\n            />\r\n            {errors.nationality && (\r\n              <p className=\"text-sm text-red-500\">{errors.nationality.message}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <Label htmlFor=\"country\">├£lke Kodu *</Label>\r\n            <Input\r\n              id=\"country\"\r\n              {...register('country')}\r\n              placeholder=\"TR\"\r\n              maxLength={2}\r\n            />\r\n            {errors.country && (\r\n              <p className=\"text-sm text-red-500\">{errors.country.message}</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n\r\n  const renderStep2 = () => (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Phone className=\"h-5 w-5\" />\r\n          ─░leti┼şim Bilgileri\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-4\">\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n          <div>\r\n            <Label htmlFor=\"phone\">Telefon *</Label>\r\n            <Input\r\n              id=\"phone\"\r\n              {...register('phone')}\r\n              placeholder=\"05XX XXX XX XX\"\r\n            />\r\n            {errors.phone && (\r\n              <p className=\"text-sm text-red-500\">{errors.phone.message}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <Label htmlFor=\"email\">E-posta</Label>\r\n            <Input\r\n              id=\"email\"\r\n              type=\"email\"\r\n              {...register('email')}\r\n              placeholder=\"ornek@email.com\"\r\n            />\r\n            {errors.email && (\r\n              <p className=\"text-sm text-red-500\">{errors.email.message}</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n\r\n  const renderStep3 = () => (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <MapPin className=\"h-5 w-5\" />\r\n          Adres Bilgileri\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-4\">\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n          <div>\r\n            <Label htmlFor=\"city\">┼Şehir *</Label>\r\n            <Input\r\n              id=\"city\"\r\n              {...register('city')}\r\n              placeholder=\"┼Şehir\"\r\n            />\r\n            {errors.city && (\r\n              <p className=\"text-sm text-red-500\">{errors.city.message}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <Label htmlFor=\"settlement\">Yerle┼şim Yeri *</Label>\r\n            <Input\r\n              id=\"settlement\"\r\n              {...register('settlement')}\r\n              placeholder=\"─░l├ğe/Mahalle\"\r\n            />\r\n            {errors.settlement && (\r\n              <p className=\"text-sm text-red-500\">{errors.settlement.message}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <Label htmlFor=\"neighborhood\">Mahalle</Label>\r\n            <Input\r\n              id=\"neighborhood\"\r\n              {...register('neighborhood')}\r\n              placeholder=\"Mahalle\"\r\n            />\r\n          </div>\r\n\r\n          <div className=\"md:col-span-2\">\r\n            <Label htmlFor=\"address\">Adres *</Label>\r\n            <Textarea\r\n              id=\"address\"\r\n              {...register('address')}\r\n              placeholder=\"Detayl─▒ adres\"\r\n              rows={3}\r\n            />\r\n            {errors.address && (\r\n              <p className=\"text-sm text-red-500\">{errors.address.message}</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n\r\n  const renderStep4 = () => (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Heart className=\"h-5 w-5\" />\r\n          Yard─▒m Bilgileri\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-4\">\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n          <div>\r\n            <Label htmlFor=\"category\">Kategori *</Label>\r\n            <Select onValueChange={(value) => { setValue('category', value as any); }}>\r\n              <SelectTrigger>\r\n                <SelectValue placeholder=\"Kategori se├ğin\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"g─▒da\">G─▒da</SelectItem>\r\n                <SelectItem value=\"nakdi\">Nakdi</SelectItem>\r\n                <SelectItem value=\"e─şitim\">E─şitim</SelectItem>\r\n                <SelectItem value=\"sa─şl─▒k\">Sa─şl─▒k</SelectItem>\r\n                <SelectItem value=\"bar─▒nma\">Bar─▒nma</SelectItem>\r\n                <SelectItem value=\"giyim\">Giyim</SelectItem>\r\n                <SelectItem value=\"di─şer\">Di─şer</SelectItem>\r\n              </SelectContent>\r\n            </Select>\r\n            {errors.category && (\r\n              <p className=\"text-sm text-red-500\">{errors.category.message}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <Label htmlFor=\"aid_type\">Yard─▒m T├╝r├╝ *</Label>\r\n            <Select onValueChange={(value) => { setValue('aid_type', value as any); }}>\r\n              <SelectTrigger>\r\n                <SelectValue placeholder=\"Yard─▒m t├╝r├╝ se├ğin\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"acil\">Acil</SelectItem>\r\n                <SelectItem value=\"d├╝zenli\">D├╝zenli</SelectItem>\r\n                <SelectItem value=\"├Âzel\">├ûzel</SelectItem>\r\n              </SelectContent>\r\n            </Select>\r\n            {errors.aid_type && (\r\n              <p className=\"text-sm text-red-500\">{errors.aid_type.message}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <Label htmlFor=\"fund_region\">B├Âlge *</Label>\r\n            <Input\r\n              id=\"fund_region\"\r\n              {...register('fund_region')}\r\n              placeholder=\"B├Âlge\"\r\n            />\r\n            {errors.fund_region && (\r\n              <p className=\"text-sm text-red-500\">{errors.fund_region.message}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <Label htmlFor=\"opened_by_unit\">A├ğan Birim *</Label>\r\n            <Input\r\n              id=\"opened_by_unit\"\r\n              {...register('opened_by_unit')}\r\n              placeholder=\"A├ğan birim\"\r\n            />\r\n            {errors.opened_by_unit && (\r\n              <p className=\"text-sm text-red-500\">{errors.opened_by_unit.message}</p>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"space-y-4\">\r\n          <div className=\"flex items-center space-x-2\">\r\n            <Checkbox\r\n              id=\"linked_orphan\"\r\n              checked={watchedValues.linked_orphan}\r\n              onCheckedChange={(checked) => { setValue('linked_orphan', !!checked); }}\r\n            />\r\n            <Label htmlFor=\"linked_orphan\">Yetim ile ba─şlant─▒l─▒</Label>\r\n          </div>\r\n\r\n          <div className=\"flex items-center space-x-2\">\r\n            <Checkbox\r\n              id=\"linked_card\"\r\n              checked={watchedValues.linked_card}\r\n              onCheckedChange={(checked) => { setValue('linked_card', !!checked); }}\r\n            />\r\n            <Label htmlFor=\"linked_card\">Kart ile ba─şlant─▒l─▒</Label>\r\n          </div>\r\n\r\n          {watchedValues.linked_card && (\r\n            <div>\r\n              <Label htmlFor=\"card_no\">Kart Numaras─▒</Label>\r\n              <Input\r\n                id=\"card_no\"\r\n                {...register('card_no')}\r\n                placeholder=\"Kart numaras─▒\"\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          <div>\r\n            <Label htmlFor=\"iban\">IBAN</Label>\r\n            <Input\r\n              id=\"iban\"\r\n              {...register('iban')}\r\n              placeholder=\"TR00 0000 0000 0000 0000 0000 00\"\r\n            />\r\n            {errors.iban && (\r\n              <p className=\"text-sm text-red-500\">{errors.iban.message}</p>\r\n            )}\r\n          </div>\r\n\r\n          <div>\r\n            <Label htmlFor=\"notes\">Notlar</Label>\r\n            <Textarea\r\n              id=\"notes\"\r\n              {...register('notes')}\r\n              placeholder=\"Ek notlar\"\r\n              rows={3}\r\n            />\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n\r\n  const renderStep5 = () => (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Building className=\"h-5 w-5\" />\r\n          Aile ├£yeleri\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-4\">\r\n        <div className=\"flex justify-between items-center\">\r\n          <p className=\"text-sm text-gray-600\">\r\n            Aile ├╝yelerini ekleyebilirsiniz\r\n          </p>\r\n          <Button type=\"button\" onClick={addFamilyMember} variant=\"outline\">\r\n            Aile ├£yesi Ekle\r\n          </Button>\r\n        </div>\r\n\r\n        {(watchedValues.family_members || []).map((member, index) => (\r\n          <div key={index} className=\"border rounded-lg p-4 space-y-4\">\r\n            <div className=\"flex justify-between items-center\">\r\n              <h4 className=\"font-medium\">Aile ├£yesi {index + 1}</h4>\r\n              <Button\r\n                type=\"button\"\r\n                onClick={() => { removeFamilyMember(index); }}\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n              >\r\n                <X className=\"h-4 w-4\" />\r\n              </Button>\r\n            </div>\r\n\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <div>\r\n                <Label htmlFor={`family_members.${index}.name`}>Ad</Label>\r\n                <Input\r\n                  {...register(`family_members.${index}.name`)}\r\n                  placeholder=\"Ad\"\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor={`family_members.${index}.surname`}>Soyad</Label>\r\n                <Input\r\n                  {...register(`family_members.${index}.surname`)}\r\n                  placeholder=\"Soyad\"\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor={`family_members.${index}.phone`}>Telefon</Label>\r\n                <Input\r\n                  {...register(`family_members.${index}.phone`)}\r\n                  placeholder=\"05XX XXX XX XX\"\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor={`family_members.${index}.email`}>E-posta</Label>\r\n                <Input\r\n                  {...register(`family_members.${index}.email`)}\r\n                  placeholder=\"ornek@email.com\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n\r\n  const renderStep6 = () => (\r\n    <Card>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <CreditCard className=\"h-5 w-5\" />\r\n          ─░htiya├ğlar\r\n        </CardTitle>\r\n      </CardHeader>\r\n      <CardContent className=\"space-y-4\">\r\n        <div className=\"flex justify-between items-center\">\r\n          <p className=\"text-sm text-gray-600\">\r\n            ─░htiya├ğlar─▒ ekleyebilirsiniz\r\n          </p>\r\n          <Button type=\"button\" onClick={addNeed} variant=\"outline\">\r\n            ─░htiya├ğ Ekle\r\n          </Button>\r\n        </div>\r\n\r\n        {(watchedValues.needs || []).map((need, index) => (\r\n          <div key={index} className=\"border rounded-lg p-4 space-y-4\">\r\n            <div className=\"flex justify-between items-center\">\r\n              <h4 className=\"font-medium\">─░htiya├ğ {index + 1}</h4>\r\n              <Button\r\n                type=\"button\"\r\n                onClick={() => { removeNeed(index); }}\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n              >\r\n                <X className=\"h-4 w-4\" />\r\n              </Button>\r\n            </div>\r\n\r\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-4\">\r\n              <div>\r\n                <Label htmlFor={`needs.${index}.type`}>T├╝r</Label>\r\n                <Input\r\n                  {...register(`needs.${index}.type`)}\r\n                  placeholder=\"─░htiya├ğ t├╝r├╝\"\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor={`needs.${index}.priority`}>├ûncelik</Label>\r\n                <Select onValueChange={(value) => { setValue(`needs.${index}.priority`, value as any); }}>\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"├ûncelik se├ğin\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"d├╝┼ş├╝k\">D├╝┼ş├╝k</SelectItem>\r\n                    <SelectItem value=\"orta\">Orta</SelectItem>\r\n                    <SelectItem value=\"y├╝ksek\">Y├╝ksek</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n\r\n              <div className=\"md:col-span-2\">\r\n                <Label htmlFor={`needs.${index}.description`}>A├ğ─▒klama</Label>\r\n                <Textarea\r\n                  {...register(`needs.${index}.description`)}\r\n                  placeholder=\"─░htiya├ğ a├ğ─▒klamas─▒\"\r\n                  rows={3}\r\n                />\r\n              </div>\r\n\r\n              <div>\r\n                <Label htmlFor={`needs.${index}.estimated_cost`}>Tahmini Maliyet</Label>\r\n                <Input\r\n                  type=\"number\"\r\n                  {...register(`needs.${index}.estimated_cost`, { valueAsNumber: true })}\r\n                  placeholder=\"0\"\r\n                />\r\n              </div>\r\n            </div>\r\n          </div>\r\n        ))}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n\r\n  const renderCurrentStep = () => {\r\n    switch (currentStep) {\r\n      case 1:\r\n        return renderStep1();\r\n      case 2:\r\n        return renderStep2();\r\n      case 3:\r\n        return renderStep3();\r\n      case 4:\r\n        return renderStep4();\r\n      case 5:\r\n        return renderStep5();\r\n      case 6:\r\n        return renderStep6();\r\n      default:\r\n        return renderStep1();\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"max-w-4xl mx-auto p-6\">\r\n      <div className=\"mb-6\">\r\n        <h2 className=\"text-2xl font-bold mb-2\">Yard─▒m Alan─▒ Kay─▒t Formu</h2>\r\n        <p className=\"text-gray-600\">\r\n          Ad─▒m {currentStep} / {totalSteps}\r\n        </p>\r\n        <div className=\"w-full bg-gray-200 rounded-full h-2 mt-2\">\r\n          <div\r\n            className={`bg-blue-600 h-2 rounded-full transition-all duration-300 ${\r\n              (currentStep / totalSteps) * 100 <= 25 ? 'progress-bar-25' :\r\n              (currentStep / totalSteps) * 100 <= 50 ? 'progress-bar-50' :\r\n              (currentStep / totalSteps) * 100 <= 75 ? 'progress-bar-75' :\r\n              'progress-bar-100'\r\n            }`}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <form onSubmit={handleSubmit(handleFormSubmit)} className=\"space-y-6\">\r\n        {renderCurrentStep()}\r\n\r\n        <div className=\"flex justify-between\">\r\n          <div>\r\n            {currentStep > 1 && (\r\n              <Button type=\"button\" onClick={prevStep} variant=\"outline\">\r\n                ├ûnceki\r\n              </Button>\r\n            )}\r\n          </div>\r\n\r\n          <div className=\"flex gap-2\">\r\n            {onCancel && (\r\n              <Button type=\"button\" onClick={onCancel} variant=\"outline\">\r\n                ─░ptal\r\n              </Button>\r\n            )}\r\n\r\n            {currentStep < totalSteps ? (\r\n              <Button type=\"button\" onClick={nextStep}>\r\n                Sonraki\r\n              </Button>\r\n            ) : (\r\n              <Button type=\"submit\" disabled={isSubmitting || isLoading}>\r\n                {isSubmitting || isLoading ? (\r\n                  <>\r\n                    <Save className=\"h-4 w-4 mr-2 animate-spin\" />\r\n                    Kaydediliyor...\r\n                  </>\r\n                ) : (\r\n                  <>\r\n                    <Save className=\"h-4 w-4 mr-2\" />\r\n                    Kaydet\r\n                  </>\r\n                )}\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </form>\r\n\r\n      {/* Kamera Tarama Modal */}\r\n      <CameraScanner\r\n        isOpen={isCameraOpen}\r\n        onClose={() => { setIsCameraOpen(false); }}\r\n        onScanComplete={handleOCRResult}\r\n        title=\"Kimlik/Pasaport Tarama\"\r\n      />\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\forms\\FormField.tsx","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'react' import is duplicated.","line":9,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":9,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":45,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":45,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1333,1336],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1333,1336],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":46,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":46,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1356,1359],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1356,1359],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":72,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":72,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2072,2075],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2072,2075],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'defaultValue' is defined but never used.","line":88,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":19},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'defaultValue' is defined but never used. Allowed unused args must match /^_/u.","line":88,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":88,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'className' is defined but never used.","line":96,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":96,"endColumn":16},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'className' is defined but never used. Allowed unused args must match /^_/u.","line":96,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":96,"endColumn":16},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'tooltip' is defined but never used.","line":102,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":14},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'tooltip' is defined but never used. Allowed unused args must match /^_/u.","line":102,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":14},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'dirty' is assigned a value but never used.","line":108,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":108,"endColumn":12},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'dirty' is assigned a value but never used. Allowed unused args must match /^_/u.","line":108,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":108,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":136,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":136,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3481,3484],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3481,3484],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/switch-exhaustiveness-check","severity":2,"message":"Switch is not exhaustive. Cases not matched: \"input\"","line":186,"column":15,"nodeType":"Identifier","messageId":"switchIsNotExhaustive","endLine":186,"endColumn":22,"suggestions":[{"messageId":"addMissingCases","fix":{"range":[9620,9620],"text":"case \"input\": { throw new Error('Not implemented yet: \"input\" case') }\n        "},"desc":"Add branches for missing cases."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":331,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":331,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10008,10038],"text":"(suffix) ?? type === 'password')"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview FormField Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport type { ReactNode } from 'react';\r\nimport { forwardRef, useState } from 'react';\r\nimport { motion, AnimatePresence } from 'motion/react';\r\nimport { AlertCircle, CheckCircle, Eye, EyeOff, Loader2 } from 'lucide-react';\r\nimport { Input } from '../ui/input';\r\nimport { Textarea } from '../ui/textarea';\r\nimport { Label } from '../ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\nimport { Checkbox } from '../ui/checkbox';\r\nimport { RadioGroup, RadioGroupItem } from '../ui/radio-group';\r\nimport { Switch } from '../ui/switch';\r\nimport { Button } from '../ui/button';\r\nimport { cn } from '../ui/utils';\r\nimport type { ValidationError, ValidationWarning } from '../../types/validation';\r\n\r\n/**\r\n * FormFieldProps Interface\r\n * \r\n * @interface FormFieldProps\r\n */\r\nexport interface FormFieldProps {\r\n  id: string;\r\n  name: string;\r\n  label?: string;\r\n  placeholder?: string;\r\n  type?:\r\n    | 'text'\r\n    | 'email'\r\n    | 'password'\r\n    | 'tel'\r\n    | 'number'\r\n    | 'date'\r\n    | 'datetime-local'\r\n    | 'time'\r\n    | 'url'\r\n    | 'search';\r\n  variant?: 'input' | 'textarea' | 'select' | 'checkbox' | 'radio' | 'switch' | 'file';\r\n  value?: any;\r\n  defaultValue?: any;\r\n  options?: { value: string; label: string; disabled?: boolean }[];\r\n  required?: boolean;\r\n  disabled?: boolean;\r\n  readOnly?: boolean;\r\n  autoFocus?: boolean;\r\n  autoComplete?: string;\r\n  rows?: number;\r\n  className?: string;\r\n  containerClassName?: string;\r\n  labelClassName?: string;\r\n  inputClassName?: string;\r\n  errorClassName?: string;\r\n  description?: string;\r\n  tooltip?: string;\r\n  prefix?: ReactNode;\r\n  suffix?: ReactNode;\r\n  errors?: ValidationError[];\r\n  warnings?: ValidationWarning[];\r\n  touched?: boolean;\r\n  dirty?: boolean;\r\n  isValidating?: boolean;\r\n  showValidationIcon?: boolean;\r\n  validateOnBlur?: boolean;\r\n  validateOnChange?: boolean;\r\n  debounceMs?: number;\r\n  onChange?: (value: any) => void;\r\n  onBlur?: () => void;\r\n  onFocus?: () => void;\r\n  children?: ReactNode;\r\n}\r\n\r\nexport const FormField = forwardRef<HTMLInputElement | HTMLTextAreaElement, FormFieldProps>(\r\n  (\r\n    {\r\n      id,\r\n      name,\r\n      label,\r\n      placeholder,\r\n      type = 'text',\r\n      variant = 'input',\r\n      value,\r\n      defaultValue,\r\n      options,\r\n      required,\r\n      disabled,\r\n      readOnly,\r\n      autoFocus,\r\n      autoComplete,\r\n      rows = 3,\r\n      className,\r\n      containerClassName,\r\n      labelClassName,\r\n      inputClassName,\r\n      errorClassName,\r\n      description,\r\n      tooltip,\r\n      prefix,\r\n      suffix,\r\n      errors = [],\r\n      warnings = [],\r\n      touched = false,\r\n      dirty = false,\r\n      isValidating = false,\r\n      showValidationIcon = true,\r\n      onChange,\r\n      onBlur,\r\n      onFocus,\r\n      children,\r\n      ...props\r\n    },\r\n    ref,\r\n  ) => {\r\n    const [showPassword, setShowPassword] = useState(false);\r\n    const [isFocused, setIsFocused] = useState(false);\r\n\r\n    const hasError = errors.length > 0;\r\n    const hasWarning = warnings.length > 0 && !hasError;\r\n    const isValid = touched && !hasError && !isValidating && value;\r\n\r\n    const handleFocus = () => {\r\n      setIsFocused(true);\r\n      onFocus?.();\r\n    };\r\n\r\n    const handleBlur = () => {\r\n      setIsFocused(false);\r\n      onBlur?.();\r\n    };\r\n\r\n    const handleChange = (newValue: any) => {\r\n      onChange?.(newValue);\r\n    };\r\n\r\n    const renderValidationIcon = () => {\r\n      if (!showValidationIcon) return null;\r\n\r\n      if (isValidating) {\r\n        return <Loader2 className=\"w-4 h-4 text-blue-500 animate-spin\" />;\r\n      }\r\n\r\n      if (hasError) {\r\n        return <AlertCircle className=\"w-4 h-4 text-red-500\" />;\r\n      }\r\n\r\n      if (isValid) {\r\n        return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\r\n      }\r\n\r\n      return null;\r\n    };\r\n\r\n    const renderInput = () => {\r\n      const baseInputProps = {\r\n        id,\r\n        name,\r\n        placeholder,\r\n        disabled,\r\n        readOnly,\r\n        autoFocus,\r\n        autoComplete,\r\n        value: value ?? '',\r\n        onChange: (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\r\n          handleChange(e.target.value);\r\n        },\r\n        onFocus: handleFocus,\r\n        onBlur: handleBlur,\r\n        className: cn(\r\n          'transition-all duration-200',\r\n          hasError && 'border-red-300 focus:border-red-400 focus:ring-red-200',\r\n          hasWarning && 'border-amber-300 focus:border-amber-400 focus:ring-amber-200',\r\n          isValid && 'border-green-300 focus:border-green-400 focus:ring-green-200',\r\n          disabled && 'opacity-50 cursor-not-allowed',\r\n          inputClassName,\r\n        ),\r\n        'aria-invalid': hasError,\r\n        'aria-describedby': hasError ? `${id}-error` : undefined,\r\n        ...props,\r\n      };\r\n\r\n      switch (variant) {\r\n        case 'textarea':\r\n          return (\r\n            <Textarea\r\n              {...baseInputProps}\r\n              rows={rows}\r\n              ref={ref as React.RefObject<HTMLTextAreaElement>}\r\n            />\r\n          );\r\n\r\n        case 'select':\r\n          return (\r\n            <Select value={value ?? ''} onValueChange={handleChange} disabled={disabled}>\r\n              <SelectTrigger\r\n                className={cn(\r\n                  'transition-all duration-200',\r\n                  hasError && 'border-red-300 focus:border-red-400 focus:ring-red-200',\r\n                  hasWarning && 'border-amber-300 focus:border-amber-400 focus:ring-amber-200',\r\n                  isValid && 'border-green-300 focus:border-green-400 focus:ring-green-200',\r\n                  inputClassName,\r\n                )}\r\n                onFocus={handleFocus}\r\n                onBlur={handleBlur}\r\n              >\r\n                <SelectValue placeholder={placeholder} />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                {options?.map((option) => (\r\n                  <SelectItem key={option.value} value={option.value} disabled={option.disabled}>\r\n                    {option.label}\r\n                  </SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n          );\r\n\r\n        case 'checkbox':\r\n          return (\r\n            <div className=\"flex items-center space-x-2\">\r\n              <Checkbox\r\n                id={id}\r\n                name={name}\r\n                checked={!!value}\r\n                onCheckedChange={handleChange}\r\n                disabled={disabled}\r\n                onFocus={handleFocus}\r\n                onBlur={handleBlur}\r\n                className={cn(\r\n                  hasError && 'border-red-300 data-[state=checked]:bg-red-500',\r\n                  inputClassName,\r\n                )}\r\n              />\r\n              {label && (\r\n                <Label\r\n                  htmlFor={id}\r\n                  className={cn(\r\n                    'text-sm font-medium cursor-pointer',\r\n                    disabled && 'opacity-50 cursor-not-allowed',\r\n                    labelClassName,\r\n                  )}\r\n                >\r\n                  {label}\r\n                  {required && <span className=\"text-red-500 ml-1\">*</span>}\r\n                </Label>\r\n              )}\r\n            </div>\r\n          );\r\n\r\n        case 'radio':\r\n          return (\r\n            <RadioGroup\r\n              value={value ?? ''}\r\n              onValueChange={handleChange}\r\n              disabled={disabled}\r\n              className=\"flex flex-col space-y-2\"\r\n            >\r\n              {options?.map((option) => (\r\n                <div key={option.value} className=\"flex items-center space-x-2\">\r\n                  <RadioGroupItem\r\n                    value={option.value}\r\n                    id={`${id}-${option.value}`}\r\n                    disabled={option.disabled}\r\n                    className={cn(hasError && 'border-red-300 text-red-500', inputClassName)}\r\n                  />\r\n                  <Label\r\n                    htmlFor={`${id}-${option.value}`}\r\n                    className=\"text-sm font-medium cursor-pointer\"\r\n                  >\r\n                    {option.label}\r\n                  </Label>\r\n                </div>\r\n              ))}\r\n            </RadioGroup>\r\n          );\r\n\r\n        case 'switch':\r\n          return (\r\n            <div className=\"flex items-center space-x-2\">\r\n              <Switch\r\n                id={id}\r\n                name={name}\r\n                checked={!!value}\r\n                onCheckedChange={handleChange}\r\n                disabled={disabled}\r\n                onFocus={handleFocus}\r\n                onBlur={handleBlur}\r\n                className={inputClassName}\r\n              />\r\n              {label && (\r\n                <Label\r\n                  htmlFor={id}\r\n                  className={cn(\r\n                    'text-sm font-medium cursor-pointer',\r\n                    disabled && 'opacity-50 cursor-not-allowed',\r\n                    labelClassName,\r\n                  )}\r\n                >\r\n                  {label}\r\n                  {required && <span className=\"text-red-500 ml-1\">*</span>}\r\n                </Label>\r\n              )}\r\n            </div>\r\n          );\r\n\r\n        case 'file':\r\n          return (\r\n            <Input\r\n              {...baseInputProps}\r\n              type=\"file\"\r\n              onChange={(e) => {\r\n                handleChange(e.target.files);\r\n              }}\r\n              ref={ref as React.RefObject<HTMLInputElement>}\r\n            />\r\n          );\r\n\r\n        default:\r\n          // Regular input with password toggle support\r\n          return (\r\n            <div className=\"relative\">\r\n              <Input\r\n                {...baseInputProps}\r\n                type={type === 'password' && showPassword ? 'text' : type}\r\n                ref={ref as React.RefObject<HTMLInputElement>}\r\n                className={cn(\r\n                  ((prefix ?? suffix) || type === 'password' || showValidationIcon) && 'pr-10',\r\n                  prefix && 'pl-10',\r\n                )}\r\n              />\r\n\r\n              {/* Prefix */}\r\n              {prefix && (\r\n                <div className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-slate-500\">\r\n                  {prefix}\r\n                </div>\r\n              )}\r\n\r\n              {/* Password toggle, suffix, or validation icon */}\r\n              <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2 flex items-center space-x-1\">\r\n                {type === 'password' && (\r\n                  <Button\r\n                    type=\"button\"\r\n                    variant=\"ghost\"\r\n                    size=\"sm\"\r\n                    className=\"w-6 h-6 p-0 hover:bg-transparent\"\r\n                    onClick={() => {\r\n                      setShowPassword(!showPassword);\r\n                    }}\r\n                    tabIndex={-1}\r\n                  >\r\n                    {showPassword ? (\r\n                      <EyeOff className=\"w-4 h-4 text-slate-500\" />\r\n                    ) : (\r\n                      <Eye className=\"w-4 h-4 text-slate-500\" />\r\n                    )}\r\n                  </Button>\r\n                )}\r\n\r\n                {suffix && <div className=\"text-slate-500\">{suffix}</div>}\r\n                {renderValidationIcon()}\r\n              </div>\r\n            </div>\r\n          );\r\n      }\r\n    };\r\n\r\n    return (\r\n      <div className={cn('space-y-2', containerClassName)}>\r\n        {/* Label */}\r\n        {label && variant !== 'checkbox' && variant !== 'switch' && (\r\n          <Label\r\n            htmlFor={id}\r\n            className={cn(\r\n              'text-sm font-medium text-slate-700 block',\r\n              required && \"after:content-['*'] after:text-red-500 after:ml-1\",\r\n              disabled && 'opacity-50',\r\n              labelClassName,\r\n            )}\r\n          >\r\n            {label}\r\n          </Label>\r\n        )}\r\n\r\n        {/* Input */}\r\n        <div className=\"relative\">\r\n          {renderInput()}\r\n\r\n          {/* Focus ring animation */}\r\n          <AnimatePresence>\r\n            {isFocused && (\r\n              <motion.div\r\n                initial={{ opacity: 0, scale: 0.95 }}\r\n                animate={{ opacity: 1, scale: 1 }}\r\n                exit={{ opacity: 0, scale: 0.95 }}\r\n                transition={{ duration: 0.2 }}\r\n                className={cn(\r\n                  'absolute inset-0 rounded-md pointer-events-none',\r\n                  hasError\r\n                    ? 'ring-2 ring-red-200'\r\n                    : hasWarning\r\n                      ? 'ring-2 ring-amber-200'\r\n                      : 'ring-2 ring-blue-200',\r\n                )}\r\n              />\r\n            )}\r\n          </AnimatePresence>\r\n        </div>\r\n\r\n        {/* Description */}\r\n        {description && <p className=\"text-sm text-slate-600\">{description}</p>}\r\n\r\n        {/* Validation Messages */}\r\n        <AnimatePresence mode=\"wait\">\r\n          {hasError && (\r\n            <motion.div\r\n              key=\"error\"\r\n              initial={{ opacity: 0, y: -10 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              exit={{ opacity: 0, y: -10 }}\r\n              transition={{ duration: 0.2 }}\r\n              className={cn('space-y-1', errorClassName)}\r\n            >\r\n              {errors.map((error, index) => (\r\n                <div\r\n                  key={index}\r\n                  id={`${id}-error`}\r\n                  className=\"flex items-center gap-2 text-sm text-red-600\"\r\n                  role=\"alert\"\r\n                >\r\n                  <AlertCircle className=\"w-4 h-4 flex-shrink-0\" />\r\n                  <span>{error.message}</span>\r\n                </div>\r\n              ))}\r\n            </motion.div>\r\n          )}\r\n\r\n          {hasWarning && (\r\n            <motion.div\r\n              key=\"warning\"\r\n              initial={{ opacity: 0, y: -10 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              exit={{ opacity: 0, y: -10 }}\r\n              transition={{ duration: 0.2 }}\r\n              className=\"space-y-1\"\r\n            >\r\n              {warnings.map((warning, index) => (\r\n                <div key={index} className=\"flex items-center gap-2 text-sm text-amber-600\">\r\n                  <AlertCircle className=\"w-4 h-4 flex-shrink-0\" />\r\n                  <span>{warning.message}</span>\r\n                </div>\r\n              ))}\r\n            </motion.div>\r\n          )}\r\n        </AnimatePresence>\r\n\r\n        {/* Children (for additional content) */}\r\n        {children}\r\n      </div>\r\n    );\r\n  },\r\n);\r\n\r\nFormField.displayName = 'FormField';\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\forms\\FormProvider.tsx","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'react' import is duplicated.","line":9,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":9,"endColumn":51},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[399,402],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[399,402],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[716,719],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[716,719],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[964,967],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[964,967],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1075,1078],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1075,1078],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1302,1305],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1302,1305],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1349,1352],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1349,1352],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":56,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1657,1660],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1657,1660],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1785,1788],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1785,1788],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'debounceMs' is assigned a value but never used.","line":72,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":13},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'debounceMs' is assigned a value but never used. Allowed unused args must match /^_/u.","line":72,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":72,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":89,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":89,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2507,2510],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2507,2510],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":90,"column":25,"nodeType":"MemberExpression","endLine":90,"endColumn":42},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":91,"column":9,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":91,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":134,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4290,4293],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4290,4293],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":135,"column":5,"nodeType":"MemberExpression","endLine":135,"endColumn":32},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":141,"column":11,"nodeType":"MemberExpression","endLine":141,"endColumn":38},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":143,"column":18,"nodeType":"MemberExpression","endLine":143,"endColumn":45},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":152,"column":5,"nodeType":"MemberExpression","endLine":152,"endColumn":33},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":155,"column":32,"nodeType":"MemberExpression","endLine":155,"endColumn":59},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":157,"column":11,"nodeType":"MemberExpression","endLine":157,"endColumn":38},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":159,"column":18,"nodeType":"MemberExpression","endLine":159,"endColumn":45},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":196,"column":12,"nodeType":"MemberExpression","endLine":196,"endColumn":39},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":196,"column":40,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":196,"endColumn":42,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6255,6257],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":199,"column":12,"nodeType":"MemberExpression","endLine":199,"endColumn":39},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":200,"column":14,"nodeType":"MemberExpression","endLine":200,"endColumn":42},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":240,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":240,"endColumn":31},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":249,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":249,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":250,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":250,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7721,7724],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7721,7724],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":251,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":251,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7809,7812],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7809,7812],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":258,"column":58,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":258,"endColumn":61,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8019,8022],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8019,8022],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":29,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview FormProvider Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport type { ReactNode } from 'react';\r\nimport { createContext, useContext } from 'react';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\ninterface ValidationError {\r\n  field: string;\r\n  message: string;\r\n}\r\n\r\ninterface FormState {\r\n  values: Record<string, any>;\r\n  errors: Record<string, string>;\r\n  touched: Record<string, boolean>;\r\n  isSubmitting: boolean;\r\n  isValid: boolean;\r\n  isDirty: boolean;\r\n}\r\n\r\ntype FormValidationSchema = Record<string, {\r\n    required?: boolean;\r\n    minLength?: number;\r\n    maxLength?: number;\r\n    pattern?: RegExp;\r\n    custom?: (value: any) => string | boolean;\r\n  }>;\r\n\r\ninterface FormContextType {\r\n  formState: FormState;\r\n  schema: FormValidationSchema;\r\n  validateForm: () => Promise<{ isValid: boolean; errors: ValidationError[] }>;\r\n  validateField: (fieldName: string, value: any) => Promise<{ isValid: boolean; errors: ValidationError[] }>;\r\n  setFieldValue: (fieldName: string, value: any) => void;\r\n  setFieldTouched: (fieldName: string, touched?: boolean) => void;\r\n  resetForm: () => void;\r\n  submitForm: () => Promise<{ isValid: boolean; errors: ValidationError[] }>;\r\n  getFieldValues: () => Record<string, any>;\r\n  getFieldProps: (fieldName: string) => any;\r\n  isValid: boolean;\r\n  isSubmitting: boolean;\r\n  isDirty: boolean;\r\n  errors: ValidationError[];\r\n}\r\n\r\nconst FormContext = createContext<FormContextType | undefined>(undefined);\r\n\r\ninterface FormProviderProps {\r\n  children: ReactNode;\r\n  schema: FormValidationSchema;\r\n  initialValues?: Record<string, any>;\r\n  validateOnChange?: boolean;\r\n  validateOnBlur?: boolean;\r\n  debounceMs?: number;\r\n  onSubmit?: (values: Record<string, any>) => Promise<void> | void;\r\n  onValidationChange?: (isValid: boolean, errors: ValidationError[]) => void;\r\n  className?: string;\r\n  onSubmitCapture?: (e: React.FormEvent) => void;\r\n}\r\n\r\nexport function FormProvider({\r\n  children,\r\n  schema,\r\n  initialValues = {},\r\n  validateOnChange = true,\r\n  validateOnBlur = true,\r\n  debounceMs = 300,\r\n  onSubmit,\r\n  onValidationChange,\r\n  className,\r\n  onSubmitCapture,\r\n  ...props\r\n}: FormProviderProps) {\r\n  // Simple form state management\r\n  const formState: FormState = {\r\n    values: { ...initialValues },\r\n    errors: {},\r\n    touched: {},\r\n    isSubmitting: false,\r\n    isValid: true,\r\n    isDirty: false,\r\n  };\r\n\r\n  const validateField = async (fieldName: string, value: any): Promise<{ isValid: boolean; errors: ValidationError[] }> => {\r\n    const fieldSchema = schema[fieldName];\r\n    if (!fieldSchema) {\r\n      return { isValid: true, errors: [] };\r\n    }\r\n\r\n    const errors: ValidationError[] = [];\r\n\r\n    if (fieldSchema.required && (!value || value === '')) {\r\n      errors.push({ field: fieldName, message: `${fieldName} is required` });\r\n    }\r\n\r\n    if (fieldSchema.minLength && value && value.length < fieldSchema.minLength) {\r\n      errors.push({ field: fieldName, message: `${fieldName} must be at least ${fieldSchema.minLength} characters` });\r\n    }\r\n\r\n    if (fieldSchema.maxLength && value && value.length > fieldSchema.maxLength) {\r\n      errors.push({ field: fieldName, message: `${fieldName} must be no more than ${fieldSchema.maxLength} characters` });\r\n    }\r\n\r\n    if (fieldSchema.pattern && value && !fieldSchema.pattern.test(value)) {\r\n      errors.push({ field: fieldName, message: `${fieldName} format is invalid` });\r\n    }\r\n\r\n    if (fieldSchema.custom) {\r\n      const customResult = fieldSchema.custom(value);\r\n      if (customResult !== true) {\r\n        errors.push({ field: fieldName, message: typeof customResult === 'string' ? customResult : `${fieldName} is invalid` });\r\n      }\r\n    }\r\n\r\n    return { isValid: errors.length === 0, errors };\r\n  };\r\n\r\n  const validateForm = async (): Promise<{ isValid: boolean; errors: ValidationError[] }> => {\r\n    const allErrors: ValidationError[] = [];\r\n\r\n    for (const [fieldName, value] of Object.entries(formState.values)) {\r\n      const fieldResult = await validateField(fieldName, value);\r\n      allErrors.push(...fieldResult.errors);\r\n    }\r\n\r\n    return { isValid: allErrors.length === 0, errors: allErrors };\r\n  };\r\n\r\n  const setFieldValue = (fieldName: string, value: any) => {\r\n    formState.values[fieldName] = value;\r\n    formState.isDirty = true;\r\n    \r\n    if (validateOnChange) {\r\n      validateField(fieldName, value).then(result => {\r\n        if (result.errors.length > 0) {\r\n          formState.errors[fieldName] = result.errors[0].message;\r\n        } else {\r\n          delete formState.errors[fieldName];\r\n        }\r\n        formState.isValid = Object.keys(formState.errors).length === 0;\r\n        onValidationChange?.(formState.isValid, result.errors);\r\n      });\r\n    }\r\n  };\r\n\r\n  const setFieldTouched = (fieldName: string, touched = true) => {\r\n    formState.touched[fieldName] = touched;\r\n    \r\n    if (validateOnBlur && touched) {\r\n      validateField(fieldName, formState.values[fieldName]).then(result => {\r\n        if (result.errors.length > 0) {\r\n          formState.errors[fieldName] = result.errors[0].message;\r\n        } else {\r\n          delete formState.errors[fieldName];\r\n        }\r\n        formState.isValid = Object.keys(formState.errors).length === 0;\r\n        onValidationChange?.(formState.isValid, result.errors);\r\n      });\r\n    }\r\n  };\r\n\r\n  const resetForm = () => {\r\n    formState.values = { ...initialValues };\r\n    formState.errors = {};\r\n    formState.touched = {};\r\n    formState.isSubmitting = false;\r\n    formState.isValid = true;\r\n    formState.isDirty = false;\r\n  };\r\n\r\n  const submitForm = async (): Promise<{ isValid: boolean; errors: ValidationError[] }> => {\r\n    formState.isSubmitting = true;\r\n    \r\n    const validationResult = await validateForm();\r\n    \r\n    if (validationResult.isValid && onSubmit) {\r\n      try {\r\n        await onSubmit(formState.values);\r\n      } catch (error) {\r\n        logger.error('Form submission error:', error);\r\n      }\r\n    }\r\n    \r\n    formState.isSubmitting = false;\r\n    return validationResult;\r\n  };\r\n\r\n  const getFieldValues = () => formState.values;\r\n\r\n  const getFieldProps = (fieldName: string) => ({\r\n    value: formState.values[fieldName] || '',\r\n    onChange: (e: React.ChangeEvent<HTMLInputElement>) => { setFieldValue(fieldName, e.target.value); },\r\n    onBlur: () => { setFieldTouched(fieldName, true); },\r\n    error: formState.errors[fieldName],\r\n    touched: formState.touched[fieldName],\r\n  });\r\n\r\n  const handleSubmit = async (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    e.stopPropagation();\r\n\r\n    if (onSubmitCapture) {\r\n      onSubmitCapture(e);\r\n    }\r\n\r\n    return await submitForm();\r\n  };\r\n\r\n  const contextValue: FormContextType = {\r\n    formState,\r\n    schema,\r\n    validateForm,\r\n    validateField,\r\n    setFieldValue,\r\n    setFieldTouched,\r\n    resetForm,\r\n    submitForm,\r\n    getFieldValues,\r\n    getFieldProps,\r\n    isValid: formState.isValid,\r\n    isSubmitting: formState.isSubmitting,\r\n    isDirty: formState.isDirty,\r\n    errors: Object.entries(formState.errors).map(([field, message]) => ({ field, message })),\r\n  };\r\n\r\n  return (\r\n    <FormContext.Provider value={contextValue}>\r\n      <form onSubmit={handleSubmit} className={className} {...props}>\r\n        {children}\r\n      </form>\r\n    </FormContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useFormContext() {\r\n  const context = useContext(FormContext);\r\n  if (!context) {\r\n    throw new Error('useFormContext must be used within a FormProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\n// Export additional form components for compatibility\r\nexport const useForm = useFormContext;\r\nexport const Field = ({ name, ...props }: any) => <input name={name} {...props} />;\r\nexport const FormErrorSummary = ({ errors }: any) => (\r\n  <div>\r\n    {Object.entries(errors).map(([field, error]) => (\r\n      <div key={field}>{field}: {String(error)}</div>\r\n    ))}\r\n  </div>\r\n);\r\nexport const FormSubmitButton = ({ children, ...props }: any) => (\r\n  <button type=\"submit\" {...props}>{children}</button>\r\n);\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\forms\\MobileFormField.tsx","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'react' import is duplicated.","line":9,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":9,"endColumn":46},{"ruleId":"no-duplicate-imports","severity":2,"message":"'./FormField' import is duplicated.","line":13,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":13,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1774,1777],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1774,1777],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/switch-exhaustiveness-check","severity":2,"message":"Switch is not exhaustive. Cases not matched: undefined | \"time\" | \"text\" | \"password\" | \"date\" | \"datetime-local\"","line":72,"column":17,"nodeType":"MemberExpression","messageId":"switchIsNotExhaustive","endLine":72,"endColumn":27,"suggestions":[{"messageId":"addMissingCases","fix":{"range":[2519,2519],"text":"case undefined: { throw new Error('Not implemented yet: undefined case') }\n          case \"time\": { throw new Error('Not implemented yet: \"time\" case') }\n          case \"text\": { throw new Error('Not implemented yet: \"text\" case') }\n          case \"password\": { throw new Error('Not implemented yet: \"password\" case') }\n          case \"date\": { throw new Error('Not implemented yet: \"date\" case') }\n          case \"datetime-local\": { throw new Error('Not implemented yet: \"datetime-local\" case') }\n          "},"desc":"Add branches for missing cases."}]},{"ruleId":"@typescript-eslint/switch-exhaustiveness-check","severity":2,"message":"Switch is not exhaustive. Cases not matched: undefined | \"search\" | \"time\" | \"text\" | \"email\" | \"password\" | \"date\" | \"datetime-local\" | \"url\"","line":97,"column":17,"nodeType":"MemberExpression","messageId":"switchIsNotExhaustive","endLine":97,"endColumn":27,"suggestions":[{"messageId":"addMissingCases","fix":{"range":[2927,2927],"text":"\n          case undefined: { throw new Error('Not implemented yet: undefined case') }\n          case \"search\": { throw new Error('Not implemented yet: \"search\" case') }\n          case \"time\": { throw new Error('Not implemented yet: \"time\" case') }\n          case \"text\": { throw new Error('Not implemented yet: \"text\" case') }\n          case \"email\": { throw new Error('Not implemented yet: \"email\" case') }\n          case \"password\": { throw new Error('Not implemented yet: \"password\" case') }\n          case \"date\": { throw new Error('Not implemented yet: \"date\" case') }\n          case \"datetime-local\": { throw new Error('Not implemented yet: \"datetime-local\" case') }\n          case \"url\": { throw new Error('Not implemented yet: \"url\" case') }"},"desc":"Add branches for missing cases."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":391,"column":23,"nodeType":"Identifier","messageId":"neverNullish","endLine":391,"endColumn":37}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview MobileFormField Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport type { ReactNode } from 'react';\r\nimport { forwardRef, useState } from 'react';\r\nimport { motion, AnimatePresence } from 'motion/react';\r\nimport { Loader2, X } from 'lucide-react';\r\nimport type { FormFieldProps } from './FormField';\r\nimport { FormField } from './FormField';\r\nimport { Button } from '../ui/button';\r\nimport { cn } from '../ui/utils';\r\nimport { useIsMobile } from '../../hooks/useTouchDevice';\r\n\r\ninterface MobileFormFieldProps extends FormFieldProps {\r\n  // Mobile-specific props\r\n  inputMode?: 'text' | 'tel' | 'url' | 'email' | 'numeric' | 'decimal' | 'search';\r\n  pattern?: string;\r\n  enterKeyHint?: 'enter' | 'done' | 'go' | 'next' | 'previous' | 'search' | 'send';\r\n  autoCapitalize?: 'off' | 'none' | 'on' | 'sentences' | 'words' | 'characters';\r\n  autoCorrect?: 'on' | 'off';\r\n  spellCheck?: boolean;\r\n  showClearButton?: boolean;\r\n  mobileOptimizations?: boolean;\r\n}\r\n\r\nexport const MobileFormField = forwardRef<\r\n  HTMLInputElement | HTMLTextAreaElement,\r\n  MobileFormFieldProps\r\n>(\r\n  (\r\n    {\r\n      inputMode,\r\n      pattern,\r\n      enterKeyHint = 'next',\r\n      autoCapitalize = 'sentences',\r\n      autoCorrect = 'on',\r\n      spellCheck = true,\r\n      showClearButton = true,\r\n      mobileOptimizations = true,\r\n      value,\r\n      onChange,\r\n      className,\r\n      inputClassName,\r\n      ...props\r\n    },\r\n    ref,\r\n  ) => {\r\n    const isMobile = useIsMobile();\r\n    const [isFocused, setIsFocused] = useState(false);\r\n\r\n    // Mobile keyboard optimization\r\n    const getMobileProps = () => {\r\n      if (!isMobile || !mobileOptimizations) {\r\n        return {};\r\n      }\r\n\r\n      const mobileProps: any = {\r\n        enterKeyHint,\r\n        autoCapitalize,\r\n        autoCorrect,\r\n        spellCheck,\r\n      };\r\n\r\n      // Set appropriate inputMode based on field type\r\n      if (inputMode) {\r\n        mobileProps.inputMode = inputMode;\r\n      } else {\r\n        switch (props.type) {\r\n          case 'email':\r\n            mobileProps.inputMode = 'email';\r\n            break;\r\n          case 'tel':\r\n            mobileProps.inputMode = 'tel';\r\n            break;\r\n          case 'number':\r\n            mobileProps.inputMode = 'numeric';\r\n            break;\r\n          case 'url':\r\n            mobileProps.inputMode = 'url';\r\n            break;\r\n          case 'search':\r\n            mobileProps.inputMode = 'search';\r\n            break;\r\n          default:\r\n            mobileProps.inputMode = 'text';\r\n        }\r\n      }\r\n\r\n      // Pattern for better mobile keyboard\r\n      if (pattern) {\r\n        mobileProps.pattern = pattern;\r\n      } else {\r\n        switch (props.type) {\r\n          case 'tel':\r\n            mobileProps.pattern = '[0-9]*';\r\n            break;\r\n          case 'number':\r\n            mobileProps.pattern = '[0-9]*';\r\n            break;\r\n        }\r\n      }\r\n\r\n      return mobileProps;\r\n    };\r\n\r\n    // Handle clear button\r\n    const handleClear = () => {\r\n      if (onChange) {\r\n        onChange('');\r\n      }\r\n    };\r\n\r\n    // Handle focus for mobile optimizations\r\n    const handleFocus = () => {\r\n      setIsFocused(true);\r\n\r\n      // Mobile viewport adjustment for better UX\r\n      if (isMobile && mobileOptimizations) {\r\n        // Scroll field into view after a small delay to allow keyboard to appear\r\n        setTimeout(() => {\r\n          const element = (ref && typeof ref === 'object' && 'current' in ref) ? ref.current : document.activeElement;\r\n          if (element && 'scrollIntoView' in element) {\r\n            (element as HTMLElement).scrollIntoView({\r\n              behavior: 'smooth',\r\n              block: 'center',\r\n            });\r\n          }\r\n        }, 300);\r\n      }\r\n\r\n      props.onFocus?.();\r\n    };\r\n\r\n    const handleBlur = () => {\r\n      setIsFocused(false);\r\n      props.onBlur?.();\r\n    };\r\n\r\n    // Mobile-specific styling\r\n    const mobileInputClassName = cn(\r\n      // Base mobile styles\r\n      isMobile &&\r\n        mobileOptimizations && [\r\n          'text-base', // Prevent zoom on iOS\r\n          'min-h-[44px]', // Touch-friendly height\r\n          'px-4 py-3', // Comfortable padding\r\n          'rounded-lg', // Friendlier corners\r\n          'border-2', // Thicker border for easier targeting\r\n          'transition-all duration-200',\r\n          'focus:border-primary focus:ring-2 focus:ring-primary/20',\r\n          'active:transform active:scale-[0.99]', // Subtle press feedback\r\n        ],\r\n      inputClassName,\r\n    );\r\n\r\n    // Enhanced suffix with clear button for mobile\r\n    const renderMobileSuffix = () => {\r\n      const elements = [];\r\n\r\n      // Clear button for mobile\r\n      if (showClearButton && isMobile && value && isFocused) {\r\n        elements.push(\r\n          <Button\r\n            key=\"clear\"\r\n            type=\"button\"\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            className=\"w-6 h-6 p-0 hover:bg-gray-100 rounded-full\"\r\n            onClick={handleClear}\r\n            tabIndex={-1}\r\n          >\r\n            <X className=\"w-4 h-4 text-gray-400\" />\r\n          </Button>,\r\n        );\r\n      }\r\n\r\n      // Original suffix\r\n      if (props.suffix) {\r\n        elements.push(\r\n          <div key=\"suffix\" className=\"text-slate-500\">\r\n            {props.suffix}\r\n          </div>,\r\n        );\r\n      }\r\n\r\n      return elements.length > 0 ? (\r\n        <div className=\"flex items-center space-x-1\">{elements}</div>\r\n      ) : null;\r\n    };\r\n\r\n    return (\r\n      <FormField\r\n        {...props}\r\n        ref={ref}\r\n        value={value}\r\n        onChange={onChange}\r\n        onFocus={handleFocus}\r\n        onBlur={handleBlur}\r\n        inputClassName={mobileInputClassName}\r\n        className={cn(\r\n          // Mobile container optimizations\r\n          isMobile &&\r\n            mobileOptimizations && [\r\n              'touch-manipulation', // Better touch response\r\n            ],\r\n          className,\r\n        )}\r\n        suffix={renderMobileSuffix()}\r\n        {...getMobileProps()}\r\n      />\r\n    );\r\n  },\r\n);\r\n\r\nMobileFormField.displayName = 'MobileFormField';\r\n\r\n// Mobile-optimized form section\r\ninterface MobileFormSectionProps {\r\n  title?: string;\r\n  description?: string;\r\n  children: ReactNode;\r\n  className?: string;\r\n  collapsible?: boolean;\r\n  defaultExpanded?: boolean;\r\n}\r\n\r\n/**\r\n * MobileFormSection function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function MobileFormSection({\r\n  title,\r\n  description,\r\n  children,\r\n  className,\r\n  collapsible = false,\r\n  defaultExpanded = true,\r\n}: MobileFormSectionProps) {\r\n  const [isExpanded, setIsExpanded] = useState(defaultExpanded);\r\n  const isMobile = useIsMobile();\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        'bg-white rounded-lg border border-gray-200',\r\n        isMobile ? 'p-4 mb-4' : 'p-6 mb-6',\r\n        className,\r\n      )}\r\n    >\r\n      {title && (\r\n        <div className=\"mb-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <h3 className=\"text-lg font-semibold text-gray-900\">{title}</h3>\r\n            {collapsible && (\r\n              <Button\r\n                type=\"button\"\r\n                variant=\"ghost\"\r\n                size=\"sm\"\r\n                onClick={() => {\r\n                  setIsExpanded(!isExpanded);\r\n                }}\r\n                className=\"text-gray-500\"\r\n              >\r\n                {isExpanded ? 'Gizle' : 'G├Âster'}\r\n              </Button>\r\n            )}\r\n          </div>\r\n          {description && <p className=\"text-sm text-gray-600 mt-1\">{description}</p>}\r\n        </div>\r\n      )}\r\n\r\n      <AnimatePresence>\r\n        {isExpanded && (\r\n          <motion.div\r\n            initial={{ opacity: 0, height: 0 }}\r\n            animate={{ opacity: 1, height: 'auto' }}\r\n            exit={{ opacity: 0, height: 0 }}\r\n            transition={{ duration: 0.3 }}\r\n            className=\"space-y-4\"\r\n          >\r\n            {children}\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Mobile form navigation\r\ninterface MobileFormNavigationProps {\r\n  currentStep: number;\r\n  totalSteps: number;\r\n  onNext?: () => void;\r\n  onPrevious?: () => void;\r\n  onCancel?: () => void;\r\n  nextLabel?: string;\r\n  previousLabel?: string;\r\n  cancelLabel?: string;\r\n  isNextDisabled?: boolean;\r\n  isLoading?: boolean;\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * MobileFormNavigation function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function MobileFormNavigation({\r\n  currentStep,\r\n  totalSteps,\r\n  onNext,\r\n  onPrevious,\r\n  onCancel,\r\n  nextLabel = '─░leri',\r\n  previousLabel = 'Geri',\r\n  cancelLabel = '─░ptal',\r\n  isNextDisabled = false,\r\n  isLoading = false,\r\n  className,\r\n}: MobileFormNavigationProps) {\r\n  const isMobile = useIsMobile();\r\n\r\n  if (!isMobile) {\r\n    return null; // Use regular form buttons on desktop\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        'fixed bottom-0 left-0 right-0 bg-white border-t border-gray-200 p-4 safe-bottom',\r\n        'flex items-center justify-between gap-3',\r\n        className,\r\n      )}\r\n    >\r\n      {/* Progress indicator */}\r\n      <div className=\"flex-1\">\r\n        <div className=\"flex items-center justify-between text-sm text-gray-600 mb-2\">\r\n          <span>\r\n            Ad─▒m {currentStep} / {totalSteps}\r\n          </span>\r\n          <span>{Math.round((currentStep / totalSteps) * 100)}%</span>\r\n        </div>\r\n        <div className=\"w-full bg-gray-200 rounded-full h-2\">\r\n          <motion.div\r\n            className=\"bg-primary h-2 rounded-full\"\r\n            initial={{ width: 0 }}\r\n            animate={{ width: `${(currentStep / totalSteps) * 100}%` }}\r\n            transition={{ duration: 0.3 }}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Navigation buttons */}\r\n      <div className=\"flex items-center gap-2 ml-4\">\r\n        {onCancel && (\r\n          <Button\r\n            type=\"button\"\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            onClick={onCancel}\r\n            className=\"text-gray-600\"\r\n          >\r\n            {cancelLabel}\r\n          </Button>\r\n        )}\r\n\r\n        {onPrevious && currentStep > 1 && (\r\n          <Button\r\n            type=\"button\"\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            onClick={onPrevious}\r\n            disabled={isLoading}\r\n          >\r\n            {previousLabel}\r\n          </Button>\r\n        )}\r\n\r\n        {onNext && (\r\n          <Button\r\n            type=\"button\"\r\n            onClick={onNext}\r\n            disabled={isNextDisabled ?? isLoading}\r\n            size=\"sm\"\r\n            className=\"min-w-[80px]\"\r\n          >\r\n            {isLoading && <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />}\r\n            {currentStep === totalSteps ? 'Tamamla' : nextLabel}\r\n          </Button>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\forms\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\kumbara\\KumbaraForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'watch' is assigned a value but never used.","line":218,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":218,"endColumn":10},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'watch' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":218,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":218,"endColumn":10},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":250,"column":21,"nodeType":"Identifier","messageId":"neverNullish","endLine":250,"endColumn":28},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":553,"column":21,"nodeType":"Identifier","messageId":"neverNullish","endLine":553,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":643,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":643,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22480,22483],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22480,22483],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview KumbaraForm Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\n// ­şÅĞ KUMBARA FORM COMPONENT\r\n// Enhanced form with React Hook Form + Zod validation\r\n\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport { Building2, Loader2, MapPin, Phone, Save, User, X } from 'lucide-react';\r\nimport { useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { toast } from 'sonner';\r\nimport { z } from 'zod';\r\nimport type { KumbaraInsert, KumbaraStatus, KumbaraUpdate } from '../../types/kumbara';\r\nimport { Alert, AlertDescription } from '../ui/alert';\r\nimport { Button } from '../ui/button';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card';\r\nimport { Input } from '../ui/input';\r\nimport { Label } from '../ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\nimport { Textarea } from '../ui/textarea';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\n// Enhanced Zod validation schemas with TypeScript best practices\r\nconst TURKISH_NAME_REGEX = /^[a-zA-Z─ş├╝┼ş─▒├Â├ğ─Ş├£┼Ş─░├û├ç\\s]+$/;\r\nconst TURKISH_PHONE_REGEX = /^(\\+90|0)?[5][0-9]{9}$/;\r\n\r\nconst coordinatesSchema = z\r\n  .object({\r\n    lat: z\r\n      .number()\r\n      .min(-90, 'Enlem -90 ile 90 aras─▒nda olmal─▒d─▒r')\r\n      .max(90, 'Enlem -90 ile 90 aras─▒nda olmal─▒d─▒r'),\r\n    lng: z\r\n      .number()\r\n      .min(-180, 'Boylam -180 ile 180 aras─▒nda olmal─▒d─▒r')\r\n      .max(180, 'Boylam -180 ile 180 aras─▒nda olmal─▒d─▒r'),\r\n  })\r\n  .strict();\r\n\r\nconst kumbaraSchema = z\r\n  .object({\r\n    name: z\r\n      .string()\r\n      .trim()\r\n      .min(3, 'Kumbara ad─▒ en az 3 karakter olmal─▒d─▒r')\r\n      .max(100, 'Kumbara ad─▒ en fazla 100 karakter olabilir')\r\n      .regex(TURKISH_NAME_REGEX, 'Kumbara ad─▒ sadece harf ve bo┼şluk i├ğerebilir'),\r\n\r\n    location: z\r\n      .string()\r\n      .trim()\r\n      .min(3, 'Lokasyon en az 3 karakter olmal─▒d─▒r')\r\n      .max(100, 'Lokasyon en fazla 100 karakter olabilir'),\r\n\r\n    address: z\r\n      .string()\r\n      .trim()\r\n      .min(10, 'Adres en az 10 karakter olmal─▒d─▒r')\r\n      .max(250, 'Adres en fazla 250 karakter olabilir'),\r\n\r\n    contactPerson: z\r\n      .string()\r\n      .trim()\r\n      .min(2, '─░leti┼şim ki┼şisi ad─▒ en az 2 karakter olmal─▒d─▒r')\r\n      .max(50, '─░leti┼şim ki┼şisi ad─▒ en fazla 50 karakter olabilir')\r\n      .regex(TURKISH_NAME_REGEX, '─░leti┼şim ki┼şisi ad─▒ sadece harf ve bo┼şluk i├ğerebilir')\r\n      .optional()\r\n      .or(z.literal('')),\r\n\r\n    phone: z\r\n      .string()\r\n      .trim()\r\n      .regex(TURKISH_PHONE_REGEX, 'Ge├ğerli bir telefon numaras─▒ giriniz (05xxxxxxxxx)')\r\n      .optional()\r\n      .or(z.literal('')),\r\n\r\n    notes: z\r\n      .string()\r\n      .trim()\r\n      .max(500, 'Notlar en fazla 500 karakter olabilir')\r\n      .optional()\r\n      .or(z.literal('')),\r\n\r\n    status: z\r\n      .enum(['active', 'inactive', 'maintenance', 'damaged', 'removed'] as const)\r\n      .optional()\r\n      .default('active'),\r\n\r\n    coordinates: coordinatesSchema.optional(),\r\n  })\r\n  .strict();\r\n\r\nconst collectionSchema = z.object({\r\n  amount: z\r\n    .number()\r\n    .min(0.01, 'Tutar en az 0.01 TL olmal─▒d─▒r')\r\n    .max(50000, 'Tutar en fazla 50.000 TL olabilir'),\r\n\r\n  collector_name: z\r\n    .string()\r\n    .min(2, 'Toplay─▒c─▒ ad─▒ en az 2 karakter olmal─▒d─▒r')\r\n    .max(50, 'Toplay─▒c─▒ ad─▒ en fazla 50 karakter olabilir')\r\n    .regex(/^[a-zA-Z─ş├╝┼ş─▒├Â├ğ─Ş├£┼Ş─░├û├ç\\s]+$/, 'Toplay─▒c─▒ ad─▒ sadece harf ve bo┼şluk i├ğerebilir'),\r\n\r\n  collection_date: z.string().min(1, 'Toplama tarihi se├ğilmelidir'),\r\n\r\n  witness_name: z\r\n    .string()\r\n    .min(2, 'Tan─▒k ad─▒ en az 2 karakter olmal─▒d─▒r')\r\n    .max(50, 'Tan─▒k ad─▒ en fazla 50 karakter olabilir')\r\n    .regex(/^[a-zA-Z─ş├╝┼ş─▒├Â├ğ─Ş├£┼Ş─░├û├ç\\s]+$/, 'Tan─▒k ad─▒ sadece harf ve bo┼şluk i├ğerebilir')\r\n    .optional()\r\n    .or(z.literal('')),\r\n\r\n  witness_phone: z\r\n    .string()\r\n    .regex(/^(\\+90|0)?[5][0-9]{9}$/, 'Ge├ğerli bir telefon numaras─▒ giriniz')\r\n    .optional()\r\n    .or(z.literal('')),\r\n\r\n  notes: z.string().max(500, 'Notlar en fazla 500 karakter olabilir').optional().or(z.literal('')),\r\n\r\n  weather_condition: z\r\n    .string()\r\n    .max(50, 'Hava durumu en fazla 50 karakter olabilir')\r\n    .optional()\r\n    .or(z.literal('')),\r\n\r\n  collection_method: z.enum(['scheduled', 'emergency', 'maintenance'] as const).optional(),\r\n});\r\n\r\n// Type-safe form data types derived from Zod schemas\r\ntype KumbaraFormData = z.infer<typeof kumbaraSchema>;\r\ntype CollectionFormData = z.infer<typeof collectionSchema>;\r\n\r\n// Enhanced component props with strict TypeScript typing\r\nexport type KumbaraFormMode = 'create' | 'edit';\r\n\r\n/**\r\n * KumbaraFormProps Interface\r\n * \r\n * @interface KumbaraFormProps\r\n */\r\nexport interface KumbaraFormProps {\r\n  readonly mode: KumbaraFormMode;\r\n  readonly initialData?: Partial<KumbaraFormData>;\r\n  readonly onSubmit: (data: KumbaraInsert | KumbaraUpdate) => Promise<void>;\r\n  readonly onCancel?: () => void;\r\n  readonly loading?: boolean;\r\n  readonly className?: string;\r\n}\r\n\r\n/**\r\n * CollectionFormProps Interface\r\n * \r\n * @interface CollectionFormProps\r\n */\r\nexport interface CollectionFormProps {\r\n  readonly kumbaraId: string;\r\n  readonly kumbaraName: string;\r\n  readonly onSubmit: (data: CollectionFormData) => Promise<void>;\r\n  readonly onCancel?: () => void;\r\n  readonly loading?: boolean;\r\n  readonly className?: string;\r\n}\r\n\r\n/**\r\n * Kumbara Create/Edit Form Component\r\n */\r\n/**\r\n * KumbaraForm function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function KumbaraForm({\r\n  mode,\r\n  initialData,\r\n  onSubmit,\r\n  onCancel,\r\n  loading = false,\r\n  className = '',\r\n}: KumbaraFormProps) {\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [locationSuggestions] = useState<string[]>([\r\n    'Merkez Camii',\r\n    'Esnaf Lokantas─▒',\r\n    'Market',\r\n    'Okul',\r\n    'Hastane',\r\n    'Belediye Binas─▒',\r\n    'AVM',\r\n    'Kafe',\r\n  ]);\r\n\r\n  const form = useForm<KumbaraFormData>({\r\n    resolver: zodResolver(kumbaraSchema),\r\n    defaultValues: {\r\n      name: initialData?.name ?? '',\r\n      location: initialData?.location ?? '',\r\n      address: initialData?.address ?? '',\r\n      contactPerson: initialData?.contactPerson ?? '',\r\n      phone: initialData?.phone ?? '',\r\n      notes: initialData?.notes ?? '',\r\n      status: initialData?.status ?? 'active',\r\n    },\r\n  });\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    setValue,\r\n    watch,\r\n  } = form;\r\n\r\n  const handleFormSubmit = async (data: KumbaraFormData) => {\r\n    try {\r\n      setIsSubmitting(true);\r\n\r\n      // Clean empty optional fields\r\n      const cleanData = {\r\n        ...data,\r\n        contactPerson: data.contactPerson ?? undefined,\r\n        phone: data.phone ?? undefined,\r\n        notes: data.notes ?? undefined,\r\n        created_by: 'current-user', // Replace with actual user ID\r\n      };\r\n\r\n      await onSubmit(cleanData);\r\n\r\n      if (mode === 'create') {\r\n        form.reset();\r\n        toast.success('Kumbara ba┼şar─▒yla olu┼şturuldu');\r\n      } else {\r\n        toast.success('Kumbara ba┼şar─▒yla g├╝ncellendi');\r\n      }\r\n    } catch (error) {\r\n      toast.error('─░┼şlem s─▒ras─▒nda bir hata olu┼ştu');\r\n      logger.error('Form submission error:', error);\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const isLoading = loading ?? isSubmitting;\r\n\r\n  return (\r\n    <Card className={`border-0 shadow-xl bg-white/95 backdrop-blur-sm ${className}`}>\r\n      <CardHeader className=\"space-y-3 pb-6\">\r\n        <CardTitle className=\"text-2xl text-slate-800 flex items-center gap-3\">\r\n          <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center\">\r\n            <Building2 className=\"w-5 h-5 text-white\" />\r\n          </div>\r\n          {mode === 'create' ? 'Yeni Kumbara Ekle' : 'Kumbara D├╝zenle'}\r\n        </CardTitle>\r\n        <CardDescription className=\"text-slate-600 leading-relaxed\">\r\n          {mode === 'create'\r\n            ? 'Yeni kumbara konumu ekleyin ve otomatik QR kod ├╝retimi i├ğin gerekli bilgileri doldurun.'\r\n            : 'Kumbara bilgilerini g├╝ncelleyin. T├╝m alanlar iste─şe ba─şl─▒d─▒r.'}\r\n        </CardDescription>\r\n      </CardHeader>\r\n\r\n      <CardContent className=\"space-y-6\">\r\n        <form onSubmit={handleSubmit(handleFormSubmit)} className=\"space-y-6\">\r\n          {/* Basic Information */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n            <div className=\"space-y-3\">\r\n              <Label\r\n                htmlFor=\"name\"\r\n                className=\"text-slate-700 font-semibold flex items-center gap-2\"\r\n              >\r\n                <Building2 className=\"w-4 h-4\" />\r\n                Kumbara Ad─▒ *\r\n              </Label>\r\n              <Input\r\n                id=\"name\"\r\n                {...register('name')}\r\n                placeholder=\"Merkez Camii Kumbaras─▒\"\r\n                className=\"h-11 border-slate-200 focus:border-blue-500 focus:ring-blue-500/20 rounded-xl\"\r\n                disabled={isLoading}\r\n              />\r\n              {errors.name && (\r\n                <Alert className=\"py-2 border-red-200 bg-red-50\">\r\n                  <AlertDescription className=\"text-red-600 text-sm\">\r\n                    {errors.name.message}\r\n                  </AlertDescription>\r\n                </Alert>\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"space-y-3\">\r\n              <Label\r\n                htmlFor=\"location\"\r\n                className=\"text-slate-700 font-semibold flex items-center gap-2\"\r\n              >\r\n                <MapPin className=\"w-4 h-4\" />\r\n                Lokasyon *\r\n              </Label>\r\n              <Select\r\n                onValueChange={(value: string) => {\r\n                  setValue('location', value);\r\n                }}\r\n              >\r\n                <SelectTrigger className=\"h-11 border-slate-200 focus:border-blue-500 focus:ring-blue-500/20 rounded-xl\">\r\n                  <SelectValue placeholder=\"Lokasyon se├ğin\" />\r\n                </SelectTrigger>\r\n                <SelectContent className=\"rounded-xl border-slate-200 shadow-xl\">\r\n                  {locationSuggestions.map((location) => (\r\n                    <SelectItem key={location} value={location}>\r\n                      {location}\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n              <Input\r\n                {...register('location')}\r\n                placeholder=\"Veya manuel girin...\"\r\n                className=\"h-11 border-slate-200 focus:border-blue-500 focus:ring-blue-500/20 rounded-xl\"\r\n                disabled={isLoading}\r\n              />\r\n              {errors.location && (\r\n                <Alert className=\"py-2 border-red-200 bg-red-50\">\r\n                  <AlertDescription className=\"text-red-600 text-sm\">\r\n                    {errors.location.message}\r\n                  </AlertDescription>\r\n                </Alert>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Address */}\r\n          <div className=\"space-y-3\">\r\n            <Label htmlFor=\"address\" className=\"text-slate-700 font-semibold\">\r\n              Tam Adres *\r\n            </Label>\r\n            <Textarea\r\n              id=\"address\"\r\n              {...register('address')}\r\n              placeholder=\"Fatih Mah. Camii Sok. No:15 Fatih/─░STANBUL\"\r\n              rows={3}\r\n              className=\"border-slate-200 focus:border-blue-500 focus:ring-blue-500/20 rounded-xl resize-none\"\r\n              disabled={isLoading}\r\n            />\r\n            {errors.address && (\r\n              <Alert className=\"py-2 border-red-200 bg-red-50\">\r\n                <AlertDescription className=\"text-red-600 text-sm\">\r\n                  {errors.address.message}\r\n                </AlertDescription>\r\n              </Alert>\r\n            )}\r\n          </div>\r\n\r\n          {/* Contact Information */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n            <div className=\"space-y-3\">\r\n              <Label\r\n                htmlFor=\"contactPerson\"\r\n                className=\"text-slate-700 font-semibold flex items-center gap-2\"\r\n              >\r\n                <User className=\"w-4 h-4\" />\r\n                ─░leti┼şim Ki┼şisi\r\n              </Label>\r\n              <Input\r\n                id=\"contactPerson\"\r\n                {...register('contactPerson')}\r\n                placeholder=\"Ahmet ├ûzt├╝rk\"\r\n                className=\"h-11 border-slate-200 focus:border-blue-500 focus:ring-blue-500/20 rounded-xl\"\r\n                disabled={isLoading}\r\n              />\r\n              {errors.contactPerson && (\r\n                <Alert className=\"py-2 border-red-200 bg-red-50\">\r\n                  <AlertDescription className=\"text-red-600 text-sm\">\r\n                    {errors.contactPerson.message}\r\n                  </AlertDescription>\r\n                </Alert>\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"space-y-3\">\r\n              <Label\r\n                htmlFor=\"phone\"\r\n                className=\"text-slate-700 font-semibold flex items-center gap-2\"\r\n              >\r\n                <Phone className=\"w-4 h-4\" />\r\n                Telefon\r\n              </Label>\r\n              <Input\r\n                id=\"phone\"\r\n                {...register('phone')}\r\n                placeholder=\"0532 123 45 67\"\r\n                className=\"h-11 border-slate-200 focus:border-blue-500 focus:ring-blue-500/20 rounded-xl\"\r\n                disabled={isLoading}\r\n              />\r\n              {errors.phone && (\r\n                <Alert className=\"py-2 border-red-200 bg-red-50\">\r\n                  <AlertDescription className=\"text-red-600 text-sm\">\r\n                    {errors.phone.message}\r\n                  </AlertDescription>\r\n                </Alert>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Status (for edit mode) */}\r\n          {mode === 'edit' && (\r\n            <div className=\"space-y-3\">\r\n              <Label className=\"text-slate-700 font-semibold\">Durum</Label>\r\n              <Select\r\n                onValueChange={(value) => {\r\n                  setValue('status', value as KumbaraStatus);\r\n                }}\r\n              >\r\n                <SelectTrigger className=\"h-11 border-slate-200 focus:border-blue-500 focus:ring-blue-500/20 rounded-xl\">\r\n                  <SelectValue placeholder=\"Durum se├ğin\" />\r\n                </SelectTrigger>\r\n                <SelectContent className=\"rounded-xl border-slate-200 shadow-xl\">\r\n                  <SelectItem value=\"active\">Aktif</SelectItem>\r\n                  <SelectItem value=\"inactive\">Pasif</SelectItem>\r\n                  <SelectItem value=\"maintenance\">Bak─▒mda</SelectItem>\r\n                  <SelectItem value=\"damaged\">Hasarl─▒</SelectItem>\r\n                  <SelectItem value=\"removed\">Kald─▒r─▒ld─▒</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n          )}\r\n\r\n          {/* Notes */}\r\n          <div className=\"space-y-3\">\r\n            <Label htmlFor=\"notes\" className=\"text-slate-700 font-semibold\">\r\n              Notlar\r\n            </Label>\r\n            <Textarea\r\n              id=\"notes\"\r\n              {...register('notes')}\r\n              placeholder=\"├ûzel notlar, konumland─▒rma detaylar─▒...\"\r\n              rows={3}\r\n              className=\"border-slate-200 focus:border-blue-500 focus:ring-blue-500/20 rounded-xl resize-none\"\r\n              disabled={isLoading}\r\n            />\r\n            {errors.notes && (\r\n              <Alert className=\"py-2 border-red-200 bg-red-50\">\r\n                <AlertDescription className=\"text-red-600 text-sm\">\r\n                  {errors.notes.message}\r\n                </AlertDescription>\r\n              </Alert>\r\n            )}\r\n          </div>\r\n\r\n          {/* Form Actions */}\r\n          <div className=\"flex gap-4 pt-6 border-t border-slate-100\">\r\n            {onCancel && (\r\n              <Button\r\n                type=\"button\"\r\n                variant=\"outline\"\r\n                className=\"flex-1 h-12 border-slate-200 hover:bg-slate-50 rounded-xl\"\r\n                onClick={onCancel}\r\n                disabled={isLoading}\r\n              >\r\n                <X className=\"w-5 h-5 mr-2\" />\r\n                ─░ptal\r\n              </Button>\r\n            )}\r\n            <Button\r\n              type=\"submit\"\r\n              className=\"flex-1 h-12 bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 rounded-xl shadow-lg\"\r\n              disabled={isLoading}\r\n            >\r\n              {isLoading ? (\r\n                <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\r\n              ) : (\r\n                <Save className=\"w-5 h-5 mr-2\" />\r\n              )}\r\n              {mode === 'create' ? 'Kumbara Olu┼ştur' : 'De─şi┼şiklikleri Kaydet'}\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\n/**\r\n * Collection Recording Form Component\r\n */\r\n/**\r\n * CollectionForm function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function CollectionForm({\r\n  kumbaraId,\r\n  kumbaraName,\r\n  onSubmit,\r\n  onCancel,\r\n  loading = false,\r\n  className = '',\r\n}: CollectionFormProps) {\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n\r\n  const form = useForm<CollectionFormData>({\r\n    resolver: zodResolver(collectionSchema),\r\n    defaultValues: {\r\n      amount: 0,\r\n      collector_name: '',\r\n      collection_date: new Date().toISOString().split('T')[0],\r\n      witness_name: '',\r\n      witness_phone: '',\r\n      notes: '',\r\n      weather_condition: '',\r\n      collection_method: 'scheduled',\r\n    },\r\n  });\r\n\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors },\r\n    setValue,\r\n  } = form;\r\n\r\n  const handleFormSubmit = async (data: CollectionFormData) => {\r\n    try {\r\n      setIsSubmitting(true);\r\n\r\n      const submitData = {\r\n        ...data,\r\n        kumbara_id: kumbaraId,\r\n        witness_name: data.witness_name ?? undefined,\r\n        witness_phone: data.witness_phone ?? undefined,\r\n        notes: data.notes ?? undefined,\r\n        weather_condition: data.weather_condition ?? undefined,\r\n        created_by: 'current-user', // Replace with actual user ID\r\n      };\r\n\r\n      await onSubmit(submitData);\r\n\r\n      form.reset();\r\n      toast.success('Toplama kayd─▒ ba┼şar─▒yla olu┼şturuldu');\r\n    } catch (error) {\r\n      toast.error('Toplama kayd─▒ olu┼şturulamad─▒');\r\n      logger.error('Collection form submission error:', error);\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const isLoading = loading ?? isSubmitting;\r\n\r\n  return (\r\n    <Card className={`border-0 shadow-xl bg-white/95 backdrop-blur-sm ${className}`}>\r\n      <CardHeader className=\"space-y-3 pb-6\">\r\n        <CardTitle className=\"text-2xl text-slate-800 flex items-center gap-3\">\r\n          <div className=\"w-10 h-10 bg-gradient-to-br from-green-500 to-emerald-600 rounded-xl flex items-center justify-center\">\r\n            <Building2 className=\"w-5 h-5 text-white\" />\r\n          </div>\r\n          Kumbara Toplama Kayd─▒\r\n        </CardTitle>\r\n        <CardDescription className=\"text-slate-600 leading-relaxed\">\r\n          <strong>{kumbaraName}</strong> kumbaras─▒ i├ğin toplama kayd─▒ olu┼şturun.\r\n        </CardDescription>\r\n      </CardHeader>\r\n\r\n      <CardContent className=\"space-y-6\">\r\n        <form onSubmit={handleSubmit(handleFormSubmit)} className=\"space-y-6\">\r\n          {/* Amount and Date */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n            <div className=\"space-y-3\">\r\n              <Label htmlFor=\"amount\" className=\"text-slate-700 font-semibold\">\r\n                Toplanan Tutar (TL) *\r\n              </Label>\r\n              <Input\r\n                id=\"amount\"\r\n                type=\"number\"\r\n                step=\"0.01\"\r\n                min=\"0\"\r\n                {...register('amount', { valueAsNumber: true })}\r\n                placeholder=\"125.50\"\r\n                className=\"h-11 border-slate-200 focus:border-green-500 focus:ring-green-500/20 rounded-xl\"\r\n                disabled={isLoading}\r\n              />\r\n              {errors.amount && (\r\n                <Alert className=\"py-2 border-red-200 bg-red-50\">\r\n                  <AlertDescription className=\"text-red-600 text-sm\">\r\n                    {errors.amount.message}\r\n                  </AlertDescription>\r\n                </Alert>\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"space-y-3\">\r\n              <Label htmlFor=\"collection_date\" className=\"text-slate-700 font-semibold\">\r\n                Toplama Tarihi *\r\n              </Label>\r\n              <Input\r\n                id=\"collection_date\"\r\n                type=\"date\"\r\n                {...register('collection_date')}\r\n                className=\"h-11 border-slate-200 focus:border-green-500 focus:ring-green-500/20 rounded-xl\"\r\n                disabled={isLoading}\r\n              />\r\n              {errors.collection_date && (\r\n                <Alert className=\"py-2 border-red-200 bg-red-50\">\r\n                  <AlertDescription className=\"text-red-600 text-sm\">\r\n                    {errors.collection_date.message}\r\n                  </AlertDescription>\r\n                </Alert>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Collector Information */}\r\n          <div className=\"space-y-3\">\r\n            <Label htmlFor=\"collector_name\" className=\"text-slate-700 font-semibold\">\r\n              Toplay─▒c─▒ Ad─▒ *\r\n            </Label>\r\n            <Input\r\n              id=\"collector_name\"\r\n              {...register('collector_name')}\r\n              placeholder=\"Ahmet Y─▒lmaz\"\r\n              className=\"h-11 border-slate-200 focus:border-green-500 focus:ring-green-500/20 rounded-xl\"\r\n              disabled={isLoading}\r\n            />\r\n            {errors.collector_name && (\r\n              <Alert className=\"py-2 border-red-200 bg-red-50\">\r\n                <AlertDescription className=\"text-red-600 text-sm\">\r\n                  {errors.collector_name.message}\r\n                </AlertDescription>\r\n              </Alert>\r\n            )}\r\n          </div>\r\n\r\n          {/* Collection Method */}\r\n          <div className=\"space-y-3\">\r\n            <Label className=\"text-slate-700 font-semibold\">Toplama T├╝r├╝</Label>\r\n            <Select\r\n              onValueChange={(value) => {\r\n                setValue('collection_method', value as any);\r\n              }}\r\n            >\r\n              <SelectTrigger className=\"h-11 border-slate-200 focus:border-green-500 focus:ring-green-500/20 rounded-xl\">\r\n                <SelectValue placeholder=\"Toplama t├╝r├╝ se├ğin\" />\r\n              </SelectTrigger>\r\n              <SelectContent className=\"rounded-xl border-slate-200 shadow-xl\">\r\n                <SelectItem value=\"scheduled\">Planl─▒ Toplama</SelectItem>\r\n                <SelectItem value=\"emergency\">Acil Toplama</SelectItem>\r\n                <SelectItem value=\"maintenance\">Bak─▒m Toplama</SelectItem>\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n\r\n          {/* Witness Information */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n            <div className=\"space-y-3\">\r\n              <Label htmlFor=\"witness_name\" className=\"text-slate-700 font-semibold\">\r\n                Tan─▒k Ad─▒\r\n              </Label>\r\n              <Input\r\n                id=\"witness_name\"\r\n                {...register('witness_name')}\r\n                placeholder=\"Mehmet Demir\"\r\n                className=\"h-11 border-slate-200 focus:border-green-500 focus:ring-green-500/20 rounded-xl\"\r\n                disabled={isLoading}\r\n              />\r\n              {errors.witness_name && (\r\n                <Alert className=\"py-2 border-red-200 bg-red-50\">\r\n                  <AlertDescription className=\"text-red-600 text-sm\">\r\n                    {errors.witness_name.message}\r\n                  </AlertDescription>\r\n                </Alert>\r\n              )}\r\n            </div>\r\n\r\n            <div className=\"space-y-3\">\r\n              <Label htmlFor=\"witness_phone\" className=\"text-slate-700 font-semibold\">\r\n                Tan─▒k Telefon\r\n              </Label>\r\n              <Input\r\n                id=\"witness_phone\"\r\n                {...register('witness_phone')}\r\n                placeholder=\"0532 123 45 67\"\r\n                className=\"h-11 border-slate-200 focus:border-green-500 focus:ring-green-500/20 rounded-xl\"\r\n                disabled={isLoading}\r\n              />\r\n              {errors.witness_phone && (\r\n                <Alert className=\"py-2 border-red-200 bg-red-50\">\r\n                  <AlertDescription className=\"text-red-600 text-sm\">\r\n                    {errors.witness_phone.message}\r\n                  </AlertDescription>\r\n                </Alert>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Weather and Notes */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n            <div className=\"space-y-3\">\r\n              <Label htmlFor=\"weather_condition\" className=\"text-slate-700 font-semibold\">\r\n                Hava Durumu\r\n              </Label>\r\n              <Input\r\n                id=\"weather_condition\"\r\n                {...register('weather_condition')}\r\n                placeholder=\"G├╝ne┼şli, Ya─şmurlu, Karl─▒...\"\r\n                className=\"h-11 border-slate-200 focus:border-green-500 focus:ring-green-500/20 rounded-xl\"\r\n                disabled={isLoading}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"space-y-3\">\r\n              <Label htmlFor=\"notes\" className=\"text-slate-700 font-semibold\">\r\n                Notlar\r\n              </Label>\r\n              <Input\r\n                id=\"notes\"\r\n                {...register('notes')}\r\n                placeholder=\"Ek bilgiler...\"\r\n                className=\"h-11 border-slate-200 focus:border-green-500 focus:ring-green-500/20 rounded-xl\"\r\n                disabled={isLoading}\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          {/* Form Actions */}\r\n          <div className=\"flex gap-4 pt-6 border-t border-slate-100\">\r\n            {onCancel && (\r\n              <Button\r\n                type=\"button\"\r\n                variant=\"outline\"\r\n                className=\"flex-1 h-12 border-slate-200 hover:bg-slate-50 rounded-xl\"\r\n                onClick={onCancel}\r\n                disabled={isLoading}\r\n              >\r\n                <X className=\"w-5 h-5 mr-2\" />\r\n                ─░ptal\r\n              </Button>\r\n            )}\r\n            <Button\r\n              type=\"submit\"\r\n              className=\"flex-1 h-12 bg-gradient-to-r from-green-600 to-emerald-600 hover:from-green-700 hover:to-emerald-700 rounded-xl shadow-lg\"\r\n              disabled={isLoading}\r\n            >\r\n              {isLoading ? (\r\n                <Loader2 className=\"w-5 h-5 mr-2 animate-spin\" />\r\n              ) : (\r\n                <Save className=\"w-5 h-5 mr-2\" />\r\n              )}\r\n              Toplama Kayd─▒ Olu┼ştur\r\n            </Button>\r\n          </div>\r\n        </form>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\nexport default KumbaraForm;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\mobile\\SmartMobileForm.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[972,975],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[972,975],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1337,1340],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1337,1340],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":132,"column":9,"nodeType":"BinaryExpression","messageId":"constantShortCircuit","endLine":132,"endColumn":33},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":132,"column":9,"nodeType":"BinaryExpression","messageId":"neverNullish","endLine":132,"endColumn":33},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":144,"column":22,"nodeType":"MemberExpression","endLine":144,"endColumn":41},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":187,"column":19,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":187,"endColumn":35},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":198,"column":68,"nodeType":"MemberExpression","endLine":198,"endColumn":85},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":200,"column":30,"nodeType":"MemberExpression","endLine":200,"endColumn":64},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":201,"column":13,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":201,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":215,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":215,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6229,6232],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6229,6232],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":266,"column":14,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":266,"endColumn":27}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview SmartMobileForm Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport React, { useState, useRef, useEffect } from 'react';\r\nimport { motion, AnimatePresence } from 'motion/react';\r\nimport { useForm } from 'react-hook-form';\r\nimport {\r\n  CheckCircle,\r\n  AlertCircle,\r\n  Eye,\r\n  EyeOff,\r\n  Camera,\r\n  Calendar,\r\n  Phone,\r\n  Mail,\r\n  User,\r\n  Building,\r\n  Hash,\r\n} from 'lucide-react';\r\nimport { Button } from '../ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { useMobileForm } from '../../hooks/useMobileForm';\r\nimport { useAdvancedMobile } from '../../hooks/useAdvancedMobile';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\ninterface FormField {\r\n  name: string;\r\n  label: string;\r\n  type: 'text' | 'email' | 'tel' | 'number' | 'password' | 'date' | 'select' | 'textarea' | 'file';\r\n  placeholder?: string;\r\n  required?: boolean;\r\n  validation?: any;\r\n  options?: { value: string; label: string }[];\r\n  icon?: React.ReactNode;\r\n  inputMode?: 'text' | 'email' | 'tel' | 'numeric' | 'decimal';\r\n  autoComplete?: string;\r\n  pattern?: string;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n}\r\n\r\ninterface SmartMobileFormProps {\r\n  title: string;\r\n  description?: string;\r\n  fields: FormField[];\r\n  onSubmit: (data: any) => Promise<void>;\r\n  submitLabel?: string;\r\n  successMessage?: string;\r\n  className?: string;\r\n  showProgress?: boolean;\r\n}\r\n\r\nconst fieldIcons = {\r\n  text: User,\r\n  email: Mail,\r\n  tel: Phone,\r\n  number: Hash,\r\n  password: Eye,\r\n  date: Calendar,\r\n  select: Building,\r\n  textarea: Building,\r\n  file: Camera,\r\n};\r\n\r\n/**\r\n * SmartMobileForm function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function SmartMobileForm({\r\n  title,\r\n  description,\r\n  fields,\r\n  onSubmit,\r\n  submitLabel = 'Kaydet',\r\n  successMessage = 'Form ba┼şar─▒yla g├Ânderildi!',\r\n  className = '',\r\n  showProgress = true,\r\n}: SmartMobileFormProps) {\r\n  const {\r\n    register,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting },\r\n    watch,\r\n    reset,\r\n    trigger,\r\n  } = useForm();\r\n\r\n  const [currentStep, setCurrentStep] = useState(0);\r\n  const [showPassword, setShowPassword] = useState<Record<string, boolean>>({});\r\n  const [submitSuccess, setSubmitSuccess] = useState(false);\r\n  const [focusedField, setFocusedField] = useState<string | null>(null);\r\n\r\n  const { triggerHapticFeedback, deviceInfo } = useAdvancedMobile();\r\n  const { adjustViewportForKeyboard, enableFormOptimizations, preventZoom } = useMobileForm();\r\n\r\n  const formRef = useRef<HTMLDivElement>(null);\r\n  const fieldRefs = useRef<Record<string, HTMLElement>>({});\r\n\r\n  // Mobil optimizasyonlar─▒\r\n  useEffect(() => {\r\n    enableFormOptimizations();\r\n    preventZoom();\r\n  }, [enableFormOptimizations, preventZoom]);\r\n\r\n  // Form alanlar─▒n─▒ gruplara b├Âl (mobilde her seferinde 2-3 alan g├Âster)\r\n  const fieldsPerStep = deviceInfo.isMobile ? 2 : fields.length; // Mobilde daha az alan\r\n  const totalSteps = Math.ceil(fields.length / fieldsPerStep);\r\n  const currentFields = fields.slice(\r\n    currentStep * fieldsPerStep,\r\n    (currentStep + 1) * fieldsPerStep,\r\n  );\r\n\r\n  // Mobilde daha ak─▒ll─▒ alan gruplama\r\n  const smartFieldGrouping = React.useMemo(() => {\r\n    if (!deviceInfo.isMobile) return { fieldsPerStep: fields.length, totalSteps: 1 };\r\n\r\n    // ─░lgili alanlar─▒ grupla\r\n    const groups = [];\r\n    let currentGroup = [];\r\n\r\n    fields.forEach((field, index) => {\r\n      currentGroup.push(field);\r\n\r\n      // Grup tamamland─▒ m─▒ kontrol et\r\n      if (\r\n        currentGroup.length >= 2 ?? field.type === 'textarea' ||\r\n        field.type === 'file' ||\r\n        index === fields.length - 1\r\n      ) {\r\n        groups.push([...currentGroup]);\r\n        currentGroup = [];\r\n      }\r\n    });\r\n\r\n    return {\r\n      groups,\r\n      totalSteps: groups.length,\r\n      currentFields: groups[currentStep] || [],\r\n    };\r\n  }, [fields, currentStep, deviceInfo.isMobile]);\r\n\r\n  const progress = ((currentStep + 1) / totalSteps) * 100;\r\n\r\n  const handleFieldFocus = (fieldName: string) => {\r\n    setFocusedField(fieldName);\r\n    if (deviceInfo.isMobile) {\r\n      adjustViewportForKeyboard();\r\n      triggerHapticFeedback('light');\r\n    }\r\n  };\r\n\r\n  const handleFieldBlur = async (fieldName: string) => {\r\n    setFocusedField(null);\r\n    // Validate field on blur\r\n    await trigger(fieldName);\r\n  };\r\n\r\n  const handleNextStep = async () => {\r\n    // Validate current step fields\r\n    const fieldsToValidate = deviceInfo.isMobile\r\n      ? smartFieldGrouping.currentFields.map((f) => f.name)\r\n      : currentFields.map((f) => f.name);\r\n\r\n    const isValid = await trigger(fieldsToValidate);\r\n\r\n    if (isValid) {\r\n      const maxSteps = deviceInfo.isMobile ? smartFieldGrouping.totalSteps : totalSteps;\r\n      if (currentStep < maxSteps - 1) {\r\n        setCurrentStep((prev) => prev + 1);\r\n        triggerHapticFeedback('medium');\r\n\r\n        // Mobilde sonraki alan─▒ otomatik focus et\r\n        if (deviceInfo.isMobile && currentStep + 1 < maxSteps) {\r\n          setTimeout(() => {\r\n            const nextFields = deviceInfo.isMobile\r\n              ? smartFieldGrouping.groups[currentStep + 1]\r\n              : fields.slice((currentStep + 1) * fieldsPerStep, (currentStep + 2) * fieldsPerStep);\r\n\r\n            if (nextFields.length > 0) {\r\n              const nextFieldElement = fieldRefs.current[nextFields[0].name];\r\n              if (nextFieldElement) {\r\n                nextFieldElement.focus();\r\n              }\r\n            }\r\n          }, 300);\r\n        }\r\n      }\r\n    } else {\r\n      triggerHapticFeedback('error');\r\n\r\n      // ─░lk hatal─▒ alana scroll et\r\n      const firstErrorField = fieldsToValidate.find((fieldName) => errors[fieldName]);\r\n      if (firstErrorField) {\r\n        const errorElement = fieldRefs.current[firstErrorField];\r\n        if (errorElement) {\r\n          errorElement.scrollIntoView({ behavior: 'smooth', block: 'center' });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  const handlePrevStep = () => {\r\n    if (currentStep > 0) {\r\n      setCurrentStep((prev) => prev - 1);\r\n      triggerHapticFeedback('light');\r\n    }\r\n  };\r\n\r\n  const handleFormSubmit = async (data: any) => {\r\n    try {\r\n      await onSubmit(data);\r\n      setSubmitSuccess(true);\r\n      triggerHapticFeedback('success');\r\n\r\n      // Success animasyonundan sonra formu reset et\r\n      setTimeout(() => {\r\n        reset();\r\n        setCurrentStep(0);\r\n        setSubmitSuccess(false);\r\n      }, 2000);\r\n    } catch (error) {\r\n      triggerHapticFeedback('error');\r\n      logger.error('Form submission error:', error);\r\n    }\r\n  };\r\n\r\n  const renderField = (field: FormField) => {\r\n    const IconComponent = field.icon ? () => field.icon : fieldIcons[field.type];\r\n    const hasError = errors[field.name];\r\n    const isFocused = focusedField === field.name;\r\n    const fieldValue = watch(field.name);\r\n\r\n    return (\r\n      <motion.div\r\n        key={field.name}\r\n        className=\"space-y-2\"\r\n        initial={{ opacity: 0, y: 20 }}\r\n        animate={{ opacity: 1, y: 0 }}\r\n        exit={{ opacity: 0, y: -20 }}\r\n        transition={{ duration: 0.3 }}\r\n      >\r\n        <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n          {field.label}\r\n          {field.required && <span className=\"text-red-500 ml-1\">*</span>}\r\n        </label>\r\n\r\n        <div className=\"relative\">\r\n          <div\r\n            className={`\r\n            flex items-center rounded-lg border-2 transition-all duration-200\r\n            ${\r\n              hasError\r\n                ? 'border-red-300 bg-red-50'\r\n                : isFocused\r\n                  ? 'border-blue-500 bg-blue-50/30 shadow-lg shadow-blue-500/10'\r\n                  : 'border-gray-200 bg-white'\r\n            }\r\n          `}\r\n          >\r\n            {IconComponent && (\r\n              <div\r\n                className={`pl-3 ${hasError ? 'text-red-400' : isFocused ? 'text-blue-500' : 'text-gray-400'}`}\r\n              >\r\n                <IconComponent className=\"w-5 h-5\" />\r\n              </div>\r\n            )}\r\n\r\n            {field.type === 'select' ? (\r\n              <select\r\n                {...register(field.name, field.validation)}\r\n                ref={(el) => {\r\n                  if (el) fieldRefs.current[field.name] = el;\r\n                }}\r\n                className=\"w-full p-4 text-base bg-transparent border-none outline-none appearance-none\"\r\n                onFocus={() => {\r\n                  handleFieldFocus(field.name);\r\n                }}\r\n                onBlur={() => handleFieldBlur(field.name)}\r\n              >\r\n                <option value=\"\">{field.placeholder ?? 'Se├ğiniz...'}</option>\r\n                {field.options?.map((option) => (\r\n                  <option key={option.value} value={option.value}>\r\n                    {option.label}\r\n                  </option>\r\n                ))}\r\n              </select>\r\n            ) : field.type === 'textarea' ? (\r\n              <textarea\r\n                {...register(field.name, field.validation)}\r\n                ref={(el) => {\r\n                  if (el) fieldRefs.current[field.name] = el;\r\n                }}\r\n                placeholder={field.placeholder}\r\n                className=\"w-full p-4 text-base bg-transparent border-none outline-none resize-none min-h-[100px]\"\r\n                onFocus={() => {\r\n                  handleFieldFocus(field.name);\r\n                }}\r\n                onBlur={() => handleFieldBlur(field.name)}\r\n              />\r\n            ) : field.type === 'file' ? (\r\n              <div className=\"w-full p-4\">\r\n                <input\r\n                  {...register(field.name, field.validation)}\r\n                  ref={(el) => {\r\n                    if (el) fieldRefs.current[field.name] = el;\r\n                  }}\r\n                  type=\"file\"\r\n                  accept=\"image/*\"\r\n                  className=\"w-full text-sm text-gray-500 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-blue-50 file:text-blue-700 hover:file:bg-blue-100\"\r\n                  onFocus={() => {\r\n                    handleFieldFocus(field.name);\r\n                  }}\r\n                  onBlur={() => handleFieldBlur(field.name)}\r\n                />\r\n              </div>\r\n            ) : (\r\n              <input\r\n                {...register(field.name, field.validation)}\r\n                ref={(el) => {\r\n                  if (el) fieldRefs.current[field.name] = el;\r\n                }}\r\n                type={field.type === 'password' && showPassword[field.name] ? 'text' : field.type}\r\n                placeholder={field.placeholder}\r\n                inputMode={field.inputMode}\r\n                autoComplete={field.autoComplete}\r\n                pattern={field.pattern}\r\n                minLength={field.minLength}\r\n                maxLength={field.maxLength}\r\n                className=\"w-full p-4 text-base bg-transparent border-none outline-none\"\r\n                onFocus={() => {\r\n                  handleFieldFocus(field.name);\r\n                }}\r\n                onBlur={() => handleFieldBlur(field.name)}\r\n              />\r\n            )}\r\n\r\n            {field.type === 'password' && (\r\n              <button\r\n                type=\"button\"\r\n                className=\"pr-3 text-gray-400 hover:text-gray-600\"\r\n                onClick={() => {\r\n                  setShowPassword((prev) => ({\r\n                    ...prev,\r\n                    [field.name]: !prev[field.name],\r\n                  }));\r\n                }}\r\n              >\r\n                {showPassword[field.name] ? (\r\n                  <EyeOff className=\"w-5 h-5\" />\r\n                ) : (\r\n                  <Eye className=\"w-5 h-5\" />\r\n                )}\r\n              </button>\r\n            )}\r\n\r\n            {fieldValue && !hasError && (\r\n              <motion.div\r\n                initial={{ scale: 0 }}\r\n                animate={{ scale: 1 }}\r\n                className=\"pr-3 text-green-500\"\r\n              >\r\n                <CheckCircle className=\"w-5 h-5\" />\r\n              </motion.div>\r\n            )}\r\n          </div>\r\n\r\n          {hasError && (\r\n            <motion.div\r\n              initial={{ opacity: 0, y: -10 }}\r\n              animate={{ opacity: 1, y: 0 }}\r\n              className=\"flex items-center gap-2 mt-1 text-red-600\"\r\n            >\r\n              <AlertCircle className=\"w-4 h-4\" />\r\n              <span className=\"text-sm\">{errors[field.name]?.message}</span>\r\n            </motion.div>\r\n          )}\r\n        </div>\r\n      </motion.div>\r\n    );\r\n  };\r\n\r\n  if (submitSuccess) {\r\n    return (\r\n      <motion.div\r\n        initial={{ opacity: 0, scale: 0.8 }}\r\n        animate={{ opacity: 1, scale: 1 }}\r\n        className=\"flex flex-col items-center justify-center p-8 space-y-4\"\r\n      >\r\n        <motion.div\r\n          initial={{ scale: 0 }}\r\n          animate={{ scale: 1 }}\r\n          transition={{ delay: 0.2, type: 'spring', stiffness: 200 }}\r\n          className=\"w-16 h-16 bg-green-100 rounded-full flex items-center justify-center\"\r\n        >\r\n          <CheckCircle className=\"w-8 h-8 text-green-600\" />\r\n        </motion.div>\r\n        <motion.h3\r\n          initial={{ opacity: 0, y: 20 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ delay: 0.4 }}\r\n          className=\"text-xl font-semibold text-green-800\"\r\n        >\r\n          Ba┼şar─▒l─▒!\r\n        </motion.h3>\r\n        <motion.p\r\n          initial={{ opacity: 0, y: 20 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          transition={{ delay: 0.6 }}\r\n          className=\"text-center text-gray-600\"\r\n        >\r\n          {successMessage}\r\n        </motion.p>\r\n      </motion.div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={`w-full max-w-md mx-auto ${className}`} ref={formRef}>\r\n      <Card className=\"shadow-xl border-0 bg-white/95 backdrop-blur-sm\">\r\n        <CardHeader className=\"pb-4\">\r\n          <CardTitle className=\"text-xl font-semibold text-gray-900 text-center\">{title}</CardTitle>\r\n          {description && <p className=\"text-sm text-gray-600 text-center\">{description}</p>}\r\n\r\n          {showProgress && totalSteps > 1 && (\r\n            <div className=\"space-y-2 pt-4\">\r\n              <div className=\"flex justify-between text-xs text-gray-500\">\r\n                <span>\r\n                  Ad─▒m {currentStep + 1} / {totalSteps}\r\n                </span>\r\n                <span>{Math.round(progress)}%</span>\r\n              </div>\r\n              <div className=\"w-full bg-gray-200 rounded-full h-2\">\r\n                <motion.div\r\n                  className=\"bg-blue-600 h-2 rounded-full\"\r\n                  initial={{ width: 0 }}\r\n                  animate={{ width: `${progress}%` }}\r\n                  transition={{ duration: 0.5 }}\r\n                />\r\n              </div>\r\n            </div>\r\n          )}\r\n        </CardHeader>\r\n\r\n        <CardContent className=\"space-y-6\">\r\n          <form onSubmit={handleSubmit(handleFormSubmit)} className=\"space-y-6\">\r\n            <AnimatePresence mode=\"wait\">\r\n              <motion.div\r\n                key={currentStep}\r\n                initial={{ opacity: 0, x: 50 }}\r\n                animate={{ opacity: 1, x: 0 }}\r\n                exit={{ opacity: 0, x: -50 }}\r\n                transition={{ duration: 0.3 }}\r\n                className=\"space-y-4\"\r\n              >\r\n                {(deviceInfo.isMobile ? smartFieldGrouping.currentFields : currentFields).map(\r\n                  renderField,\r\n                )}\r\n              </motion.div>\r\n            </AnimatePresence>\r\n\r\n            {/* Navigation Buttons */}\r\n            <div className=\"flex gap-3 pt-4\">\r\n              {currentStep > 0 && (\r\n                <Button\r\n                  type=\"button\"\r\n                  variant=\"outline\"\r\n                  onClick={handlePrevStep}\r\n                  className=\"flex-1 h-12 text-base font-medium\"\r\n                >\r\n                  Geri\r\n                </Button>\r\n              )}\r\n\r\n              {currentStep <\r\n              (deviceInfo.isMobile ? smartFieldGrouping.totalSteps : totalSteps) - 1 ? (\r\n                <Button\r\n                  type=\"button\"\r\n                  onClick={handleNextStep}\r\n                  className=\"flex-1 h-12 text-base font-medium bg-blue-600 hover:bg-blue-700\"\r\n                >\r\n                  ─░leri\r\n                </Button>\r\n              ) : (\r\n                <Button\r\n                  type=\"submit\"\r\n                  disabled={isSubmitting}\r\n                  className=\"flex-1 h-12 text-base font-medium bg-green-600 hover:bg-green-700 disabled:opacity-50\"\r\n                >\r\n                  {isSubmitting ? (\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin\" />\r\n                      G├Ânderiliyor...\r\n                    </div>\r\n                  ) : (\r\n                    submitLabel\r\n                  )}\r\n                </Button>\r\n              )}\r\n            </div>\r\n          </form>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SmartMobileForm;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\notifications\\EnhancedNotificationCenter.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\notifications\\NewCategoryNotification.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\notifications\\NotificationBell.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'storeReady' is assigned a value but never used.","line":39,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":20},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'storeReady' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":39,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'unreadCount' is assigned a value but never used.","line":54,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":21},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'unreadCount' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":54,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":21},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":61,"column":20,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":61,"endColumn":37},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":84,"column":18,"nodeType":"MemberExpression","endLine":84,"endColumn":34}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview NotificationBell Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { motion, AnimatePresence } from 'motion/react';\r\nimport { Bell, BellRing } from 'lucide-react';\r\nimport { Button } from '../ui/button';\r\nimport { Badge } from '../ui/badge';\r\nimport { useNotificationStore } from '../../stores/notificationStore';\r\nimport { cn } from '../ui/utils';\r\n\r\nimport { logger } from '../../lib/logging/logger';\r\ninterface NotificationBellProps {\r\n  className?: string;\r\n  showBadge?: boolean;\r\n  size?: 'sm' | 'md' | 'lg';\r\n  variant?: 'default' | 'ghost' | 'outline';\r\n}\r\n\r\n/**\r\n * NotificationBell function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function NotificationBell({\r\n  className,\r\n  showBadge = true,\r\n  size = 'md',\r\n  variant = 'ghost',\r\n}: NotificationBellProps) {\r\n  const [isAnimating, setIsAnimating] = useState(false);\r\n  const [lastUnreadCount, setLastUnreadCount] = useState(0);\r\n  const [isMobile, setIsMobile] = useState(false);\r\n  const [storeReady, setStoreReady] = useState(false);\r\n\r\n  // Detect mobile safely\r\n  useEffect(() => {\r\n    const checkMobile = () => {\r\n      setIsMobile(window.innerWidth < 768);\r\n    };\r\n    checkMobile();\r\n    window.addEventListener('resize', checkMobile);\r\n    return () => {\r\n      window.removeEventListener('resize', checkMobile);\r\n    };\r\n  }, []);\r\n\r\n  // Local state for animations\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n\r\n  // Use the notification store directly\r\n  const store = useNotificationStore();\r\n\r\n  // Initialize store data\r\n  useEffect(() => {\r\n    setUnreadCount(store.unreadCount ?? 0);\r\n    setStoreReady(true);\r\n  }, [store]);\r\n\r\n  // Size configurations\r\n  const sizeConfig = {\r\n    sm: {\r\n      button: 'w-8 h-8 p-0',\r\n      icon: 'w-4 h-4',\r\n      badge: 'text-xs min-w-[16px] h-4 px-1',\r\n    },\r\n    md: {\r\n      button: 'w-10 h-10 p-0',\r\n      icon: 'w-5 h-5',\r\n      badge: 'text-xs min-w-[18px] h-5 px-1.5',\r\n    },\r\n    lg: {\r\n      button: 'w-12 h-12 p-0',\r\n      icon: 'w-6 h-6',\r\n      badge: 'text-sm min-w-[20px] h-6 px-2',\r\n    },\r\n  };\r\n\r\n  const config = sizeConfig[size];\r\n\r\n  // Animate when unread count increases\r\n  useEffect(() => {\r\n    if (store.unreadCount > lastUnreadCount && lastUnreadCount > 0) {\r\n      setIsAnimating(true);\r\n\r\n      // Stop animation after duration\r\n      const timer = setTimeout(() => {\r\n        setIsAnimating(false);\r\n      }, 1000);\r\n\r\n      return () => {\r\n        clearTimeout(timer);\r\n      };\r\n    }\r\n\r\n    setLastUnreadCount(store.unreadCount);\r\n  }, [store.unreadCount, lastUnreadCount]);\r\n\r\n  const handleClick = () => {\r\n    try {\r\n      store.setShowNotificationCenter(true);\r\n    } catch (error) {\r\n      logger.error('Error opening notification center:', error);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={cn('relative', className)}>\r\n      <Button\r\n        variant={variant}\r\n        className={cn(\r\n          config.button,\r\n          'relative transition-all duration-200 min-h-[44px] min-w-[44px] rounded-lg hover:bg-slate-100/80 focus-corporate',\r\n          isAnimating && 'animate-pulse',\r\n        )}\r\n        onClick={(e) => {\r\n          e.preventDefault();\r\n          e.stopPropagation();\r\n          try {\r\n            handleClick();\r\n          } catch (error) {\r\n            logger.error('Error opening notification center:', error);\r\n          }\r\n        }}\r\n        aria-label={`Bildirimler ${store.unreadCount > 0 ? `(${store.unreadCount} okunmam─▒┼ş)` : ''}`}\r\n        title={store.unreadCount > 0 ? `${store.unreadCount} okunmam─▒┼ş bildirim` : 'Bildirimler'}\r\n      >\r\n        <motion.div\r\n          animate={\r\n            isAnimating\r\n              ? {\r\n                  scale: [1, 1.2, 1],\r\n                  rotate: [0, -10, 10, -5, 5, 0],\r\n                }\r\n              : {}\r\n          }\r\n          transition={{ duration: 0.6, ease: 'easeInOut' }}\r\n        >\r\n          {store.unreadCount > 0 && isAnimating ? (\r\n            <BellRing className={cn(config.icon, 'text-blue-600')} />\r\n          ) : (\r\n            <Bell className={cn(config.icon)} />\r\n          )}\r\n        </motion.div>\r\n\r\n        {/* Notification Badge */}\r\n        <AnimatePresence>\r\n          {showBadge && store.unreadCount > 0 && (\r\n            <motion.div\r\n              initial={{ scale: 0, opacity: 0 }}\r\n              animate={{ scale: 1, opacity: 1 }}\r\n              exit={{ scale: 0, opacity: 0 }}\r\n              className=\"absolute -top-1 -right-1\"\r\n            >\r\n              <Badge\r\n                className={cn(\r\n                  config.badge,\r\n                  'bg-red-500 text-white border-2 border-white shadow-sm',\r\n                  'flex items-center justify-center rounded-full',\r\n                  store.unreadCount > 99 && 'px-1',\r\n                )}\r\n              >\r\n                {store.unreadCount > 99 ? '99+' : store.unreadCount}\r\n              </Badge>\r\n            </motion.div>\r\n          )}\r\n        </AnimatePresence>\r\n\r\n        {/* Pulse animation for new notifications */}\r\n        <AnimatePresence>\r\n          {isAnimating && (\r\n            <motion.div\r\n              initial={{ scale: 0.8, opacity: 0.8 }}\r\n              animate={{ scale: 2, opacity: 0 }}\r\n              exit={{ opacity: 0 }}\r\n              transition={{ duration: 1, ease: 'easeOut' }}\r\n              className=\"absolute inset-0 border-2 border-blue-400 rounded-full\"\r\n            />\r\n          )}\r\n        </AnimatePresence>\r\n      </Button>\r\n\r\n      {/* Mobile-specific indicator */}\r\n      {isMobile && store.unreadCount > 0 && (\r\n        <motion.div\r\n          initial={{ scale: 0 }}\r\n          animate={{ scale: 1 }}\r\n          className=\"absolute -bottom-1 -right-1 w-3 h-3 bg-red-500 rounded-full border border-white\"\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\notifications\\NotificationErrorBoundary.tsx","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'react' import is duplicated.","line":9,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":9,"endColumn":42}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview NotificationErrorBoundary Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport type { ReactNode } from 'react';\r\nimport React, { Component } from 'react';\r\n\r\nimport { logger } from '../../lib/logging/logger';\r\ninterface Props {\r\n  children: ReactNode;\r\n  fallback?: ReactNode;\r\n}\r\n\r\ninterface State {\r\n  hasError: boolean;\r\n  error?: Error;\r\n}\r\n\r\n/**\r\n * NotificationErrorBoundary Service\r\n * \r\n * Service class for handling notificationerrorboundary operations\r\n * \r\n * @class NotificationErrorBoundary\r\n */\r\nexport class NotificationErrorBoundary extends Component<Props, State> {\r\n  constructor(props: Props) {\r\n    super(props);\r\n    this.state = { hasError: false };\r\n  }\r\n\r\n  static getDerivedStateFromError(error: Error): State {\r\n    return { hasError: true, error };\r\n  }\r\n\r\n  componentDidCatch(error: Error, errorInfo: React.ErrorInfo) {\r\n    logger.error('Notification component error:', error, errorInfo);\r\n  }\r\n\r\n  render() {\r\n    if (this.state.hasError) {\r\n      // Default fallback UI\r\n      if (this.props.fallback) {\r\n        return this.props.fallback;\r\n      }\r\n\r\n      // Minimal fallback for notification components\r\n      return <div className=\"text-xs text-gray-500 p-2\">Bildirimler y├╝klenemiyor</div>;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\notifications\\PushNotificationManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'err' is defined but never used.","line":85,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":85,"endColumn":17},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'err' is defined but never used.","line":85,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":85,"endColumn":17},{"ruleId":"@typescript-eslint/switch-exhaustiveness-check","severity":2,"message":"Switch is not exhaustive. Cases not matched: \"default\"","line":138,"column":13,"nodeType":"Identifier","messageId":"switchIsNotExhaustive","endLine":138,"endColumn":23,"suggestions":[{"messageId":"addMissingCases","fix":{"range":[4884,4884],"text":"case \"default\": { throw new Error('Not implemented yet: \"default\" case') }\n      "},"desc":"Add branches for missing cases."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":209,"column":27,"nodeType":"Identifier","messageId":"neverNullish","endLine":209,"endColumn":36}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Push Notification Manager Component\r\n * Manages push notification settings and permissions\r\n */\r\n\r\nimport { Bell, BellOff, Check, Loader2, Radio, Send, X } from 'lucide-react';\r\nimport React, { useCallback, useMemo, useState } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { usePushNotifications } from '../../hooks/usePushNotifications';\r\nimport { Alert, AlertDescription } from '../ui/alert';\r\nimport { Badge } from '../ui/badge';\r\nimport { Button } from '../ui/button';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card';\r\nimport { Input } from '../ui/input';\r\nimport { Label } from '../ui/label';\r\nimport { Switch } from '../ui/switch';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';\r\nimport { Textarea } from '../ui/textarea';\r\n\r\ninterface PushNotificationManagerProps {\r\n  className?: string;\r\n}\r\n\r\nconst PushNotificationManager: React.FC<PushNotificationManagerProps> = ({ className = '' }) => {\r\n  const {\r\n    isSupported,\r\n    isSubscribed,\r\n    permission,\r\n    isLoading,\r\n    error,\r\n    subscribe,\r\n    unsubscribe,\r\n    showNotification,\r\n    sendToUser,\r\n    broadcast,\r\n  } = usePushNotifications();\r\n\r\n  // Using sonner toast for better performance\r\n  const [testNotification, setTestNotification] = useState({\r\n    title: 'Test Bildirimi',\r\n    body: 'Bu bir test bildirimidir.',\r\n    requireInteraction: false,\r\n  });\r\n  const [targetUserId, setTargetUserId] = useState('');\r\n  const [broadcastMessage, setBroadcastMessage] = useState({\r\n    title: 'Sistem Bildirimi',\r\n    body: '',\r\n    requireInteraction: true,\r\n  });\r\n\r\n  const handleSubscribe = useCallback(async () => {\r\n    const success = await subscribe();\r\n    if (success) {\r\n      toast.success('Push bildirimleri ba┼şar─▒yla etkinle┼ştirildi.');\r\n    } else {\r\n      toast.error('Push bildirimleri etkinle┼ştirilemedi.');\r\n    }\r\n  }, [subscribe]);\r\n\r\n  const handleUnsubscribe = useCallback(async () => {\r\n    const success = await unsubscribe();\r\n    if (success) {\r\n      toast.success('Push bildirimleri ba┼şar─▒yla kapat─▒ld─▒.');\r\n    } else {\r\n      toast.error('Bildirimler kapat─▒lamad─▒.');\r\n    }\r\n  }, [unsubscribe]);\r\n\r\n  const handleTestNotification = useCallback(async () => {\r\n    try {\r\n      await showNotification({\r\n        title: testNotification.title,\r\n        body: testNotification.body,\r\n        icon: '/favicon.svg',\r\n        badge: '/favicon.svg',\r\n        requireInteraction: testNotification.requireInteraction,\r\n        tag: 'test',\r\n        actions: [\r\n          { action: 'view', title: 'G├Âr├╝nt├╝le', icon: '/favicon.svg' },\r\n          { action: 'dismiss', title: 'Kapat', icon: '/favicon.svg' },\r\n        ],\r\n      });\r\n\r\n      toast.success('Test bildirimi ba┼şar─▒yla g├Ânderildi.');\r\n    } catch (err) {\r\n      toast.error('Test bildirimi g├Ânderilirken hata olu┼ştu.');\r\n    }\r\n  }, [showNotification, testNotification]);\r\n\r\n  const handleSendToUser = useCallback(async () => {\r\n    if (!targetUserId.trim()) {\r\n      toast.error('L├╝tfen ge├ğerli bir kullan─▒c─▒ ID girin.');\r\n      return;\r\n    }\r\n\r\n    const success = await sendToUser(targetUserId, {\r\n      title: 'Ki┼şisel Bildirim',\r\n      body: `Size ├Âzel bir mesaj: ${testNotification.body}`,\r\n      icon: '/favicon.svg',\r\n      requireInteraction: true,\r\n    });\r\n\r\n    if (success) {\r\n      toast.success(`${targetUserId} kullan─▒c─▒s─▒na bildirim g├Ânderildi.`);\r\n    } else {\r\n      toast.error('Kullan─▒c─▒ya bildirim g├Ânderilirken hata olu┼ştu.');\r\n    }\r\n  }, [sendToUser, targetUserId, testNotification.body]);\r\n\r\n  const handleBroadcast = useCallback(async () => {\r\n    if (!broadcastMessage.body.trim()) {\r\n      toast.error('L├╝tfen broadcast mesaj─▒ girin.');\r\n      return;\r\n    }\r\n\r\n    const success = await broadcast({\r\n      title: broadcastMessage.title,\r\n      body: broadcastMessage.body,\r\n      icon: '/favicon.svg',\r\n      badge: '/favicon.svg',\r\n      requireInteraction: broadcastMessage.requireInteraction,\r\n      tag: 'broadcast',\r\n      actions: [\r\n        { action: 'view', title: 'G├Âr├╝nt├╝le' },\r\n        { action: 'dismiss', title: 'Kapat' },\r\n      ],\r\n    });\r\n\r\n    if (success) {\r\n      toast.success('T├╝m kullan─▒c─▒lara bildirim g├Ânderildi.');\r\n      setBroadcastMessage((prev) => ({ ...prev, body: '' }));\r\n    } else {\r\n      toast.error('Broadcast g├Ânderilirken hata olu┼ştu.');\r\n    }\r\n  }, [broadcast, broadcastMessage, setBroadcastMessage]);\r\n\r\n  const permissionBadge = useMemo(() => {\r\n    switch (permission) {\r\n      case 'granted':\r\n        return (\r\n          <Badge variant=\"default\" className=\"bg-green-500\">\r\n            <Check className=\"w-3 h-3 mr-1\" />\r\n            ─░zin Verildi\r\n          </Badge>\r\n        );\r\n      case 'denied':\r\n        return (\r\n          <Badge variant=\"destructive\">\r\n            <X className=\"w-3 h-3 mr-1\" />\r\n            ─░zin Reddedildi\r\n          </Badge>\r\n        );\r\n      default:\r\n        return <Badge variant=\"secondary\">─░zin Bekleniyor</Badge>;\r\n    }\r\n  }, [permission]);\r\n\r\n  if (!isSupported) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <BellOff className=\"w-5 h-5\" />\r\n            Push Bildirimleri\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Alert>\r\n            <BellOff className=\"w-4 h-4\" />\r\n            <AlertDescription>Bu taray─▒c─▒ push bildirimleri desteklemiyor.</AlertDescription>\r\n          </Alert>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className={className}>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Bell className=\"w-5 h-5\" />\r\n          Push Bildirim Y├Ânetimi\r\n        </CardTitle>\r\n        <CardDescription>\r\n          Kullan─▒c─▒lara anl─▒k bildirimler g├Ânderin ve bildirim ayarlar─▒n─▒ y├Ânetin.\r\n        </CardDescription>\r\n      </CardHeader>\r\n\r\n      <CardContent className=\"space-y-6\">\r\n        {/* Status Overview */}\r\n        <div className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-800 rounded-lg\">\r\n          <div className=\"space-y-2\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <span className=\"font-medium\">Durum:</span>\r\n              {permissionBadge}\r\n            </div>\r\n            <div className=\"flex items-center gap-2\">\r\n              <span className=\"font-medium\">Abonelik:</span>\r\n              <Badge variant={isSubscribed ? 'default' : 'secondary'}>\r\n                {isSubscribed ? 'Aktif' : 'Pasif'}\r\n              </Badge>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"space-x-2\">\r\n            {!isSubscribed ? (\r\n              <Button\r\n                onClick={handleSubscribe}\r\n                disabled={isLoading ?? permission === 'denied'}\r\n                className=\"gap-2\"\r\n              >\r\n                {isLoading ? (\r\n                  <Loader2 className=\"w-4 h-4 animate-spin\" />\r\n                ) : (\r\n                  <Bell className=\"w-4 h-4\" />\r\n                )}\r\n                Bildirimleri Etkinle┼ştir\r\n              </Button>\r\n            ) : (\r\n              <Button\r\n                onClick={handleUnsubscribe}\r\n                variant=\"outline\"\r\n                disabled={isLoading}\r\n                className=\"gap-2\"\r\n              >\r\n                {isLoading ? (\r\n                  <Loader2 className=\"w-4 h-4 animate-spin\" />\r\n                ) : (\r\n                  <BellOff className=\"w-4 h-4\" />\r\n                )}\r\n                Bildirimleri Kapat\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Error Alert */}\r\n        {error && (\r\n          <Alert variant=\"destructive\">\r\n            <X className=\"w-4 h-4\" />\r\n            <AlertDescription>{error}</AlertDescription>\r\n          </Alert>\r\n        )}\r\n\r\n        {/* Notification Management Tabs */}\r\n        {isSubscribed && (\r\n          <Tabs defaultValue=\"test\" className=\"w-full\">\r\n            <TabsList className=\"grid w-full grid-cols-3\">\r\n              <TabsTrigger value=\"test\">Test</TabsTrigger>\r\n              <TabsTrigger value=\"user\">Kullan─▒c─▒ya G├Ânder</TabsTrigger>\r\n              <TabsTrigger value=\"broadcast\">Broadcast</TabsTrigger>\r\n            </TabsList>\r\n\r\n            {/* Test Notifications */}\r\n            <TabsContent value=\"test\" className=\"space-y-4\">\r\n              <div className=\"space-y-4\">\r\n                <div>\r\n                  <Label htmlFor=\"test-title\">Ba┼şl─▒k</Label>\r\n                  <Input\r\n                    id=\"test-title\"\r\n                    value={testNotification.title}\r\n                    onChange={(e) => {\r\n                      setTestNotification((prev) => ({ ...prev, title: e.target.value }));\r\n                    }}\r\n                    placeholder=\"Bildirim ba┼şl─▒─ş─▒\"\r\n                  />\r\n                </div>\r\n\r\n                <div>\r\n                  <Label htmlFor=\"test-body\">Mesaj</Label>\r\n                  <Textarea\r\n                    id=\"test-body\"\r\n                    value={testNotification.body}\r\n                    onChange={(e) => {\r\n                      setTestNotification((prev) => ({ ...prev, body: e.target.value }));\r\n                    }}\r\n                    placeholder=\"Bildirim mesaj─▒\"\r\n                    rows={3}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <Switch\r\n                    id=\"require-interaction\"\r\n                    checked={testNotification.requireInteraction}\r\n                    onCheckedChange={(checked: boolean) => {\r\n                      setTestNotification((prev) => ({ ...prev, requireInteraction: checked }));\r\n                    }}\r\n                  />\r\n                  <Label htmlFor=\"require-interaction\">Etkile┼şim Gerektir</Label>\r\n                </div>\r\n\r\n                <Button onClick={handleTestNotification} className=\"w-full gap-2\">\r\n                  <Send className=\"w-4 h-4\" />\r\n                  Test Bildirimi G├Ânder\r\n                </Button>\r\n              </div>\r\n            </TabsContent>\r\n\r\n            {/* Send to User */}\r\n            <TabsContent value=\"user\" className=\"space-y-4\">\r\n              <div className=\"space-y-4\">\r\n                <div>\r\n                  <Label htmlFor=\"target-user\">Kullan─▒c─▒ ID</Label>\r\n                  <Input\r\n                    id=\"target-user\"\r\n                    value={targetUserId}\r\n                    onChange={(e) => {\r\n                      setTargetUserId(e.target.value);\r\n                    }}\r\n                    placeholder=\"Hedef kullan─▒c─▒ ID\"\r\n                  />\r\n                </div>\r\n\r\n                <Button onClick={handleSendToUser} className=\"w-full gap-2\">\r\n                  <Send className=\"w-4 h-4\" />\r\n                  Kullan─▒c─▒ya G├Ânder\r\n                </Button>\r\n              </div>\r\n            </TabsContent>\r\n\r\n            {/* Broadcast */}\r\n            <TabsContent value=\"broadcast\" className=\"space-y-4\">\r\n              <div className=\"space-y-4\">\r\n                <div>\r\n                  <Label htmlFor=\"broadcast-title\">Ba┼şl─▒k</Label>\r\n                  <Input\r\n                    id=\"broadcast-title\"\r\n                    value={broadcastMessage.title}\r\n                    onChange={(e) => {\r\n                      setBroadcastMessage((prev) => ({ ...prev, title: e.target.value }));\r\n                    }}\r\n                    placeholder=\"Broadcast ba┼şl─▒─ş─▒\"\r\n                  />\r\n                </div>\r\n\r\n                <div>\r\n                  <Label htmlFor=\"broadcast-body\">Mesaj</Label>\r\n                  <Textarea\r\n                    id=\"broadcast-body\"\r\n                    value={broadcastMessage.body}\r\n                    onChange={(e) => {\r\n                      setBroadcastMessage((prev) => ({ ...prev, body: e.target.value }));\r\n                    }}\r\n                    placeholder=\"T├╝m kullan─▒c─▒lara g├Ânderilecek mesaj\"\r\n                    rows={3}\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"flex items-center space-x-2\">\r\n                  <Switch\r\n                    id=\"broadcast-interaction\"\r\n                    checked={broadcastMessage.requireInteraction}\r\n                    onCheckedChange={(checked: boolean) => {\r\n                      setBroadcastMessage((prev) => ({ ...prev, requireInteraction: checked }));\r\n                    }}\r\n                  />\r\n                  <Label htmlFor=\"broadcast-interaction\">Etkile┼şim Gerektir</Label>\r\n                </div>\r\n\r\n                <Button onClick={handleBroadcast} className=\"w-full gap-2\" variant=\"destructive\">\r\n                  <Radio className=\"w-4 h-4\" />\r\n                  Herkese G├Ânder\r\n                </Button>\r\n              </div>\r\n            </TabsContent>\r\n          </Tabs>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default React.memo(PushNotificationManager);\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\notifications\\SmartNotificationCenter.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1575,1578],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1575,1578],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'className' is assigned a value but never used.","line":123,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":12},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'className' is assigned a value but never used. Allowed unused args must match /^_/u.","line":123,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":12},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":131,"column":49,"nodeType":"CallExpression","messageId":"alwaysTruthy","endLine":131,"endColumn":68},{"ruleId":"@typescript-eslint/no-empty-function","severity":1,"message":"Unexpected empty method 'triggerHapticFeedback'.","line":133,"column":34,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":133,"endColumn":36,"suggestions":[{"messageId":"suggestComment","data":{"name":"method 'triggerHapticFeedback'"},"fix":{"range":[3413,3413],"text":" /* empty */ "},"desc":"Add comment inside empty method 'triggerHapticFeedback'."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":218,"column":26,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":218,"endColumn":62}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview SmartNotificationCenter Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport React, { useState, useMemo } from 'react';\r\nimport { motion, AnimatePresence } from 'motion/react';\r\nimport {\r\n  Bell,\r\n  CheckCheck,\r\n  Archive,\r\n  AlertCircle,\r\n  Info,\r\n  CheckCircle,\r\n  AlertTriangle,\r\n  Trash2,\r\n  Settings,\r\n  Clock,\r\n  User,\r\n  DollarSign,\r\n  Users,\r\n  FileText,\r\n  Heart,\r\n} from 'lucide-react';\r\nimport { Button } from '../ui/button';\r\nimport { Badge } from '../ui/badge';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Tabs, TabsList, TabsTrigger } from '../ui/tabs';\r\nimport { Popover, PopoverContent, PopoverTrigger } from '../ui/popover';\r\nimport { ScrollArea } from '../ui/scroll-area';\r\nimport { Separator } from '../ui/separator';\r\nimport { useAdvancedMobile } from '../../hooks/useAdvancedMobile';\r\n\r\n/**\r\n * SmartNotification Interface\r\n * \r\n * @interface SmartNotification\r\n */\r\nexport interface SmartNotification {\r\n  id: string;\r\n  title: string;\r\n  message: string;\r\n  type: 'info' | 'success' | 'warning' | 'error';\r\n  category:\r\n    | 'system'\r\n    | 'donation'\r\n    | 'member'\r\n    | 'aid'\r\n    | 'finance'\r\n    | 'deadline'\r\n    | 'approval'\r\n    | 'update';\r\n  priority: 'low' | 'medium' | 'high' | 'urgent';\r\n  timestamp: Date;\r\n  read: boolean;\r\n  archived: boolean;\r\n  actionable: boolean;\r\n  actions?: {\r\n    label: string;\r\n    action: () => void;\r\n    variant?: 'default' | 'destructive' | 'outline';\r\n  }[];\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\ninterface SmartNotificationCenterProps {\r\n  notifications: SmartNotification[];\r\n  onMarkAsRead: (id: string) => void;\r\n  onMarkAllAsRead: () => void;\r\n  onArchive: (id: string) => void;\r\n  onDelete: (id: string) => void;\r\n  onAction: (notificationId: string, actionIndex: number) => void;\r\n  className?: string;\r\n}\r\n\r\nconst typeIcons = {\r\n  info: Info,\r\n  success: CheckCircle,\r\n  warning: AlertTriangle,\r\n  error: AlertCircle,\r\n};\r\n\r\nconst typeColors = {\r\n  info: 'bg-blue-100 text-blue-700 border-blue-200',\r\n  success: 'bg-green-100 text-green-700 border-green-200',\r\n  warning: 'bg-orange-100 text-orange-700 border-orange-200',\r\n  error: 'bg-red-100 text-red-700 border-red-200',\r\n};\r\n\r\nconst categoryIcons = {\r\n  system: Settings,\r\n  donation: Heart,\r\n  member: Users,\r\n  aid: User,\r\n  finance: DollarSign,\r\n  deadline: Clock,\r\n  approval: FileText,\r\n  update: Info, // Add fallback for 'update' category\r\n};\r\n\r\nconst priorityColors = {\r\n  low: 'border-l-gray-300',\r\n  medium: 'border-l-blue-500',\r\n  high: 'border-l-orange-500',\r\n  urgent: 'border-l-red-500',\r\n};\r\n\r\n/**\r\n * SmartNotificationCenter function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function SmartNotificationCenter({\r\n  notifications,\r\n  onMarkAsRead,\r\n  onMarkAllAsRead,\r\n  onArchive,\r\n  onDelete,\r\n  onAction,\r\n  className = '',\r\n}: SmartNotificationCenterProps) {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n  const [activeTab, setActiveTab] = useState('all');\r\n  const [filterType, setFilterType] = useState<string>('all');\r\n  const [filterCategory, setFilterCategory] = useState<string>('all');\r\n\r\n  // Safe mobile detection with fallbacks\r\n  const { deviceInfo, triggerHapticFeedback } = useAdvancedMobile() || {\r\n    deviceInfo: { isMobile: false },\r\n    triggerHapticFeedback: () => {},\r\n  };\r\n\r\n  // Filter and categorize notifications\r\n  const { filteredNotifications, stats } = useMemo(() => {\r\n    let filtered = notifications.filter((n) => !n.archived);\r\n\r\n    // Apply tab filter\r\n    switch (activeTab) {\r\n      case 'unread':\r\n        filtered = filtered.filter((n) => !n.read);\r\n        break;\r\n      case 'urgent':\r\n        filtered = filtered.filter((n) => n.priority === 'urgent');\r\n        break;\r\n      case 'actionable':\r\n        filtered = filtered.filter((n) => n.actionable);\r\n        break;\r\n    }\r\n\r\n    // Apply type filter\r\n    if (filterType !== 'all') {\r\n      filtered = filtered.filter((n) => n.type === filterType);\r\n    }\r\n\r\n    // Apply category filter\r\n    if (filterCategory !== 'all') {\r\n      filtered = filtered.filter((n) => n.category === filterCategory);\r\n    }\r\n\r\n    // Sort by priority and timestamp\r\n    filtered.sort((a, b) => {\r\n      const priorityOrder = { urgent: 4, high: 3, medium: 2, low: 1 };\r\n      const priorityDiff = priorityOrder[b.priority] - priorityOrder[a.priority];\r\n      if (priorityDiff !== 0) return priorityDiff;\r\n      return b.timestamp.getTime() - a.timestamp.getTime();\r\n    });\r\n\r\n    // Calculate stats\r\n    const unreadCount = notifications.filter((n) => !n.read && !n.archived).length;\r\n    const urgentCount = notifications.filter((n) => n.priority === 'urgent' && !n.archived).length;\r\n    const actionableCount = notifications.filter(\r\n      (n) => n.actionable && !n.read && !n.archived,\r\n    ).length;\r\n\r\n    return {\r\n      filteredNotifications: filtered,\r\n      stats: { unreadCount, urgentCount, actionableCount },\r\n    };\r\n  }, [notifications, activeTab, filterType, filterCategory]);\r\n\r\n  const formatRelativeTime = (date: Date) => {\r\n    const now = new Date();\r\n    const diffInMinutes = Math.floor((now.getTime() - date.getTime()) / (1000 * 60));\r\n\r\n    if (diffInMinutes < 1) return '┼Şimdi';\r\n    if (diffInMinutes < 60) return `${diffInMinutes}dk ├Ânce`;\r\n\r\n    const diffInHours = Math.floor(diffInMinutes / 60);\r\n    if (diffInHours < 24) return `${diffInHours}sa ├Ânce`;\r\n\r\n    const diffInDays = Math.floor(diffInHours / 24);\r\n    if (diffInDays < 7) return `${diffInDays}g ├Ânce`;\r\n\r\n    return date.toLocaleDateString('tr-TR');\r\n  };\r\n\r\n  const handleNotificationClick = (notification: SmartNotification) => {\r\n    if (!notification.read) {\r\n      onMarkAsRead(notification.id);\r\n      if (deviceInfo.isMobile) {\r\n        triggerHapticFeedback('light');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleAction = (notificationId: string, actionIndex: number) => {\r\n    onAction(notificationId, actionIndex);\r\n    if (deviceInfo.isMobile) {\r\n      triggerHapticFeedback('medium');\r\n    }\r\n  };\r\n\r\n  const renderNotification = (notification: SmartNotification) => {\r\n    const TypeIcon = typeIcons[notification.type];\r\n    const CategoryIcon = categoryIcons[notification.category] || Info; // Add fallback\r\n\r\n    return (\r\n      <motion.div\r\n        key={`notification-${notification.id}-${notification.timestamp.getTime()}`}\r\n        layout\r\n        initial={{ opacity: 0, y: 20 }}\r\n        animate={{ opacity: 1, y: 0 }}\r\n        exit={{ opacity: 0, y: -20 }}\r\n        transition={{ duration: 0.2 }}\r\n        className={`\r\n          relative p-4 border-l-4 bg-white hover:bg-gray-50 transition-colors cursor-pointer\r\n          ${priorityColors[notification.priority]}\r\n          ${!notification.read ? 'bg-blue-50/30' : ''}\r\n        `}\r\n        onClick={() => {\r\n          handleNotificationClick(notification);\r\n        }}\r\n      >\r\n        <div className=\"flex items-start gap-3\">\r\n          {/* Type Icon */}\r\n          <div\r\n            className={`\r\n            p-2 rounded-lg flex-shrink-0\r\n            ${typeColors[notification.type]}\r\n          `}\r\n          >\r\n            <TypeIcon className=\"w-4 h-4\" />\r\n          </div>\r\n\r\n          {/* Content */}\r\n          <div className=\"flex-1 min-w-0\">\r\n            <div className=\"flex items-start justify-between gap-2 mb-1\">\r\n              <h4\r\n                className={`text-sm font-semibold truncate ${\r\n                  !notification.read ? 'text-gray-900' : 'text-gray-700'\r\n                }`}\r\n              >\r\n                {notification.title}\r\n              </h4>\r\n\r\n              <div className=\"flex items-center gap-1 flex-shrink-0\">\r\n                <CategoryIcon className=\"w-3 h-3 text-gray-400\" />\r\n                {!notification.read && <div className=\"w-2 h-2 bg-blue-500 rounded-full\" />}\r\n              </div>\r\n            </div>\r\n\r\n            <p className=\"text-sm text-gray-600 mb-3 line-clamp-2\">{notification.message}</p>\r\n\r\n            <div className=\"flex items-center justify-between\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <span className=\"text-xs text-gray-500\">\r\n                  {formatRelativeTime(notification.timestamp)}\r\n                </span>\r\n\r\n                {notification.priority === 'urgent' && (\r\n                  <Badge variant=\"destructive\" className=\"text-xs px-1.5 py-0.5\">\r\n                    Acil\r\n                  </Badge>\r\n                )}\r\n\r\n                {notification.priority === 'high' && (\r\n                  <Badge\r\n                    variant=\"secondary\"\r\n                    className=\"text-xs px-1.5 py-0.5 bg-orange-100 text-orange-700\"\r\n                  >\r\n                    Y├╝ksek\r\n                  </Badge>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"flex items-center gap-1\">\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    onArchive(notification.id);\r\n                  }}\r\n                  className=\"h-6 w-6 p-0 text-gray-400 hover:text-gray-600\"\r\n                >\r\n                  <Archive className=\"w-3 h-3\" />\r\n                </Button>\r\n\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    onDelete(notification.id);\r\n                  }}\r\n                  className=\"h-6 w-6 p-0 text-gray-400 hover:text-red-600\"\r\n                >\r\n                  <Trash2 className=\"w-3 h-3\" />\r\n                </Button>\r\n              </div>\r\n            </div>\r\n\r\n            {/* Actions */}\r\n            {notification.actionable && notification.actions && notification.actions.length > 0 && (\r\n              <div className=\"flex gap-2 mt-3 pt-3 border-t border-gray-100\">\r\n                {notification.actions.map((action, index) => (\r\n                  <Button\r\n                    key={`action-${notification.id}-${index}-${action.label}`}\r\n                    variant={action.variant ?? 'outline'}\r\n                    size=\"sm\"\r\n                    onClick={(e) => {\r\n                      e.stopPropagation();\r\n                      handleAction(notification.id, index);\r\n                    }}\r\n                    className=\"text-xs h-7 px-3\"\r\n                  >\r\n                    {action.label}\r\n                  </Button>\r\n                ))}\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </motion.div>\r\n    );\r\n  };\r\n\r\n  return (\r\n    <Popover open={isOpen} onOpenChange={setIsOpen}>\r\n      <PopoverTrigger asChild>\r\n        <Button variant=\"ghost\" size=\"sm\" className=\"relative h-9 w-9 p-0\">\r\n          <Bell className=\"w-4 h-4\" />\r\n          {stats.unreadCount > 0 && (\r\n            <motion.div\r\n              initial={{ scale: 0 }}\r\n              animate={{ scale: 1 }}\r\n              className=\"absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center\"\r\n            >\r\n              {stats.unreadCount > 99 ? '99+' : stats.unreadCount}\r\n            </motion.div>\r\n          )}\r\n        </Button>\r\n      </PopoverTrigger>\r\n\r\n      <PopoverContent\r\n        className=\"w-80 sm:w-96 p-0\"\r\n        align=\"end\"\r\n        side={deviceInfo.isMobile ? 'bottom' : 'bottom'}\r\n      >\r\n        <Card className=\"border-0 shadow-none\">\r\n          <CardHeader className=\"pb-3\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <CardTitle className=\"text-lg\">Bildirimler</CardTitle>\r\n              <div className=\"flex items-center gap-2\">\r\n                {stats.unreadCount > 0 && (\r\n                  <Button variant=\"ghost\" size=\"sm\" onClick={onMarkAllAsRead} className=\"text-xs\">\r\n                    <CheckCheck className=\"w-3 h-3 mr-1\" />\r\n                    T├╝m├╝n├╝ Okundu ─░┼şaretle\r\n                  </Button>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Tabs */}\r\n            <Tabs value={activeTab} onValueChange={setActiveTab} className=\"w-full\">\r\n              <TabsList className=\"grid w-full grid-cols-4 h-8\">\r\n                <TabsTrigger value=\"all\" className=\"text-xs\">\r\n                  T├╝m├╝\r\n                </TabsTrigger>\r\n                <TabsTrigger value=\"unread\" className=\"text-xs relative\">\r\n                  Okunmam─▒┼ş\r\n                  {stats.unreadCount > 0 && (\r\n                    <Badge variant=\"destructive\" className=\"ml-1 px-1 py-0 text-xs h-4 min-w-4\">\r\n                      {stats.unreadCount}\r\n                    </Badge>\r\n                  )}\r\n                </TabsTrigger>\r\n                <TabsTrigger value=\"urgent\" className=\"text-xs relative\">\r\n                  Acil\r\n                  {stats.urgentCount > 0 && (\r\n                    <Badge variant=\"destructive\" className=\"ml-1 px-1 py-0 text-xs h-4 min-w-4\">\r\n                      {stats.urgentCount}\r\n                    </Badge>\r\n                  )}\r\n                </TabsTrigger>\r\n                <TabsTrigger value=\"actionable\" className=\"text-xs relative\">\r\n                  Eylem\r\n                  {stats.actionableCount > 0 && (\r\n                    <Badge variant=\"secondary\" className=\"ml-1 px-1 py-0 text-xs h-4 min-w-4\">\r\n                      {stats.actionableCount}\r\n                    </Badge>\r\n                  )}\r\n                </TabsTrigger>\r\n              </TabsList>\r\n            </Tabs>\r\n\r\n            {/* Quick Filters */}\r\n            <div className=\"flex gap-2 pt-2\">\r\n              <select\r\n                value={filterType}\r\n                onChange={(e) => {\r\n                  setFilterType(e.target.value);\r\n                }}\r\n                className=\"text-xs border rounded px-2 py-1 bg-white\"\r\n              >\r\n                <option value=\"all\">T├╝m Tipler</option>\r\n                <option value=\"info\">Bilgi</option>\r\n                <option value=\"success\">Ba┼şar─▒l─▒</option>\r\n                <option value=\"warning\">Uyar─▒</option>\r\n                <option value=\"error\">Hata</option>\r\n              </select>\r\n\r\n              <select\r\n                value={filterCategory}\r\n                onChange={(e) => {\r\n                  setFilterCategory(e.target.value);\r\n                }}\r\n                className=\"text-xs border rounded px-2 py-1 bg-white\"\r\n              >\r\n                <option value=\"all\">T├╝m Kategoriler</option>\r\n                <option value=\"system\">Sistem</option>\r\n                <option value=\"donation\">Ba─ş─▒┼ş</option>\r\n                <option value=\"member\">├£ye</option>\r\n                <option value=\"aid\">Yard─▒m</option>\r\n                <option value=\"finance\">Finans</option>\r\n                <option value=\"deadline\">Tarih</option>\r\n                <option value=\"approval\">Onay</option>\r\n                <option value=\"update\">G├╝ncelleme</option>\r\n              </select>\r\n            </div>\r\n          </CardHeader>\r\n\r\n          <CardContent className=\"p-0\">\r\n            <ScrollArea className=\"h-96\">\r\n              <AnimatePresence mode=\"wait\">\r\n                {filteredNotifications.length > 0 ? (\r\n                  <div className=\"space-y-0\">\r\n                    {filteredNotifications.map((notification, index) => (\r\n                      <React.Fragment\r\n                        key={`${notification.id}-${index}-${notification.timestamp.getTime()}`}\r\n                      >\r\n                        {renderNotification(notification)}\r\n                        {index < filteredNotifications.length - 1 && (\r\n                          <Separator key={`separator-${notification.id}-${index}`} />\r\n                        )}\r\n                      </React.Fragment>\r\n                    ))}\r\n                  </div>\r\n                ) : (\r\n                  <motion.div\r\n                    initial={{ opacity: 0, y: 20 }}\r\n                    animate={{ opacity: 1, y: 0 }}\r\n                    className=\"flex flex-col items-center justify-center py-12 text-gray-500\"\r\n                  >\r\n                    <Bell className=\"w-12 h-12 mb-4 text-gray-300\" />\r\n                    <p className=\"text-sm\">Bildirim bulunamad─▒</p>\r\n                    <p className=\"text-xs text-gray-400 mt-1\">\r\n                      {activeTab === 'all' ? 'Hen├╝z bildirim yok' : `Bu kategoride bildirim yok`}\r\n                    </p>\r\n                  </motion.div>\r\n                )}\r\n              </AnimatePresence>\r\n            </ScrollArea>\r\n          </CardContent>\r\n        </Card>\r\n      </PopoverContent>\r\n    </Popover>\r\n  );\r\n}\r\n\r\nexport { SmartNotificationCenter as default };\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\notifications\\SmartNotificationSystem.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'notificationRef' is assigned a value but never used.","line":191,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":191,"endColumn":24},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'notificationRef' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":191,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":191,"endColumn":24},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":334,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":334,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9856,9859],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9856,9859],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":450,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":450,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14108,14111],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14108,14111],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":608,"column":24,"nodeType":"Identifier","messageId":"neverNullish","endLine":608,"endColumn":35}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview SmartNotificationSystem Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport React, { useState, useEffect, useCallback, useRef } from 'react';\r\nimport { motion, AnimatePresence } from 'motion/react';\r\nimport {\r\n  Bell,\r\n  BellRing,\r\n  X,\r\n  Check,\r\n  AlertTriangle,\r\n  Info,\r\n  CheckCircle,\r\n  XCircle,\r\n  Settings,\r\n  Search,\r\n  Clock,\r\n  User,\r\n  Heart,\r\n  Calendar,\r\n  MapPin,\r\n  DollarSign,\r\n} from 'lucide-react';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Badge } from '../ui/badge';\r\nimport { Button } from '../ui/button';\r\nimport { Input } from '../ui/input';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\nimport { Switch } from '../ui/switch';\r\nimport { useAdvancedMobile } from '../../hooks/useAdvancedMobile';\r\n\r\n// Bildirim t├╝rleri\r\nexport type NotificationType =\r\n  | 'info'\r\n  | 'success'\r\n  | 'warning'\r\n  | 'error'\r\n  | 'donation'\r\n  | 'beneficiary'\r\n  | 'event'\r\n  | 'system';\r\n\r\n/**\r\n * Notification Interface\r\n * \r\n * @interface Notification\r\n */\r\nexport interface Notification {\r\n  id: string;\r\n  type: NotificationType;\r\n  title: string;\r\n  message: string;\r\n  timestamp: Date;\r\n  read: boolean;\r\n  priority: 'low' | 'medium' | 'high' | 'urgent';\r\n  category: string;\r\n  actionUrl?: string;\r\n  actionText?: string;\r\n  metadata?: {\r\n    userId?: string;\r\n    amount?: number;\r\n    location?: string;\r\n    eventId?: string;\r\n    beneficiaryId?: string;\r\n  };\r\n  expiresAt?: Date;\r\n}\r\n\r\n// Mock bildirim verileri\r\nconst mockNotifications: Notification[] = [\r\n  {\r\n    id: '1',\r\n    type: 'donation',\r\n    title: 'Yeni Ba─ş─▒┼ş Geldi!',\r\n    message: 'ABC ┼Şirketi taraf─▒ndan 5.000Ôé║ ba─ş─▒┼ş yap─▒ld─▒',\r\n    timestamp: new Date(Date.now() - 5 * 60 * 1000), // 5 dakika ├Ânce\r\n    read: false,\r\n    priority: 'high',\r\n    category: 'Ba─ş─▒┼ş',\r\n    actionUrl: '/bagis/detay/1',\r\n    actionText: 'Detaylar─▒ G├Âr',\r\n    metadata: {\r\n      amount: 5000,\r\n      userId: 'user123',\r\n    },\r\n  },\r\n  {\r\n    id: '2',\r\n    type: 'beneficiary',\r\n    title: 'Yeni Ba┼şvuru',\r\n    message: 'Ahmet Y─▒lmaz g─▒da yard─▒m─▒ i├ğin ba┼şvuru yapt─▒',\r\n    timestamp: new Date(Date.now() - 15 * 60 * 1000), // 15 dakika ├Ânce\r\n    read: false,\r\n    priority: 'medium',\r\n    category: 'Ba┼şvuru',\r\n    actionUrl: '/yardim/basvuru/2',\r\n    actionText: '─░ncele',\r\n    metadata: {\r\n      beneficiaryId: 'beneficiary456',\r\n      location: '─░stanbul',\r\n    },\r\n  },\r\n  {\r\n    id: '3',\r\n    type: 'event',\r\n    title: 'Etkinlik Hat─▒rlatmas─▒',\r\n    message: \"G─▒da da─ş─▒t─▒m─▒ yar─▒n saat 10:00'da ba┼şlayacak\",\r\n    timestamp: new Date(Date.now() - 30 * 60 * 1000), // 30 dakika ├Ânce\r\n    read: true,\r\n    priority: 'medium',\r\n    category: 'Etkinlik',\r\n    actionUrl: '/etkinlik/detay/3',\r\n    actionText: 'Detaylar',\r\n    metadata: {\r\n      eventId: 'event789',\r\n      location: 'Merkez Ofis',\r\n    },\r\n  },\r\n  {\r\n    id: '4',\r\n    type: 'system',\r\n    title: 'Sistem G├╝ncellemesi',\r\n    message: 'Yeni ├Âzellikler eklendi. Detaylar─▒ g├Ârmek i├ğin t─▒klay─▒n',\r\n    timestamp: new Date(Date.now() - 2 * 60 * 60 * 1000), // 2 saat ├Ânce\r\n    read: true,\r\n    priority: 'low',\r\n    category: 'Sistem',\r\n    actionUrl: '/sistem/guncellemeler',\r\n    actionText: 'G├╝ncellemeler',\r\n  },\r\n  {\r\n    id: '5',\r\n    type: 'warning',\r\n    title: 'B├╝t├ğe Uyar─▒s─▒',\r\n    message: \"G─▒da yard─▒m─▒ b├╝t├ğesinin %80'i kullan─▒ld─▒\",\r\n    timestamp: new Date(Date.now() - 4 * 60 * 60 * 1000), // 4 saat ├Ânce\r\n    read: false,\r\n    priority: 'urgent',\r\n    category: 'Mali',\r\n    actionUrl: '/mali/budget',\r\n    actionText: 'B├╝t├ğeyi G├Âr',\r\n    metadata: {\r\n      amount: 80000,\r\n    },\r\n  },\r\n];\r\n\r\ninterface SmartNotificationSystemProps {\r\n  className?: string;\r\n  onNotificationClick?: (notification: Notification) => void;\r\n  onMarkAsRead?: (notificationId: string) => void;\r\n  onMarkAllAsRead?: () => void;\r\n}\r\n\r\n/**\r\n * SmartNotificationSystem function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function SmartNotificationSystem({\r\n  className = '',\r\n  onNotificationClick,\r\n  onMarkAsRead,\r\n  onMarkAllAsRead,\r\n}: SmartNotificationSystemProps) {\r\n  const [notifications, setNotifications] = useState<Notification[]>(mockNotifications);\r\n  const [activeTab, setActiveTab] = useState('all');\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [filterType, setFilterType] = useState<NotificationType | 'all'>('all');\r\n  const [filterPriority, setFilterPriority] = useState<\r\n    'all' | 'low' | 'medium' | 'high' | 'urgent'\r\n  >('all');\r\n  const [showSettings, setShowSettings] = useState(false);\r\n  const [notificationSettings, setNotificationSettings] = useState({\r\n    enablePush: true,\r\n    enableEmail: true,\r\n    enableSound: true,\r\n    enableVibration: true,\r\n    quietHours: false,\r\n    quietStart: '22:00',\r\n    quietEnd: '08:00',\r\n  });\r\n\r\n  const { triggerHapticFeedback, deviceInfo } = useAdvancedMobile();\r\n  const notificationRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Bildirim say─▒s─▒\r\n  const unreadCount = notifications.filter((n) => !n.read).length;\r\n  const urgentCount = notifications.filter((n) => n.priority === 'urgent' && !n.read).length;\r\n\r\n  // Filtrelenmi┼ş bildirimler\r\n  const filteredNotifications = notifications.filter((notification) => {\r\n    const matchesTab =\r\n      activeTab === 'all' ||\r\n      (activeTab === 'unread' && !notification.read) ||\r\n      (activeTab === 'urgent' && notification.priority === 'urgent');\r\n\r\n    const matchesSearch =\r\n      searchQuery === '' ||\r\n      notification.title.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n      notification.message.toLowerCase().includes(searchQuery.toLowerCase());\r\n\r\n    const matchesType = filterType === 'all' || notification.type === filterType;\r\n    const matchesPriority = filterPriority === 'all' || notification.priority === filterPriority;\r\n\r\n    return matchesTab && matchesSearch && matchesType && matchesPriority;\r\n  });\r\n\r\n  // Bildirim t├╝r├╝ ikonlar─▒\r\n  const getNotificationIcon = (type: NotificationType) => {\r\n    switch (type) {\r\n      case 'donation':\r\n        return Heart;\r\n      case 'beneficiary':\r\n        return User;\r\n      case 'event':\r\n        return Calendar;\r\n      case 'system':\r\n        return Settings;\r\n      case 'success':\r\n        return CheckCircle;\r\n      case 'warning':\r\n        return AlertTriangle;\r\n      case 'error':\r\n        return XCircle;\r\n      case 'info':\r\n        return Info;\r\n      default:\r\n        return Bell;\r\n    }\r\n  };\r\n\r\n  // Bildirim t├╝r├╝ renkleri\r\n  const getNotificationColor = (type: NotificationType) => {\r\n    switch (type) {\r\n      case 'donation':\r\n        return 'text-green-600 bg-green-100';\r\n      case 'beneficiary':\r\n        return 'text-blue-600 bg-blue-100';\r\n      case 'event':\r\n        return 'text-purple-600 bg-purple-100';\r\n      case 'system':\r\n        return 'text-gray-600 bg-gray-100';\r\n      case 'success':\r\n        return 'text-green-600 bg-green-100';\r\n      case 'warning':\r\n        return 'text-yellow-600 bg-yellow-100';\r\n      case 'error':\r\n        return 'text-red-600 bg-red-100';\r\n      case 'info':\r\n        return 'text-blue-600 bg-blue-100';\r\n      default:\r\n        return 'text-gray-600 bg-gray-100';\r\n    }\r\n  };\r\n\r\n  // ├ûncelik renkleri\r\n  const getPriorityColor = (priority: Notification['priority']) => {\r\n    switch (priority) {\r\n      case 'urgent':\r\n        return 'text-red-600 bg-red-100 border-red-200';\r\n      case 'high':\r\n        return 'text-orange-600 bg-orange-100 border-orange-200';\r\n      case 'medium':\r\n        return 'text-yellow-600 bg-yellow-100 border-yellow-200';\r\n      case 'low':\r\n        return 'text-gray-600 bg-gray-100 border-gray-200';\r\n      default:\r\n        return 'text-gray-600 bg-gray-100 border-gray-200';\r\n    }\r\n  };\r\n\r\n  // Zaman format─▒\r\n  const getTimeAgo = (date: Date): string => {\r\n    const now = new Date();\r\n    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);\r\n\r\n    if (diffInSeconds < 60) return 'Az ├Ânce';\r\n    if (diffInSeconds < 3600) return `${Math.floor(diffInSeconds / 60)} dakika ├Ânce`;\r\n    if (diffInSeconds < 86400) return `${Math.floor(diffInSeconds / 3600)} saat ├Ânce`;\r\n    return `${Math.floor(diffInSeconds / 86400)} g├╝n ├Ânce`;\r\n  };\r\n\r\n  // Bildirimi okundu olarak i┼şaretle\r\n  const handleMarkAsRead = useCallback(\r\n    (notificationId: string) => {\r\n      setNotifications((prev) =>\r\n        prev.map((notification) =>\r\n          notification.id === notificationId ? { ...notification, read: true } : notification,\r\n        ),\r\n      );\r\n      onMarkAsRead?.(notificationId);\r\n      triggerHapticFeedback('light');\r\n    },\r\n    [onMarkAsRead, triggerHapticFeedback],\r\n  );\r\n\r\n  // T├╝m├╝n├╝ okundu olarak i┼şaretle\r\n  const handleMarkAllAsRead = useCallback(() => {\r\n    setNotifications((prev) => prev.map((notification) => ({ ...notification, read: true })));\r\n    onMarkAllAsRead?.();\r\n    triggerHapticFeedback('medium');\r\n  }, [onMarkAllAsRead, triggerHapticFeedback]);\r\n\r\n  // Bildirime t─▒kla\r\n  const handleNotificationClick = useCallback(\r\n    (notification: Notification) => {\r\n      if (!notification.read) {\r\n        handleMarkAsRead(notification.id);\r\n      }\r\n      onNotificationClick?.(notification);\r\n      triggerHapticFeedback('medium');\r\n    },\r\n    [handleMarkAsRead, onNotificationClick, triggerHapticFeedback],\r\n  );\r\n\r\n  // Bildirimi sil\r\n  const handleDeleteNotification = useCallback(\r\n    (notificationId: string) => {\r\n      setNotifications((prev) => prev.filter((n) => n.id !== notificationId));\r\n      triggerHapticFeedback('light');\r\n    },\r\n    [triggerHapticFeedback],\r\n  );\r\n\r\n  // Bildirim ayarlar─▒n─▒ g├╝ncelle\r\n  const handleSettingChange = useCallback(\r\n    (key: string, value: any) => {\r\n      setNotificationSettings((prev) => ({ ...prev, [key]: value }));\r\n      triggerHapticFeedback('light');\r\n    },\r\n    [triggerHapticFeedback],\r\n  );\r\n\r\n  // Yeni bildirim sim├╝lasyonu\r\n  useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      // Rastgele yeni bildirim ekle (demo i├ğin)\r\n      if (Math.random() > 0.95) {\r\n        // %5 ┼şans\r\n        const newNotification: Notification = {\r\n          id: Date.now().toString(),\r\n          type: 'info',\r\n          title: 'Yeni Bildirim',\r\n          message: 'Bu bir test bildirimidir',\r\n          timestamp: new Date(),\r\n          read: false,\r\n          priority: 'medium',\r\n          category: 'Test',\r\n        };\r\n        setNotifications((prev) => [newNotification, ...prev]);\r\n      }\r\n    }, 30000); // 30 saniyede bir kontrol\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <div className={`w-full max-w-4xl mx-auto ${className}`}>\r\n      <Card className=\"shadow-xl border-0 bg-white/95 backdrop-blur-sm\">\r\n        <CardHeader className=\"pb-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <div className=\"flex items-center gap-3\">\r\n              <div className=\"relative\">\r\n                <BellRing className=\"w-6 h-6 text-blue-600\" />\r\n                {unreadCount > 0 && (\r\n                  <Badge\r\n                    variant=\"destructive\"\r\n                    className=\"absolute -top-2 -right-2 w-5 h-5 flex items-center justify-center p-0 text-xs\"\r\n                  >\r\n                    {unreadCount}\r\n                  </Badge>\r\n                )}\r\n              </div>\r\n              <div>\r\n                <CardTitle className=\"text-xl font-semibold text-gray-900\">Bildirimler</CardTitle>\r\n                <p className=\"text-sm text-gray-600\">\r\n                  {unreadCount} okunmam─▒┼ş, {urgentCount} acil bildirim\r\n                </p>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"flex items-center gap-2\">\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={() => {\r\n                  setShowSettings(!showSettings);\r\n                }}\r\n                className=\"gap-2\"\r\n              >\r\n                <Settings className=\"w-4 h-4\" />\r\n                Ayarlar\r\n              </Button>\r\n\r\n              {unreadCount > 0 && (\r\n                <Button variant=\"outline\" size=\"sm\" onClick={handleMarkAllAsRead} className=\"gap-2\">\r\n                  <Check className=\"w-4 h-4\" />\r\n                  T├╝m├╝n├╝ Okundu ─░┼şaretle\r\n                </Button>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          {/* Arama ve Filtreler */}\r\n          <div className=\"flex flex-col sm:flex-row gap-3 mt-4\">\r\n            <div className=\"relative flex-1\">\r\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\r\n              <Input\r\n                placeholder=\"Bildirimlerde ara...\"\r\n                value={searchQuery}\r\n                onChange={(e) => {\r\n                  setSearchQuery(e.target.value);\r\n                }}\r\n                className=\"pl-10\"\r\n              />\r\n            </div>\r\n\r\n            <Select\r\n              value={filterType}\r\n              onValueChange={(value) => {\r\n                setFilterType(value as NotificationType | 'all');\r\n              }}\r\n            >\r\n              <SelectTrigger className=\"w-[150px]\">\r\n                <SelectValue placeholder=\"T├╝r\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"all\">T├╝m T├╝rler</SelectItem>\r\n                <SelectItem value=\"donation\">Ba─ş─▒┼ş</SelectItem>\r\n                <SelectItem value=\"beneficiary\">─░htiya├ğ Sahibi</SelectItem>\r\n                <SelectItem value=\"event\">Etkinlik</SelectItem>\r\n                <SelectItem value=\"system\">Sistem</SelectItem>\r\n                <SelectItem value=\"warning\">Uyar─▒</SelectItem>\r\n                <SelectItem value=\"error\">Hata</SelectItem>\r\n              </SelectContent>\r\n            </Select>\r\n\r\n            <Select\r\n              value={filterPriority}\r\n              onValueChange={(value) => {\r\n                setFilterPriority(value as any);\r\n              }}\r\n            >\r\n              <SelectTrigger className=\"w-[150px]\">\r\n                <SelectValue placeholder=\"├ûncelik\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"all\">T├╝m ├ûncelikler</SelectItem>\r\n                <SelectItem value=\"urgent\">Acil</SelectItem>\r\n                <SelectItem value=\"high\">Y├╝ksek</SelectItem>\r\n                <SelectItem value=\"medium\">Orta</SelectItem>\r\n                <SelectItem value=\"low\">D├╝┼ş├╝k</SelectItem>\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n        </CardHeader>\r\n\r\n        <CardContent className=\"p-0\">\r\n          <Tabs value={activeTab} onValueChange={setActiveTab}>\r\n            <TabsList className=\"grid w-full grid-cols-3 mx-6 mb-4\">\r\n              <TabsTrigger value=\"all\" className=\"flex items-center gap-2\">\r\n                <Bell className=\"w-4 h-4\" />\r\n                T├╝m├╝ ({notifications.length})\r\n              </TabsTrigger>\r\n              <TabsTrigger value=\"unread\" className=\"flex items-center gap-2\">\r\n                <BellRing className=\"w-4 h-4\" />\r\n                Okunmam─▒┼ş ({unreadCount})\r\n              </TabsTrigger>\r\n              <TabsTrigger value=\"urgent\" className=\"flex items-center gap-2\">\r\n                <AlertTriangle className=\"w-4 h-4\" />\r\n                Acil ({urgentCount})\r\n              </TabsTrigger>\r\n            </TabsList>\r\n\r\n            <TabsContent value={activeTab} className=\"px-6 pb-6\">\r\n              <div className=\"space-y-3 max-h-[600px] overflow-y-auto\">\r\n                <AnimatePresence>\r\n                  {filteredNotifications.map((notification, index) => {\r\n                    const IconComponent = getNotificationIcon(notification.type);\r\n                    const colorClass = getNotificationColor(notification.type);\r\n                    const priorityClass = getPriorityColor(notification.priority);\r\n\r\n                    return (\r\n                      <motion.div\r\n                        key={notification.id}\r\n                        initial={{ opacity: 0, y: 20 }}\r\n                        animate={{ opacity: 1, y: 0 }}\r\n                        exit={{ opacity: 0, y: -20 }}\r\n                        transition={{ delay: index * 0.05 }}\r\n                        className={`p-4 rounded-lg border-2 transition-all duration-200 cursor-pointer hover:shadow-md ${\r\n                          notification.read\r\n                            ? 'bg-gray-50 border-gray-200'\r\n                            : 'bg-white border-blue-200 shadow-sm'\r\n                        }`}\r\n                        onClick={() => {\r\n                          handleNotificationClick(notification);\r\n                        }}\r\n                      >\r\n                        <div className=\"flex items-start gap-3\">\r\n                          <div className={`p-2 rounded-lg ${colorClass} flex-shrink-0`}>\r\n                            <IconComponent className=\"w-5 h-5\" />\r\n                          </div>\r\n\r\n                          <div className=\"flex-1 min-w-0\">\r\n                            <div className=\"flex items-start justify-between mb-2\">\r\n                              <div className=\"flex-1\">\r\n                                <h4\r\n                                  className={`font-semibold ${notification.read ? 'text-gray-700' : 'text-gray-900'}`}\r\n                                >\r\n                                  {notification.title}\r\n                                </h4>\r\n                                <p\r\n                                  className={`text-sm mt-1 ${notification.read ? 'text-gray-500' : 'text-gray-700'}`}\r\n                                >\r\n                                  {notification.message}\r\n                                </p>\r\n                              </div>\r\n\r\n                              <div className=\"flex items-center gap-2 ml-3\">\r\n                                <Badge variant=\"outline\" className={`text-xs ${priorityClass}`}>\r\n                                  {notification.priority === 'urgent'\r\n                                    ? 'Acil'\r\n                                    : notification.priority === 'high'\r\n                                      ? 'Y├╝ksek'\r\n                                      : notification.priority === 'medium'\r\n                                        ? 'Orta'\r\n                                        : 'D├╝┼ş├╝k'}\r\n                                </Badge>\r\n\r\n                                {!notification.read && (\r\n                                  <div className=\"w-2 h-2 bg-blue-600 rounded-full flex-shrink-0\" />\r\n                                )}\r\n                              </div>\r\n                            </div>\r\n\r\n                            <div className=\"flex items-center justify-between\">\r\n                              <div className=\"flex items-center gap-4 text-xs text-gray-500\">\r\n                                <div className=\"flex items-center gap-1\">\r\n                                  <Clock className=\"w-3 h-3\" />\r\n                                  {getTimeAgo(notification.timestamp)}\r\n                                </div>\r\n                                <Badge variant=\"secondary\" className=\"text-xs\">\r\n                                  {notification.category}\r\n                                </Badge>\r\n                                {notification.metadata?.amount && (\r\n                                  <div className=\"flex items-center gap-1\">\r\n                                    <DollarSign className=\"w-3 h-3\" />Ôé║\r\n                                    {notification.metadata.amount.toLocaleString('tr-TR')}\r\n                                  </div>\r\n                                )}\r\n                                {notification.metadata?.location && (\r\n                                  <div className=\"flex items-center gap-1\">\r\n                                    <MapPin className=\"w-3 h-3\" />\r\n                                    {notification.metadata.location}\r\n                                  </div>\r\n                                )}\r\n                              </div>\r\n\r\n                              <div className=\"flex items-center gap-2\">\r\n                                {notification.actionText && (\r\n                                  <Button\r\n                                    variant=\"outline\"\r\n                                    size=\"sm\"\r\n                                    className=\"text-xs h-7\"\r\n                                    onClick={(e) => {\r\n                                      e.stopPropagation();\r\n                                      handleNotificationClick(notification);\r\n                                    }}\r\n                                  >\r\n                                    {notification.actionText}\r\n                                  </Button>\r\n                                )}\r\n\r\n                                <Button\r\n                                  variant=\"ghost\"\r\n                                  size=\"sm\"\r\n                                  className=\"text-xs h-7 w-7 p-0\"\r\n                                  onClick={(e) => {\r\n                                    e.stopPropagation();\r\n                                    handleDeleteNotification(notification.id);\r\n                                  }}\r\n                                >\r\n                                  <X className=\"w-3 h-3\" />\r\n                                </Button>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n                      </motion.div>\r\n                    );\r\n                  })}\r\n                </AnimatePresence>\r\n\r\n                {filteredNotifications.length === 0 && (\r\n                  <div className=\"text-center py-12\">\r\n                    <Bell className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\r\n                    <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Bildirim Bulunamad─▒</h3>\r\n                    <p className=\"text-gray-500\">\r\n                      {searchQuery ?? filterType !== 'all' || filterPriority !== 'all'\r\n                        ? 'Arama kriterlerinize uygun bildirim bulunamad─▒'\r\n                        : 'Hen├╝z bildirim bulunmuyor'}\r\n                    </p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </TabsContent>\r\n          </Tabs>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Bildirim Ayarlar─▒ */}\r\n      <AnimatePresence>\r\n        {showSettings && (\r\n          <motion.div\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: -20 }}\r\n            className=\"mt-6\"\r\n          >\r\n            <Card className=\"shadow-lg border-0 bg-white/95 backdrop-blur-sm\">\r\n              <CardHeader>\r\n                <CardTitle className=\"flex items-center gap-2\">\r\n                  <Settings className=\"w-5 h-5 text-blue-600\" />\r\n                  Bildirim Ayarlar─▒\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-6\">\r\n                <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\r\n                  <div className=\"space-y-4\">\r\n                    <h4 className=\"font-semibold text-gray-900\">Bildirim T├╝rleri</h4>\r\n\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div>\r\n                        <p className=\"font-medium text-gray-700\">Push Bildirimleri</p>\r\n                        <p className=\"text-sm text-gray-500\">Taray─▒c─▒ bildirimleri</p>\r\n                      </div>\r\n                      <Switch\r\n                        checked={notificationSettings.enablePush}\r\n                        onCheckedChange={(checked) => {\r\n                          handleSettingChange('enablePush', checked);\r\n                        }}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div>\r\n                        <p className=\"font-medium text-gray-700\">E-posta Bildirimleri</p>\r\n                        <p className=\"text-sm text-gray-500\">E-posta ile bildirim</p>\r\n                      </div>\r\n                      <Switch\r\n                        checked={notificationSettings.enableEmail}\r\n                        onCheckedChange={(checked) => {\r\n                          handleSettingChange('enableEmail', checked);\r\n                        }}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div>\r\n                        <p className=\"font-medium text-gray-700\">Ses Bildirimleri</p>\r\n                        <p className=\"text-sm text-gray-500\">Bildirim sesi</p>\r\n                      </div>\r\n                      <Switch\r\n                        checked={notificationSettings.enableSound}\r\n                        onCheckedChange={(checked) => {\r\n                          handleSettingChange('enableSound', checked);\r\n                        }}\r\n                      />\r\n                    </div>\r\n\r\n                    {deviceInfo.isMobile && (\r\n                      <div className=\"flex items-center justify-between\">\r\n                        <div>\r\n                          <p className=\"font-medium text-gray-700\">Titre┼şim</p>\r\n                          <p className=\"text-sm text-gray-500\">Mobil titre┼şim</p>\r\n                        </div>\r\n                        <Switch\r\n                          checked={notificationSettings.enableVibration}\r\n                          onCheckedChange={(checked) => {\r\n                            handleSettingChange('enableVibration', checked);\r\n                          }}\r\n                        />\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n\r\n                  <div className=\"space-y-4\">\r\n                    <h4 className=\"font-semibold text-gray-900\">Sessiz Saatler</h4>\r\n\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div>\r\n                        <p className=\"font-medium text-gray-700\">Sessiz Saatleri Etkinle┼ştir</p>\r\n                        <p className=\"text-sm text-gray-500\">Belirli saatlerde bildirim g├Ânderme</p>\r\n                      </div>\r\n                      <Switch\r\n                        checked={notificationSettings.quietHours}\r\n                        onCheckedChange={(checked) => {\r\n                          handleSettingChange('quietHours', checked);\r\n                        }}\r\n                      />\r\n                    </div>\r\n\r\n                    {notificationSettings.quietHours && (\r\n                      <div className=\"space-y-3\">\r\n                        <div>\r\n                          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                            Ba┼şlang─▒├ğ Saati\r\n                          </label>\r\n                          <Input\r\n                            type=\"time\"\r\n                            value={notificationSettings.quietStart}\r\n                            onChange={(e) => {\r\n                              handleSettingChange('quietStart', e.target.value);\r\n                            }}\r\n                            className=\"w-full\"\r\n                          />\r\n                        </div>\r\n\r\n                        <div>\r\n                          <label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                            Biti┼ş Saati\r\n                          </label>\r\n                          <Input\r\n                            type=\"time\"\r\n                            value={notificationSettings.quietEnd}\r\n                            onChange={(e) => {\r\n                              handleSettingChange('quietEnd', e.target.value);\r\n                            }}\r\n                            className=\"w-full\"\r\n                          />\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default SmartNotificationSystem;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\notifications\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\notifications\\integration-guide.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ToastProvider' is defined but never used.","line":19,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":23,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"unused-imports/no-unused-imports","severity":2,"message":"'ToastProvider' is defined but never used.","line":19,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":19,"endColumn":23,"fix":{"range":[577,640],"text":"\n"},"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'__AddMemberExampleComponent' is assigned a value but never used.","line":74,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":34,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":79,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":79,"endColumn":16,"suggestions":[{"fix":{"range":[2392,2428],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_handleSubmit' is assigned a value but never used.","line":82,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":82,"endColumn":22,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":108,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":108,"endColumn":22,"suggestions":[{"fix":{"range":[3288,3335],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_HeaderExampleMock' is assigned a value but never used.","line":140,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":140,"endColumn":25,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":146,"column":5,"nodeType":"MemberExpression","messageId":"unexpected","endLine":146,"endColumn":16,"suggestions":[{"fix":{"range":[4602,4661],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_MemberService' is defined but never used.","line":183,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":183,"endColumn":21,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":221,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":221,"endColumn":18,"suggestions":[{"fix":{"range":[6921,6970],"text":""},"messageId":"removeConsole","data":{"propertyName":"log"},"desc":"Remove the console.log()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_DonationForm' is defined but never used.","line":229,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":229,"endColumn":23,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_handleDonationSubmit' is assigned a value but never used.","line":230,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":230,"endColumn":30,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_setupSystemNotifications' is defined but never used.","line":268,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":268,"endColumn":35,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_setupPeriodicNotifications' is defined but never used.","line":308,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":308,"endColumn":37,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":323,"column":9,"nodeType":"MemberExpression","messageId":"unexpected","endLine":323,"endColumn":22,"suggestions":[{"fix":{"range":[10009,10054],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_setupRealTimeNotifications' is defined but never used.","line":330,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":330,"endColumn":37,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_NotificationConfig' is defined but never used.","line":387,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":387,"endColumn":30,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_NotificationSettingsExampleUI' is assigned a value but never used.","line":401,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":401,"endColumn":37,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":431,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":431,"endColumn":41,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":436,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":436,"endColumn":27,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_errorInfo' is defined but never used.","line":436,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":436,"endColumn":46,"suppressions":[{"kind":"directive","justification":""},{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\AidApplicationsPage.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":134,"column":20,"nodeType":"MemberExpression","endLine":134,"endColumn":40},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":146,"column":20,"nodeType":"MemberExpression","endLine":146,"endColumn":44}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview AidApplicationsPage Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport {\r\n  AlertCircle,\r\n  Calendar,\r\n  CheckCircle,\r\n  Clock,\r\n  Edit,\r\n  Eye,\r\n  FileCheck,\r\n  FileText,\r\n  Plus,\r\n  Search,\r\n  XCircle,\r\n} from 'lucide-react';\r\nimport { useState } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { PageLayout } from '../PageLayout';\r\nimport { Badge } from '../ui/badge';\r\nimport { Button } from '../ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Input } from '../ui/input';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../ui/table';\r\n\r\ninterface AidApplication {\r\n  id: number;\r\n  applicantName: string;\r\n  applicantId: string;\r\n  applicationDate: string;\r\n  aidType: string;\r\n  requestedAmount: number;\r\n  status: 'pending' | 'approved' | 'rejected' | 'under-review';\r\n  priority: 'low' | 'medium' | 'high' | 'urgent';\r\n  description: string;\r\n  phone: string;\r\n  address: string;\r\n}\r\n\r\nconst mockApplications: AidApplication[] = [\r\n  {\r\n    id: 1,\r\n    applicantName: 'Ay┼şe Y─▒lmaz',\r\n    applicantId: '12345678901',\r\n    applicationDate: '2024-01-15',\r\n    aidType: 'Nakdi Yard─▒m',\r\n    requestedAmount: 2500,\r\n    status: 'pending',\r\n    priority: 'high',\r\n    description: 'Kira ve market ihtiyac─▒ i├ğin nakdi yard─▒m talebi',\r\n    phone: '0555 123 45 67',\r\n    address: 'Atat├╝rk Mah. Cumhuriyet Cad. No:45 ┼Şi┼şli/─░STANBUL',\r\n  },\r\n  {\r\n    id: 2,\r\n    applicantName: 'Mehmet Demir',\r\n    applicantId: '98765432109',\r\n    applicationDate: '2024-01-14',\r\n    aidType: 'Ayni Yard─▒m',\r\n    requestedAmount: 0,\r\n    status: 'approved',\r\n    priority: 'medium',\r\n    description: 'G─▒da kolisi ve temizlik malzemesi talebi',\r\n    phone: '0532 987 65 43',\r\n    address: 'Fatih Mah. ─░stiklal Sok. No:12 Fatih/─░STANBUL',\r\n  },\r\n  {\r\n    id: 3,\r\n    applicantName: 'Fatma Kaya',\r\n    applicantId: '11223344556',\r\n    applicationDate: '2024-01-13',\r\n    aidType: 'Sa─şl─▒k Yard─▒m─▒',\r\n    requestedAmount: 3500,\r\n    status: 'under-review',\r\n    priority: 'urgent',\r\n    description: 'Ameliyat masraflar─▒ i├ğin yard─▒m talebi',\r\n    phone: '0545 123 98 76',\r\n    address: 'Be┼şikta┼ş Mah. Spor Cad. No:78 Be┼şikta┼ş/─░STANBUL',\r\n  },\r\n  {\r\n    id: 4,\r\n    applicantName: 'Ali ├ûzkan',\r\n    applicantId: '55667788990',\r\n    applicationDate: '2024-01-12',\r\n    aidType: 'E─şitim Yard─▒m─▒',\r\n    requestedAmount: 1500,\r\n    status: 'rejected',\r\n    priority: 'low',\r\n    description: '├£niversite har├ğ ve kitap masraflar─▒',\r\n    phone: '0533 456 78 90',\r\n    address: 'Kad─▒k├Ây Mah. Ba─şdat Cad. No:234 Kad─▒k├Ây/─░STANBUL',\r\n  },\r\n  {\r\n    id: 5,\r\n    applicantName: 'Zeynep Arslan',\r\n    applicantId: '99887766554',\r\n    applicationDate: '2024-01-11',\r\n    aidType: 'Nakdi Yard─▒m',\r\n    requestedAmount: 3000,\r\n    status: 'approved',\r\n    priority: 'high',\r\n    description: 'Elektrik ve do─şalgaz faturas─▒ bor├ğlar─▒',\r\n    phone: '0544 321 65 98',\r\n    address: '├£sk├╝dar Mah. ├çaml─▒ca Yolu No:56 ├£sk├╝dar/─░STANBUL',\r\n  },\r\n];\r\n\r\n/**\r\n * AidApplicationsPage function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function AidApplicationsPage() {\r\n  const [applications, setApplications] = useState<AidApplication[]>(mockApplications);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState<string>('all');\r\n  const [priorityFilter, setPriorityFilter] = useState<string>('all');\r\n  const [aidTypeFilter, setAidTypeFilter] = useState<string>('all');\r\n\r\n  const getStatusBadge = (status: AidApplication['status']) => {\r\n    const statusConfig = {\r\n      pending: { label: 'Beklemede', color: 'bg-yellow-100 text-yellow-800' },\r\n      approved: { label: 'Onayland─▒', color: 'bg-green-100 text-green-800' },\r\n      rejected: { label: 'Reddedildi', color: 'bg-red-100 text-red-800' },\r\n      'under-review': { label: '─░ncelemede', color: 'bg-blue-100 text-blue-800' },\r\n    };\r\n\r\n    const config = statusConfig[status];\r\n    return <Badge className={config.color}>{config.label}</Badge>;\r\n  };\r\n\r\n  const getPriorityBadge = (priority: AidApplication['priority']) => {\r\n    const priorityConfig = {\r\n      low: { label: 'D├╝┼ş├╝k', color: 'bg-gray-100 text-gray-800' },\r\n      medium: { label: 'Orta', color: 'bg-blue-100 text-blue-800' },\r\n      high: { label: 'Y├╝ksek', color: 'bg-orange-100 text-orange-800' },\r\n      urgent: { label: 'Acil', color: 'bg-red-100 text-red-800' },\r\n    };\r\n\r\n    const config = priorityConfig[priority];\r\n    return <Badge className={config.color}>{config.label}</Badge>;\r\n  };\r\n\r\n  const filteredApplications = applications.filter((app) => {\r\n    const matchesSearch =\r\n      app.applicantName.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      app.applicantId.includes(searchTerm) ||\r\n      app.description.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesStatus = statusFilter === 'all' || app.status === statusFilter;\r\n    const matchesPriority = priorityFilter === 'all' || app.priority === priorityFilter;\r\n    const matchesAidType = aidTypeFilter === 'all' || app.aidType === aidTypeFilter;\r\n\r\n    return matchesSearch && matchesStatus && matchesPriority && matchesAidType;\r\n  });\r\n\r\n  const handleApprove = (id: number) => {\r\n    setApplications((prev) =>\r\n      prev.map((app) => (app.id === id ? { ...app, status: 'approved' as const } : app)),\r\n    );\r\n    toast.success('Ba┼şvuru onayland─▒');\r\n  };\r\n\r\n  const handleReject = (id: number) => {\r\n    setApplications((prev) =>\r\n      prev.map((app) => (app.id === id ? { ...app, status: 'rejected' as const } : app)),\r\n    );\r\n    toast.success('Ba┼şvuru reddedildi');\r\n  };\r\n\r\n  const stats = {\r\n    total: applications.length,\r\n    pending: applications.filter((a) => a.status === 'pending').length,\r\n    approved: applications.filter((a) => a.status === 'approved').length,\r\n    rejected: applications.filter((a) => a.status === 'rejected').length,\r\n  };\r\n\r\n  return (\r\n    <PageLayout\r\n      title=\"Yard─▒m Ba┼şvurular─▒\"\r\n      subtitle=\"─░htiya├ğ sahipleri ad─▒na olu┼şturulan ba┼şvurular─▒ de─şerlendirin ve y├Ânetin\"\r\n      actions={\r\n        <div className=\"flex gap-2 flex-wrap items-center justify-end w-full sm:w-auto p-2 sm:p-0\">\r\n          <Button\r\n            className=\"min-h-[44px] px-6 py-3 shadow-lg border-0 font-medium text-sm focus:outline-none focus:ring-2 focus:ring-blue-300 focus:ring-offset-2 transition-all duration-200 hover:scale-105 relative z-20 flex-shrink-0\"\r\n            style={{\r\n              backgroundColor: '#1e3a8a',\r\n              color: '#ffffff',\r\n              border: 'none',\r\n              boxShadow: '0 4px 12px rgba(30, 58, 138, 0.4)',\r\n              minWidth: '180px',\r\n            }}\r\n          >\r\n            <Plus className=\"w-4 h-4 mr-2\" />\r\n            <span className=\"hidden lg:inline\">─░htiya├ğ Sahibi Ad─▒na Ba┼şvuru Olu┼ştur</span>\r\n            <span className=\"lg:hidden\">Yeni Ba┼şvuru</span>\r\n          </Button>\r\n        </div>\r\n      }\r\n    >\r\n      <div className=\"safe-area p-3 sm:p-6 space-y-4 sm:space-y-6\">\r\n        {/* Mobile-Optimized Stats Cards */}\r\n        <div className=\"grid grid-cols-2 lg:grid-cols-4 gap-3 sm:gap-4\">\r\n          <Card className=\"border-0 shadow-md hover:shadow-lg transition-all duration-300 micro-interaction\">\r\n            <CardContent className=\"p-3 sm:p-4\">\r\n              <div className=\"flex items-center justify-between mb-2\">\r\n                <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center\">\r\n                  <FileText className=\"w-4 h-4 text-blue-600\" />\r\n                </div>\r\n                <div className=\"text-right\">\r\n                  <div className=\"text-xl sm:text-2xl font-bold text-blue-600\">{stats.total}</div>\r\n                </div>\r\n              </div>\r\n              <p className=\"text-sm font-medium text-gray-600\">Toplam Ba┼şvuru</p>\r\n              <p className=\"text-xs text-gray-500 mt-1\">Bu ay toplam</p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card className=\"border-0 shadow-md hover:shadow-lg transition-all duration-300 micro-interaction\">\r\n            <CardContent className=\"p-3 sm:p-4\">\r\n              <div className=\"flex items-center justify-between mb-2\">\r\n                <div className=\"w-8 h-8 bg-yellow-100 rounded-full flex items-center justify-center\">\r\n                  <Clock className=\"w-4 h-4 text-yellow-600\" />\r\n                </div>\r\n                <div className=\"text-right\">\r\n                  <div className=\"text-xl sm:text-2xl font-bold text-yellow-600\">\r\n                    {stats.pending}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <p className=\"text-sm font-medium text-gray-600\">Beklemede</p>\r\n              <p className=\"text-xs text-gray-500 mt-1\">De─şerlendirme a┼şamas─▒nda</p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card className=\"border-0 shadow-md hover:shadow-lg transition-all duration-300 micro-interaction\">\r\n            <CardContent className=\"p-3 sm:p-4\">\r\n              <div className=\"flex items-center justify-between mb-2\">\r\n                <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center\">\r\n                  <CheckCircle className=\"w-4 h-4 text-green-600\" />\r\n                </div>\r\n                <div className=\"text-right\">\r\n                  <div className=\"text-xl sm:text-2xl font-bold text-green-600\">\r\n                    {stats.approved}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n              <p className=\"text-sm font-medium text-gray-600\">Onaylanan</p>\r\n              <p className=\"text-xs text-gray-500 mt-1\">\r\n                Onay oran─▒: %{Math.round((stats.approved / stats.total) * 100) || 0}\r\n              </p>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card className=\"border-0 shadow-md hover:shadow-lg transition-all duration-300 micro-interaction\">\r\n            <CardContent className=\"p-3 sm:p-4\">\r\n              <div className=\"flex items-center justify-between mb-2\">\r\n                <div className=\"w-8 h-8 bg-red-100 rounded-full flex items-center justify-center\">\r\n                  <XCircle className=\"w-4 h-4 text-red-600\" />\r\n                </div>\r\n                <div className=\"text-right\">\r\n                  <div className=\"text-xl sm:text-2xl font-bold text-red-600\">{stats.rejected}</div>\r\n                </div>\r\n              </div>\r\n              <p className=\"text-sm font-medium text-gray-600\">Reddedilen</p>\r\n              <p className=\"text-xs text-gray-500 mt-1\">\r\n                Red oran─▒: %{Math.round((stats.rejected / stats.total) * 100) || 0}\r\n              </p>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Mobile-Optimized Filters */}\r\n        <Card className=\"border-0 shadow-sm\">\r\n          <CardContent className=\"p-4 sm:p-6\">\r\n            <div className=\"space-y-4\">\r\n              {/* Search Input */}\r\n              <div className=\"relative\">\r\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\r\n                <Input\r\n                  placeholder=\"─░htiya├ğ sahibinin ad─▒, TC kimlik no veya ba┼şvuru a├ğ─▒klamas─▒ ile ara...\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => {\r\n                    setSearchTerm(e.target.value);\r\n                  }}\r\n                  className=\"pl-10 min-h-[44px] text-base\"\r\n                  inputMode=\"search\"\r\n                />\r\n              </div>\r\n\r\n              {/* Mobile Filter Grid */}\r\n              <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-3 sm:gap-4\">\r\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\r\n                  <SelectTrigger className=\"min-h-[44px] text-base\">\r\n                    <SelectValue placeholder=\"T├╝m Durumlar\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"all\">T├╝m Durumlar</SelectItem>\r\n                    <SelectItem value=\"pending\">Beklemede</SelectItem>\r\n                    <SelectItem value=\"approved\">Onayland─▒</SelectItem>\r\n                    <SelectItem value=\"rejected\">Reddedildi</SelectItem>\r\n                    <SelectItem value=\"under-review\">─░ncelemede</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n\r\n                <Select value={priorityFilter} onValueChange={setPriorityFilter}>\r\n                  <SelectTrigger className=\"min-h-[44px] text-base\">\r\n                    <SelectValue placeholder=\"T├╝m ├ûncelikler\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"all\">T├╝m ├ûncelikler</SelectItem>\r\n                    <SelectItem value=\"urgent\">Acil</SelectItem>\r\n                    <SelectItem value=\"high\">Y├╝ksek</SelectItem>\r\n                    <SelectItem value=\"medium\">Orta</SelectItem>\r\n                    <SelectItem value=\"low\">D├╝┼ş├╝k</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n\r\n                <Select value={aidTypeFilter} onValueChange={setAidTypeFilter}>\r\n                  <SelectTrigger className=\"min-h-[44px] text-base\">\r\n                    <SelectValue placeholder=\"T├╝m T├╝rler\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"all\">T├╝m T├╝rler</SelectItem>\r\n                    <SelectItem value=\"Nakdi Yard─▒m\">Nakdi Yard─▒m</SelectItem>\r\n                    <SelectItem value=\"Ayni Yard─▒m\">Ayni Yard─▒m</SelectItem>\r\n                    <SelectItem value=\"Sa─şl─▒k Yard─▒m─▒\">Sa─şl─▒k Yard─▒m─▒</SelectItem>\r\n                    <SelectItem value=\"E─şitim Yard─▒m─▒\">E─şitim Yard─▒m─▒</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Mobile-Optimized Applications List */}\r\n        <Card className=\"border-0 shadow-sm\">\r\n          <CardHeader className=\"pb-4\">\r\n            <CardTitle className=\"flex items-center gap-2 text-lg sm:text-xl\">\r\n              <FileCheck className=\"w-5 h-5 text-blue-600\" />\r\n              Ba┼şvuru Listesi ({filteredApplications.length} ba┼şvuru)\r\n            </CardTitle>\r\n          </CardHeader>\r\n\r\n          <CardContent className=\"p-0\">\r\n            {/* Mobile Card View */}\r\n            <div className=\"block sm:hidden\">\r\n              {filteredApplications.length > 0 ? (\r\n                <div className=\"space-y-3 p-4\">\r\n                  {filteredApplications.map((application) => (\r\n                    <Card\r\n                      key={application.id}\r\n                      className=\"border border-gray-200 hover:shadow-md transition-shadow\"\r\n                    >\r\n                      <CardContent className=\"p-4\">\r\n                        <div className=\"flex justify-between items-start mb-3\">\r\n                          <div className=\"flex-1\">\r\n                            <h3 className=\"font-medium text-gray-900\">\r\n                              {application.applicantName}\r\n                            </h3>\r\n                            <p className=\"text-sm text-gray-600\">{application.applicantId}</p>\r\n                            <p className=\"text-xs text-gray-500 mt-1\">{application.description}</p>\r\n                          </div>\r\n                          <div className=\"text-right\">{getPriorityBadge(application.priority)}</div>\r\n                        </div>\r\n\r\n                        <div className=\"grid grid-cols-2 gap-3 mb-3 text-sm\">\r\n                          <div>\r\n                            <span className=\"text-gray-500\">T├╝r:</span>\r\n                            <p className=\"font-medium\">{application.aidType}</p>\r\n                          </div>\r\n                          <div>\r\n                            <span className=\"text-gray-500\">Tutar:</span>\r\n                            <p className=\"font-medium\">\r\n                              {application.requestedAmount > 0\r\n                                ? `Ôé║${application.requestedAmount.toLocaleString('tr-TR')}`\r\n                                : 'Ayni Yard─▒m'}\r\n                            </p>\r\n                          </div>\r\n                          <div>\r\n                            <span className=\"text-gray-500\">Tarih:</span>\r\n                            <p className=\"font-medium\">\r\n                              {new Date(application.applicationDate).toLocaleDateString('tr-TR')}\r\n                            </p>\r\n                          </div>\r\n                          <div>\r\n                            <span className=\"text-gray-500\">Durum:</span>\r\n                            <div className=\"mt-1\">{getStatusBadge(application.status)}</div>\r\n                          </div>\r\n                        </div>\r\n\r\n                        <div className=\"flex justify-between items-center pt-3 border-t border-gray-100\">\r\n                          <div className=\"flex gap-2\">\r\n                            <Button\r\n                              variant=\"ghost\"\r\n                              size=\"sm\"\r\n                              className=\"min-h-[44px] min-w-[44px] p-2 hover:bg-blue-50 hover:text-blue-600\"\r\n                              aria-label={`${application.applicantName} ba┼şvurusunu g├Âr├╝nt├╝le`}\r\n                            >\r\n                              <Eye className=\"w-4 h-4\" />\r\n                            </Button>\r\n                            <Button\r\n                              variant=\"ghost\"\r\n                              size=\"sm\"\r\n                              className=\"min-h-[44px] min-w-[44px] p-2 hover:bg-gray-50\"\r\n                              aria-label={`${application.applicantName} ba┼şvurusunu d├╝zenle`}\r\n                            >\r\n                              <Edit className=\"w-4 h-4\" />\r\n                            </Button>\r\n                          </div>\r\n\r\n                          {application.status === 'pending' && (\r\n                            <div className=\"flex gap-2\">\r\n                              <Button\r\n                                variant=\"ghost\"\r\n                                size=\"sm\"\r\n                                onClick={() => {\r\n                                  handleApprove(application.id);\r\n                                }}\r\n                                className=\"min-h-[44px] min-w-[44px] p-2 text-green-600 hover:text-green-700 hover:bg-green-50\"\r\n                                aria-label={`${application.applicantName} ba┼şvurusunu onayla`}\r\n                              >\r\n                                <CheckCircle className=\"w-4 h-4\" />\r\n                              </Button>\r\n                              <Button\r\n                                variant=\"ghost\"\r\n                                size=\"sm\"\r\n                                onClick={() => {\r\n                                  handleReject(application.id);\r\n                                }}\r\n                                className=\"min-h-[44px] min-w-[44px] p-2 text-red-600 hover:text-red-700 hover:bg-red-50\"\r\n                                aria-label={`${application.applicantName} ba┼şvurusunu reddet`}\r\n                              >\r\n                                <XCircle className=\"w-4 h-4\" />\r\n                              </Button>\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </CardContent>\r\n                    </Card>\r\n                  ))}\r\n                </div>\r\n              ) : (\r\n                <div className=\"p-6 text-center\">\r\n                  <AlertCircle className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\r\n                  <p className=\"text-gray-600 mb-2\">Ba┼şvuru bulunamad─▒</p>\r\n                  <p className=\"text-sm text-gray-400\">\r\n                    Arama kriterlerinize uygun ba┼şvuru bulunmuyor\r\n                  </p>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* Desktop Table View */}\r\n            <div className=\"hidden sm:block overflow-x-auto\">\r\n              <Table>\r\n                <TableHeader>\r\n                  <TableRow className=\"bg-gray-50/50\">\r\n                    <TableHead className=\"min-w-[200px] p-3 sm:p-4\">─░htiya├ğ Sahibi</TableHead>\r\n                    <TableHead className=\"min-w-[120px] p-3 sm:p-4\">Ba┼şvuru Tarihi</TableHead>\r\n                    <TableHead className=\"min-w-[140px] p-3 sm:p-4\">Yard─▒m T├╝r├╝</TableHead>\r\n                    <TableHead className=\"min-w-[120px] p-3 sm:p-4\">Talep Edilen</TableHead>\r\n                    <TableHead className=\"min-w-[100px] p-3 sm:p-4\">├ûncelik</TableHead>\r\n                    <TableHead className=\"min-w-[120px] p-3 sm:p-4\">Durum</TableHead>\r\n                    <TableHead className=\"min-w-[180px] p-3 sm:p-4 text-center\">─░┼şlemler</TableHead>\r\n                  </TableRow>\r\n                </TableHeader>\r\n                <TableBody>\r\n                  {filteredApplications.map((application) => (\r\n                    <TableRow\r\n                      key={application.id}\r\n                      className=\"hover:bg-gray-50/50 transition-colors\"\r\n                    >\r\n                      <TableCell className=\"p-3 sm:p-4\">\r\n                        <div>\r\n                          <p className=\"font-medium\">{application.applicantName}</p>\r\n                          <p className=\"text-sm text-muted-foreground\">{application.applicantId}</p>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell className=\"p-3 sm:p-4\">\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <Calendar className=\"w-4 h-4 text-gray-400\" />\r\n                          <span className=\"text-sm\">\r\n                            {new Date(application.applicationDate).toLocaleDateString('tr-TR')}\r\n                          </span>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell className=\"p-3 sm:p-4\">\r\n                        <Badge variant=\"outline\">{application.aidType}</Badge>\r\n                      </TableCell>\r\n                      <TableCell className=\"p-3 sm:p-4\">\r\n                        <span className=\"font-medium\">\r\n                          {application.requestedAmount > 0\r\n                            ? `Ôé║${application.requestedAmount.toLocaleString('tr-TR')}`\r\n                            : 'Ayni Yard─▒m'}\r\n                        </span>\r\n                      </TableCell>\r\n                      <TableCell className=\"p-3 sm:p-4\">\r\n                        {getPriorityBadge(application.priority)}\r\n                      </TableCell>\r\n                      <TableCell className=\"p-3 sm:p-4\">\r\n                        {getStatusBadge(application.status)}\r\n                      </TableCell>\r\n                      <TableCell className=\"p-3 sm:p-4\">\r\n                        <div className=\"flex items-center justify-center gap-2\">\r\n                          <Button\r\n                            variant=\"ghost\"\r\n                            size=\"sm\"\r\n                            className=\"h-8 w-8 p-0 hover:bg-blue-50 hover:text-blue-600\"\r\n                            aria-label={`${application.applicantName} ba┼şvurusunu g├Âr├╝nt├╝le`}\r\n                          >\r\n                            <Eye className=\"w-4 h-4\" />\r\n                          </Button>\r\n                          <Button\r\n                            variant=\"ghost\"\r\n                            size=\"sm\"\r\n                            className=\"h-8 w-8 p-0 hover:bg-gray-50\"\r\n                            aria-label={`${application.applicantName} ba┼şvurusunu d├╝zenle`}\r\n                          >\r\n                            <Edit className=\"w-4 h-4\" />\r\n                          </Button>\r\n                          {application.status === 'pending' && (\r\n                            <>\r\n                              <Button\r\n                                variant=\"ghost\"\r\n                                size=\"sm\"\r\n                                onClick={() => {\r\n                                  handleApprove(application.id);\r\n                                }}\r\n                                className=\"h-8 w-8 p-0 text-green-600 hover:text-green-700 hover:bg-green-50\"\r\n                                aria-label={`${application.applicantName} ba┼şvurusunu onayla`}\r\n                              >\r\n                                <CheckCircle className=\"w-4 h-4\" />\r\n                              </Button>\r\n                              <Button\r\n                                variant=\"ghost\"\r\n                                size=\"sm\"\r\n                                onClick={() => {\r\n                                  handleReject(application.id);\r\n                                }}\r\n                                className=\"h-8 w-8 p-0 text-red-600 hover:text-red-700 hover:bg-red-50\"\r\n                                aria-label={`${application.applicantName} ba┼şvurusunu reddet`}\r\n                              >\r\n                                <XCircle className=\"w-4 h-4\" />\r\n                              </Button>\r\n                            </>\r\n                          )}\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </PageLayout>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\AidPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setLoading' is assigned a value but never used.","line":54,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":29},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'setLoading' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":54,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":54,"endColumn":29},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":87,"column":28,"nodeType":"MemberExpression","endLine":87,"endColumn":44},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":88,"column":10,"nodeType":"MemberExpression","endLine":88,"endColumn":23},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":103,"column":45,"nodeType":"MemberExpression","endLine":103,"endColumn":63},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":120,"column":43,"nodeType":"MemberExpression","endLine":120,"endColumn":57}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview AidPage Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { useState } from 'react';\r\nimport { PageLayout } from '../PageLayout';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Button } from '../ui/button';\r\nimport { Input } from '../ui/input';\r\nimport { Badge } from '../ui/badge';\r\nimport { Avatar, AvatarFallback, AvatarImage } from '../ui/avatar';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../ui/table';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\nimport {\r\n  Search,\r\n  Plus,\r\n  Download,\r\n  Eye,\r\n  Edit,\r\n  HelpingHand,\r\n  Clock,\r\n  CheckCircle,\r\n  XCircle,\r\n} from 'lucide-react';\r\nimport { PageLoading } from '../LoadingSpinner';\r\n\r\ninterface AidRequest {\r\n  id: number;\r\n  applicant: string;\r\n  phone: string;\r\n  email: string;\r\n  requestType: 'Acil Yard─▒m' | 'G─▒da' | 'Bar─▒nma' | 'Sa─şl─▒k' | 'E─şitim' | 'Maddi';\r\n  status: 'Yeni' | '─░nceleniyor' | 'Onayland─▒' | 'Reddedildi' | 'Tamamland─▒';\r\n  priority: 'D├╝┼ş├╝k' | 'Orta' | 'Y├╝ksek' | 'Acil';\r\n  amount?: number;\r\n  description: string;\r\n  submitDate: string;\r\n  assignedTo?: string;\r\n}\r\n\r\n// TODO: Load from API\r\nconst mockAidRequests: AidRequest[] = [];\r\n\r\n/**\r\n * AidPage function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function AidPage() {\r\n  const [loading, setLoading] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState('all');\r\n  const [priorityFilter, setPriorityFilter] = useState('all');\r\n  const [aidRequests] = useState<AidRequest[]>(mockAidRequests);\r\n\r\n  const filteredRequests = aidRequests.filter((request) => {\r\n    const matchesSearch =\r\n      request.applicant.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      request.description.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesStatus = statusFilter === 'all' || request.status === statusFilter;\r\n    const matchesPriority = priorityFilter === 'all' || request.priority === priorityFilter;\r\n    return matchesSearch && matchesStatus && matchesPriority;\r\n  });\r\n\r\n  const getStatusBadge = (status: AidRequest['status']) => {\r\n    const variants = {\r\n      Yeni: 'bg-blue-100 text-blue-800 hover:bg-blue-100',\r\n      ─░nceleniyor: 'bg-yellow-100 text-yellow-800 hover:bg-yellow-100',\r\n      Onayland─▒: 'bg-green-100 text-green-800 hover:bg-green-100',\r\n      Reddedildi: 'bg-red-100 text-red-800 hover:bg-red-100',\r\n      Tamamland─▒: 'bg-purple-100 text-purple-800 hover:bg-purple-100',\r\n    };\r\n\r\n    const icons = {\r\n      Yeni: <HelpingHand className=\"w-3 h-3 mr-1\" />,\r\n      ─░nceleniyor: <Clock className=\"w-3 h-3 mr-1\" />,\r\n      Onayland─▒: <CheckCircle className=\"w-3 h-3 mr-1\" />,\r\n      Reddedildi: <XCircle className=\"w-3 h-3 mr-1\" />,\r\n      Tamamland─▒: <CheckCircle className=\"w-3 h-3 mr-1\" />,\r\n    };\r\n\r\n    return (\r\n      <Badge className={`${variants[status]} flex items-center`}>\r\n        {icons[status]}\r\n        {status}\r\n      </Badge>\r\n    );\r\n  };\r\n\r\n  const getPriorityBadge = (priority: AidRequest['priority']) => {\r\n    const variants = {\r\n      D├╝┼ş├╝k: 'bg-gray-100 text-gray-800',\r\n      Orta: 'bg-blue-100 text-blue-800',\r\n      Y├╝ksek: 'bg-orange-100 text-orange-800',\r\n      Acil: 'bg-red-100 text-red-800',\r\n    };\r\n\r\n    return (\r\n      <Badge variant=\"secondary\" className={variants[priority]}>\r\n        {priority}\r\n      </Badge>\r\n    );\r\n  };\r\n\r\n  const getRequestTypeBadge = (type: AidRequest['requestType']) => {\r\n    const variants = {\r\n      'Acil Yard─▒m': 'bg-red-50 text-red-700 border-red-200',\r\n      G─▒da: 'bg-green-50 text-green-700 border-green-200',\r\n      Bar─▒nma: 'bg-blue-50 text-blue-700 border-blue-200',\r\n      Sa─şl─▒k: 'bg-purple-50 text-purple-700 border-purple-200',\r\n      E─şitim: 'bg-yellow-50 text-yellow-700 border-yellow-200',\r\n      Maddi: 'bg-gray-50 text-gray-700 border-gray-200',\r\n    };\r\n\r\n    return (\r\n      <Badge variant=\"outline\" className={variants[type]}>\r\n        {type}\r\n      </Badge>\r\n    );\r\n  };\r\n\r\n  if (loading) {\r\n    return <PageLoading />;\r\n  }\r\n\r\n  return (\r\n    <PageLayout\r\n      title=\"Yard─▒m Talepleri\"\r\n      subtitle=\"Gelen yard─▒m taleplerini de─şerlendirin ve y├Ânetin\"\r\n      actions={\r\n        <div className=\"flex gap-2\">\r\n          <Button variant=\"outline\" size=\"sm\">\r\n            <Download className=\"w-4 h-4 mr-2\" />\r\n            D─▒┼şa Aktar\r\n          </Button>\r\n          <Button size=\"sm\">\r\n            <Plus className=\"w-4 h-4 mr-2\" />\r\n            Yeni Talep\r\n          </Button>\r\n        </div>\r\n      }\r\n    >\r\n      <div className=\"p-6 space-y-6\">\r\n        {/* Summary Cards */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-5 gap-4\">\r\n          <Card className=\"border-0 shadow-md\">\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"text-2xl font-bold text-blue-600\">{aidRequests.length}</div>\r\n              <p className=\"text-sm text-gray-600\">Toplam Talep</p>\r\n            </CardContent>\r\n          </Card>\r\n          <Card className=\"border-0 shadow-md\">\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"text-2xl font-bold text-orange-600\">\r\n                {aidRequests.filter((r) => r.status === 'Yeni').length}\r\n              </div>\r\n              <p className=\"text-sm text-gray-600\">Yeni</p>\r\n            </CardContent>\r\n          </Card>\r\n          <Card className=\"border-0 shadow-md\">\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"text-2xl font-bold text-yellow-600\">\r\n                {aidRequests.filter((r) => r.status === '─░nceleniyor').length}\r\n              </div>\r\n              <p className=\"text-sm text-gray-600\">─░nceleniyor</p>\r\n            </CardContent>\r\n          </Card>\r\n          <Card className=\"border-0 shadow-md\">\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"text-2xl font-bold text-red-600\">\r\n                {aidRequests.filter((r) => r.priority === 'Acil').length}\r\n              </div>\r\n              <p className=\"text-sm text-gray-600\">Acil</p>\r\n            </CardContent>\r\n          </Card>\r\n          <Card className=\"border-0 shadow-md\">\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"text-2xl font-bold text-green-600\">\r\n                {aidRequests.filter((r) => r.status === 'Tamamland─▒').length}\r\n              </div>\r\n              <p className=\"text-sm text-gray-600\">Tamamland─▒</p>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Filters and Search */}\r\n        <Card className=\"border-0 shadow-md\">\r\n          <CardHeader>\r\n            <div className=\"flex flex-col sm:flex-row gap-4 items-start sm:items-center justify-between\">\r\n              <CardTitle>Yard─▒m Talep Listesi</CardTitle>\r\n              <div className=\"flex gap-2 w-full sm:w-auto\">\r\n                <div className=\"relative flex-1 sm:w-64\">\r\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\r\n                  <Input\r\n                    placeholder=\"Talep ara...\"\r\n                    value={searchTerm}\r\n                    onChange={(e) => {\r\n                      setSearchTerm(e.target.value);\r\n                    }}\r\n                    className=\"pl-10\"\r\n                  />\r\n                </div>\r\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\r\n                  <SelectTrigger className=\"w-32\">\r\n                    <SelectValue placeholder=\"Durum\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"all\">T├╝m Durumlar</SelectItem>\r\n                    <SelectItem value=\"Yeni\">Yeni</SelectItem>\r\n                    <SelectItem value=\"─░nceleniyor\">─░nceleniyor</SelectItem>\r\n                    <SelectItem value=\"Onayland─▒\">Onayland─▒</SelectItem>\r\n                    <SelectItem value=\"Reddedildi\">Reddedildi</SelectItem>\r\n                    <SelectItem value=\"Tamamland─▒\">Tamamland─▒</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n                <Select value={priorityFilter} onValueChange={setPriorityFilter}>\r\n                  <SelectTrigger className=\"w-32\">\r\n                    <SelectValue placeholder=\"├ûncelik\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"all\">T├╝m ├ûncelikler</SelectItem>\r\n                    <SelectItem value=\"Acil\">Acil</SelectItem>\r\n                    <SelectItem value=\"Y├╝ksek\">Y├╝ksek</SelectItem>\r\n                    <SelectItem value=\"Orta\">Orta</SelectItem>\r\n                    <SelectItem value=\"D├╝┼ş├╝k\">D├╝┼ş├╝k</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <Table>\r\n              <TableHeader>\r\n                <TableRow>\r\n                  <TableHead>Ba┼şvuran</TableHead>\r\n                  <TableHead>Talep T├╝r├╝</TableHead>\r\n                  <TableHead>├ûncelik</TableHead>\r\n                  <TableHead>Durum</TableHead>\r\n                  <TableHead>Miktar</TableHead>\r\n                  <TableHead>Tarih</TableHead>\r\n                  <TableHead>Sorumlu</TableHead>\r\n                  <TableHead className=\"text-right\">─░┼şlemler</TableHead>\r\n                </TableRow>\r\n              </TableHeader>\r\n              <TableBody>\r\n                {filteredRequests.map((request) => (\r\n                  <TableRow key={request.id} className=\"hover:bg-gray-50\">\r\n                    <TableCell>\r\n                      <div className=\"flex items-center gap-3\">\r\n                        <Avatar className=\"w-8 h-8\">\r\n                          <AvatarImage src=\"\" alt={request.applicant} />\r\n                          <AvatarFallback className=\"bg-blue-100 text-blue-800\">\r\n                            {request.applicant\r\n                              .split(' ')\r\n                              .map((n) => n[0])\r\n                              .join('')}\r\n                          </AvatarFallback>\r\n                        </Avatar>\r\n                        <div>\r\n                          <div className=\"font-medium\">{request.applicant}</div>\r\n                          <div className=\"text-sm text-gray-500\">{request.phone}</div>\r\n                        </div>\r\n                      </div>\r\n                    </TableCell>\r\n                    <TableCell>{getRequestTypeBadge(request.requestType)}</TableCell>\r\n                    <TableCell>{getPriorityBadge(request.priority)}</TableCell>\r\n                    <TableCell>{getStatusBadge(request.status)}</TableCell>\r\n                    <TableCell className=\"font-semibold text-green-600\">\r\n                      {request.amount ? `Ôé║${request.amount.toLocaleString()}` : '-'}\r\n                    </TableCell>\r\n                    <TableCell className=\"text-gray-500\">\r\n                      {new Date(request.submitDate).toLocaleDateString('tr-TR')}\r\n                    </TableCell>\r\n                    <TableCell className=\"text-gray-600\">{request.assignedTo ?? '-'}</TableCell>\r\n                    <TableCell className=\"text-right\">\r\n                      <div className=\"flex gap-1 justify-end\">\r\n                        <Button variant=\"ghost\" size=\"sm\">\r\n                          <Eye className=\"w-4 h-4\" />\r\n                        </Button>\r\n                        <Button variant=\"ghost\" size=\"sm\">\r\n                          <Edit className=\"w-4 h-4\" />\r\n                        </Button>\r\n                      </div>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ))}\r\n              </TableBody>\r\n            </Table>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </PageLayout>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\AllAidListPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setAidRecords' is assigned a value but never used.","line":142,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":142,"endColumn":35},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'setAidRecords' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":142,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":142,"endColumn":35},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":155,"column":20,"nodeType":"MemberExpression","endLine":155,"endColumn":40},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":166,"column":12,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":166,"endColumn":48}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview AllAidListPage Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { useState } from 'react';\r\nimport { PageLayout } from '../PageLayout';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Button } from '../ui/button';\r\nimport { Input } from '../ui/input';\r\nimport { Badge } from '../ui/badge';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../ui/table';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\nimport {\r\n  List,\r\n  Search,\r\n  Download,\r\n  FileText,\r\n  Calendar,\r\n  Users,\r\n  TrendingUp,\r\n  HandHeart,\r\n  Banknote,\r\n  Gift,\r\n  Heart,\r\n  GraduationCap,\r\n  Eye,\r\n  Edit,\r\n} from 'lucide-react';\r\n\r\ninterface AidRecord {\r\n  id: number;\r\n  recipientName: string;\r\n  recipientId: string;\r\n  aidType: string;\r\n  category: string;\r\n  amount: number;\r\n  deliveryDate: string;\r\n  status: 'delivered' | 'pending' | 'cancelled';\r\n  deliveryMethod: string;\r\n  approvedBy: string;\r\n  description: string;\r\n  documentNumber: string;\r\n}\r\n\r\nconst mockAidRecords: AidRecord[] = [\r\n  {\r\n    id: 1,\r\n    recipientName: 'Ay┼şe Y─▒lmaz',\r\n    recipientId: '12345678901',\r\n    aidType: 'Nakdi Yard─▒m',\r\n    category: 'Kira Yard─▒m─▒',\r\n    amount: 2500,\r\n    deliveryDate: '2024-01-15',\r\n    status: 'delivered',\r\n    deliveryMethod: 'Banka Havalesi',\r\n    approvedBy: 'Mehmet Y├Ânetici',\r\n    description: 'Ayl─▒k kira yard─▒m─▒ - Ocak 2024',\r\n    documentNumber: 'NYD-2024-001',\r\n  },\r\n  {\r\n    id: 2,\r\n    recipientName: 'Mehmet Demir',\r\n    recipientId: '98765432109',\r\n    aidType: 'Ayni Yard─▒m',\r\n    category: 'G─▒da Kolisi',\r\n    amount: 0,\r\n    deliveryDate: '2024-01-14',\r\n    status: 'delivered',\r\n    deliveryMethod: 'Elden Teslim',\r\n    approvedBy: 'Fatma Koordinat├Âr',\r\n    description: '15 par├ğa g─▒da kolisi ve temizlik malzemesi',\r\n    documentNumber: 'AYD-2024-058',\r\n  },\r\n  {\r\n    id: 3,\r\n    recipientName: 'Fatma Kaya',\r\n    recipientId: '11223344556',\r\n    aidType: 'Sa─şl─▒k Yard─▒m─▒',\r\n    category: 'Ameliyat Masraf─▒',\r\n    amount: 3500,\r\n    deliveryDate: '2024-01-13',\r\n    status: 'pending',\r\n    deliveryMethod: 'Hastane ├ûdeme',\r\n    approvedBy: 'Dr. Ali Ba┼şhekim',\r\n    description: 'Kalp ameliyat─▒ masraf yard─▒m─▒',\r\n    documentNumber: 'SYD-2024-012',\r\n  },\r\n  {\r\n    id: 4,\r\n    recipientName: 'Ali ├ûzkan',\r\n    recipientId: '55667788990',\r\n    aidType: 'E─şitim Yard─▒m─▒',\r\n    category: '├£niversite Har├ğ',\r\n    amount: 1500,\r\n    deliveryDate: '2024-01-12',\r\n    status: 'delivered',\r\n    deliveryMethod: 'Okul Hesab─▒',\r\n    approvedBy: 'Zeynep E─şitim Sorumlusu',\r\n    description: 'Bahar d├Ânem har├ğ yard─▒m─▒',\r\n    documentNumber: 'EYD-2024-089',\r\n  },\r\n  {\r\n    id: 5,\r\n    recipientName: 'Zeynep Arslan',\r\n    recipientId: '99887766554',\r\n    aidType: 'Nakdi Yard─▒m',\r\n    category: 'Fatura Yard─▒m─▒',\r\n    amount: 1200,\r\n    deliveryDate: '2024-01-11',\r\n    status: 'delivered',\r\n    deliveryMethod: 'Nakit',\r\n    approvedBy: 'Hasan Mali M├╝┼şavir',\r\n    description: 'Elektrik ve do─şalgaz fatura ├Âdemesi',\r\n    documentNumber: 'NYD-2024-002',\r\n  },\r\n  {\r\n    id: 6,\r\n    recipientName: 'Hasan ├çelik',\r\n    recipientId: '77889900112',\r\n    aidType: 'Ayni Yard─▒m',\r\n    category: 'Giyim Yard─▒m─▒',\r\n    amount: 0,\r\n    deliveryDate: '2024-01-10',\r\n    status: 'cancelled',\r\n    deliveryMethod: 'Elden Teslim',\r\n    approvedBy: 'Ay┼şe Sosyal Hizmet',\r\n    description: 'K─▒┼ş k─▒yafetleri paketi - ─░ptal edildi',\r\n    documentNumber: 'AYD-2024-059',\r\n  },\r\n];\r\n\r\n/**\r\n * AllAidListPage function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function AllAidListPage() {\r\n  const [aidRecords, setAidRecords] = useState<AidRecord[]>(mockAidRecords);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState<string>('all');\r\n  const [aidTypeFilter, setAidTypeFilter] = useState<string>('all');\r\n  const [dateRange, setDateRange] = useState<string>('all');\r\n\r\n  const getStatusBadge = (status: AidRecord['status']) => {\r\n    const statusConfig = {\r\n      delivered: { label: 'Teslim Edildi', color: 'bg-green-100 text-green-800' },\r\n      pending: { label: 'Beklemede', color: 'bg-yellow-100 text-yellow-800' },\r\n      cancelled: { label: '─░ptal Edildi', color: 'bg-red-100 text-red-800' },\r\n    };\r\n\r\n    const config = statusConfig[status];\r\n    return <Badge className={config.color}>{config.label}</Badge>;\r\n  };\r\n\r\n  const getAidTypeIcon = (aidType: string) => {\r\n    const icons = {\r\n      'Nakdi Yard─▒m': <Banknote className=\"w-4 h-4 text-green-600\" />,\r\n      'Ayni Yard─▒m': <Gift className=\"w-4 h-4 text-blue-600\" />,\r\n      'Sa─şl─▒k Yard─▒m─▒': <Heart className=\"w-4 h-4 text-red-600\" />,\r\n      'E─şitim Yard─▒m─▒': <GraduationCap className=\"w-4 h-4 text-purple-600\" />,\r\n    };\r\n    return icons[aidType as keyof typeof icons] || <HandHeart className=\"w-4 h-4 text-gray-600\" />;\r\n  };\r\n\r\n  const filteredRecords = aidRecords.filter((record) => {\r\n    const matchesSearch =\r\n      record.recipientName.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      record.recipientId.includes(searchTerm) ||\r\n      record.documentNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      record.description.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesStatus = statusFilter === 'all' || record.status === statusFilter;\r\n    const matchesAidType = aidTypeFilter === 'all' || record.aidType === aidTypeFilter;\r\n\r\n    return matchesSearch && matchesStatus && matchesAidType;\r\n  });\r\n\r\n  const stats = {\r\n    total: aidRecords.length,\r\n    delivered: aidRecords.filter((r) => r.status === 'delivered').length,\r\n    pending: aidRecords.filter((r) => r.status === 'pending').length,\r\n    totalAmount: aidRecords\r\n      .filter((r) => r.status === 'delivered' && r.amount > 0)\r\n      .reduce((sum, r) => sum + r.amount, 0),\r\n    monthlyAmount: aidRecords\r\n      .filter(\r\n        (r) =>\r\n          r.status === 'delivered' &&\r\n          r.amount > 0 &&\r\n          new Date(r.deliveryDate).getMonth() === new Date().getMonth(),\r\n      )\r\n      .reduce((sum, r) => sum + r.amount, 0),\r\n  };\r\n\r\n  const handleExport = () => {\r\n    // Export functionality would be implemented here\r\n  };\r\n\r\n  return (\r\n    <PageLayout\r\n      title=\"T├╝m Yard─▒mlar Listesi\"\r\n      subtitle=\"─░htiya├ğ sahiplerine ger├ğekle┼ştirilen t├╝m yard─▒m i┼şlemlerini g├Âr├╝nt├╝leyin ve takip edin\"\r\n      actions={\r\n        <div className=\"flex gap-2\">\r\n          <Button variant=\"outline\" onClick={handleExport}>\r\n            <Download className=\"w-4 h-4 mr-2\" />\r\n            D─▒┼şa Aktar\r\n          </Button>\r\n          <Button variant=\"outline\">\r\n            <FileText className=\"w-4 h-4 mr-2\" />\r\n            Rapor Olu┼ştur\r\n          </Button>\r\n        </div>\r\n      }\r\n    >\r\n      <div className=\"p-6 space-y-6\">\r\n        {/* Stats Cards */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <div className=\"p-2 bg-blue-100 rounded-lg\">\r\n                  <List className=\"w-5 h-5 text-blue-600\" />\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-sm text-muted-foreground\">Toplam Yard─▒m</p>\r\n                  <p className=\"text-2xl font-bold\">{stats.total}</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <div className=\"p-2 bg-green-100 rounded-lg\">\r\n                  <Users className=\"w-5 h-5 text-green-600\" />\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-sm text-muted-foreground\">Teslim Edildi</p>\r\n                  <p className=\"text-2xl font-bold\">{stats.delivered}</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <div className=\"p-2 bg-purple-100 rounded-lg\">\r\n                  <TrendingUp className=\"w-5 h-5 text-purple-600\" />\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-sm text-muted-foreground\">Toplam Tutar</p>\r\n                  <p className=\"text-2xl font-bold\">Ôé║{stats.totalAmount.toLocaleString('tr-TR')}</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <div className=\"p-2 bg-orange-100 rounded-lg\">\r\n                  <Calendar className=\"w-5 h-5 text-orange-600\" />\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-sm text-muted-foreground\">Bu Ay</p>\r\n                  <p className=\"text-2xl font-bold\">\r\n                    Ôé║{stats.monthlyAmount.toLocaleString('tr-TR')}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Filters */}\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex flex-col md:flex-row gap-4\">\r\n              <div className=\"flex-1\">\r\n                <div className=\"relative\">\r\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\r\n                  <Input\r\n                    placeholder=\"─░htiya├ğ sahibinin ad─▒, TC kimlik, belge no veya a├ğ─▒klama ile ara...\"\r\n                    value={searchTerm}\r\n                    onChange={(e) => {\r\n                      setSearchTerm(e.target.value);\r\n                    }}\r\n                    className=\"pl-10\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"flex gap-2\">\r\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\r\n                  <SelectTrigger className=\"w-40\">\r\n                    <SelectValue placeholder=\"Durum\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"all\">T├╝m Durumlar</SelectItem>\r\n                    <SelectItem value=\"delivered\">Teslim Edildi</SelectItem>\r\n                    <SelectItem value=\"pending\">Beklemede</SelectItem>\r\n                    <SelectItem value=\"cancelled\">─░ptal Edildi</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n\r\n                <Select value={aidTypeFilter} onValueChange={setAidTypeFilter}>\r\n                  <SelectTrigger className=\"w-40\">\r\n                    <SelectValue placeholder=\"Yard─▒m T├╝r├╝\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"all\">T├╝m T├╝rler</SelectItem>\r\n                    <SelectItem value=\"Nakdi Yard─▒m\">Nakdi Yard─▒m</SelectItem>\r\n                    <SelectItem value=\"Ayni Yard─▒m\">Ayni Yard─▒m</SelectItem>\r\n                    <SelectItem value=\"Sa─şl─▒k Yard─▒m─▒\">Sa─şl─▒k Yard─▒m─▒</SelectItem>\r\n                    <SelectItem value=\"E─şitim Yard─▒m─▒\">E─şitim Yard─▒m─▒</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n\r\n                <Select value={dateRange} onValueChange={setDateRange}>\r\n                  <SelectTrigger className=\"w-40\">\r\n                    <SelectValue placeholder=\"Tarih Aral─▒─ş─▒\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"all\">T├╝m Zamanlar</SelectItem>\r\n                    <SelectItem value=\"today\">Bug├╝n</SelectItem>\r\n                    <SelectItem value=\"week\">Son 7 G├╝n</SelectItem>\r\n                    <SelectItem value=\"month\">Bu Ay</SelectItem>\r\n                    <SelectItem value=\"quarter\">Son 3 Ay</SelectItem>\r\n                    <SelectItem value=\"year\">Bu Y─▒l</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Aid Records Table */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <HandHeart className=\"w-5 h-5 text-blue-600\" />\r\n              Yard─▒m Kay─▒tlar─▒ ({filteredRecords.length} kay─▒t)\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"overflow-x-auto\">\r\n              <Table>\r\n                <TableHeader>\r\n                  <TableRow>\r\n                    <TableHead>Belge No</TableHead>\r\n                    <TableHead>─░htiya├ğ Sahibi</TableHead>\r\n                    <TableHead>Yard─▒m T├╝r├╝</TableHead>\r\n                    <TableHead>Kategori</TableHead>\r\n                    <TableHead>Tutar/A├ğ─▒klama</TableHead>\r\n                    <TableHead>Teslim Tarihi</TableHead>\r\n                    <TableHead>Durum</TableHead>\r\n                    <TableHead>Onaylayan</TableHead>\r\n                    <TableHead>─░┼şlemler</TableHead>\r\n                  </TableRow>\r\n                </TableHeader>\r\n                <TableBody>\r\n                  {filteredRecords.map((record) => (\r\n                    <TableRow key={record.id}>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <FileText className=\"w-4 h-4 text-gray-400\" />\r\n                          <span className=\"font-mono text-sm\">{record.documentNumber}</span>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div>\r\n                          <p className=\"font-medium\">{record.recipientName}</p>\r\n                          <p className=\"text-sm text-muted-foreground\">{record.recipientId}</p>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          {getAidTypeIcon(record.aidType)}\r\n                          <Badge variant=\"outline\">{record.aidType}</Badge>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <span className=\"text-sm\">{record.category}</span>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {record.amount > 0 ? (\r\n                          <div>\r\n                            <p className=\"font-medium\">Ôé║{record.amount.toLocaleString('tr-TR')}</p>\r\n                            <p className=\"text-sm text-muted-foreground\">{record.deliveryMethod}</p>\r\n                          </div>\r\n                        ) : (\r\n                          <div>\r\n                            <p className=\"text-sm\">{record.description}</p>\r\n                            <p className=\"text-xs text-muted-foreground\">{record.deliveryMethod}</p>\r\n                          </div>\r\n                        )}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <Calendar className=\"w-4 h-4 text-gray-400\" />\r\n                          {new Date(record.deliveryDate).toLocaleDateString('tr-TR')}\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>{getStatusBadge(record.status)}</TableCell>\r\n                      <TableCell>\r\n                        <span className=\"text-sm\">{record.approvedBy}</span>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <Button variant=\"ghost\" size=\"sm\">\r\n                            <Eye className=\"w-4 h-4\" />\r\n                          </Button>\r\n                          <Button variant=\"ghost\" size=\"sm\">\r\n                            <Edit className=\"w-4 h-4\" />\r\n                          </Button>\r\n                          <Button variant=\"ghost\" size=\"sm\">\r\n                            <Download className=\"w-4 h-4\" />\r\n                          </Button>\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </PageLayout>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\ApplicationWorkflowPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\AppointmentSchedulingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\BankPaymentOrdersPage.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":171,"column":20,"nodeType":"MemberExpression","endLine":171,"endColumn":40},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":184,"column":12,"nodeType":"MemberExpression","endLine":184,"endColumn":25},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":235,"column":22,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":235,"endColumn":44},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":238,"column":16,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":238,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview BankPaymentOrdersPage Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport {\r\n  Building2,\r\n  Calendar,\r\n  CheckCircle,\r\n  Clock,\r\n  CreditCard,\r\n  Download,\r\n  Eye,\r\n  FileText,\r\n  Plus,\r\n  Search,\r\n  Send,\r\n  XCircle,\r\n} from 'lucide-react';\r\nimport { useState } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { PageLayout } from '../PageLayout';\r\nimport { Badge } from '../ui/badge';\r\nimport { Button } from '../ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '../ui/dialog';\r\nimport { Input } from '../ui/input';\r\nimport { Label } from '../ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../ui/table';\r\nimport { Textarea } from '../ui/textarea';\r\n\r\ninterface PaymentOrder {\r\n  id: number;\r\n  orderNumber: string;\r\n  recipientName: string;\r\n  recipientId: string;\r\n  recipientIban: string;\r\n  recipientBank: string;\r\n  amount: number;\r\n  description: string;\r\n  aidType: string;\r\n  createdDate: string;\r\n  scheduledDate: string;\r\n  status: 'pending' | 'approved' | 'sent' | 'completed' | 'failed' | 'cancelled';\r\n  createdBy: string;\r\n  approvedBy?: string;\r\n  transactionId?: string;\r\n  failureReason?: string;\r\n}\r\n\r\nconst mockPaymentOrders: PaymentOrder[] = [\r\n  {\r\n    id: 1,\r\n    orderNumber: 'BPO-2024-001',\r\n    recipientName: 'Ay┼şe Y─▒lmaz',\r\n    recipientId: '12345678901',\r\n    recipientIban: 'TR320010009999901234567890',\r\n    recipientBank: 'T├╝rkiye ─░┼ş Bankas─▒',\r\n    amount: 2500,\r\n    description: 'Ocak ay─▒ kira yard─▒m─▒',\r\n    aidType: 'Kira Yard─▒m─▒',\r\n    createdDate: '2024-01-15 09:30',\r\n    scheduledDate: '2024-01-16',\r\n    status: 'approved',\r\n    createdBy: 'Mehmet Y├Ânetici',\r\n    approvedBy: 'Ay┼şe Muhasebe',\r\n  },\r\n  {\r\n    id: 2,\r\n    orderNumber: 'BPO-2024-002',\r\n    recipientName: 'Mehmet Demir',\r\n    recipientId: '98765432109',\r\n    recipientIban: 'TR450001234567890123456789',\r\n    recipientBank: 'Ziraat Bankas─▒',\r\n    amount: 1800,\r\n    description: 'Elektrik faturas─▒ yard─▒m─▒',\r\n    aidType: 'Fatura Yard─▒m─▒',\r\n    createdDate: '2024-01-15 14:20',\r\n    scheduledDate: '2024-01-17',\r\n    status: 'pending',\r\n    createdBy: 'Fatma Koordinat├Âr',\r\n  },\r\n  {\r\n    id: 3,\r\n    orderNumber: 'BPO-2024-003',\r\n    recipientName: 'Fatma Kaya',\r\n    recipientId: '11223344556',\r\n    recipientIban: 'TR330006701000000001234567',\r\n    recipientBank: 'Garanti BBVA',\r\n    amount: 3500,\r\n    description: 'Ameliyat masraf─▒ yard─▒m─▒',\r\n    aidType: 'Sa─şl─▒k Yard─▒m─▒',\r\n    createdDate: '2024-01-14 16:45',\r\n    scheduledDate: '2024-01-15',\r\n    status: 'sent',\r\n    createdBy: 'Hasan Mali M├╝┼şavir',\r\n    approvedBy: 'Mehmet Y├Ânetici',\r\n    transactionId: 'TXN20240115001',\r\n  },\r\n  {\r\n    id: 4,\r\n    orderNumber: 'BPO-2024-004',\r\n    recipientName: 'Ali ├ûzkan',\r\n    recipientId: '55667788990',\r\n    recipientIban: 'TR640004601234567890123456',\r\n    recipientBank: 'Akbank',\r\n    amount: 1500,\r\n    description: '├£niversite har├ğ yard─▒m─▒',\r\n    aidType: 'E─şitim Yard─▒m─▒',\r\n    createdDate: '2024-01-14 10:15',\r\n    scheduledDate: '2024-01-15',\r\n    status: 'completed',\r\n    createdBy: 'Ali G├Ân├╝ll├╝',\r\n    approvedBy: 'Ay┼şe Muhasebe',\r\n    transactionId: 'TXN20240115002',\r\n  },\r\n  {\r\n    id: 5,\r\n    orderNumber: 'BPO-2024-005',\r\n    recipientName: 'Zeynep Arslan',\r\n    recipientId: '99887766554',\r\n    recipientIban: 'TR560005001234567890123456',\r\n    recipientBank: 'T├╝rkiye Finans',\r\n    amount: 2200,\r\n    description: 'G─▒da ve temizlik yard─▒m─▒',\r\n    aidType: 'Nakdi Yard─▒m',\r\n    createdDate: '2024-01-13 11:30',\r\n    scheduledDate: '2024-01-14',\r\n    status: 'failed',\r\n    createdBy: 'Zeynep Sosyal Hizmet',\r\n    approvedBy: 'Fatma Koordinat├Âr',\r\n    failureReason: 'Ge├ğersiz IBAN',\r\n  },\r\n];\r\n\r\n/**\r\n * BankPaymentOrdersPage function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function BankPaymentOrdersPage() {\r\n  const [paymentOrders, setPaymentOrders] = useState<PaymentOrder[]>(mockPaymentOrders);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState<string>('all');\r\n  const [isNewOrderOpen, setIsNewOrderOpen] = useState(false);\r\n  const [newOrder, setNewOrder] = useState({\r\n    recipientName: '',\r\n    recipientId: '',\r\n    recipientIban: '',\r\n    recipientBank: '',\r\n    amount: '',\r\n    description: '',\r\n    aidType: '',\r\n    scheduledDate: '',\r\n  });\r\n\r\n  const getStatusBadge = (status: PaymentOrder['status']) => {\r\n    const statusConfig = {\r\n      pending: { label: 'Bekliyor', color: 'bg-yellow-100 text-yellow-800' },\r\n      approved: { label: 'Onayland─▒', color: 'bg-blue-100 text-blue-800' },\r\n      sent: { label: 'G├Ânderildi', color: 'bg-purple-100 text-purple-800' },\r\n      completed: { label: 'Tamamland─▒', color: 'bg-green-100 text-green-800' },\r\n      failed: { label: 'Ba┼şar─▒s─▒z', color: 'bg-red-100 text-red-800' },\r\n      cancelled: { label: '─░ptal Edildi', color: 'bg-gray-100 text-gray-800' },\r\n    };\r\n\r\n    const config = statusConfig[status];\r\n    return <Badge className={config.color}>{config.label}</Badge>;\r\n  };\r\n\r\n  const getStatusIcon = (status: PaymentOrder['status']) => {\r\n    const icons = {\r\n      pending: <Clock className=\"w-4 h-4 text-yellow-600\" />,\r\n      approved: <CheckCircle className=\"w-4 h-4 text-blue-600\" />,\r\n      sent: <Send className=\"w-4 h-4 text-purple-600\" />,\r\n      completed: <CheckCircle className=\"w-4 h-4 text-green-600\" />,\r\n      failed: <XCircle className=\"w-4 h-4 text-red-600\" />,\r\n      cancelled: <XCircle className=\"w-4 h-4 text-gray-600\" />,\r\n    };\r\n    return icons[status];\r\n  };\r\n\r\n  const filteredOrders = paymentOrders.filter((order) => {\r\n    const matchesSearch =\r\n      order.recipientName.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      order.recipientId.includes(searchTerm) ||\r\n      order.orderNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      order.description.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesStatus = statusFilter === 'all' || order.status === statusFilter;\r\n\r\n    return matchesSearch && matchesStatus;\r\n  });\r\n\r\n  const stats = {\r\n    total: paymentOrders.length,\r\n    pending: paymentOrders.filter((o) => o.status === 'pending').length,\r\n    approved: paymentOrders.filter((o) => o.status === 'approved').length,\r\n    sent: paymentOrders.filter((o) => o.status === 'sent').length,\r\n    completed: paymentOrders.filter((o) => o.status === 'completed').length,\r\n    failed: paymentOrders.filter((o) => o.status === 'failed').length,\r\n    totalAmount: paymentOrders\r\n      .filter((o) => ['completed', 'sent'].includes(o.status))\r\n      .reduce((sum, o) => sum + o.amount, 0),\r\n  };\r\n\r\n  const handleCreateOrder = () => {\r\n    if (\r\n      !newOrder.recipientName ||\r\n      !newOrder.recipientId ||\r\n      !newOrder.recipientIban ||\r\n      !newOrder.amount ||\r\n      !newOrder.description ||\r\n      !newOrder.scheduledDate\r\n    ) {\r\n      toast.error('L├╝tfen t├╝m alanlar─▒ doldurun');\r\n      return;\r\n    }\r\n\r\n    const amount = parseFloat(newOrder.amount);\r\n    if (amount <= 0) {\r\n      toast.error('Ge├ğerli bir tutar girin');\r\n      return;\r\n    }\r\n\r\n    const order: PaymentOrder = {\r\n      id: Date.now(),\r\n      orderNumber: `BPO-2024-${String(paymentOrders.length + 1).padStart(3, '0')}`,\r\n      recipientName: newOrder.recipientName,\r\n      recipientId: newOrder.recipientId,\r\n      recipientIban: newOrder.recipientIban,\r\n      recipientBank: newOrder.recipientBank ?? 'Belirtilmemi┼ş',\r\n      amount,\r\n      description: newOrder.description,\r\n      aidType: newOrder.aidType ?? 'Nakdi Yard─▒m',\r\n      createdDate: new Date().toISOString().slice(0, 16).replace('T', ' '),\r\n      scheduledDate: newOrder.scheduledDate,\r\n      status: 'pending',\r\n      createdBy: 'Admin Y├Âneticisi',\r\n    };\r\n\r\n    setPaymentOrders((prev) => [order, ...prev]);\r\n    setNewOrder({\r\n      recipientName: '',\r\n      recipientId: '',\r\n      recipientIban: '',\r\n      recipientBank: '',\r\n      amount: '',\r\n      description: '',\r\n      aidType: '',\r\n      scheduledDate: '',\r\n    });\r\n    setIsNewOrderOpen(false);\r\n    toast.success('├ûdeme emri ba┼şar─▒yla olu┼şturuldu');\r\n  };\r\n\r\n  const handleApprove = (id: number) => {\r\n    setPaymentOrders((prev) =>\r\n      prev.map((order) =>\r\n        order.id === id\r\n          ? { ...order, status: 'approved' as const, approvedBy: 'Admin Y├Âneticisi' }\r\n          : order,\r\n      ),\r\n    );\r\n    toast.success('├ûdeme emri onayland─▒');\r\n  };\r\n\r\n  const handleSend = (id: number) => {\r\n    setPaymentOrders((prev) =>\r\n      prev.map((order) =>\r\n        order.id === id\r\n          ? {\r\n              ...order,\r\n              status: 'sent' as const,\r\n              transactionId: `TXN${Date.now()}`,\r\n            }\r\n          : order,\r\n      ),\r\n    );\r\n    toast.success('├ûdeme emri bankaya g├Ânderildi');\r\n  };\r\n\r\n  return (\r\n    <PageLayout\r\n      title=\"Banka ├ûdeme Emirleri\"\r\n      subtitle=\"─░htiya├ğ sahiplerine banka havalesi ile yap─▒lacak yard─▒m ├Âdemelerini y├Ânetin\"\r\n      actions={\r\n        <Dialog open={isNewOrderOpen} onOpenChange={setIsNewOrderOpen}>\r\n          <DialogTrigger asChild>\r\n            <Button>\r\n              <Plus className=\"w-4 h-4 mr-2\" />\r\n              ─░htiya├ğ Sahibi ─░├ğin Yeni ├ûdeme Emri\r\n            </Button>\r\n          </DialogTrigger>\r\n          <DialogContent className=\"sm:max-w-lg\">\r\n            <DialogHeader>\r\n              <DialogTitle>Yeni ├ûdeme Emri Olu┼ştur</DialogTitle>\r\n            </DialogHeader>\r\n            <div className=\"space-y-4 max-h-96 overflow-y-auto\">\r\n              <div className=\"grid grid-cols-2 gap-4\">\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"recipient-name\">Al─▒c─▒ Ad─▒</Label>\r\n                  <Input\r\n                    id=\"recipient-name\"\r\n                    placeholder=\"Ad Soyad\"\r\n                    value={newOrder.recipientName}\r\n                    onChange={(e) => {\r\n                      setNewOrder((prev) => ({ ...prev, recipientName: e.target.value }));\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"recipient-id\">TC Kimlik No</Label>\r\n                  <Input\r\n                    id=\"recipient-id\"\r\n                    placeholder=\"12345678901\"\r\n                    value={newOrder.recipientId}\r\n                    onChange={(e) => {\r\n                      setNewOrder((prev) => ({ ...prev, recipientId: e.target.value }));\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"recipient-iban\">IBAN</Label>\r\n                <Input\r\n                  id=\"recipient-iban\"\r\n                  placeholder=\"TR000000000000000000000000\"\r\n                  value={newOrder.recipientIban}\r\n                  onChange={(e) => {\r\n                    setNewOrder((prev) => ({ ...prev, recipientIban: e.target.value }));\r\n                  }}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"recipient-bank\">Banka Ad─▒</Label>\r\n                <Input\r\n                  id=\"recipient-bank\"\r\n                  placeholder=\"Banka ad─▒ (opsiyonel)\"\r\n                  value={newOrder.recipientBank}\r\n                  onChange={(e) => {\r\n                    setNewOrder((prev) => ({ ...prev, recipientBank: e.target.value }));\r\n                  }}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-2 gap-4\">\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"amount\">Tutar (TL)</Label>\r\n                  <Input\r\n                    id=\"amount\"\r\n                    type=\"number\"\r\n                    placeholder=\"0.00\"\r\n                    value={newOrder.amount}\r\n                    onChange={(e) => {\r\n                      setNewOrder((prev) => ({ ...prev, amount: e.target.value }));\r\n                    }}\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"scheduled-date\">├ûdeme Tarihi</Label>\r\n                  <Input\r\n                    id=\"scheduled-date\"\r\n                    type=\"date\"\r\n                    value={newOrder.scheduledDate}\r\n                    onChange={(e) => {\r\n                      setNewOrder((prev) => ({ ...prev, scheduledDate: e.target.value }));\r\n                    }}\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"aid-type\">Yard─▒m T├╝r├╝</Label>\r\n                <Select\r\n                  value={newOrder.aidType}\r\n                  onValueChange={(value) => {\r\n                    setNewOrder((prev) => ({ ...prev, aidType: value }));\r\n                  }}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue placeholder=\"Yard─▒m t├╝r├╝ se├ğin\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"Kira Yard─▒m─▒\">Kira Yard─▒m─▒</SelectItem>\r\n                    <SelectItem value=\"Fatura Yard─▒m─▒\">Fatura Yard─▒m─▒</SelectItem>\r\n                    <SelectItem value=\"Sa─şl─▒k Yard─▒m─▒\">Sa─şl─▒k Yard─▒m─▒</SelectItem>\r\n                    <SelectItem value=\"E─şitim Yard─▒m─▒\">E─şitim Yard─▒m─▒</SelectItem>\r\n                    <SelectItem value=\"Nakdi Yard─▒m\">Nakdi Yard─▒m</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"description\">A├ğ─▒klama</Label>\r\n                <Textarea\r\n                  id=\"description\"\r\n                  placeholder=\"├ûdeme a├ğ─▒klamas─▒...\"\r\n                  value={newOrder.description}\r\n                  onChange={(e) => {\r\n                    setNewOrder((prev) => ({ ...prev, description: e.target.value }));\r\n                  }}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"flex justify-end gap-2\">\r\n                <Button\r\n                  variant=\"outline\"\r\n                  onClick={() => {\r\n                    setIsNewOrderOpen(false);\r\n                  }}\r\n                >\r\n                  ─░ptal\r\n                </Button>\r\n                <Button onClick={handleCreateOrder}>├ûdeme Emri Olu┼ştur</Button>\r\n              </div>\r\n            </div>\r\n          </DialogContent>\r\n        </Dialog>\r\n      }\r\n    >\r\n      <div className=\"p-6 space-y-6\">\r\n        {/* Stats Cards */}\r\n        <div className=\"grid grid-cols-2 md:grid-cols-4 lg:grid-cols-6 gap-4\">\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <div className=\"p-2 bg-blue-100 rounded-lg\">\r\n                  <FileText className=\"w-5 h-5 text-blue-600\" />\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-xs text-muted-foreground\">Toplam</p>\r\n                  <p className=\"text-xl font-bold\">{stats.total}</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <div className=\"p-2 bg-yellow-100 rounded-lg\">\r\n                  <Clock className=\"w-5 h-5 text-yellow-600\" />\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-xs text-muted-foreground\">Bekliyor</p>\r\n                  <p className=\"text-xl font-bold\">{stats.pending}</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <div className=\"p-2 bg-blue-100 rounded-lg\">\r\n                  <CheckCircle className=\"w-5 h-5 text-blue-600\" />\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-xs text-muted-foreground\">Onayl─▒</p>\r\n                  <p className=\"text-xl font-bold\">{stats.approved}</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <div className=\"p-2 bg-purple-100 rounded-lg\">\r\n                  <Send className=\"w-5 h-5 text-purple-600\" />\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-xs text-muted-foreground\">G├Ânderildi</p>\r\n                  <p className=\"text-xl font-bold\">{stats.sent}</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <div className=\"p-2 bg-green-100 rounded-lg\">\r\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-xs text-muted-foreground\">Tamamland─▒</p>\r\n                  <p className=\"text-xl font-bold\">{stats.completed}</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <div className=\"p-2 bg-orange-100 rounded-lg\">\r\n                  <CreditCard className=\"w-5 h-5 text-orange-600\" />\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-xs text-muted-foreground\">Toplam Tutar</p>\r\n                  <p className=\"text-lg font-bold\">Ôé║{stats.totalAmount.toLocaleString('tr-TR')}</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Filters */}\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex flex-col md:flex-row gap-4\">\r\n              <div className=\"flex-1\">\r\n                <div className=\"relative\">\r\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\r\n                  <Input\r\n                    placeholder=\"─░htiya├ğ sahibinin ad─▒, TC kimlik, emir no veya a├ğ─▒klama ile ara...\"\r\n                    value={searchTerm}\r\n                    onChange={(e) => {\r\n                      setSearchTerm(e.target.value);\r\n                    }}\r\n                    className=\"pl-10\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"flex gap-2\">\r\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\r\n                  <SelectTrigger className=\"w-40\">\r\n                    <SelectValue placeholder=\"Durum\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"all\">T├╝m Durumlar</SelectItem>\r\n                    <SelectItem value=\"pending\">Bekliyor</SelectItem>\r\n                    <SelectItem value=\"approved\">Onayland─▒</SelectItem>\r\n                    <SelectItem value=\"sent\">G├Ânderildi</SelectItem>\r\n                    <SelectItem value=\"completed\">Tamamland─▒</SelectItem>\r\n                    <SelectItem value=\"failed\">Ba┼şar─▒s─▒z</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Payment Orders Table */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Building2 className=\"w-5 h-5 text-blue-600\" />\r\n              ├ûdeme Emirleri ({filteredOrders.length} emir)\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"overflow-x-auto\">\r\n              <Table>\r\n                <TableHeader>\r\n                  <TableRow>\r\n                    <TableHead>Emir No</TableHead>\r\n                    <TableHead>─░htiya├ğ Sahibi Bilgileri</TableHead>\r\n                    <TableHead>Banka/IBAN</TableHead>\r\n                    <TableHead>Tutar</TableHead>\r\n                    <TableHead>├ûdeme Tarihi</TableHead>\r\n                    <TableHead>Durum</TableHead>\r\n                    <TableHead>Olu┼şturan</TableHead>\r\n                    <TableHead>─░┼şlemler</TableHead>\r\n                  </TableRow>\r\n                </TableHeader>\r\n                <TableBody>\r\n                  {filteredOrders.map((order) => (\r\n                    <TableRow key={order.id}>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <FileText className=\"w-4 h-4 text-gray-400\" />\r\n                          <span className=\"font-mono text-sm\">{order.orderNumber}</span>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div>\r\n                          <p className=\"font-medium\">{order.recipientName}</p>\r\n                          <p className=\"text-sm text-muted-foreground\">{order.recipientId}</p>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div>\r\n                          <p className=\"text-sm font-medium\">{order.recipientBank}</p>\r\n                          <p className=\"text-xs text-muted-foreground font-mono\">\r\n                            {order.recipientIban.slice(0, 8)}...{order.recipientIban.slice(-4)}\r\n                          </p>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div>\r\n                          <p className=\"font-medium\">Ôé║{order.amount.toLocaleString('tr-TR')}</p>\r\n                          <p className=\"text-xs text-muted-foreground\">{order.aidType}</p>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <Calendar className=\"w-4 h-4 text-gray-400\" />\r\n                          {new Date(order.scheduledDate).toLocaleDateString('tr-TR')}\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          {getStatusIcon(order.status)}\r\n                          {getStatusBadge(order.status)}\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <span className=\"text-sm\">{order.createdBy}</span>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <Button variant=\"ghost\" size=\"sm\">\r\n                            <Eye className=\"w-4 h-4\" />\r\n                          </Button>\r\n                          {order.status === 'pending' && (\r\n                            <Button\r\n                              variant=\"ghost\"\r\n                              size=\"sm\"\r\n                              onClick={() => {\r\n                                handleApprove(order.id);\r\n                              }}\r\n                              className=\"text-blue-600 hover:text-blue-700\"\r\n                            >\r\n                              <CheckCircle className=\"w-4 h-4\" />\r\n                            </Button>\r\n                          )}\r\n                          {order.status === 'approved' && (\r\n                            <Button\r\n                              variant=\"ghost\"\r\n                              size=\"sm\"\r\n                              onClick={() => {\r\n                                handleSend(order.id);\r\n                              }}\r\n                              className=\"text-purple-600 hover:text-purple-700\"\r\n                            >\r\n                              <Send className=\"w-4 h-4\" />\r\n                            </Button>\r\n                          )}\r\n                          <Button variant=\"ghost\" size=\"sm\">\r\n                            <Download className=\"w-4 h-4\" />\r\n                          </Button>\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </PageLayout>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\BeneficiariesPageEnhanced.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'totalCount' is assigned a value but never used.","line":120,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":120,"endColumn":20},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'totalCount' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":120,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":120,"endColumn":20},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":167,"column":21,"nodeType":"CallExpression","messageId":"neverNullish","endLine":167,"endColumn":38},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":184,"column":32,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":184,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":184,"column":77,"nodeType":null,"messageId":"unusedVar","endLine":184,"endColumn":82},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":184,"column":77,"nodeType":null,"messageId":"unusedVar","endLine":184,"endColumn":82},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":215,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":215,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7379,7382],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7379,7382],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":227,"column":30,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":227,"endColumn":43},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":260,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":260,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9020,9022],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":263,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":263,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9129,9131],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":293,"column":11,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":293,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":296,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":296,"endColumn":19},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":296,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":296,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getStatusBadge' is assigned a value but never used.","line":335,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":335,"endColumn":23},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'getStatusBadge' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":335,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":335,"endColumn":23},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":337,"column":7,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":337,"endColumn":58},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":343,"column":27,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":343,"endColumn":46},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":343,"column":39,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":343,"endColumn":41,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[11390,11392],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":352,"column":15,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":352,"endColumn":34},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":352,"column":27,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":352,"endColumn":29,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[11708,11710],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":355,"column":10,"nodeType":"ChainExpression","messageId":"alwaysTruthy","endLine":355,"endColumn":28},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":355,"column":22,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":355,"endColumn":24,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[11764,11766],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":379,"column":20,"nodeType":"CallExpression","messageId":"neverNullish","endLine":379,"endColumn":51},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":380,"column":21,"nodeType":"CallExpression","messageId":"neverNullish","endLine":380,"endColumn":53},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":381,"column":16,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":381,"endColumn":44},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":381,"column":36,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":381,"endColumn":38,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[12465,12467],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":382,"column":16,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":382,"endColumn":44},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":382,"column":36,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":382,"endColumn":38,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[12519,12521],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":383,"column":17,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":383,"endColumn":46},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":383,"column":38,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":383,"endColumn":40,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[12575,12577],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":384,"column":16,"nodeType":"CallExpression","messageId":"neverNullish","endLine":384,"endColumn":43},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":385,"column":19,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":385,"endColumn":50},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":385,"column":42,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":385,"endColumn":44,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[12688,12690],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":386,"column":14,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":386,"endColumn":40},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":386,"column":32,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":386,"endColumn":34,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[12738,12740],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":387,"column":15,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":387,"endColumn":42},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":387,"column":34,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":387,"endColumn":36,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[12790,12792],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":393,"column":25,"nodeType":"Identifier","messageId":"neverNullish","endLine":393,"endColumn":30},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":670,"column":73,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":670,"endColumn":84},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":681,"column":74,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":681,"endColumn":86},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":693,"column":24,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":693,"endColumn":45},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":706,"column":24,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":706,"endColumn":47},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":719,"column":26,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":719,"endColumn":46},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":819,"column":44,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[32625,32742],"text":"\r\n                            ─░lk kay─▒t i├ğin &quot;Yeni ─░htiya├ğ Sahibi Ekle\" butonunu kullan─▒n\r\n                          "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[32625,32742],"text":"\r\n                            ─░lk kay─▒t i├ğin &ldquo;Yeni ─░htiya├ğ Sahibi Ekle\" butonunu kullan─▒n\r\n                          "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[32625,32742],"text":"\r\n                            ─░lk kay─▒t i├ğin &#34;Yeni ─░htiya├ğ Sahibi Ekle\" butonunu kullan─▒n\r\n                          "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[32625,32742],"text":"\r\n                            ─░lk kay─▒t i├ğin &rdquo;Yeni ─░htiya├ğ Sahibi Ekle\" butonunu kullan─▒n\r\n                          "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":819,"column":69,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[32625,32742],"text":"\r\n                            ─░lk kay─▒t i├ğin \"Yeni ─░htiya├ğ Sahibi Ekle&quot; butonunu kullan─▒n\r\n                          "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[32625,32742],"text":"\r\n                            ─░lk kay─▒t i├ğin \"Yeni ─░htiya├ğ Sahibi Ekle&ldquo; butonunu kullan─▒n\r\n                          "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[32625,32742],"text":"\r\n                            ─░lk kay─▒t i├ğin \"Yeni ─░htiya├ğ Sahibi Ekle&#34; butonunu kullan─▒n\r\n                          "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[32625,32742],"text":"\r\n                            ─░lk kay─▒t i├ğin \"Yeni ─░htiya├ğ Sahibi Ekle&rdquo; butonunu kullan─▒n\r\n                          "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'index' is defined but never used.","line":824,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":824,"endColumn":60},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'index' is defined but never used. Allowed unused args must match /^_/u.","line":824,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":824,"endColumn":60}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview BeneficiariesPageEnhanced Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport {\r\n  AlertCircle,\r\n  CheckCircle,\r\n  Clock,\r\n  Download,\r\n  Loader2,\r\n  Search,\r\n  TrendingUp,\r\n  UserPlus,\r\n  Users,\r\n} from 'lucide-react';\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { useSupabaseAuth } from '../../contexts/SupabaseAuthContext';\r\nimport {\r\n  ihtiyacSahipleriService,\r\n  type IhtiyacSahibi,\r\n} from '../../services/ihtiyacSahipleriService';\r\nimport { PageLoading } from '../LoadingSpinner';\r\n// OCR Scanner removed\r\nimport { PageLayout } from '../PageLayout';\r\nimport { NewCategoryNotification } from '../notifications/NewCategoryNotification';\r\nimport { Badge } from '../ui/badge';\r\nimport { Button } from '../ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogTrigger,\r\n} from '../ui/dialog';\r\nimport { Input } from '../ui/input';\r\nimport { Label } from '../ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../ui/table';\r\n\r\nimport { logger } from '../../lib/logging/logger';\r\n// ─░htiya├ğ sahipleri i├ğin display tipi\r\ninterface IhtiyacSahibiDisplay extends IhtiyacSahibi {\r\n  display_id?: number; // 1'den ba┼şlayan s─▒ral─▒ ID\r\n  formatted_phone?: string;\r\n  formatted_registration_date?: string;\r\n  status?: 'active' | 'passive' | 'suspended' | 'under_evaluation';\r\n  priority_level?: 'low' | 'medium' | 'high';\r\n}\r\n\r\n// Status mapping for beneficiaries\r\nconst statusMapping = {\r\n  active: {\r\n    label: 'Aktif',\r\n    key: 'active',\r\n    className: 'bg-green-100 text-green-800 border-green-200',\r\n  },\r\n  inactive: {\r\n    label: 'Pasif',\r\n    key: 'inactive',\r\n    className: 'bg-red-100 text-red-800 border-red-200',\r\n  },\r\n  passive: { label: 'Pasif', key: 'passive', className: 'bg-red-100 text-red-800 border-red-200' },\r\n  suspended: {\r\n    label: 'Ask─▒da',\r\n    key: 'suspended',\r\n    className: 'bg-yellow-100 text-yellow-800 border-yellow-200',\r\n  },\r\n  under_evaluation: {\r\n    label: 'De─şerlendirmede',\r\n    key: 'under_evaluation',\r\n    className: 'bg-orange-100 text-orange-800 border-orange-200',\r\n  },\r\n  archived: {\r\n    label: 'Ar┼şivlendi',\r\n    key: 'archived',\r\n    className: 'bg-gray-100 text-gray-800 border-gray-200',\r\n  },\r\n} as const;\r\n\r\n// Category mapping for beneficiaries - Yeni yap─▒\r\nconst categoryMapping = {\r\n  g─▒da: { label: 'G─▒da Yard─▒m─▒', icon: '­şı¢´©Å', color: 'bg-orange-100 text-orange-800' },\r\n  nakdi: { label: 'Nakdi Yard─▒m', icon: '­şÆ░', color: 'bg-green-100 text-green-800' },\r\n  e─şitim: { label: 'E─şitim Deste─şi', icon: '­şôÜ', color: 'bg-blue-100 text-blue-800' },\r\n  sa─şl─▒k: { label: 'Sa─şl─▒k Yard─▒m─▒', icon: '­şÅÑ', color: 'bg-red-100 text-red-800' },\r\n  bar─▒nma: { label: 'Bar─▒nma Deste─şi', icon: '­şÅá', color: 'bg-purple-100 text-purple-800' },\r\n  giyim: { label: 'Giyim Yard─▒m─▒', icon: '­şæò', color: 'bg-pink-100 text-pink-800' },\r\n  di─şer: { label: 'Di─şer Yard─▒m', icon: '­şôĞ', color: 'bg-gray-100 text-gray-800' },\r\n} as const;\r\n\r\n// Aid type mapping removed - not used in current implementation\r\n\r\ninterface BeneficiariesPageProps {\r\n  onNavigateToDetail?: (beneficiaryId: string) => void;\r\n}\r\n\r\n/**\r\n * BeneficiariesPageEnhanced function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function BeneficiariesPageEnhanced({ onNavigateToDetail }: BeneficiariesPageProps) {\r\n  // Get authenticated user\r\n  const { user, isAuthenticated } = useSupabaseAuth();\r\n  const [loading, setLoading] = useState(true);\r\n  const [saving, setSaving] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState('all');\r\n  const [cityFilter, setCityFilter] = useState('all');\r\n  const [sortBy, setSortBy] = useState('name-asc');\r\n  const [beneficiaries, setBeneficiaries] = useState<IhtiyacSahibiDisplay[]>([]);\r\n  const [cities, setCities] = useState<string[]>([]);\r\n  const [totalCount, setTotalCount] = useState(0);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [pageSize] = useState(10);\r\n  const [showCreateModal, setShowCreateModal] = useState(false);\r\n  // OCR Scanner removed\r\n  const [stats, setStats] = useState({\r\n    total: 0,\r\n    active: 0,\r\n    passive: 0,\r\n    suspended: 0,\r\n    underEvaluation: 0,\r\n    totalAidAmount: 0,\r\n    bakimYukumluCount: 0,\r\n  });\r\n  const [newBeneficiary, setNewBeneficiary] = useState<{\r\n    ad_soyad: string;\r\n    kimlik_no: string;\r\n    telefon_no: string;\r\n    sehri: string;\r\n    uyruk: string;\r\n    ulkesi: string;\r\n    adres: string;\r\n    kategori: string;\r\n    tur: string;\r\n    iban: string;\r\n  }>({\r\n    ad_soyad: '',\r\n    kimlik_no: '',\r\n    telefon_no: '',\r\n    sehri: '',\r\n    uyruk: '',\r\n    ulkesi: '',\r\n    adres: '',\r\n    kategori: '',\r\n    tur: '',\r\n    iban: '',\r\n  });\r\n\r\n  // Load beneficiaries data with enhanced error handling\r\n  const loadBeneficiaries = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      const filters = {\r\n        status: statusFilter !== 'all' ? statusFilter : undefined,\r\n        city: cityFilter !== 'all' ? cityFilter : undefined,\r\n        // Note: category filter removed as it's not in the database schema\r\n        searchTerm: searchTerm.trim() ?? undefined,\r\n      };\r\n\r\n      const result = await ihtiyacSahipleriService.getIhtiyacSahipleri(currentPage, pageSize, {\r\n        searchTerm: filters.searchTerm,\r\n        sehir: filters.city,\r\n        sortBy,\r\n      });\r\n\r\n      if (result.error) {\r\n        logger.error('ÔØî Service returned error:', result.error);\r\n        setBeneficiaries([]);\r\n        setTotalCount(0);\r\n        return;\r\n      }\r\n\r\n      // Transform data to include display fields with proper fallbacks\r\n      const transformedData = (result.data || []).map((item: IhtiyacSahibi, index: number) => ({\r\n        ...item,\r\n        // Migration sonras─▒ ger├ğek ID'ler 1'den ba┼şlayacak, display_id gerekli de─şil\r\n        display_id: item.id, // Ger├ğek ID'yi kullan\r\n        \r\n        // Phone formatting with multiple fallbacks\r\n        formatted_phone: item.telefon_no ?? item.Telefon_No ?? 'Telefon bilgisi yok',\r\n        \r\n        // Registration date with proper formatting\r\n        formatted_registration_date: item.kayit_tarihi ?? item.Kayit_Tarihi ?? new Date().toISOString().split('T')[0],\r\n        \r\n        // Name with fallback\r\n        ad_soyad: item.ad_soyad ?? 'Ad Soyad bilgisi yok',\r\n        \r\n        // Identity number with fallback\r\n        kimlik_no: item.kimlik_no ?? item.Kimlik_No ?? 'TC No bilgisi yok',\r\n        \r\n        // City with fallback\r\n        sehri: item.sehri ?? '┼Şehir bilgisi yok',\r\n        \r\n        // Address with fallback\r\n        adres: item.adres ?? item.Adres ?? 'Adres bilgisi yok',\r\n        \r\n        // Category and type with fallbacks\r\n        kategori: item.kategori ?? item.Kategori ?? 'Kategori belirtilmemi┼ş',\r\n        tur: item.tur ?? item.Tur ?? 'T├╝r belirtilmemi┼ş',\r\n        \r\n        // IBAN with fallback\r\n        iban: item.iban ?? 'IBAN bilgisi yok',\r\n        \r\n        // Status and priority with defaults\r\n        status: (item.status as any) ?? 'active' as const,\r\n        priority_level: 'medium' as const,\r\n      }));\r\n\r\n      setBeneficiaries(transformedData);\r\n      setTotalCount(result.count ?? 0);\r\n    } catch (error) {\r\n      logger.error('Error loading beneficiaries:', error);\r\n      setBeneficiaries([]);\r\n      setTotalCount(0);\r\n\r\n      if (error instanceof Error) {\r\n        const errorMessage = error.message ?? 'Database hatas─▒';\r\n\r\n        if (error.message.includes('JWT expired')) {\r\n          toast.error('Oturum s├╝resi doldu. L├╝tfen bekleyin, sayfa yenileniyor...', {\r\n            duration: 3000,\r\n          });\r\n        } else if (error.message.includes('does not exist') || !error.message) {\r\n          toast.info('Database hen├╝z haz─▒rlan─▒yor', {\r\n            description: 'Tablolar olu┼şturuldu─şunda veriler g├Âr├╝necektir',\r\n            duration: 4000,\r\n          });\r\n        } else if (error.message.includes('permission denied')) {\r\n          toast.error('Bu i┼şlem i├ğin yetkiniz bulunmuyor', {\r\n            duration: 4000,\r\n          });\r\n        } else {\r\n          toast.error('─░htiya├ğ sahipleri y├╝klenirken hata olu┼ştu', {\r\n            description: errorMessage,\r\n            duration: 5000,\r\n          });\r\n        }\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [currentPage, pageSize, statusFilter, cityFilter, searchTerm, sortBy]);\r\n\r\n  // Load stats computed from already loaded beneficiaries to avoid extra network calls\r\n  const loadStats = useCallback(async () => {\r\n    try {\r\n      const data = Array.isArray(beneficiaries) ? beneficiaries : [];\r\n\r\n      const bakimYukumluCount = data\r\n        .map((item) => (item.tur || '').toString())\r\n        .filter(\r\n          (key) =>\r\n            key.toLowerCase().includes('bakmakla') || key.toLowerCase().includes('y├╝k├╝ml├╝'),\r\n        ).length;\r\n\r\n      setStats({\r\n        total: data.length,\r\n        active: data.length, // Varsay─▒lan: hepsi aktif\r\n        passive: 0,\r\n        suspended: 0,\r\n        underEvaluation: 0,\r\n        totalAidAmount: 0, // Bu veri tabloda yok\r\n        bakimYukumluCount,\r\n      });\r\n    } catch (error) {\r\n      logger.error('Stats loading failed:', error);\r\n      setStats({\r\n        total: 0,\r\n        active: 0,\r\n        passive: 0,\r\n        suspended: 0,\r\n        underEvaluation: 0,\r\n        totalAidAmount: 0,\r\n        bakimYukumluCount: 0,\r\n      });\r\n    }\r\n  }, [beneficiaries]);\r\n\r\n  // Load cities for filter\r\n  const loadCities = useCallback(async () => {\r\n    try {\r\n      const result = await ihtiyacSahipleriService.getSehirler();\r\n      if (result.data) {\r\n        setCities(result.data);\r\n      }\r\n    } catch (error) {\r\n      // Error loading cities - handle gracefully\r\n    }\r\n  }, []);\r\n\r\n  // Test Supabase connection first\r\n  useEffect(() => {\r\n    const testConnection = async () => {\r\n      const result = await ihtiyacSahipleriService.testConnection();\r\n      logger.info('­şöù Connection test result:', result);\r\n    };\r\n    testConnection();\r\n  }, []);\r\n\r\n  // Initial load\r\n  useEffect(() => {\r\n    loadBeneficiaries();\r\n    loadCities();\r\n  }, [loadBeneficiaries, loadCities]);\r\n\r\n  // Load stats after beneficiaries are loaded\r\n  useEffect(() => {\r\n    if (beneficiaries.length > 0) {\r\n      loadStats();\r\n    }\r\n  }, [beneficiaries, loadStats]);\r\n\r\n  // Reload on filter changes with debounce\r\n  useEffect(() => {\r\n    const timeoutId = setTimeout(() => {\r\n      setCurrentPage(1);\r\n      loadBeneficiaries();\r\n    }, 300);\r\n\r\n    return () => {\r\n      clearTimeout(timeoutId);\r\n    };\r\n  }, [searchTerm, statusFilter, cityFilter, sortBy, loadBeneficiaries]);\r\n\r\n  const getStatusBadge = (status: string) => {\r\n    const statusInfo =\r\n      statusMapping[status as keyof typeof statusMapping] || statusMapping.inactive;\r\n    return <Badge className={statusInfo.className}>{statusInfo.label}</Badge>;\r\n  };\r\n\r\n  const getCategoryBadge = (category: string) => {\r\n    const categoryInfo = categoryMapping[category as keyof typeof categoryMapping];\r\n    const categoryLabel = categoryInfo?.label ?? category;\r\n    const isNewCategory = category === 'Bakmakla Y├╝k├╝ml├╝ Olunan Ki┼şi';\r\n\r\n    return (\r\n      <Badge\r\n        variant={isNewCategory ? 'default' : 'outline'}\r\n        className={\r\n          isNewCategory\r\n            ? 'bg-purple-100 text-purple-800 border-purple-200'\r\n            : categoryInfo?.color ?? ''\r\n        }\r\n      >\r\n        {categoryInfo?.icon && `${categoryInfo.icon} `}\r\n        {categoryLabel}\r\n      </Badge>\r\n    );\r\n  };\r\n\r\n  const handleCreateBeneficiary = async () => {\r\n    // Authentication check\r\n    if (!isAuthenticated || !user?.id) {\r\n      toast.error('L├╝tfen ├Ânce giri┼ş yap─▒n');\r\n      return;\r\n    }\r\n\r\n    // Form validation\r\n    if (!newBeneficiary.ad_soyad.trim()) {\r\n      toast.error('Ad soyad zorunludur');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setSaving(true);\r\n\r\n      const ihtiyacSahibiData = {\r\n        ad_soyad: newBeneficiary.ad_soyad.trim(),\r\n        kimlik_no: newBeneficiary.kimlik_no.trim() ?? null,\r\n        telefon_no: newBeneficiary.telefon_no.trim() ?? null,\r\n        sehri: newBeneficiary.sehri?.trim() ?? null,\r\n        uyruk: newBeneficiary.uyruk?.trim() ?? null,\r\n        ulkesi: newBeneficiary.ulkesi?.trim() ?? null,\r\n        adres: newBeneficiary.adres.trim() ?? null,\r\n        kategori: newBeneficiary.kategori?.trim() ?? null,\r\n        tur: newBeneficiary.tur?.trim() ?? null,\r\n        iban: newBeneficiary.iban?.trim() ?? null,\r\n      };\r\n\r\n      const { data, error } = await ihtiyacSahipleriService.createIhtiyacSahibi(ihtiyacSahibiData);\r\n\r\n      if (error || !data) {\r\n        throw new Error(error ?? 'Kay─▒t olu┼şturulamad─▒');\r\n      }\r\n\r\n      toast.success(`${data.ad_soyad} ba┼şar─▒yla kaydedildi!`, {\r\n        description: 'Liste yenileniyor...',\r\n        duration: 2000,\r\n      });\r\n\r\n      // Close modal first\r\n      setShowCreateModal(false);\r\n\r\n      // Reset form\r\n      setNewBeneficiary({\r\n        ad_soyad: '',\r\n        kimlik_no: '',\r\n        telefon_no: '',\r\n        sehri: '',\r\n        uyruk: '',\r\n        ulkesi: '',\r\n        adres: '',\r\n        kategori: '',\r\n        tur: '',\r\n        iban: '',\r\n      });\r\n\r\n      // Navigate to detail page immediately after successful save\r\n      if (onNavigateToDetail && data.id) {\r\n        onNavigateToDetail(String(data.id));\r\n      }\r\n\r\n      // Reload data in background\r\n      await loadBeneficiaries();\r\n      await loadStats();\r\n    } catch (error) {\r\n      logger.error('ÔØî Error creating beneficiary:', error);\r\n      const errorMessage =\r\n        error instanceof Error ? error.message : 'Kay─▒t s─▒ras─▒nda bir hata olu┼ştu';\r\n      toast.error(errorMessage);\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  // OCR Scanner removed\r\n\r\n  if (loading && beneficiaries.length === 0) {\r\n    return <PageLoading />;\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <PageLayout\r\n        title=\"─░htiya├ğ Sahipleri\"\r\n        subtitle=\"Dernek yard─▒mlar─▒ndan faydalanan ki┼şileri y├Ânetin\"\r\n        className=\"min-h-screen\"\r\n        actions={\r\n          <div className=\"flex gap-3 flex-wrap items-center justify-end w-full sm:w-auto p-2 sm:p-0\">\r\n            {/* Export Button */}\r\n            <Button\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              className=\"min-h-[44px] px-4 border-gray-300 hover:border-gray-400 order-2 sm:order-1 professional-card hover:shadow-md transition-shadow\"\r\n            >\r\n              <Download className=\"w-4 h-4 mr-2\" />\r\n              <span className=\"hidden sm:inline\">D─▒┼şa Aktar</span>\r\n              <span className=\"sm:hidden\">D─▒┼şa Aktar</span>\r\n            </Button>\r\n\r\n            {/* Primary Add Button - Enhanced */}\r\n            <Dialog open={showCreateModal} onOpenChange={setShowCreateModal}>\r\n              <DialogTrigger asChild>\r\n                <Button\r\n                  size=\"sm\"\r\n                  className=\"min-h-[44px] px-6 py-3 corporate-gradient text-white border-0 shadow-lg hover:shadow-xl transition-all duration-300 order-1 sm:order-2 flex-shrink-0 micro-interaction\"\r\n                  type=\"button\"\r\n                  data-testid=\"new-beneficiary-btn\"\r\n                  aria-label=\"Yeni ─░htiya├ğ Sahibi Ekle\"\r\n                >\r\n                  <UserPlus className=\"w-5 h-5 mr-2 flex-shrink-0\" />\r\n                  <span className=\"hidden sm:inline whitespace-nowrap\">\r\n                    Yeni ─░htiya├ğ Sahibi Ekle\r\n                  </span>\r\n                  <span className=\"sm:hidden\">Yeni Ekle</span>\r\n                </Button>\r\n              </DialogTrigger>\r\n              <DialogContent\r\n                className=\"sm:max-w-lg max-w-[95vw] max-h-[90vh] overflow-y-auto professional-card\"\r\n                aria-describedby=\"dialog-description\"\r\n              >\r\n                <DialogHeader className=\"pb-4\">\r\n                  <DialogTitle className=\"flex items-center gap-2\">\r\n                    <UserPlus className=\"w-6 h-6 text-primary\" />\r\n                    Yeni ─░htiya├ğ Sahibi Kayd─▒\r\n                  </DialogTitle>\r\n                  <DialogDescription id=\"dialog-description\" className=\"text-muted-foreground mt-1\">\r\n                    ─░htiya├ğ sahibi ki┼şinin bilgilerini dernek ├ğal─▒┼şan─▒ olarak sisteme kaydedin. T├╝m\r\n                    zorunlu alanlar─▒ (*) doldurman─▒z gereklidir.\r\n                  </DialogDescription>\r\n                </DialogHeader>\r\n\r\n                <div className=\"space-y-4 py-4\">\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"ad_soyad\">Ad Soyad *</Label>\r\n                    <Input\r\n                      id=\"ad_soyad\"\r\n                      value={newBeneficiary.ad_soyad}\r\n                      onChange={(e) => {\r\n                        setNewBeneficiary({ ...newBeneficiary, ad_soyad: e.target.value });\r\n                      }}\r\n                      placeholder=\"─░htiya├ğ sahibinin tam ad─▒n─▒ giriniz\"\r\n                      className=\"min-h-[44px] focus-corporate\"\r\n                      disabled={saving}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"space-y-2\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <Label htmlFor=\"kimlik_no\">Kimlik No</Label>\r\n                      {/* OCR Scanner removed */}\r\n                    </div>\r\n                    <Input\r\n                      id=\"kimlik_no\"\r\n                      value={newBeneficiary.kimlik_no}\r\n                      onChange={(e) => {\r\n                        setNewBeneficiary({ ...newBeneficiary, kimlik_no: e.target.value });\r\n                      }}\r\n                      placeholder=\"Kimlik numaras─▒ (TC, Pasaport vb.)\"\r\n                      className=\"min-h-[44px] focus-corporate\"\r\n                      disabled={saving}\r\n                    />\r\n                    {/* OCR Scanner help text removed */}\r\n                  </div>\r\n\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"telefon_no\">Telefon</Label>\r\n                    <Input\r\n                      id=\"telefon_no\"\r\n                      type=\"tel\"\r\n                      value={newBeneficiary.telefon_no}\r\n                      onChange={(e) => {\r\n                        setNewBeneficiary({ ...newBeneficiary, telefon_no: e.target.value });\r\n                      }}\r\n                      placeholder=\"─░htiya├ğ sahibinin telefon numaras─▒\"\r\n                      className=\"min-h-[44px] focus-corporate\"\r\n                      inputMode=\"tel\"\r\n                      disabled={saving}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"sehri\">┼Şehir</Label>\r\n                      <Input\r\n                        id=\"sehri\"\r\n                        value={newBeneficiary.sehri}\r\n                        onChange={(e) => {\r\n                          setNewBeneficiary({ ...newBeneficiary, sehri: e.target.value });\r\n                        }}\r\n                        placeholder=\"─░htiya├ğ sahibinin ya┼şad─▒─ş─▒ ┼şehir\"\r\n                        className=\"min-h-[44px] focus-corporate\"\r\n                        disabled={saving}\r\n                      />\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"uyruk\">Uyruk</Label>\r\n                      <Input\r\n                        id=\"uyruk\"\r\n                        value={newBeneficiary.uyruk}\r\n                        onChange={(e) => {\r\n                          setNewBeneficiary({ ...newBeneficiary, uyruk: e.target.value });\r\n                        }}\r\n                        placeholder=\"Uyru─şu (├Âr: T├╝rkiye, Suriye)\"\r\n                        className=\"min-h-[44px] focus-corporate\"\r\n                        disabled={saving}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"adres\">Adres</Label>\r\n                    <Input\r\n                      id=\"adres\"\r\n                      value={newBeneficiary.adres}\r\n                      onChange={(e) => {\r\n                        setNewBeneficiary({ ...newBeneficiary, adres: e.target.value });\r\n                      }}\r\n                      placeholder=\"─░htiya├ğ sahibinin adresi\"\r\n                      className=\"min-h-[44px] focus-corporate\"\r\n                      disabled={saving}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"kategori\">Kategori</Label>\r\n                      <Input\r\n                        id=\"kategori\"\r\n                        value={newBeneficiary.kategori}\r\n                        onChange={(e) => {\r\n                          setNewBeneficiary({ ...newBeneficiary, kategori: e.target.value });\r\n                        }}\r\n                        placeholder=\"Yard─▒m kategorisi\"\r\n                        className=\"min-h-[44px] focus-corporate\"\r\n                        disabled={saving}\r\n                      />\r\n                    </div>\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"tur\">T├╝r</Label>\r\n                      <Input\r\n                        id=\"tur\"\r\n                        value={newBeneficiary.tur}\r\n                        onChange={(e) => {\r\n                          setNewBeneficiary({ ...newBeneficiary, tur: e.target.value });\r\n                        }}\r\n                        placeholder=\"─░htiya├ğ sahibi t├╝r├╝\"\r\n                        className=\"min-h-[44px] focus-corporate\"\r\n                        disabled={saving}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"iban\">IBAN</Label>\r\n                    <Input\r\n                      id=\"iban\"\r\n                      value={newBeneficiary.iban}\r\n                      onChange={(e) => {\r\n                        setNewBeneficiary({ ...newBeneficiary, iban: e.target.value });\r\n                      }}\r\n                      placeholder=\"Banka IBAN numaras─▒ (iste─şe ba─şl─▒)\"\r\n                      className=\"min-h-[44px] focus-corporate\"\r\n                      disabled={saving}\r\n                    />\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"flex flex-col sm:flex-row justify-end gap-3 pt-6 border-t\">\r\n                  <Button\r\n                    variant=\"outline\"\r\n                    onClick={() => {\r\n                      setShowCreateModal(false);\r\n                    }}\r\n                    className=\"min-h-[44px] px-6\"\r\n                    disabled={saving}\r\n                  >\r\n                    ─░ptal\r\n                  </Button>\r\n                  <Button\r\n                    onClick={handleCreateBeneficiary}\r\n                    className=\"min-h-[44px] px-6 corporate-gradient shadow-md hover:shadow-lg\"\r\n                    disabled={saving}\r\n                  >\r\n                    {saving ? (\r\n                      <>\r\n                        <Loader2 className=\"animate-spin h-4 w-4 mr-2\" />\r\n                        Kaydediliyor...\r\n                      </>\r\n                    ) : (\r\n                      <>\r\n                        <UserPlus className=\"w-4 h-4 mr-2\" />\r\n                        Kaydet ve Devam Et\r\n                      </>\r\n                    )}\r\n                  </Button>\r\n                </div>\r\n              </DialogContent>\r\n            </Dialog>\r\n          </div>\r\n        }\r\n      >\r\n        <div className=\"p-3 sm:p-6 space-y-4 sm:space-y-6\">\r\n          {/* Enhanced Summary Cards */}\r\n          <div className=\"grid grid-cols-2 md:grid-cols-5 gap-3 sm:gap-4\">\r\n            <Card className=\"professional-card micro-interaction\">\r\n              <CardContent className=\"p-3 sm:p-4\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div>\r\n                    <div className=\"text-xl sm:text-2xl text-blue-600\">{stats.total ?? 0}</div>\r\n                    <p className=\"text-xs sm:text-sm text-gray-600\">Toplam Kay─▒t</p>\r\n                  </div>\r\n                  <Users className=\"h-8 w-8 text-blue-500 opacity-80\" />\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n            <Card className=\"professional-card micro-interaction\">\r\n              <CardContent className=\"p-3 sm:p-4\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div>\r\n                    <div className=\"text-xl sm:text-2xl text-green-600\">{stats.active ?? 0}</div>\r\n                    <p className=\"text-xs sm:text-sm text-gray-600\">Aktif</p>\r\n                  </div>\r\n                  <CheckCircle className=\"h-8 w-8 text-green-500 opacity-80\" />\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n            <Card className=\"professional-card micro-interaction\">\r\n              <CardContent className=\"p-3 sm:p-4\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div>\r\n                    <div className=\"text-xl sm:text-2xl text-orange-600\">\r\n                      {stats.underEvaluation ?? 0}\r\n                    </div>\r\n                    <p className=\"text-xs sm:text-sm text-gray-600\">De─şerlendirmede</p>\r\n                  </div>\r\n                  <Clock className=\"h-8 w-8 text-orange-500 opacity-80\" />\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n            <Card className=\"professional-card micro-interaction\">\r\n              <CardContent className=\"p-3 sm:p-4\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div>\r\n                    <div className=\"text-xl sm:text-2xl text-purple-600\">\r\n                      {stats.bakimYukumluCount ?? 0}\r\n                    </div>\r\n                    <p className=\"text-xs sm:text-sm text-gray-600\">Bakmakla Y├╝k├╝ml├╝</p>\r\n                  </div>\r\n                  <AlertCircle className=\"h-8 w-8 text-purple-500 opacity-80\" />\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n            <Card className=\"professional-card micro-interaction\">\r\n              <CardContent className=\"p-3 sm:p-4\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div>\r\n                    <div className=\"text-lg sm:text-2xl text-emerald-600\">\r\n                      Ôé║{(stats.totalAidAmount ?? 0).toLocaleString()}\r\n                    </div>\r\n                    <p className=\"text-xs sm:text-sm text-gray-600\">Toplam Yard─▒m</p>\r\n                  </div>\r\n                  <TrendingUp className=\"h-8 w-8 text-emerald-500 opacity-80\" />\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n\r\n          {/* Main Table Card with Enhanced Design */}\r\n          <Card className=\"professional-card\">\r\n            <CardHeader className=\"pb-4\">\r\n              <CardTitle className=\"flex items-center gap-2\">\r\n                <Users className=\"w-5 h-5 text-primary\" />\r\n                ─░htiya├ğ Sahibi Listesi\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              {/* Enhanced Filters with Category Filter */}\r\n              <div className=\"flex flex-col sm:flex-row gap-3 sm:gap-4 mb-6\">\r\n                <div className=\"relative flex-1\">\r\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\r\n                  <Input\r\n                    placeholder=\"Ad, soyad veya TC kimlik no ile ara...\"\r\n                    value={searchTerm}\r\n                    onChange={(e) => {\r\n                      setSearchTerm(e.target.value);\r\n                    }}\r\n                    className=\"pl-10 min-h-[44px] focus-corporate\"\r\n                  />\r\n                </div>\r\n                <div className=\"grid grid-cols-2 gap-2 sm:gap-3 sm:flex\">\r\n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\r\n                    <SelectTrigger className=\"min-w-[120px] min-h-[44px] focus-corporate\">\r\n                      <SelectValue placeholder=\"T├╝m Durumlar\" />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"all\">T├╝m Durumlar</SelectItem>\r\n                      <SelectItem value=\"active\">Aktif</SelectItem>\r\n                      <SelectItem value=\"passive\">Pasif</SelectItem>\r\n                      <SelectItem value=\"suspended\">Ask─▒da</SelectItem>\r\n                      <SelectItem value=\"under_evaluation\">De─şerlendirmede</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                  <Select value={cityFilter} onValueChange={setCityFilter}>\r\n                    <SelectTrigger className=\"min-w-[120px] min-h-[44px] focus-corporate\">\r\n                      <SelectValue placeholder=\"T├╝m ┼Şehirler\" />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"all\">T├╝m ┼Şehirler</SelectItem>\r\n                      {cities.map((city) => (\r\n                        <SelectItem key={city} value={city}>\r\n                          {city}\r\n                        </SelectItem>\r\n                      ))}\r\n                    </SelectContent>\r\n                  </Select>\r\n                  <Select value={sortBy} onValueChange={setSortBy}>\r\n                    <SelectTrigger className=\"min-w-[140px] min-h-[44px] focus-corporate\">\r\n                      <SelectValue placeholder=\"S─▒ralama\" />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"name-asc\">Ad (A-Z)</SelectItem>\r\n                      <SelectItem value=\"name-desc\">Ad (Z-A)</SelectItem>\r\n                      <SelectItem value=\"date-newest\">En Yeni</SelectItem>\r\n                      <SelectItem value=\"date-oldest\">En Eski</SelectItem>\r\n                      <SelectItem value=\"city-asc\">┼Şehir (A-Z)</SelectItem>\r\n                      <SelectItem value=\"category-asc\">Kategori (A-Z)</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n              </div>\r\n\r\n              {/* Enhanced Table - Original Structure Preserved */}\r\n              <div className=\"overflow-x-auto\">\r\n                <Table>\r\n                  <TableHeader>\r\n                    <TableRow className=\"bg-gray-50/50\">\r\n                      <TableHead className=\"min-w-[60px] font-medium text-center\">#</TableHead>\r\n                      <TableHead className=\"min-w-[120px] font-medium\">T├╝r</TableHead>\r\n                      <TableHead className=\"min-w-[150px] font-medium\">─░sim</TableHead>\r\n                      <TableHead className=\"min-w-[140px] font-medium\">Kategori</TableHead>\r\n                      <TableHead className=\"min-w-[60px] font-medium text-center\">Ya┼ş</TableHead>\r\n                      <TableHead className=\"min-w-[80px] font-medium\">Uyruk</TableHead>\r\n                      <TableHead className=\"min-w-[120px] font-medium\">Kimlik No</TableHead>\r\n                      <TableHead className=\"min-w-[120px] font-medium\">Cep Telefonu</TableHead>\r\n                      <TableHead className=\"min-w-[80px] font-medium\">├£lke</TableHead>\r\n                      <TableHead className=\"min-w-[140px] font-medium\">┼Şehir</TableHead>\r\n                      <TableHead className=\"min-w-[100px] font-medium\">Yerle┼şim</TableHead>\r\n                      <TableHead className=\"min-w-[200px] font-medium\">Adres</TableHead>\r\n                    </TableRow>\r\n                  </TableHeader>\r\n                  <TableBody>\r\n                    {beneficiaries.length === 0 ? (\r\n                      <TableRow>\r\n                        <TableCell colSpan={12} className=\"text-center py-8 text-gray-500\">\r\n                          <UserPlus className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\r\n                          <p>Hen├╝z hi├ğ ihtiya├ğ sahibi kayd─▒ yok.</p>\r\n                          <p className=\"text-sm text-gray-400 mt-1\">\r\n                            ─░lk kay─▒t i├ğin \"Yeni ─░htiya├ğ Sahibi Ekle\" butonunu kullan─▒n\r\n                          </p>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ) : (\r\n                      beneficiaries.map((beneficiary, index) => (\r\n                        <TableRow\r\n                          key={beneficiary.id}\r\n                          className=\"hover:bg-blue-50/30 transition-colors cursor-pointer border-b border-gray-100\"\r\n                          onClick={() => onNavigateToDetail?.(String(beneficiary.id))}\r\n                        >\r\n                          <TableCell className=\"py-3 text-center\">\r\n                            <div className=\"flex items-center justify-center\">\r\n                              <span className=\"text-sm font-medium text-gray-600 bg-gray-100 px-2 py-1 rounded-full min-w-[32px]\">\r\n                                {beneficiary.display_id}\r\n                              </span>\r\n                            </div>\r\n                          </TableCell>\r\n                          <TableCell className=\"py-3\">\r\n                            <div className=\"flex items-center gap-2\">\r\n                              <Search className=\"w-3 h-3 text-gray-400\" />\r\n                              <span\r\n                                className=\"truncate max-w-[100px]\"\r\n                                title={beneficiary.tur ?? beneficiary.Tur ?? '─░htiya├ğ Sahibi'}\r\n                              >\r\n                                {beneficiary.tur ?? beneficiary.Tur ?? '─░htiya├ğ Sahibi'}\r\n                              </span>\r\n                            </div>\r\n                          </TableCell>\r\n                          <TableCell className=\"py-3\">\r\n                            <div className=\"flex flex-col\">\r\n                              <span className={`font-medium ${beneficiary.ad_soyad === 'Ad Soyad bilgisi yok' ? 'text-gray-400 italic' : 'text-gray-900'}`}>\r\n                                {beneficiary.ad_soyad}\r\n                              </span>\r\n                            </div>\r\n                          </TableCell>\r\n                          <TableCell className=\"py-3\">\r\n                            {getCategoryBadge(\r\n                              beneficiary.kategori ?? beneficiary.Kategori ?? 'Genel',\r\n                            )}\r\n                          </TableCell>\r\n                          <TableCell className=\"py-3 text-center\">-</TableCell>\r\n                          <TableCell className=\"py-3\">\r\n                            {beneficiary.uyruk ?? beneficiary.Uyruk ?? 'TR'}\r\n                          </TableCell>\r\n                          <TableCell className=\"py-3 font-mono\">\r\n                            <span className={beneficiary.kimlik_no === 'TC No bilgisi yok' ? 'text-gray-400 italic' : ''}>\r\n                              {beneficiary.kimlik_no ?? beneficiary.Kimlik_No ?? '-'}\r\n                            </span>\r\n                          </TableCell>\r\n                          <TableCell className=\"py-3\">\r\n                            {beneficiary.formatted_phone && beneficiary.formatted_phone !== 'Telefon bilgisi yok' ? (\r\n                              <span className=\"text-blue-600\">{beneficiary.formatted_phone}</span>\r\n                            ) : (\r\n                              <span className=\"text-gray-400 italic\">Telefon bilgisi yok</span>\r\n                            )}\r\n                          </TableCell>\r\n                          <TableCell className=\"py-3\">{beneficiary.ulkesi ?? 'T├╝rkiye'}</TableCell>\r\n                          <TableCell className=\"py-3\">\r\n                            <span\r\n                              className={`truncate max-w-[120px] ${beneficiary.sehri === '┼Şehir bilgisi yok' ? 'text-gray-400 italic' : ''}`}\r\n                              title={beneficiary.sehri ?? undefined}\r\n                            >\r\n                              {beneficiary.sehri ?? '-'}\r\n                            </span>\r\n                          </TableCell>\r\n                          <TableCell className=\"py-3\">\r\n                            {beneficiary.yerlesimi ?? beneficiary.Yerlesimi ?? '-'}\r\n                          </TableCell>\r\n                          <TableCell className=\"py-3\">\r\n                            <span\r\n                              className={`truncate max-w-[180px] ${beneficiary.adres === 'Adres bilgisi yok' ? 'text-gray-400 italic' : ''}`}\r\n                              title={beneficiary.adres ?? beneficiary.Adres ?? undefined}\r\n                            >\r\n                              {beneficiary.adres ?? beneficiary.Adres ?? '-'}\r\n                            </span>\r\n                          </TableCell>\r\n                        </TableRow>\r\n                      ))\r\n                    )}\r\n                  </TableBody>\r\n                </Table>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* OCR Scanner removed */}\r\n      </PageLayout>\r\n\r\n      {/* New Category Notification */}\r\n      <NewCategoryNotification />\r\n\r\n      {/* OCR Scanner Modal removed */}\r\n    </>\r\n  );\r\n}\r\n\r\nexport default BeneficiariesPageEnhanced;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\BeneficiaryDetailPageComprehensive.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":244,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":244,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6879,6882],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6879,6882],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":264,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":264,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7654,7657],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7654,7657],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isHelpProvidedModalOpen' is assigned a value but never used.","line":331,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":331,"endColumn":33},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'isHelpProvidedModalOpen' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":331,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":331,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'helpProvided' is assigned a value but never used.","line":332,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":332,"endColumn":22},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'helpProvided' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":332,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":332,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isConsentModalOpen' is assigned a value but never used.","line":352,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":352,"endColumn":28},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'isConsentModalOpen' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":352,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":352,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'consents' is assigned a value but never used.","line":353,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":353,"endColumn":18},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'consents' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":353,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":353,"endColumn":18},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":454,"column":28,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":454,"endColumn":48},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":533,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":533,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16109,16112],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16109,16112],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":570,"column":18,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":570,"endColumn":32},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":570,"column":24,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":570,"endColumn":26,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[17280,17282],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":578,"column":36,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":578,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":587,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":587,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17833,17836],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17833,17836],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":593,"column":26,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":593,"endColumn":30},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":597,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":597,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18134,18137],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18134,18137],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleCloseHelpProvidedModal' is assigned a value but never used.","line":633,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":633,"endColumn":37},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'handleCloseHelpProvidedModal' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":633,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":633,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleCloseConsentModal' is assigned a value but never used.","line":641,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":641,"endColumn":32},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'handleCloseConsentModal' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":641,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":641,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleOpenCompletedAidsModal' is assigned a value but never used.","line":646,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":646,"endColumn":37},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'handleOpenCompletedAidsModal' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":646,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":646,"endColumn":37},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'handleOpenConsentDeclarationsModal' is assigned a value but never used.","line":654,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":654,"endColumn":43},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'handleOpenConsentDeclarationsModal' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":654,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":654,"endColumn":43},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":663,"column":5,"nodeType":"ChainExpression","messageId":"alwaysTruthy","endLine":667,"endColumn":6},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":663,"column":11,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":663,"endColumn":13,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[19904,19906],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":674,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":674,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[20327,20443],"text":"(person.ad_soyad?.toLowerCase().includes(searchLower) ??\r\n      person.kimlik_no?.toLowerCase().includes(searchLower))"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":675,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":675,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[20390,20507],"text":"(person.kimlik_no?.toLowerCase().includes(searchLower) ??\r\n      person.Kimlik_No?.toLowerCase().includes(searchLower))"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":676,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":676,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[20327,20572],"text":"(person.ad_soyad?.toLowerCase().includes(searchLower) ||\r\n      person.kimlik_no?.toLowerCase().includes(searchLower) ||\r\n      person.Kimlik_No?.toLowerCase().includes(searchLower) ??\r\n      person.telefon_no?.toLowerCase().includes(searchLower))"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":677,"column":62,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":677,"endColumn":64,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[20327,20637],"text":"(person.ad_soyad?.toLowerCase().includes(searchLower) ||\r\n      person.kimlik_no?.toLowerCase().includes(searchLower) ||\r\n      person.Kimlik_No?.toLowerCase().includes(searchLower) ||\r\n      person.telefon_no?.toLowerCase().includes(searchLower) ??\r\n      person.Telefon_No?.toLowerCase().includes(searchLower))"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":678,"column":62,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":678,"endColumn":64,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[20327,20697],"text":"(person.ad_soyad?.toLowerCase().includes(searchLower) ||\r\n      person.kimlik_no?.toLowerCase().includes(searchLower) ||\r\n      person.Kimlik_No?.toLowerCase().includes(searchLower) ||\r\n      person.telefon_no?.toLowerCase().includes(searchLower) ||\r\n      person.Telefon_No?.toLowerCase().includes(searchLower) ??\r\n      person.sehri?.toLowerCase().includes(searchLower))"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":679,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":679,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[20327,20757],"text":"(person.ad_soyad?.toLowerCase().includes(searchLower) ||\r\n      person.kimlik_no?.toLowerCase().includes(searchLower) ||\r\n      person.Kimlik_No?.toLowerCase().includes(searchLower) ||\r\n      person.telefon_no?.toLowerCase().includes(searchLower) ||\r\n      person.Telefon_No?.toLowerCase().includes(searchLower) ||\r\n      person.sehri?.toLowerCase().includes(searchLower) ??\r\n      person.uyruk?.toLowerCase().includes(searchLower))"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":680,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":680,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[20758,20760],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":748,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":748,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22715,22718],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22715,22718],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":749,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":749,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22788,22791],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22788,22791],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":753,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":753,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22961,22964],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22961,22964],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":822,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":822,"endColumn":23},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":822,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":822,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":822,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":822,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25308,25311],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25308,25311],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":827,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":827,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25486,25489],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25486,25489],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":858,"column":11,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":858,"endColumn":24},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":864,"column":75,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":864,"endColumn":77,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[26776,26778],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":881,"column":21,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":881,"endColumn":47},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":885,"column":25,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":885,"endColumn":51},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":891,"column":62,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":891,"endColumn":64,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[28192,28194],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":911,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":911,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29120,29123],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29120,29123],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":928,"column":11,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":928,"endColumn":22},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":931,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":931,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29860,29863],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29860,29863],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":942,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":942,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[30278,30281],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[30278,30281],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1099,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1099,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[34983,34986],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[34983,34986],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1128,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1128,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[35957,35960],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[35957,35960],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":1158,"column":43,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":1158,"endColumn":47},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":1168,"column":33,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":1168,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1172,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1172,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[37412,37415],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[37412,37415],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1177,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1177,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[37523,37526],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[37523,37526],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":1191,"column":5,"nodeType":"ChainExpression","messageId":"alwaysTruthy","endLine":1201,"endColumn":7},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":1191,"column":18,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":1191,"endColumn":20,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[38044,38046],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":1216,"column":7,"nodeType":"UnaryExpression","messageId":"alwaysTruthy","endLine":1216,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1424,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1424,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[49488,49491],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[49488,49491],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1437,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1437,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[50229,50232],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[50229,50232],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1451,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1451,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[51027,51030],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[51027,51030],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1467,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1467,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[51858,51861],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[51858,51861],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1494,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1494,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[53294,53297],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[53294,53297],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1622,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1622,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[60486,60489],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[60486,60489],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1656,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1656,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[62347,62350],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[62347,62350],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1669,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1669,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[63101,63104],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[63101,63104],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1682,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1682,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[63856,63859],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[63856,63859],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1714,"column":50,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1714,"endColumn":53,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[65526,65529],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[65526,65529],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":1771,"column":72,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":1771,"endColumn":74,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[68452,68454],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":1776,"column":71,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":1776,"endColumn":73,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[68823,68825],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1815,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1815,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[70710,70713],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[70710,70713],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1826,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1826,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[71278,71281],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[71278,71281],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1981,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1981,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[78898,78901],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[78898,78901],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1992,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1992,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[79474,79477],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[79474,79477],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":2305,"column":36,"nodeType":"MemberExpression","endLine":2305,"endColumn":68},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2344,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2344,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[97805,97808],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[97805,97808],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2359,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2359,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[98546,98549],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[98546,98549],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2373,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2373,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[99246,99249],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[99246,99249],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2390,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2390,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[100018,100021],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[100018,100021],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2405,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2405,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[100759,100762],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[100759,100762],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":2419,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":2419,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[101459,101462],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[101459,101462],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":2540,"column":34,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":2540,"endColumn":36,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[107195,107197],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":2751,"column":29,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":2751,"endColumn":31,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[116048,116050],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":2757,"column":30,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":2757,"endColumn":32,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[116339,116341],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":2810,"column":29,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":2810,"endColumn":50},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":2810,"column":42,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":2810,"endColumn":44,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[118541,118543],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":2813,"column":19,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":2813,"endColumn":32},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3155,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3155,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[133291,133294],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[133291,133294],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":3196,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":3196,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[135252,135255],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[135252,135255],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":3420,"column":28,"nodeType":"LogicalExpression","messageId":"neverNullish","endLine":3420,"endColumn":77},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":3484,"column":67,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":3484,"endColumn":81},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":3484,"column":73,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":3484,"endColumn":75,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[148861,148863],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":3493,"column":22,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":3493,"endColumn":24,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[149179,149181],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":3500,"column":26,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":3500,"endColumn":28,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[149592,149594],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-confusing-void-expression","severity":2,"message":"Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.","line":3594,"column":47,"nodeType":"CallExpression","messageId":"invalidVoidExprArrow","endLine":3594,"endColumn":81},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":3648,"column":32,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":3648,"endColumn":34,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[155554,155556],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":3658,"column":33,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":3658,"endColumn":35,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[156040,156042],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":3752,"column":28,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":3752,"endColumn":30,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[160077,160079],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":3890,"column":32,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":3890,"endColumn":34,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[166675,166677],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":4034,"column":33,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":4034,"endColumn":35,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[173773,173775],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":4173,"column":39,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":4173,"endColumn":41,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[180385,180387],"text":"."},"desc":"Remove unnecessary optional chain"}]}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":93,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview BeneficiaryDetailPageComprehensive Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport {\r\n  AlertTriangle,\r\n  Calendar,\r\n  Camera,\r\n  CheckCircle2,\r\n  Download,\r\n  Edit3,\r\n  Eye,\r\n  File,\r\n  FileText as FileIcon,\r\n  FileSpreadsheet,\r\n  FileText,\r\n  Filter,\r\n  Grid,\r\n  Heart,\r\n  Image as ImageIcon,\r\n  Info,\r\n  Save,\r\n  Search,\r\n  Shield,\r\n  Target,\r\n  Trash,\r\n  Trash2,\r\n  Upload,\r\n  User,\r\n  Users,\r\n  X,\r\n} from 'lucide-react';\r\nimport React, { useCallback, useEffect, useState } from 'react';\r\nimport { toast } from 'sonner';\r\n// Removed direct supabase import - using service layer instead\r\nimport { ihtiyacSahipleriService } from '../../services/ihtiyacSahipleriService';\r\nimport { supabaseAdmin } from '../../lib/supabase';\r\nimport { Badge } from '../ui/badge';\r\nimport { Button } from '../ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Checkbox } from '../ui/checkbox';\r\nimport { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle } from '../ui/dialog';\r\nimport { Input } from '../ui/input';\r\nimport { Label } from '../ui/label';\r\nimport { RadioGroup, RadioGroupItem } from '../ui/radio-group';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\nimport { Textarea } from '../ui/textarea';\r\n\r\nimport { logger } from '../../lib/logging/logger';\r\n// Health conditions data\r\nconst healthConditions = [\r\n  'Akdeniz Anemisi',\r\n  'Alerji',\r\n  'Ast─▒m',\r\n  'Ba─ş─▒┼ş─▒kl─▒k Yetm.',\r\n  'Bel F─▒t─▒─ş─▒',\r\n  'B├Âbrek Yetmezli─şi',\r\n  'Bron┼şit (Kronik)',\r\n  'Depresyon',\r\n  'Diyabet (┼Şeker)',\r\n  'D├╝┼ş├╝k Tansiyon',\r\n  'Epilepsi (Sara)',\r\n  'G├Âz Eri┼ş',\r\n  'G├Â─ş├╝s Hastal─▒klar─▒',\r\n  'G├Ârme Bozuklu─şu',\r\n  'Gastrit',\r\n  'Hepatit',\r\n  'Hipertansiyon',\r\n  'Hormonal D├╝zensizlik',\r\n  'Kal├ğa / Diz Protez',\r\n  'Kal─▒c─▒ ─░┼şitme Engeli',\r\n  'Kal─▒c─▒ Konu┼şma Engeli',\r\n  'Kal─▒c─▒ Y├╝r├╝me Engeli',\r\n  'Kalp Yetmezli─şi',\r\n  'Kas/─░skelet Hastal─▒klar─▒',\r\n  'Kanser',\r\n  'Karaci─şer Hastal─▒─ş─▒',\r\n  'Korunma Zorlu─şu',\r\n  'Kronik ─░ltihap',\r\n  'L├Âsemi',\r\n  'Menenjit',\r\n  'Migren',\r\n  'Nefes Darl─▒─ş─▒',\r\n  'Obezite',\r\n  'Omurilik Hastal─▒─ş─▒',\r\n  'Omuz',\r\n  'Psikoz',\r\n  'Psikolojik Sorun',\r\n  'Raynaud',\r\n  'Romatizma',\r\n  'Sin├╝zit',\r\n  'Stres',\r\n  'Sa─ş─▒r',\r\n  'Tiroid',\r\n  'T├╝berk├╝loz',\r\n  '├£lser',\r\n  'Onkolojik Rahats─▒zl─▒k',\r\n  'Yayg─▒n Geli┼şimsel Bozukluklar',\r\n  'Y├╝ksek Tansiyon',\r\n];\r\n\r\n// Connected records data\r\nconst connectedRecords = [\r\n  'Banka Hesaplar─▒',\r\n  'Dok├╝manlar',\r\n  'Foto─şraflar',\r\n  'Ba─ş─▒┼ş├ğ─▒lar',\r\n  'Ba─şl─▒ Ki┼şiler',\r\n  'Sponsorlar',\r\n  'Referanslar',\r\n  'G├Â├ğ/─░├ğine S─▒nav Takibi',\r\n  'G├Â├ğ/─░├ğine S─▒nav Hakk─▒',\r\n  'Yard─▒m Talepleri',\r\n  'Yap─▒lan Yard─▒mlar',\r\n  'R─▒za Beyanlar─▒',\r\n  'Sosyal Kartlar',\r\n  'Kart ├ûzeti',\r\n];\r\n\r\ninterface BeneficiaryDetailPageComprehensiveProps {\r\n  beneficiaryId?: string;\r\n  onBack?: () => void;\r\n}\r\n\r\n/**\r\n * BeneficiaryDetailPageComprehensive function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function BeneficiaryDetailPageComprehensive({\r\n  beneficiaryId,\r\n  onBack,\r\n}: BeneficiaryDetailPageComprehensiveProps) {\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [healthConditionsState, setHealthConditionsState] = useState<Record<string, boolean>>({});\r\n  const [beneficiaryData, setBeneficiaryData] = useState<Record<string, unknown> | null>(null);\r\n  const [editableData, setEditableData] = useState<Record<string, unknown> | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  // Bank Account Modal States\r\n  const [isBankAccountModalOpen, setIsBankAccountModalOpen] = useState(false);\r\n  const [iban, setIban] = useState('');\r\n  const [bankName, setBankName] = useState('');\r\n  const [accountHolder, setAccountHolder] = useState('');\r\n  const [description, setDescription] = useState('');\r\n\r\n  // Document Management Modal States\r\n  const [isDocumentModalOpen, setIsDocumentModalOpen] = useState(false);\r\n  const [uploadedFiles, setUploadedFiles] = useState<\r\n    {\r\n      id: string;\r\n      name: string;\r\n      type: string;\r\n      size: string;\r\n      uploadDate: string;\r\n      url?: string;\r\n    }[]\r\n  >([]);\r\n  const [isUploading, setIsUploading] = useState(false);\r\n  const [uploadProgress, setUploadProgress] = useState(0);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [selectedFileType, setSelectedFileType] = useState('all');\r\n  const [previewFile, setPreviewFile] = useState<{\r\n    id: string;\r\n    name: string;\r\n    type: string;\r\n    url: string;\r\n    size?: string;\r\n    uploadDate?: string;\r\n  } | null>(null);\r\n  const [isPreviewOpen, setIsPreviewOpen] = useState(false);\r\n\r\n  // Dependent Person Modal States\r\n  const [isDependentPersonModalOpen, setIsDependentPersonModalOpen] = useState(false);\r\n  const [modalMode, setModalMode] = useState<'list' | 'create' | 'select'>('list'); // Yeni: list modu eklendi\r\n  const [connectedDependents, setConnectedDependents] = useState<\r\n    {\r\n      id: string;\r\n      name: string;\r\n      relationship: string;\r\n      phone?: string;\r\n      ad_soyad?: string;\r\n      tur?: string;\r\n      yakinlik?: string;\r\n      kimlik_no?: string;\r\n      telefon_no?: string;\r\n      baglanti_tarihi?: string;\r\n      relationship_id?: string;\r\n      sehri?: string;\r\n      uyruk?: string;\r\n      Uyruk?: string;\r\n      kategori?: string;\r\n      Kategori?: string;\r\n      Kimlik_No?: string;\r\n      Telefon_No?: string;\r\n      Tur?: string;\r\n    }[]\r\n  >([]); // Bu ki┼şiye ba─şl─▒ olanlar\r\n  const [existingDependents, setExistingDependents] = useState<\r\n    {\r\n      id: string;\r\n      name: string;\r\n      relationship: string;\r\n      phone?: string;\r\n      ad_soyad?: string;\r\n      tur?: string;\r\n      yakinlik?: string;\r\n      kimlik_no?: string;\r\n      telefon_no?: string;\r\n      baglanti_tarihi?: string;\r\n      relationship_id?: string;\r\n      sehri?: string;\r\n      uyruk?: string;\r\n      Uyruk?: string;\r\n      kategori?: string;\r\n      Kategori?: string;\r\n      Kimlik_No?: string;\r\n      Telefon_No?: string;\r\n      Tur?: string;\r\n    }[]\r\n  >([]); // Mevcut ba─şl─▒ ki┼şiler\r\n  const [selectedDependentId, setSelectedDependentId] = useState<string | null>(null);\r\n  const [selectedRelationshipType, setSelectedRelationshipType] = useState<string>('');\r\n  const [dependentPersonData, setDependentPersonData] = useState({\r\n    name: '',\r\n    surname: '',\r\n    id_number: '',\r\n    phone: '',\r\n    relationship: '',\r\n    birth_date: '',\r\n    gender: '',\r\n    address: '',\r\n  });\r\n  const [isSavingDependent, setIsSavingDependent] = useState(false);\r\n  const [isLoadingDependents, setIsLoadingDependents] = useState(false);\r\n  const [dependentSearchTerm, setDependentSearchTerm] = useState('');\r\n\r\n  // Photos Modal States\r\n  const [isPhotosModalOpen, setIsPhotosModalOpen] = useState(false);\r\n  const [photos, setPhotos] = useState<any[]>([\r\n    {\r\n      id: 1,\r\n      name: 'profil_foto.jpg',\r\n      url: 'https://trae-api-sg.mchost.guru/api/ide/v1/text_to_image?prompt=professional%20portrait%20photo%20of%20a%20person&image_size=square',\r\n      size: '2.3 MB',\r\n      uploadDate: '15.01.2024',\r\n      type: 'image/jpeg',\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'kimlik_foto.jpg',\r\n      url: 'https://trae-api-sg.mchost.guru/api/ide/v1/text_to_image?prompt=identity%20document%20photo&image_size=landscape_4_3',\r\n      size: '1.8 MB',\r\n      uploadDate: '12.01.2024',\r\n      type: 'image/jpeg',\r\n    },\r\n  ]);\r\n  const [isUploadingPhoto, setIsUploadingPhoto] = useState(false);\r\n  const [photoUploadProgress, setPhotoUploadProgress] = useState(0);\r\n  const [selectedPhoto, setSelectedPhoto] = useState<any>(null);\r\n  const [isPhotoPreviewOpen, setIsPhotoPreviewOpen] = useState(false);\r\n\r\n  // Donors Modal States\r\n  const [isDonorsModalOpen, setIsDonorsModalOpen] = useState(false);\r\n  const [donors] = useState([\r\n    {\r\n      id: 1,\r\n      name: 'Ahmet Y─▒lmaz',\r\n      email: 'ahmet@email.com',\r\n      phone: '0532 123 45 67',\r\n      totalDonation: '5,000 TL',\r\n      lastDonation: '15.01.2024',\r\n      donationCount: 3,\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Fatma Demir',\r\n      email: 'fatma@email.com',\r\n      phone: '0541 987 65 43',\r\n      totalDonation: '2,500 TL',\r\n      lastDonation: '10.01.2024',\r\n      donationCount: 2,\r\n    },\r\n  ]);\r\n  const [donorSearchTerm, setDonorSearchTerm] = useState('');\r\n\r\n  // Sponsors Modal States\r\n  const [isSponsorsModalOpen, setIsSponsorsModalOpen] = useState(false);\r\n  const [sponsors] = useState([\r\n    {\r\n      id: 1,\r\n      name: 'Yard─▒m Derne─şi',\r\n      type: 'Dernek',\r\n      contact: 'info@yardim.org',\r\n      phone: '0212 123 45 67',\r\n      sponsorshipAmount: '10,000 TL',\r\n      startDate: '01.01.2024',\r\n      endDate: '31.12.2024',\r\n      status: 'Aktif',\r\n    },\r\n  ]);\r\n\r\n  // Help Requests Modal States\r\n  const [isHelpRequestsModalOpen, setIsHelpRequestsModalOpen] = useState(false);\r\n  const [helpRequests] = useState([\r\n    {\r\n      id: 1,\r\n      title: 'G─▒da Yard─▒m─▒ Talebi',\r\n      description: 'Ayl─▒k g─▒da paketi ihtiyac─▒',\r\n      status: 'Beklemede',\r\n      requestDate: '10.01.2024',\r\n      priority: 'Y├╝ksek',\r\n      category: 'G─▒da',\r\n    },\r\n    {\r\n      id: 2,\r\n      title: 'K─▒yafet Yard─▒m─▒',\r\n      description: 'K─▒┼ş k─▒yafetleri ihtiyac─▒',\r\n      status: 'Tamamland─▒',\r\n      requestDate: '05.01.2024',\r\n      priority: 'Orta',\r\n      category: 'Giyim',\r\n    },\r\n  ]);\r\n\r\n  // Help Provided Modal States\r\n  const [isHelpProvidedModalOpen, setIsHelpProvidedModalOpen] = useState(false);\r\n  const [helpProvided] = useState([\r\n    {\r\n      id: 1,\r\n      type: 'G─▒da Paketi',\r\n      amount: '500 TL',\r\n      date: '15.01.2024',\r\n      description: 'Ayl─▒k g─▒da paketi',\r\n      provider: 'Yard─▒m Derne─şi',\r\n    },\r\n    {\r\n      id: 2,\r\n      type: 'Nakit Yard─▒m',\r\n      amount: '1,000 TL',\r\n      date: '01.01.2024',\r\n      description: 'Kira yard─▒m─▒',\r\n      provider: 'Belediye',\r\n    },\r\n  ]);\r\n\r\n  // Consent Modal States\r\n  const [isConsentModalOpen, setIsConsentModalOpen] = useState(false);\r\n  const [consents] = useState([\r\n    {\r\n      id: 1,\r\n      type: 'KVKK Ayd─▒nlatma Metni',\r\n      status: 'Onayland─▒',\r\n      date: '01.01.2024',\r\n      description: 'Ki┼şisel verilerin i┼şlenmesi hakk─▒nda bilgilendirme',\r\n    },\r\n    {\r\n      id: 2,\r\n      type: 'Foto─şraf ├çekim ─░zni',\r\n      status: 'Beklemede',\r\n      date: '15.01.2024',\r\n      description: 'Etkinliklerde foto─şraf ├ğekimi i├ğin izin',\r\n    },\r\n  ]);\r\n\r\n  // Completed Aids Modal States\r\n  const [isCompletedAidsModalOpen, setIsCompletedAidsModalOpen] = useState(false);\r\n  const [completedAids] = useState([\r\n    {\r\n      id: 1,\r\n      type: 'Nakdi',\r\n      amount: '1,500 TL',\r\n      date: '15.01.2024',\r\n      description: 'Ayl─▒k g─▒da yard─▒m─▒',\r\n      provider: 'Yard─▒m Derne─şi',\r\n      status: 'Tamamland─▒',\r\n      notes: 'D├╝zenli g─▒da yard─▒m─▒ paketi teslim edildi',\r\n    },\r\n    {\r\n      id: 2,\r\n      type: 'Ayni',\r\n      amount: '800 TL',\r\n      date: '10.01.2024',\r\n      description: 'Giyim yard─▒m─▒',\r\n      provider: 'Belediye',\r\n      status: 'Tamamland─▒',\r\n      notes: 'K─▒┼ş k─▒yafetleri ve ayakkab─▒ teslim edildi',\r\n    },\r\n    {\r\n      id: 3,\r\n      type: 'Hizmet',\r\n      amount: '500 TL',\r\n      date: '05.01.2024',\r\n      description: 'Sa─şl─▒k hizmeti',\r\n      provider: 'Sa─şl─▒k Merkezi',\r\n      status: 'Tamamland─▒',\r\n      notes: '├£cretsiz sa─şl─▒k taramas─▒ yap─▒ld─▒',\r\n    },\r\n  ]);\r\n\r\n  // Consent Declarations Modal States\r\n  const [isConsentDeclarationsModalOpen, setIsConsentDeclarationsModalOpen] = useState(false);\r\n  const [consentDeclarations] = useState([\r\n    {\r\n      id: 1,\r\n      type: 'KVKK R─▒za Beyan─▒',\r\n      status: 'Onayland─▒',\r\n      date: '01.01.2024',\r\n      description: 'Ki┼şisel verilerin i┼şlenmesi i├ğin r─▒za beyan─▒',\r\n      documentUrl: '#',\r\n      title: 'KVKK R─▒za Beyan─▒',\r\n      details: 'Ki┼şisel verilerin i┼şlenmesi i├ğin r─▒za beyan─▒ detaylar─▒',\r\n    },\r\n    {\r\n      id: 2,\r\n      type: 'Foto─şraf ├çekim ─░zni',\r\n      status: 'Beklemede',\r\n      date: '15.01.2024',\r\n      description: 'Etkinliklerde foto─şraf ├ğekimi i├ğin izin belgesi',\r\n      documentUrl: '#',\r\n      title: 'Foto─şraf ├çekim ─░zni',\r\n      details: 'Etkinliklerde foto─şraf ├ğekimi i├ğin izin belgesi detaylar─▒',\r\n    },\r\n    {\r\n      id: 3,\r\n      type: 'Veri Payla┼ş─▒m R─▒zas─▒',\r\n      status: 'Onayland─▒',\r\n      date: '10.01.2024',\r\n      description: '├£├ğ├╝nc├╝ taraflarla veri payla┼ş─▒m─▒ i├ğin r─▒za',\r\n      documentUrl: '#',\r\n      title: 'Veri Payla┼ş─▒m R─▒zas─▒',\r\n      details: '├£├ğ├╝nc├╝ taraflarla veri payla┼ş─▒m─▒ i├ğin r─▒za detaylar─▒',\r\n    },\r\n  ]);\r\n\r\n  // Load beneficiary data\r\n  useEffect(() => {\r\n    const loadBeneficiaryData = async () => {\r\n      if (!beneficiaryId) {\r\n        setLoading(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        setLoading(true);\r\n        const result = await ihtiyacSahipleriService.getIhtiyacSahibi(parseInt(beneficiaryId));\r\n\r\n        if (result.data) {\r\n          // ad_soyad'─▒ ad ve soyad olarak ay─▒r\r\n          const fullName = result.data.ad_soyad ?? '';\r\n          const nameParts = fullName.trim().split(' ');\r\n          const firstName = nameParts[0] || '';\r\n          const lastName = nameParts.slice(1).join(' ') || '';\r\n\r\n          const transformedData = {\r\n            ...result.data,\r\n            name: firstName,\r\n            surname: lastName,\r\n            full_name: fullName,\r\n            id_number: result.data.kimlik_no ?? result.data.Kimlik_No ?? '',\r\n            phone: result.data.telefon_no ?? result.data.Telefon_No ?? '',\r\n            city: result.data.sehri ?? '',\r\n            address: result.data.adres ?? result.data.Adres ?? '',\r\n            nationality: result.data.uyruk ?? result.data.Uyruk ?? '',\r\n            country: result.data.ulkesi ?? 'T├╝rkiye',\r\n            settlement: result.data.yerlesimi ?? result.data.Yerlesimi ?? '',\r\n            neighborhood: result.data.mahalle ?? result.data.Mahalle ?? '',\r\n            category: result.data.kategori ?? result.data.Kategori ?? '',\r\n            aid_type: result.data.tur ?? result.data.Tur ?? '',\r\n            iban: result.data.iban ?? '',\r\n          };\r\n\r\n          setBeneficiaryData(transformedData);\r\n          setEditableData(transformedData);\r\n        } else {\r\n          logger.warn('ÔÜá´©Å Beneficiary not found:', beneficiaryId);\r\n          toast.error('─░htiya├ğ sahibi bulunamad─▒');\r\n        }\r\n      } catch (error) {\r\n        logger.error('ÔØî Error loading beneficiary:', error);\r\n        toast.error('Veri y├╝klenirken hata olu┼ştu');\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    loadBeneficiaryData();\r\n  }, [beneficiaryId]);\r\n\r\n  const handleSave = useCallback(async () => {\r\n    if (!editableData || !beneficiaryId) {\r\n      toast.error('G├╝ncellenecek veri bulunamad─▒');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // Ad ve soyad─▒ birle┼ştir\r\n      const fullName = `${editableData.name ?? ''} ${editableData.surname ?? ''}`.trim();\r\n\r\n      const updateData = {\r\n        ad_soyad: fullName,\r\n        kimlik_no: (editableData.id_number as string) || null,\r\n        telefon_no: (editableData.phone as string) || null,\r\n        sehri: (editableData.city as string) || null,\r\n        uyruk: (editableData.nationality as string) || null,\r\n        ulkesi: (editableData.country as string) || null,\r\n        adres: (editableData.address as string) || null,\r\n        yerlesimi: (editableData.settlement as string) || null,\r\n        mahalle: (editableData.neighborhood as string) || null,\r\n        kategori: (editableData.category as string) || null,\r\n        tur: (editableData.aid_type as string) || null,\r\n        iban: (editableData.iban as string) || null,\r\n      };\r\n\r\n      const result = await ihtiyacSahipleriService.updateIhtiyacSahibi(\r\n        parseInt(beneficiaryId),\r\n        updateData,\r\n      );\r\n\r\n      if (result.error) {\r\n        toast.error(`G├╝ncelleme s─▒ras─▒nda hata: ${  result.error}`);\r\n        return;\r\n      }\r\n\r\n      // Ba┼şar─▒l─▒ g├╝ncelleme sonras─▒ veriyi yenile\r\n      setBeneficiaryData(editableData);\r\n      toast.success('─░htiya├ğ sahibi bilgileri ba┼şar─▒yla g├╝ncellendi');\r\n      setEditMode(false);\r\n    } catch (error: any) {\r\n      logger.error('ÔØî Error updating beneficiary:', error);\r\n      toast.error('G├╝ncelleme s─▒ras─▒nda beklenmeyen hata olu┼ştu');\r\n    }\r\n  }, [editableData, beneficiaryId]);\r\n\r\n  const handleCancel = useCallback(() => {\r\n    // De─şi┼şiklikleri iptal et, orijinal veriyi geri y├╝kle\r\n    setEditableData(beneficiaryData);\r\n    setEditMode(false);\r\n    toast.info('De─şi┼şiklikler iptal edildi');\r\n  }, [beneficiaryData]);\r\n\r\n  // Photos Modal Handlers\r\n  const handleOpenPhotosModal = () => {\r\n    setIsPhotosModalOpen(true);\r\n  };\r\n  const handleClosePhotosModal = () => {\r\n    setIsPhotosModalOpen(false);\r\n  };\r\n\r\n  const handlePhotoUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const {files} = event.target;\r\n    if (!files) return;\r\n\r\n    setIsUploadingPhoto(true);\r\n    setPhotoUploadProgress(0);\r\n\r\n    // Simulate upload progress\r\n    const interval = setInterval(() => {\r\n      setPhotoUploadProgress((prev) => {\r\n        if (prev >= 100) {\r\n          clearInterval(interval);\r\n          setIsUploadingPhoto(false);\r\n\r\n          // Add new photos\r\n          const newPhotos = Array.from(files).map((file, index) => ({\r\n            id: (photos?.length ?? 0) + index + 1,\r\n            name: file.name,\r\n            url: URL.createObjectURL(file),\r\n            size: `${(file.size / (1024 * 1024)).toFixed(1)} MB`,\r\n            uploadDate: new Date().toLocaleDateString('tr-TR'),\r\n            type: file.type,\r\n          }));\r\n\r\n          setPhotos((prev) => [...(prev || []), ...newPhotos]);\r\n          toast.success(`${files.length} foto─şraf ba┼şar─▒yla y├╝klendi`);\r\n          return 100;\r\n        }\r\n        return prev + 10;\r\n      });\r\n    }, 200);\r\n  };\r\n\r\n  const handlePhotoPreview = (photo: any) => {\r\n    setSelectedPhoto(photo);\r\n    setIsPhotoPreviewOpen(true);\r\n  };\r\n\r\n  const handlePhotoDelete = (photoId: number) => {\r\n    setPhotos((prev) => (prev || []).filter((photo) => photo.id !== photoId));\r\n    toast.success('Foto─şraf silindi');\r\n  };\r\n\r\n  const handlePhotoDownload = (photo: any) => {\r\n    const link = document.createElement('a');\r\n    link.href = photo.url;\r\n    link.download = photo.name;\r\n    link.click();\r\n    toast.success('Foto─şraf indirildi');\r\n  };\r\n\r\n  // Donors Modal Handlers\r\n  const handleOpenDonorsModal = () => {\r\n    setIsDonorsModalOpen(true);\r\n  };\r\n  const handleCloseDonorsModal = () => {\r\n    setIsDonorsModalOpen(false);\r\n  };\r\n\r\n  // Sponsors Modal Handlers\r\n  const handleOpenSponsorsModal = () => {\r\n    setIsSponsorsModalOpen(true);\r\n  };\r\n  const handleCloseSponsorsModal = () => {\r\n    setIsSponsorsModalOpen(false);\r\n  };\r\n\r\n  // Help Requests Modal Handlers\r\n  const handleOpenHelpRequestsModal = () => {\r\n    setIsHelpRequestsModalOpen(true);\r\n  };\r\n  const handleCloseHelpRequestsModal = () => {\r\n    setIsHelpRequestsModalOpen(false);\r\n  };\r\n\r\n  // Help Provided Modal Handlers\r\n  const handleOpenHelpProvidedModal = () => {\r\n    setIsHelpProvidedModalOpen(true);\r\n  };\r\n  const handleCloseHelpProvidedModal = () => {\r\n    setIsHelpProvidedModalOpen(false);\r\n  };\r\n\r\n  // Consent Modal Handlers\r\n  const handleOpenConsentModal = () => {\r\n    setIsConsentModalOpen(true);\r\n  };\r\n  const handleCloseConsentModal = () => {\r\n    setIsConsentModalOpen(false);\r\n  };\r\n\r\n  // Completed Aids Modal Handlers\r\n  const handleOpenCompletedAidsModal = () => {\r\n    setIsCompletedAidsModalOpen(true);\r\n  };\r\n  const handleCloseCompletedAidsModal = () => {\r\n    setIsCompletedAidsModalOpen(false);\r\n  };\r\n\r\n  // Consent Declarations Modal Handlers\r\n  const handleOpenConsentDeclarationsModal = () => {\r\n    setIsConsentDeclarationsModalOpen(true);\r\n  };\r\n  const handleCloseConsentDeclarationsModal = () => {\r\n    setIsConsentDeclarationsModalOpen(false);\r\n  };\r\n\r\n  // Filter functions\r\n  const filteredDonors =\r\n    donors?.filter(\r\n      (donor) =>\r\n        donor.name.toLowerCase().includes(donorSearchTerm.toLowerCase()) ||\r\n        donor.email.toLowerCase().includes(donorSearchTerm.toLowerCase()),\r\n    ) || [];\r\n\r\n  // Ba─şl─▒ ki┼şiler filtreleme\r\n  const filteredDependents = existingDependents.filter((person) => {\r\n    if (!dependentSearchTerm) return true;\r\n    const searchLower = dependentSearchTerm.toLowerCase();\r\n    return (\r\n      person.ad_soyad?.toLowerCase().includes(searchLower) ||\r\n      person.kimlik_no?.toLowerCase().includes(searchLower) ||\r\n      person.Kimlik_No?.toLowerCase().includes(searchLower) ||\r\n      person.telefon_no?.toLowerCase().includes(searchLower) ||\r\n      person.Telefon_No?.toLowerCase().includes(searchLower) ||\r\n      person.sehri?.toLowerCase().includes(searchLower) ||\r\n      person.uyruk?.toLowerCase().includes(searchLower) ||\r\n      person.Uyruk?.toLowerCase().includes(searchLower)\r\n    );\r\n  });\r\n\r\n  const handleHealthConditionChange = useCallback((condition: string, checked: boolean) => {\r\n    setHealthConditionsState((prev) => ({\r\n      ...prev,\r\n      [condition]: checked,\r\n    }));\r\n  }, []);\r\n\r\n  // IBAN validation function\r\n  const validateIban = (iban: string): boolean => {\r\n    const cleanIban = iban.replace(/\\s/g, '').toUpperCase();\r\n    if (!cleanIban.startsWith('TR') || cleanIban.length !== 26) {\r\n      return false;\r\n    }\r\n    return /^TR\\d{24}$/.test(cleanIban);\r\n  };\r\n\r\n  // Bank Account Modal Handlers\r\n  const handleOpenBankAccountModal = () => {\r\n    // Mevcut IBAN'─▒ modal'a y├╝kle\r\n    setIban((beneficiaryData?.iban as string) || '');\r\n    setAccountHolder((beneficiaryData?.ad_soyad as string) || '');\r\n    setBankName(''); // Banka ad─▒ ayr─▒ tutulmad─▒─ş─▒ i├ğin bo┼ş\r\n    setDescription('');\r\n    setIsBankAccountModalOpen(true);\r\n  };\r\n\r\n  const handleCloseBankAccountModal = () => {\r\n    setIsBankAccountModalOpen(false);\r\n    setIban('');\r\n    setBankName('');\r\n    setAccountHolder('');\r\n    setDescription('');\r\n  };\r\n\r\n  const handleSaveBankAccount = async () => {\r\n    if (!iban.trim()) {\r\n      toast.error('IBAN alan─▒ zorunludur');\r\n      return;\r\n    }\r\n\r\n    if (!validateIban(iban)) {\r\n      toast.error('Ge├ğerli bir IBAN giriniz (TR ile ba┼şlamal─▒ ve 26 karakter olmal─▒)');\r\n      return;\r\n    }\r\n\r\n    if (!accountHolder.trim()) {\r\n      toast.error('Hesap sahibi ad─▒ alan─▒ zorunludur');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // IBAN'─▒ ihtiyac_sahipleri tablosuna kaydet\r\n      const result = await ihtiyacSahipleriService.updateIhtiyacSahibi(\r\n        parseInt(beneficiaryId ?? '0'),\r\n        { iban: iban.trim() },\r\n      );\r\n\r\n      if (result.error) {\r\n        toast.error(`IBAN kaydedilirken hata: ${  result.error}`);\r\n        return;\r\n      }\r\n\r\n      // Ba┼şar─▒l─▒ kay─▒t sonras─▒ veriyi g├╝ncelle\r\n      setBeneficiaryData((prev: any) => ({ ...prev, iban: iban.trim() }));\r\n      setEditableData((prev: any) => ({ ...prev, iban: iban.trim() }));\r\n\r\n      toast.success('Banka hesab─▒ bilgileri ba┼şar─▒yla kaydedildi');\r\n      handleCloseBankAccountModal();\r\n    } catch (error: any) {\r\n      logger.error('ÔØî Error saving IBAN:', error);\r\n      toast.error('IBAN kaydedilirken beklenmeyen hata olu┼ştu');\r\n    }\r\n  };\r\n\r\n  // Document Management Modal Handlers\r\n  const handleOpenDocumentModal = () => {\r\n    setIsDocumentModalOpen(true);\r\n    // Load existing documents (mock data)\r\n    setUploadedFiles([\r\n      {\r\n        id: '1',\r\n        name: 'kimlik_fotokopisi.pdf',\r\n        size: '2.4 MB',\r\n        type: 'application/pdf',\r\n        uploadDate: '2024-01-15',\r\n        url: '#',\r\n      },\r\n      {\r\n        id: '2',\r\n        name: 'gelir_belgesi.jpg',\r\n        size: '1.8 MB',\r\n        type: 'image/jpeg',\r\n        uploadDate: '2024-01-14',\r\n        url: '#',\r\n      },\r\n    ]);\r\n  };\r\n\r\n  const handleCloseDocumentModal = () => {\r\n    setIsDocumentModalOpen(false);\r\n    setSearchTerm('');\r\n    setSelectedFileType('all');\r\n    setPreviewFile(null);\r\n    setIsPreviewOpen(false);\r\n  };\r\n\r\n  // Dependent Person Modal Handlers\r\n  const handleOpenDependentPersonModal = async () => {\r\n    setModalMode('list'); // ├ûnce ba─şl─▒ ki┼şiler listesini g├Âster\r\n    await ensureFamilyRelationshipsPolicies(); // Policy'leri kontrol et\r\n    loadConnectedDependents(); // Bu ki┼şiye ba─şl─▒ olanlar─▒ y├╝kle\r\n    setIsDependentPersonModalOpen(true);\r\n  };\r\n\r\n  // family_relationships tablosu i├ğin gerekli policy'leri olu┼ştur\r\n  const ensureFamilyRelationshipsPolicies = async () => {\r\n    try {\r\n      // Policy'leri admin client ile olu┼ştur\r\n      const policies = [\r\n        {\r\n          name: 'FamilyRelationships insert',\r\n          sql: `CREATE POLICY \"FamilyRelationships insert\" ON \"public\".\"family_relationships\" FOR INSERT TO authenticated WITH CHECK (true);`,\r\n        },\r\n        {\r\n          name: 'FamilyRelationships update',\r\n          sql: `CREATE POLICY \"FamilyRelationships update\" ON \"public\".\"family_relationships\" FOR UPDATE TO authenticated USING (true) WITH CHECK (true);`,\r\n        },\r\n        {\r\n          name: 'FamilyRelationships delete',\r\n          sql: `CREATE POLICY \"FamilyRelationships delete\" ON \"public\".\"family_relationships\" FOR DELETE TO authenticated USING (true);`,\r\n        },\r\n      ];\r\n\r\n      for (const policy of policies) {\r\n        try {\r\n          await supabaseAdmin.rpc('exec_sql', { sql: policy.sql });\r\n          logger.info('Ô£à Policy created:', policy.name);\r\n        } catch (error: any) {\r\n          // Policy zaten varsa hata verebilir, bu normal\r\n          logger.info('Ôä╣´©Å Policy might already exist:', policy.name);\r\n        }\r\n      }\r\n    } catch (error: any) {\r\n      logger.warn('ÔÜá´©Å Could not create policies (might already exist):', error.message);\r\n    }\r\n  };\r\n\r\n  // Bu ki┼şiye ba─şl─▒ olanlar─▒ y├╝kle - ┼şimdilik bo┼ş liste\r\n  const loadConnectedDependents = async () => {\r\n    if (!beneficiaryId) {\r\n      setConnectedDependents([]);\r\n      return;\r\n    }\r\n\r\n    try {\r\n      logger.info('­şöä Loading connected dependents for beneficiary:', beneficiaryId);\r\n\r\n      // Integer ID'yi UUID'ye ├ğevir ve family_relationships tablosundan ├ğek\r\n      const primaryUuid = `00000000-0000-0000-0000-${beneficiaryId.toString().padStart(12, '0')}`;\r\n\r\n      logger.info('­şöä Searching relationships for UUID:', primaryUuid);\r\n\r\n      const { data: relationships, error } = await supabaseAdmin\r\n        .from('family_relationships')\r\n        .select('*')\r\n        .eq('primary_beneficiary_id', primaryUuid);\r\n\r\n      if (error) {\r\n        logger.error('ÔØî Error loading relationships:', error);\r\n        setConnectedDependents([]);\r\n        return;\r\n      }\r\n\r\n      if (relationships && relationships.length > 0) {\r\n        const connectedData = [];\r\n\r\n        // Her ili┼şki i├ğin ki┼şi detaylar─▒n─▒ ├ğek\r\n        for (const rel of relationships) {\r\n          // UUID'yi integer'a ├ğevir\r\n          const memberId = parseInt(rel.family_member_id.split('-').pop() || '0');\r\n          const personResult = await ihtiyacSahipleriService.getIhtiyacSahibi(memberId);\r\n\r\n          if (personResult.data) {\r\n            // Enum de─şerlerini T├╝rk├ğe'ye ├ğevir\r\n            const relationshipMap: Record<string, string> = {\r\n              parent: 'Anne/Baba',\r\n              spouse: 'E┼ş',\r\n              child: '├çocuk',\r\n              sibling: 'Karde┼ş',\r\n              grandparent: 'B├╝y├╝kanne/B├╝y├╝kbaba',\r\n              grandchild: 'Torun',\r\n              other: 'Di─şer',\r\n            };\r\n\r\n            connectedData.push({\r\n              id: personResult.data.id.toString(),\r\n              name: personResult.data.ad_soyad ?? '',\r\n              relationship:\r\n                (relationshipMap[rel.relationship_type] || rel.relationship_type) ?? 'Belirtilmemi┼ş',\r\n              phone: personResult.data.telefon_no ?? personResult.data.Telefon_No ?? undefined,\r\n              ad_soyad: personResult.data.ad_soyad ?? '',\r\n              tur: personResult.data.tur ?? personResult.data.Tur ?? undefined,\r\n              yakinlik:\r\n                (relationshipMap[rel.relationship_type] || rel.relationship_type) ?? 'Belirtilmemi┼ş',\r\n              kimlik_no: personResult.data.kimlik_no ?? personResult.data.Kimlik_No ?? undefined,\r\n              telefon_no: personResult.data.telefon_no ?? personResult.data.Telefon_No ?? undefined,\r\n              baglanti_tarihi: rel.created_at?.split('T')[0] || '2024-01-01',\r\n              relationship_id: rel.id ?? '',\r\n              sehri: personResult.data.sehri ?? undefined,\r\n              uyruk: personResult.data.uyruk ?? personResult.data.Uyruk ?? undefined,\r\n              Uyruk: personResult.data.Uyruk ?? undefined,\r\n              kategori: personResult.data.kategori ?? personResult.data.Kategori ?? undefined,\r\n              Kategori: personResult.data.Kategori ?? undefined,\r\n              Kimlik_No: personResult.data.Kimlik_No ?? undefined,\r\n              Telefon_No: personResult.data.Telefon_No ?? undefined,\r\n              Tur: personResult.data.Tur ?? undefined,\r\n            });\r\n          }\r\n        }\r\n\r\n        logger.info('Ô£à Found connected dependents:', connectedData);\r\n        setConnectedDependents(connectedData);\r\n      } else {\r\n        logger.info('Ôä╣´©Å No connected dependents found');\r\n        setConnectedDependents([]);\r\n      }\r\n    } catch (error: any) {\r\n      logger.error('ÔØî Unexpected error loading connected dependents:', error);\r\n      setConnectedDependents([]);\r\n    }\r\n  };\r\n\r\n  // Mevcut ba─şl─▒ ki┼şileri y├╝kle - Bakmakla Y├╝k├╝ml├╝ Olunan Ki┼şi t├╝r├╝ndeki kay─▒tlar\r\n  const loadExistingDependents = async () => {\r\n    setIsLoadingDependents(true);\r\n    try {\r\n      // T├╝m ki┼şileri getir (ba─şlant─▒ kurabilmek i├ğin)\r\n      const result = await ihtiyacSahipleriService.getIhtiyacSahipleri(\r\n        1, // page\r\n        500, // pageSize - ├ğok daha fazla kay─▒t getir\r\n        {}, // T├╝r filtresi yok - t├╝m ki┼şiler\r\n      );\r\n\r\n      if (result.data) {\r\n        logger.info('Ô£à Loaded existing dependents:', result.data);\r\n        setExistingDependents(\r\n          result.data.map((person: any) => ({\r\n            ...person,\r\n            yakinlik: 'Belirtilmemi┼ş', // Varsay─▒lan yak─▒nl─▒k\r\n            durum: 'Aktif', // Varsay─▒lan durum\r\n          })),\r\n        );\r\n      } else if (result.error) {\r\n        logger.error('ÔØî Error loading dependents:', result.error);\r\n        toast.error(`Ba─şl─▒ ki┼şiler y├╝klenirken hata: ${  result.error}`);\r\n        setExistingDependents([]);\r\n      }\r\n    } catch (error: any) {\r\n      logger.error('ÔØî Unexpected error loading dependents:', error);\r\n      toast.error('Ba─şl─▒ ki┼şiler y├╝klenirken beklenmeyen hata olu┼ştu');\r\n      setExistingDependents([]);\r\n    } finally {\r\n      setIsLoadingDependents(false);\r\n    }\r\n  };\r\n\r\n  const handleCloseDependentPersonModal = () => {\r\n    setIsDependentPersonModalOpen(false);\r\n    setModalMode('list'); // Liste moduna d├Ân\r\n    setSelectedDependentId(null);\r\n    setSelectedRelationshipType('');\r\n    setDependentSearchTerm('');\r\n    setDependentPersonData({\r\n      name: '',\r\n      surname: '',\r\n      id_number: '',\r\n      phone: '',\r\n      relationship: '',\r\n      birth_date: '',\r\n      gender: '',\r\n      address: '',\r\n    });\r\n  };\r\n\r\n  const validateTcNumber = (tc: string): boolean => {\r\n    const cleanTc = tc.replace(/\\s/g, '');\r\n    return /^\\d{11}$/.test(cleanTc);\r\n  };\r\n\r\n  const validatePhoneNumber = (phone: string): boolean => {\r\n    const cleanPhone = phone.replace(/[\\s()-]/g, '');\r\n    return /^(05\\d{9}|\\+905\\d{9})$/.test(cleanPhone);\r\n  };\r\n\r\n  const handleSaveDependent = async () => {\r\n    // Validation\r\n    if (!dependentPersonData.name.trim()) {\r\n      toast.error('Ad alan─▒ zorunludur');\r\n      return;\r\n    }\r\n\r\n    if (!dependentPersonData.surname.trim()) {\r\n      toast.error('Soyad alan─▒ zorunludur');\r\n      return;\r\n    }\r\n\r\n    if (!dependentPersonData.id_number.trim()) {\r\n      toast.error('TC Kimlik No alan─▒ zorunludur');\r\n      return;\r\n    }\r\n\r\n    if (!validateTcNumber(dependentPersonData.id_number)) {\r\n      toast.error('TC Kimlik No 11 haneli olmal─▒d─▒r');\r\n      return;\r\n    }\r\n\r\n    if (dependentPersonData.phone && !validatePhoneNumber(dependentPersonData.phone)) {\r\n      toast.error('Ge├ğerli bir telefon numaras─▒ giriniz');\r\n      return;\r\n    }\r\n\r\n    if (!dependentPersonData.relationship) {\r\n      toast.error('Yak─▒nl─▒k derecesi se├ğiniz');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsSavingDependent(true);\r\n\r\n      // Here you would typically save to database\r\n      // For now, we'll simulate the save operation\r\n      await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n      toast.success('Bakmakla y├╝k├╝ml├╝ ki┼şi ba┼şar─▒yla kaydedildi');\r\n      handleCloseDependentPersonModal();\r\n    } catch (error) {\r\n      logger.error('Error saving dependent person:', error);\r\n      toast.error('Kay─▒t s─▒ras─▒nda hata olu┼ştu');\r\n    } finally {\r\n      setIsSavingDependent(false);\r\n    }\r\n  };\r\n\r\n  const handleSaveAndGoToDetail = async () => {\r\n    await handleSaveDependent();\r\n    // Navigate to the new dependent person's detail page\r\n    // This would typically use router navigation\r\n    toast.info('Detay sayfas─▒na y├Ânlendiriliyor...');\r\n  };\r\n\r\n  // Mevcut ki┼şiyi ba─şla - family_relationships tablosuna kaydet\r\n  const handleLinkExistingPerson = async () => {\r\n    if (!selectedDependentId || !beneficiaryId) {\r\n      toast.error('L├╝tfen ba─şlanacak ki┼şiyi se├ğiniz');\r\n      return;\r\n    }\r\n\r\n    if (!selectedRelationshipType) {\r\n      toast.error('L├╝tfen yak─▒nl─▒k derecesi se├ğiniz');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      setIsSavingDependent(true);\r\n\r\n      const selectedPerson = existingDependents.find((p) => p.id === selectedDependentId);\r\n      logger.info(\r\n        '­şöä Linking person:',\r\n        selectedPerson?.ad_soyad,\r\n        'to beneficiary:',\r\n        beneficiaryId,\r\n        'relationship:',\r\n        selectedRelationshipType,\r\n      );\r\n\r\n      // Integer ID'leri UUID'ye ├ğevir ve family_relationships tablosuna kaydet\r\n      const primaryUuid = `00000000-0000-0000-0000-${beneficiaryId.toString().padStart(12, '0')}`;\r\n      const memberUuid = `00000000-0000-0000-0000-${selectedDependentId\r\n        .toString()\r\n        .padStart(12, '0')}`;\r\n\r\n      logger.info('­şöä Converting IDs:', {\r\n        beneficiaryId,\r\n        selectedDependentId,\r\n        primaryUuid,\r\n        memberUuid,\r\n      });\r\n\r\n      const { data, error } = await supabaseAdmin\r\n        .from('family_relationships')\r\n        .insert({\r\n          primary_beneficiary_id: primaryUuid,\r\n          family_member_id: memberUuid,\r\n          relationship_type: selectedRelationshipType,\r\n          is_dependent: true,\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        logger.error('ÔØî Error creating relationship:', error);\r\n        toast.error(`Ba─şlant─▒ kaydedilirken hata: ${  error.message}`);\r\n        return;\r\n      }\r\n\r\n      logger.info('Ô£à Relationship created:', data);\r\n      toast.success(`${selectedPerson?.ad_soyad} ba┼şar─▒yla ba─şland─▒`);\r\n\r\n      // Ba─şl─▒ ki┼şiler listesini yenile\r\n      await loadConnectedDependents();\r\n\r\n      // Liste moduna d├Ân\r\n      setModalMode('list');\r\n      setSelectedDependentId(null);\r\n    } catch (error: any) {\r\n      logger.error('ÔØî Unexpected error linking person:', error);\r\n      toast.error('Ba─şlant─▒ s─▒ras─▒nda beklenmeyen hata olu┼ştu');\r\n    } finally {\r\n      setIsSavingDependent(false);\r\n    }\r\n  };\r\n\r\n  // Ba─şlant─▒y─▒ kald─▒r - localStorage'dan\r\n  const handleRemoveConnection = async (relationshipId: string, personName: string) => {\r\n    try {\r\n      logger.info('­şöä Removing relationship:', relationshipId);\r\n\r\n      const { error } = await supabaseAdmin\r\n        .from('family_relationships')\r\n        .delete()\r\n        .eq('id', relationshipId);\r\n\r\n      if (error) {\r\n        logger.error('ÔØî Error removing relationship:', error);\r\n        toast.error(`Ba─şlant─▒ kald─▒r─▒l─▒rken hata: ${  error.message}`);\r\n        return;\r\n      }\r\n\r\n      logger.info('Ô£à Relationship removed:', relationshipId);\r\n      toast.success(`${personName} ile ba─şlant─▒ kald─▒r─▒ld─▒`);\r\n\r\n      // Ba─şl─▒ ki┼şiler listesini yenile\r\n      await loadConnectedDependents();\r\n    } catch (error: any) {\r\n      logger.error('ÔØî Unexpected error removing relationship:', error);\r\n      toast.error('Ba─şlant─▒ kald─▒r─▒l─▒rken beklenmeyen hata olu┼ştu');\r\n    }\r\n  };\r\n\r\n  const handleFileUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n    const {files} = event.target;\r\n    if (!files) return;\r\n\r\n    setIsUploading(true);\r\n    setUploadProgress(0);\r\n\r\n    // Simulate upload progress\r\n    const interval = setInterval(() => {\r\n      setUploadProgress((prev) => {\r\n        if (prev >= 100) {\r\n          clearInterval(interval);\r\n          setIsUploading(false);\r\n\r\n          // Add uploaded files to the list\r\n          const newFiles = Array.from(files).map((file, index) => ({\r\n            id: (Date.now() + index).toString(),\r\n            name: file.name,\r\n            size: `${(file.size / (1024 * 1024)).toFixed(1)  } MB`,\r\n            type: file.type,\r\n            uploadDate: new Date().toISOString().split('T')[0],\r\n            url: URL.createObjectURL(file),\r\n          }));\r\n\r\n          setUploadedFiles((prev) => [...(prev || []), ...newFiles]);\r\n          toast.success(`${files.length} dosya ba┼şar─▒yla y├╝klendi`);\r\n          return 100;\r\n        }\r\n        return prev + 10;\r\n      });\r\n    }, 200);\r\n  };\r\n\r\n  const handleDeleteFile = (fileId: string) => {\r\n    setUploadedFiles((prev) => (prev || []).filter((file) => file.id !== fileId));\r\n    toast.success('Dosya ba┼şar─▒yla silindi');\r\n  };\r\n\r\n  const handlePreviewFile = (file: any) => {\r\n    setPreviewFile(file);\r\n    setIsPreviewOpen(true);\r\n  };\r\n\r\n  const handleDownloadFile = (file: any) => {\r\n    // Simulate download\r\n    toast.success(`${file.name} indiriliyor...`);\r\n  };\r\n\r\n  const getFileIcon = (fileType: string) => {\r\n    if (fileType.startsWith('image/')) return <ImageIcon className=\"w-4 h-4\" />;\r\n    if (fileType.includes('pdf')) return <FileIcon className=\"w-4 h-4\" />;\r\n    if (fileType.includes('spreadsheet') || fileType.includes('excel'))\r\n      return <FileSpreadsheet className=\"w-4 h-4\" />;\r\n    return <File className=\"w-4 h-4\" />;\r\n  };\r\n\r\n  const filteredFiles =\r\n    uploadedFiles?.filter((file) => {\r\n      const matchesSearch = file.name.toLowerCase().includes(searchTerm.toLowerCase());\r\n      const matchesType =\r\n        selectedFileType === 'all' ||\r\n        (selectedFileType === 'image' && file.type.startsWith('image/')) ||\r\n        (selectedFileType === 'pdf' && file.type.includes('pdf')) ||\r\n        (selectedFileType === 'document' &&\r\n          !file.type.startsWith('image/') &&\r\n          !file.type.includes('pdf'));\r\n      return matchesSearch && matchesType;\r\n    }) || [];\r\n\r\n  // Show loading state\r\n  if (loading) {\r\n    return (\r\n      <div className=\"min-h-screen bg-neutral-100 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\" />\r\n          <p className=\"text-sm text-gray-600\">─░htiya├ğ sahibi bilgileri y├╝kleniyor...</p>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Show error state if no beneficiary data and not loading\r\n  if (!loading && !beneficiaryData) {\r\n    return (\r\n      <div className=\"min-h-screen bg-neutral-100 flex items-center justify-center\">\r\n        <div className=\"text-center\">\r\n          <AlertTriangle className=\"w-12 h-12 text-amber-500 mx-auto mb-4\" />\r\n          <h2 className=\"text-lg font-semibold mb-2\">─░htiya├ğ Sahibi Bulunamad─▒</h2>\r\n          <p className=\"text-sm text-gray-600 mb-4\">Belirtilen ID ile bir kay─▒t bulunamad─▒.</p>\r\n          {onBack && (\r\n            <Button onClick={onBack} variant=\"outline\">\r\n              Geri D├Ân\r\n            </Button>\r\n          )}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"min-h-screen bg-neutral-100 text-neutral-900\">\r\n      {/* Top Bar */}\r\n      <div className=\"sticky top-0 z-30 border-b bg-white shadow-sm\">\r\n        <div className=\"mx-auto flex max-w-[1400px] items-center justify-between gap-3 px-4 py-3\">\r\n          {/* Sol taraf - Ba┼şl─▒k */}\r\n          <div className=\"flex-1\">\r\n            <h1 className=\"text-lg font-semibold text-gray-900\">\r\n              {beneficiaryData ? (\r\n                <>\r\n                  {/* T├╝r├╝ne g├Âre dinamik ba┼şl─▒k */}\r\n                  {(() => {\r\n                    const tur =\r\n                      (beneficiaryData.tur as string) ||\r\n                      (beneficiaryData.Tur as string) ||\r\n                      '─░htiya├ğ Sahibi';\r\n                    const displayType = tur.includes('Bakmakla Y├╝k├╝ml├╝')\r\n                      ? 'Bakmakla Y├╝k├╝ml├╝ Olunan Ki┼şi'\r\n                      : tur.includes('─░htiya├ğ Sahibi')\r\n                        ? '─░htiya├ğ Sahibi'\r\n                        : tur; // Di─şer t├╝rler oldu─şu gibi g├Âsterilir\r\n\r\n                    return `${displayType} - Dosya No: #${beneficiaryData.id}`;\r\n                  })()}\r\n                </>\r\n              ) : (\r\n                `Y├╝kleniyor... - Dosya No: #${beneficiaryId}`\r\n              )}\r\n            </h1>\r\n          </div>\r\n\r\n          {/* Sa─ş taraf - Butonlar */}\r\n          <div className=\"flex items-center gap-2\">\r\n            {editMode ? (\r\n              <>\r\n                <Button\r\n                  onClick={handleSave}\r\n                  className=\"bg-emerald-600 hover:bg-emerald-700 text-white px-4 py-2 text-sm font-medium rounded-md transition-colors\"\r\n                >\r\n                  <Save className=\"w-4 h-4 mr-2\" />\r\n                  Kaydet\r\n                </Button>\r\n                <Button\r\n                  onClick={handleCancel}\r\n                  className=\"bg-rose-600 hover:bg-rose-700 text-white px-4 py-2 text-sm font-medium rounded-md transition-colors\"\r\n                >\r\n                  <X className=\"w-4 h-4 mr-2\" />\r\n                  ─░ptal\r\n                </Button>\r\n              </>\r\n            ) : (\r\n              <>\r\n                {onBack && (\r\n                  <Button\r\n                    onClick={onBack}\r\n                    variant=\"outline\"\r\n                    className=\"px-4 py-2 text-sm font-medium rounded-md border-gray-300 hover:bg-gray-50 transition-colors\"\r\n                  >\r\n                    ÔåÉ Geri\r\n                  </Button>\r\n                )}\r\n                <Button\r\n                  onClick={() => {\r\n                    setEditMode(true);\r\n                  }}\r\n                  className=\"bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 text-sm font-medium rounded-md transition-colors\"\r\n                >\r\n                  <Edit3 className=\"w-4 h-4 mr-2\" />\r\n                  D├╝zenle\r\n                </Button>\r\n              </>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"mx-auto grid max-w-[1400px] grid-cols-12 gap-4 px-4 py-4\">\r\n        {/* Main Form Content */}\r\n        <section className=\"col-span-12 lg:col-span-9 flex flex-col gap-4\">\r\n          {/* Personal Information Section */}\r\n          <Card className=\"shadow-sm border border-gray-100 bg-white hover:shadow-md transition-shadow duration-200\">\r\n            <CardContent className=\"p-8\">\r\n              <div className=\"grid grid-cols-12 gap-6\">\r\n                {/* Photo Section */}\r\n                <div className=\"col-span-12 sm:col-span-3\">\r\n                  <div className=\"space-y-4\">\r\n                    <Label className=\"text-sm font-semibold text-gray-800 block\">Foto─şraf</Label>\r\n                    <div className=\"photo-upload-area bg-gray-50 border-2 border-dashed border-gray-300 rounded-lg hover:border-gray-400 transition-colors duration-200\" />\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <Button size=\"sm\" variant=\"outline\" className=\"flex-1 text-xs\">\r\n                        <Upload className=\"w-3 h-3 mr-1\" />\r\n                        Ekle\r\n                      </Button>\r\n                      <Button size=\"sm\" variant=\"outline\" className=\"flex-1 text-xs\">\r\n                        <Trash2 className=\"w-3 h-3 mr-1\" />\r\n                        Sil\r\n                      </Button>\r\n                      <Button size=\"sm\" variant=\"outline\" className=\"flex-1 text-xs\">\r\n                        <Edit3 className=\"w-3 h-3 mr-1\" />\r\n                        D├╝zenle\r\n                      </Button>\r\n                    </div>\r\n                    <div className=\"space-y-3\">\r\n                      <Label className=\"text-sm font-semibold text-gray-800 block\">├ûncelik</Label>\r\n                      <Select\r\n                        disabled={!editMode}\r\n                        value={(beneficiaryData?.priority_level as string) || 'medium'}\r\n                      >\r\n                        <SelectTrigger className=\"h-10 text-sm border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200\">\r\n                          <SelectValue\r\n                            placeholder={\r\n                              beneficiaryData?.priority_level === 'high'\r\n                                ? 'Y├╝ksek'\r\n                                : beneficiaryData?.priority_level === 'medium'\r\n                                  ? 'Orta'\r\n                                  : beneficiaryData?.priority_level === 'low'\r\n                                    ? 'D├╝┼ş├╝k'\r\n                                    : 'Yok'\r\n                            }\r\n                          />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"none\">Yok</SelectItem>\r\n                          <SelectItem value=\"low\">D├╝┼ş├╝k</SelectItem>\r\n                          <SelectItem value=\"medium\">Orta</SelectItem>\r\n                          <SelectItem value=\"high\">Y├╝ksek</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Identity Information */}\r\n                <div className=\"col-span-12 sm:col-span-9 grid grid-cols-12 gap-6\">\r\n                  <div className=\"col-span-12 md:col-span-6 grid grid-cols-12 gap-4\">\r\n                    {/* Country & Status */}\r\n                    <div className=\"col-span-4 space-y-2\">\r\n                      <Label className=\"text-sm font-semibold text-gray-800 block\">├£lke</Label>\r\n                      <Select disabled={!editMode}>\r\n                        <SelectTrigger className=\"h-10 text-sm border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200\">\r\n                          <SelectValue placeholder=\"T├╝rkiye\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"tr\">T├╝rkiye</SelectItem>\r\n                          <SelectItem value=\"sy\">Suriye</SelectItem>\r\n                          <SelectItem value=\"iq\">Irak</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n\r\n                    <div className=\"col-span-8 space-y-2\">\r\n                      <Label className=\"text-sm font-semibold text-gray-800 block\">Durum</Label>\r\n                      <Select\r\n                        disabled={!editMode}\r\n                        value={(beneficiaryData?.status as string) || 'under_evaluation'}\r\n                      >\r\n                        <SelectTrigger className=\"h-10 text-sm border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200\">\r\n                          <SelectValue\r\n                            placeholder={\r\n                              beneficiaryData?.status === '1' ||\r\n                              beneficiaryData?.status === 'active'\r\n                                ? 'Aktif'\r\n                                : beneficiaryData?.status === '0' ||\r\n                                    beneficiaryData?.status === 'under_evaluation'\r\n                                  ? 'De─şerlendirmede'\r\n                                  : beneficiaryData?.status === '2' ||\r\n                                      beneficiaryData?.status === 'passive'\r\n                                    ? 'Pasif'\r\n                                    : beneficiaryData?.status === 'suspended'\r\n                                      ? 'Ask─▒da'\r\n                                      : 'De─şerlendirmede'\r\n                            }\r\n                          />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"under_evaluation\">De─şerlendirmede</SelectItem>\r\n                          <SelectItem value=\"active\">Aktif</SelectItem>\r\n                          <SelectItem value=\"passive\">Pasif</SelectItem>\r\n                          <SelectItem value=\"suspended\">Ask─▒da</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n\r\n                    {/* Name Fields */}\r\n                    <div className=\"col-span-6 space-y-2\">\r\n                      <Label className=\"text-sm font-semibold text-gray-800 block\">Ad─▒</Label>\r\n                      <Input\r\n                        className=\"h-10 text-sm border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200\"\r\n                        placeholder=\"Ad giriniz\"\r\n                        value={(editableData?.name as string) || ''}\r\n                        onChange={(e) => {\r\n                          setEditableData((prev: any) => ({ ...prev, name: e.target.value }));\r\n                        }}\r\n                        readOnly={!editMode}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"col-span-6 space-y-2\">\r\n                      <Label className=\"text-sm font-semibold text-gray-800 block\">Soyad─▒</Label>\r\n                      <Input\r\n                        className=\"h-10 text-sm border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200\"\r\n                        placeholder=\"Soyad giriniz\"\r\n                        value={(editableData?.surname as string) || ''}\r\n                        onChange={(e) => {\r\n                          setEditableData((prev: any) => ({ ...prev, surname: e.target.value }));\r\n                        }}\r\n                        readOnly={!editMode}\r\n                      />\r\n                    </div>\r\n\r\n                    {/* Nationality & Country */}\r\n                    <div className=\"col-span-6 space-y-2\">\r\n                      <Label className=\"text-sm font-semibold text-gray-800 block\">Uyruk</Label>\r\n                      <Input\r\n                        className=\"h-10 text-sm border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200\"\r\n                        placeholder=\"Uyruk giriniz\"\r\n                        value={(editableData?.nationality as string) || ''}\r\n                        onChange={(e) => {\r\n                          setEditableData((prev: any) => ({\r\n                            ...prev,\r\n                            nationality: e.target.value,\r\n                          }));\r\n                        }}\r\n                        readOnly={!editMode}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"col-span-6 space-y-2\">\r\n                      <Label className=\"text-sm font-semibold text-gray-800 block\">├£lke</Label>\r\n                      <Input\r\n                        className=\"h-10 text-sm border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200\"\r\n                        placeholder=\"├£lke giriniz\"\r\n                        value={(editableData?.country as string) || ''}\r\n                        onChange={(e) => {\r\n                          setEditableData((prev: any) => ({ ...prev, country: e.target.value }));\r\n                        }}\r\n                        readOnly={!editMode}\r\n                      />\r\n                    </div>\r\n\r\n                    {/* Email */}\r\n                    <div className=\"col-span-12 space-y-2\">\r\n                      <Label className=\"text-sm font-semibold text-gray-800 block\">\r\n                        E-Posta Adresi\r\n                      </Label>\r\n                      <Input\r\n                        type=\"email\"\r\n                        className=\"h-10 text-sm border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200\"\r\n                        placeholder=\"E-posta giriniz\"\r\n                        readOnly={!editMode}\r\n                      />\r\n                    </div>\r\n\r\n                    {/* ID Number & Central Control */}\r\n                    <div className=\"col-span-6 space-y-2\">\r\n                      <Label className=\"text-sm font-semibold text-gray-800 block\">Kimlik No</Label>\r\n                      <Input\r\n                        className=\"h-10 text-sm border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200\"\r\n                        placeholder=\"Kimlik No\"\r\n                        value={(editableData?.id_number as string) || ''}\r\n                        onChange={(e) => {\r\n                          setEditableData((prev: any) => ({ ...prev, id_number: e.target.value }));\r\n                        }}\r\n                        readOnly={!editMode}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"col-span-6 space-y-2 flex items-end\">\r\n                      <Button\r\n                        variant=\"link\"\r\n                        className=\"inline-action-link h-10 px-0 text-sm text-blue-600 hover:text-blue-800 underline font-medium transition-colors duration-200\"\r\n                        disabled={!editMode}\r\n                      >\r\n                        Merkezi Kontrol├╝ Yap\r\n                      </Button>\r\n                    </div>\r\n\r\n                    {/* Marital Status & Religion */}\r\n                    <div className=\"col-span-6 space-y-2\">\r\n                      <Label className=\"text-sm font-semibold text-gray-800 block\">\r\n                        Medeni H├óli\r\n                      </Label>\r\n                      <Select disabled={!editMode}>\r\n                        <SelectTrigger className=\"h-10 text-sm border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200\">\r\n                          <SelectValue placeholder=\"Bek├ór\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"single\">Bek├ór</SelectItem>\r\n                          <SelectItem value=\"married\">Evli</SelectItem>\r\n                          <SelectItem value=\"divorced\">Bo┼şanm─▒┼ş</SelectItem>\r\n                          <SelectItem value=\"widowed\">Dul</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n\r\n                    <div className=\"col-span-6 space-y-2\">\r\n                      <Label className=\"text-sm font-semibold text-gray-800 block\">Din</Label>\r\n                      <Select disabled={!editMode}>\r\n                        <SelectTrigger className=\"h-10 text-sm border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200\">\r\n                          <SelectValue placeholder=\"─░nan├ğ\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"islam\">─░slam</SelectItem>\r\n                          <SelectItem value=\"christianity\">Hristiyanl─▒k</SelectItem>\r\n                          <SelectItem value=\"other\">Di─şer</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n\r\n                    {/* Spouse & Parent Info */}\r\n                    <div className=\"col-span-6 space-y-2\">\r\n                      <Label className=\"text-sm font-semibold text-gray-800 block\">\r\n                        E┼ş Bilgisi\r\n                      </Label>\r\n                      <Select disabled={!editMode}>\r\n                        <SelectTrigger className=\"h-10 text-sm border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200\">\r\n                          <SelectValue placeholder=\"Yok\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"none\">Yok</SelectItem>\r\n                          <SelectItem value=\"exists\">Var</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n\r\n                    <div className=\"col-span-6 space-y-2\">\r\n                      <Label className=\"text-sm font-semibold text-gray-800 block\">\r\n                        Baba / Anne\r\n                      </Label>\r\n                      <Select disabled={!editMode}>\r\n                        <SelectTrigger className=\"h-10 text-sm border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200\">\r\n                          <SelectValue placeholder=\"ÔÇö\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"none\">ÔÇö</SelectItem>\r\n                          <SelectItem value=\"father\">Baba</SelectItem>\r\n                          <SelectItem value=\"mother\">Anne</SelectItem>\r\n                          <SelectItem value=\"both\">Her ikisi</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n\r\n                    {/* Sponsorship & File Number */}\r\n                    <div className=\"col-span-6 space-y-2\">\r\n                      <Label className=\"text-sm font-semibold text-gray-800 block\">\r\n                        Sponsorluk T├╝r├╝\r\n                      </Label>\r\n                      <Select disabled={!editMode}>\r\n                        <SelectTrigger className=\"h-10 text-sm border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200\">\r\n                          <SelectValue placeholder=\"Yok\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"none\">Yok</SelectItem>\r\n                          <SelectItem value=\"individual\">Bireysel</SelectItem>\r\n                          <SelectItem value=\"corporate\">Kurumsal</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n\r\n                    <div className=\"col-span-6 space-y-2\">\r\n                      <Label className=\"text-sm font-semibold text-gray-800 block\">\r\n                        Dosya Numaras─▒\r\n                      </Label>\r\n                      <Input\r\n                        className=\"h-10 text-sm border border-gray-300 bg-gray-50 font-medium text-gray-700\"\r\n                        value={beneficiaryData?.id ? `#${beneficiaryData.id}` : ''}\r\n                        placeholder=\"Dosya No\"\r\n                        readOnly={true}\r\n                      />\r\n                      <p className=\"text-xs text-gray-500\">Sistem taraf─▒ndan otomatik atan─▒r</p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {/* Contact Information */}\r\n                  <div className=\"col-span-12 md:col-span-6 grid grid-cols-12 gap-3\">\r\n                    {/* Phone Number */}\r\n                    <div className=\"col-span-6 space-y-2\">\r\n                      <Label className=\"text-sm font-semibold text-gray-800 block\">\r\n                        Cep Telefonu\r\n                      </Label>\r\n                      <div className=\"flex\">\r\n                        <span className=\"inline-flex items-center px-3 rounded-l-md border border-r-0 border-gray-300 bg-gray-50 text-sm text-gray-600\">\r\n                          +90\r\n                        </span>\r\n                        <Input\r\n                          className=\"h-10 text-sm rounded-l-none border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200\"\r\n                          placeholder=\"5XX XXX XX XX\"\r\n                          value={(editableData?.phone as string) || ''}\r\n                          onChange={(e) => {\r\n                            setEditableData((prev: any) => ({ ...prev, phone: e.target.value }));\r\n                          }}\r\n                          readOnly={!editMode}\r\n                        />\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"col-span-6 space-y-2\">\r\n                      <Label className=\"text-sm font-semibold text-gray-800 block\">\r\n                        ─░leti┼şim Tercihi\r\n                      </Label>\r\n                      <Select disabled={!editMode}>\r\n                        <SelectTrigger className=\"h-10 text-sm border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200\">\r\n                          <SelectValue placeholder=\"Telefon\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"phone\">Telefon</SelectItem>\r\n                          <SelectItem value=\"email\">E-posta</SelectItem>\r\n                          <SelectItem value=\"sms\">SMS</SelectItem>\r\n                          <SelectItem value=\"whatsapp\">WhatsApp</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n\r\n                    {/* Location */}\r\n                    <div className=\"col-span-6 space-y-2\">\r\n                      <Label className=\"text-sm font-semibold text-gray-800 block\">\r\n                        ┼Şehir / B├Âlge\r\n                      </Label>\r\n                      <Input\r\n                        className=\"h-10 text-sm border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200\"\r\n                        placeholder=\"┼Şehir giriniz\"\r\n                        value={(editableData?.city as string) || ''}\r\n                        onChange={(e) => {\r\n                          setEditableData((prev: any) => ({ ...prev, city: e.target.value }));\r\n                        }}\r\n                        readOnly={!editMode}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"col-span-6 space-y-2\">\r\n                      <Label className=\"text-sm font-semibold text-gray-800 block\">Yerle┼şim</Label>\r\n                      <Input\r\n                        className=\"h-10 text-sm border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200\"\r\n                        placeholder=\"Yerle┼şim yeri giriniz\"\r\n                        value={(editableData?.settlement as string) || ''}\r\n                        onChange={(e) => {\r\n                          setEditableData((prev: any) => ({ ...prev, settlement: e.target.value }));\r\n                        }}\r\n                        readOnly={!editMode}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"col-span-6 space-y-2\">\r\n                      <Label className=\"text-sm font-semibold text-gray-800 block\">Mahalle</Label>\r\n                      <Input\r\n                        className=\"h-10 text-sm border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200\"\r\n                        placeholder=\"Mahalle giriniz\"\r\n                        value={(editableData?.neighborhood as string) || ''}\r\n                        onChange={(e) => {\r\n                          setEditableData((prev: any) => ({\r\n                            ...prev,\r\n                            neighborhood: e.target.value,\r\n                          }));\r\n                        }}\r\n                        readOnly={!editMode}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"col-span-6 space-y-2\">\r\n                      <Label className=\"text-sm font-semibold text-gray-800 block\">\r\n                        Mahalle / K├Ây\r\n                      </Label>\r\n                      <Select disabled={!editMode}>\r\n                        <SelectTrigger className=\"h-10 text-sm border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200\">\r\n                          <SelectValue placeholder=\"ÔÇö\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"none\">ÔÇö</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n\r\n                    {/* Address */}\r\n                    <div className=\"col-span-12 space-y-2\">\r\n                      <Label className=\"text-sm font-semibold text-gray-800 block\">Adres</Label>\r\n                      <Textarea\r\n                        className=\"text-sm resize-none border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200\"\r\n                        rows={3}\r\n                        placeholder=\"Adres detay─▒\"\r\n                        value={(editableData?.address as string) || ''}\r\n                        onChange={(e) => {\r\n                          setEditableData((prev: any) => ({ ...prev, address: e.target.value }));\r\n                        }}\r\n                        readOnly={!editMode}\r\n                      />\r\n                    </div>\r\n\r\n                    {/* Housing & Records */}\r\n                    <div className=\"col-span-6 space-y-2\">\r\n                      <Label className=\"text-sm font-semibold text-gray-800 block\">\r\n                        Ev / Arazi\r\n                      </Label>\r\n                      <Select disabled={!editMode}>\r\n                        <SelectTrigger className=\"h-10 text-sm border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200\">\r\n                          <SelectValue placeholder=\"Kirac─▒\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"tenant\">Kirac─▒</SelectItem>\r\n                          <SelectItem value=\"owner\">Ev Sahibi</SelectItem>\r\n                          <SelectItem value=\"guest\">Misafir</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n\r\n                    <div className=\"col-span-6 space-y-2 flex items-end\">\r\n                      <div className=\"flex items-center space-x-2\">\r\n                        <Checkbox id=\"delete-record\" disabled={!editMode} />\r\n                        <Label\r\n                          htmlFor=\"delete-record\"\r\n                          className=\"text-sm font-semibold text-gray-800\"\r\n                        >\r\n                          Kayd─▒ Sil\r\n                        </Label>\r\n                      </div>\r\n                    </div>\r\n\r\n                    {/* Family Information */}\r\n                    <div className=\"col-span-6 space-y-2\">\r\n                      <Label className=\"text-sm font-semibold text-gray-800 block\">\r\n                        Ba─şl─▒ Yetim\r\n                      </Label>\r\n                      <Select disabled={!editMode}>\r\n                        <SelectTrigger className=\"h-10 text-sm border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200\">\r\n                          <SelectValue placeholder=\"Yok\" />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"none\">Yok</SelectItem>\r\n                          <SelectItem value=\"exists\">Var</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n\r\n                    <div className=\"col-span-6 space-y-2\">\r\n                      <Label className=\"text-sm font-semibold text-gray-800 block\">\r\n                        Ailedeki Ki┼şi Say─▒s─▒\r\n                      </Label>\r\n                      <Select\r\n                        disabled={!editMode}\r\n                        value={(beneficiaryData?.family_size as number)?.toString() || ''}\r\n                      >\r\n                        <SelectTrigger className=\"h-10 text-sm border border-gray-300 focus:border-blue-500 focus:ring-2 focus:ring-blue-200 transition-all duration-200\">\r\n                          <SelectValue\r\n                            placeholder={\r\n                              (beneficiaryData?.family_size as number)?.toString() || 'ÔÇö'\r\n                            }\r\n                          />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"1\">1</SelectItem>\r\n                          <SelectItem value=\"2\">2</SelectItem>\r\n                          <SelectItem value=\"3\">3</SelectItem>\r\n                          <SelectItem value=\"4\">4</SelectItem>\r\n                          <SelectItem value=\"5\">5</SelectItem>\r\n                          <SelectItem value=\"6\">6</SelectItem>\r\n                          <SelectItem value=\"7\">7</SelectItem>\r\n                          <SelectItem value=\"8\">8+</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* Detailed Information Cards */}\r\n          <div className=\"grid grid-cols-12 gap-4\">\r\n            {/* Identity Information */}\r\n            <Card className=\"col-span-12 md:col-span-6 xl:col-span-3 shadow-sm border-0 bg-white\">\r\n              <CardHeader className=\"pb-3\">\r\n                <CardTitle className=\"text-sm font-semibold flex items-center gap-2\">\r\n                  <User className=\"w-4 h-4 text-primary\" />\r\n                  Kimlik Bilgileri\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-3\">\r\n                <div className=\"space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">Baba Ad─▒</Label>\r\n                  <Input\r\n                    className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\"\r\n                    value={(editableData?.baba_adi as string) || ''}\r\n                    onChange={(e) => {\r\n                      setEditableData((prev: any) => ({ ...prev, baba_adi: e.target.value }));\r\n                    }}\r\n                    readOnly={!editMode}\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">Anne Ad─▒</Label>\r\n                  <Input\r\n                    className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\"\r\n                    value={(editableData?.anne_adi as string) || ''}\r\n                    onChange={(e) => {\r\n                      setEditableData((prev: any) => ({ ...prev, anne_adi: e.target.value }));\r\n                    }}\r\n                    readOnly={!editMode}\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">─░kametgah</Label>\r\n                  <Input\r\n                    className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\"\r\n                    readOnly={!editMode}\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">Kimlik Belgesi T├╝r├╝</Label>\r\n                  <Select disabled={!editMode}>\r\n                    <SelectTrigger className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\">\r\n                      <SelectValue placeholder=\"ÔÇö\" />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"id\">Kimlik Kart─▒</SelectItem>\r\n                      <SelectItem value=\"passport\">Pasaport</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n                <div className=\"space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">Kimlik Verili┼ş Yeri</Label>\r\n                  <Input\r\n                    className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\"\r\n                    readOnly={!editMode}\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">Seri Numaras─▒</Label>\r\n                  <Input\r\n                    className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\"\r\n                    readOnly={!editMode}\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">├ûnceki Unvan─▒ (Varsa)</Label>\r\n                  <Input\r\n                    className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\"\r\n                    readOnly={!editMode}\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">├ûnceki ─░smi (Varsa)</Label>\r\n                  <Select disabled={!editMode}>\r\n                    <SelectTrigger className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\">\r\n                      <SelectValue placeholder=\"Yok\" />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"none\">Yok</SelectItem>\r\n                      <SelectItem value=\"exists\">Var</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Passport and Visa */}\r\n            <Card className=\"col-span-12 md:col-span-6 xl:col-span-3 shadow-sm border-0 bg-white\">\r\n              <CardHeader className=\"pb-3\">\r\n                <CardTitle className=\"text-sm font-semibold flex items-center gap-2\">\r\n                  <FileText className=\"w-4 h-4 text-primary\" />\r\n                  Pasaport ve Vize\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-3\">\r\n                <div className=\"space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">Pasaport T├╝r├╝</Label>\r\n                  <Input\r\n                    className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\"\r\n                    readOnly={!editMode}\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">Pasaport Numaras─▒</Label>\r\n                  <Input\r\n                    className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\"\r\n                    readOnly={!editMode}\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">\r\n                    Pasaport Ge├ğerlilik Tarihi\r\n                  </Label>\r\n                  <Input\r\n                    type=\"date\"\r\n                    className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\"\r\n                    readOnly={!editMode}\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">Vize Ge├ği┼ş Tarihi</Label>\r\n                  <Input\r\n                    type=\"date\"\r\n                    className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\"\r\n                    readOnly={!editMode}\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">Vize Biti┼ş Tarihi</Label>\r\n                  <Input\r\n                    className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\"\r\n                    readOnly={!editMode}\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">\r\n                    Giri┼ş / ├ç─▒k─▒┼ş Bilgileri\r\n                  </Label>\r\n                  <Input\r\n                    className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\"\r\n                    readOnly={!editMode}\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">Yerel D├Ân├╝┼ş Bilgisi</Label>\r\n                  <Input\r\n                    className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\"\r\n                    readOnly={!editMode}\r\n                  />\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Personal Data */}\r\n            <Card className=\"col-span-12 md:col-span-6 xl:col-span-3 shadow-sm border-0 bg-white\">\r\n              <CardHeader className=\"pb-3\">\r\n                <CardTitle className=\"text-sm font-semibold flex items-center gap-2\">\r\n                  <Calendar className=\"w-4 h-4 text-primary\" />\r\n                  Ki┼şisel Veriler\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-3\">\r\n                <div className=\"space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">Cinsiyet</Label>\r\n                  <Select disabled={!editMode}>\r\n                    <SelectTrigger className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\">\r\n                      <SelectValue placeholder=\"Kad─▒n\" />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"female\">Kad─▒n</SelectItem>\r\n                      <SelectItem value=\"male\">Erkek</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n                <div className=\"space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">Do─şum Tarihi</Label>\r\n                  <Input\r\n                    type=\"date\"\r\n                    className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\"\r\n                    value={(editableData?.dogum_tarihi as string) || ''}\r\n                    onChange={(e) => {\r\n                      setEditableData((prev: any) => ({ ...prev, dogum_tarihi: e.target.value }));\r\n                    }}\r\n                    readOnly={!editMode}\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">Do─şum Yeri</Label>\r\n                  <Input\r\n                    className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\"\r\n                    value={(editableData?.dogum_yeri as string) || ''}\r\n                    onChange={(e) => {\r\n                      setEditableData((prev: any) => ({ ...prev, dogum_yeri: e.target.value }));\r\n                    }}\r\n                    readOnly={!editMode}\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">Kan Grubu</Label>\r\n                  <Select disabled={!editMode}>\r\n                    <SelectTrigger className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\">\r\n                      <SelectValue placeholder=\"ÔÇö\" />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"a+\">A Rh+</SelectItem>\r\n                      <SelectItem value=\"a-\">A Rh-</SelectItem>\r\n                      <SelectItem value=\"b+\">B Rh+</SelectItem>\r\n                      <SelectItem value=\"b-\">B Rh-</SelectItem>\r\n                      <SelectItem value=\"ab+\">AB Rh+</SelectItem>\r\n                      <SelectItem value=\"ab-\">AB Rh-</SelectItem>\r\n                      <SelectItem value=\"o+\">0 Rh+</SelectItem>\r\n                      <SelectItem value=\"o-\">0 Rh-</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n                <div className=\"space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">E─şitim Durumu</Label>\r\n                  <Select disabled={!editMode}>\r\n                    <SelectTrigger className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\">\r\n                      <SelectValue placeholder=\"ÔÇö\" />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"none\">Okur-yazar de─şil</SelectItem>\r\n                      <SelectItem value=\"primary\">─░lkokul</SelectItem>\r\n                      <SelectItem value=\"secondary\">Ortaokul</SelectItem>\r\n                      <SelectItem value=\"high\">Lise</SelectItem>\r\n                      <SelectItem value=\"university\">├£niversite</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n                <div className=\"space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">Medeni H├ól</Label>\r\n                  <Select disabled={!editMode}>\r\n                    <SelectTrigger className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\">\r\n                      <SelectValue placeholder=\"ÔÇö\" />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"single\">Bek├ór</SelectItem>\r\n                      <SelectItem value=\"married\">Evli</SelectItem>\r\n                      <SelectItem value=\"divorced\">Bo┼şanm─▒┼ş</SelectItem>\r\n                      <SelectItem value=\"widowed\">Dul</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n                <div className=\"space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">Din</Label>\r\n                  <Select disabled={!editMode}>\r\n                    <SelectTrigger className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\">\r\n                      <SelectValue placeholder=\"ÔÇö\" />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"islam\">─░slam</SelectItem>\r\n                      <SelectItem value=\"christianity\">Hristiyanl─▒k</SelectItem>\r\n                      <SelectItem value=\"other\">Di─şer</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n                <div className=\"space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">Askerlik Kayd─▒</Label>\r\n                  <Select disabled={!editMode}>\r\n                    <SelectTrigger className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\">\r\n                      <SelectValue placeholder=\"Yok\" />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"none\">Yok</SelectItem>\r\n                      <SelectItem value=\"completed\">Tamamland─▒</SelectItem>\r\n                      <SelectItem value=\"exempt\">Muaf</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Work and Income */}\r\n            <Card className=\"col-span-12 md:col-span-6 xl:col-span-3 shadow-sm border-0 bg-white\">\r\n              <CardHeader className=\"pb-3\">\r\n                <CardTitle className=\"text-sm font-semibold flex items-center gap-2\">\r\n                  <Users className=\"w-4 h-4 text-primary\" />\r\n                  ─░┼ş ve Gelir Durumu\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-3\">\r\n                <div className=\"space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">Ya┼şad─▒─ş─▒ Yer</Label>\r\n                  <Select disabled={!editMode}>\r\n                    <SelectTrigger className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\">\r\n                      <SelectValue placeholder=\"Kira\" />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"rent\">Kira</SelectItem>\r\n                      <SelectItem value=\"owned\">Ev Sahibi</SelectItem>\r\n                      <SelectItem value=\"guest\">Misafir</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n                <div className=\"grid grid-cols-2 gap-2\">\r\n                  <div className=\"space-y-1\">\r\n                    <Label className=\"text-xs font-medium text-gray-700\">Ayl─▒k Gelir</Label>\r\n                    <Input\r\n                      className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\"\r\n                      readOnly={!editMode}\r\n                    />\r\n                  </div>\r\n                  <div className=\"space-y-1\">\r\n                    <Label className=\"text-xs font-medium text-gray-700\">Ayl─▒k Gider</Label>\r\n                    <Input\r\n                      className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\"\r\n                      readOnly={!editMode}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">Sosyal G├╝vence</Label>\r\n                  <Select disabled={!editMode}>\r\n                    <SelectTrigger className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\">\r\n                      <SelectValue placeholder=\"Yok\" />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"none\">Yok</SelectItem>\r\n                      <SelectItem value=\"sgk\">SGK</SelectItem>\r\n                      <SelectItem value=\"private\">├ûzel Sigorta</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n                <div className=\"space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">├çal─▒┼şt─▒─ş─▒ Sekt├Âr</Label>\r\n                  <Select disabled={!editMode}>\r\n                    <SelectTrigger className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\">\r\n                      <SelectValue placeholder=\"ÔÇö\" />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"none\">ÔÇö</SelectItem>\r\n                      <SelectItem value=\"trade\">Ticaret</SelectItem>\r\n                      <SelectItem value=\"construction\">─░n┼şaat</SelectItem>\r\n                      <SelectItem value=\"service\">Hizmet</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n                <div className=\"space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">─░┼ş Durumu</Label>\r\n                  <Select disabled={!editMode}>\r\n                    <SelectTrigger className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\">\r\n                      <SelectValue placeholder=\"─░┼şsiz\" />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"unemployed\">─░┼şsiz</SelectItem>\r\n                      <SelectItem value=\"employed\">├çal─▒┼ş─▒yor</SelectItem>\r\n                      <SelectItem value=\"retired\">Emekli</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n                <div className=\"space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">Meslek Tan─▒m─▒ (k─▒sa)</Label>\r\n                  <Input\r\n                    className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\"\r\n                    readOnly={!editMode}\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">─░lave A├ğ─▒klamalar</Label>\r\n                  <Textarea\r\n                    className=\"text-sm resize-none border border-gray-300 focus:border-blue-500\"\r\n                    rows={2}\r\n                    readOnly={!editMode}\r\n                  />\r\n                </div>\r\n                <div className=\"grid grid-cols-1 gap-2 pt-1\">\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <Checkbox id=\"simple-trade\" disabled={!editMode} />\r\n                    <Label htmlFor=\"simple-trade\" className=\"text-xs\">\r\n                      Basit Ticaret\r\n                    </Label>\r\n                  </div>\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <Checkbox id=\"gov-aid\" disabled={!editMode} />\r\n                    <Label htmlFor=\"gov-aid\" className=\"text-xs\">\r\n                      Devlet Yard─▒m─▒\r\n                    </Label>\r\n                  </div>\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <Checkbox id=\"family-aid\" disabled={!editMode} />\r\n                    <Label htmlFor=\"family-aid\" className=\"text-xs\">\r\n                      Aile Yard─▒m─▒ / Burs\r\n                    </Label>\r\n                  </div>\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <Checkbox id=\"regular-aid\" disabled={!editMode} />\r\n                    <Label htmlFor=\"regular-aid\" className=\"text-xs\">\r\n                      D├╝zenli ─░nfak / ─░yilet.\r\n                    </Label>\r\n                  </div>\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <Checkbox id=\"agricultural\" disabled={!editMode} />\r\n                    <Label htmlFor=\"agricultural\" className=\"text-xs\">\r\n                      Tar─▒msal Gelir\r\n                    </Label>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n\r\n          {/* Health Status */}\r\n          <Card className=\"shadow-sm border-0 bg-white\">\r\n            <CardHeader className=\"pb-4\">\r\n              <CardTitle className=\"text-sm font-semibold flex items-center gap-2\">\r\n                <Heart className=\"w-4 h-4 text-primary\" />\r\n                Sa─şl─▒k Durumu\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"grid grid-cols-12 gap-4\">\r\n                <div className=\"col-span-12 lg:col-span-4 grid grid-cols-2 gap-3\">\r\n                  <div className=\"space-y-1\">\r\n                    <Label className=\"text-xs font-medium text-gray-700\">Kan Grubu</Label>\r\n                    <Select disabled={!editMode}>\r\n                      <SelectTrigger className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\">\r\n                        <SelectValue placeholder=\"ÔÇö\" />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"a+\">A Rh+</SelectItem>\r\n                        <SelectItem value=\"a-\">A Rh-</SelectItem>\r\n                        <SelectItem value=\"b+\">B Rh+</SelectItem>\r\n                        <SelectItem value=\"b-\">B Rh-</SelectItem>\r\n                        <SelectItem value=\"ab+\">AB Rh+</SelectItem>\r\n                        <SelectItem value=\"ab-\">AB Rh-</SelectItem>\r\n                        <SelectItem value=\"o+\">0 Rh+</SelectItem>\r\n                        <SelectItem value=\"o-\">0 Rh-</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n                  <div className=\"space-y-1\">\r\n                    <Label className=\"text-xs font-medium text-gray-700\">Sigara Kullan─▒m─▒</Label>\r\n                    <Select disabled={!editMode}>\r\n                      <SelectTrigger className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\">\r\n                        <SelectValue placeholder=\"ÔÇö\" />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"none\">Kullanm─▒yor</SelectItem>\r\n                        <SelectItem value=\"occasional\">Ara s─▒ra</SelectItem>\r\n                        <SelectItem value=\"regular\">D├╝zenli</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n                  <div className=\"col-span-2 space-y-1\">\r\n                    <Label className=\"text-xs font-medium text-gray-700\">Engel Durumu</Label>\r\n                    <Select disabled={!editMode}>\r\n                      <SelectTrigger className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\">\r\n                        <SelectValue placeholder=\"ÔÇö\" />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"none\">Yok</SelectItem>\r\n                        <SelectItem value=\"physical\">Fiziksel</SelectItem>\r\n                        <SelectItem value=\"mental\">Zihinsel</SelectItem>\r\n                        <SelectItem value=\"visual\">G├Ârme</SelectItem>\r\n                        <SelectItem value=\"hearing\">─░┼şitme</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n                  <div className=\"col-span-2 space-y-1\">\r\n                    <Label className=\"text-xs font-medium text-gray-700\">\r\n                      Kullan─▒lan Protezler\r\n                    </Label>\r\n                    <Input\r\n                      className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\"\r\n                      readOnly={!editMode}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-span-2 space-y-1\">\r\n                    <Label className=\"text-xs font-medium text-gray-700\">\r\n                      D├╝zenli Kullan─▒lan ─░la├ğlar\r\n                    </Label>\r\n                    <Input\r\n                      className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\"\r\n                      readOnly={!editMode}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-span-2 space-y-1\">\r\n                    <Label className=\"text-xs font-medium text-gray-700\">\r\n                      Ge├ğirilen Ameliyatlar\r\n                    </Label>\r\n                    <Input\r\n                      className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\"\r\n                      readOnly={!editMode}\r\n                    />\r\n                  </div>\r\n                  <div className=\"col-span-2 space-y-1\">\r\n                    <Label className=\"text-xs font-medium text-gray-700\">\r\n                      ─░lgili Notlar/A├ğ─▒klamalar\r\n                    </Label>\r\n                    <Textarea\r\n                      className=\"text-sm resize-none border border-gray-300 focus:border-blue-500\"\r\n                      rows={3}\r\n                      readOnly={!editMode}\r\n                    />\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Health Conditions */}\r\n                <div className=\"col-span-12 lg:col-span-8\">\r\n                  <div className=\"health-conditions-grid\">\r\n                    {healthConditions.map((condition) => (\r\n                      <div key={condition} className=\"flex items-center space-x-2\">\r\n                        <Checkbox\r\n                          id={`health-${condition}`}\r\n                          checked={healthConditionsState[condition] ?? false}\r\n                          onCheckedChange={(checked: boolean) => {\r\n                            handleHealthConditionChange(condition, checked);\r\n                          }}\r\n                          disabled={!editMode}\r\n                        />\r\n                        <Label\r\n                          htmlFor={`health-${condition}`}\r\n                          className=\"text-xs font-normal cursor-pointer\"\r\n                        >\r\n                          {condition}\r\n                        </Label>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          {/* Bottom Row: Emergency, Tags, Special, Record */}\r\n          <div className=\"grid grid-cols-12 gap-4\">\r\n            {/* Emergency Contact */}\r\n            <Card className=\"col-span-12 lg:col-span-4 shadow-sm border-0 bg-white\">\r\n              <CardHeader className=\"pb-3\">\r\n                <CardTitle className=\"text-sm font-semibold flex items-center gap-2\">\r\n                  <AlertTriangle className=\"w-4 h-4 text-primary\" />\r\n                  Acil Durum ─░leti┼şimi\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-3\">\r\n                <div className=\"space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">\r\n                    ─░leti┼şime Ge├ğilecek 1 (Yak─▒n) Ad─▒\r\n                  </Label>\r\n                  <Input\r\n                    className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\"\r\n                    value={(editableData?.acil_iletisim_1_ad as string) || ''}\r\n                    onChange={(e) => {\r\n                      setEditableData((prev: any) => ({\r\n                        ...prev,\r\n                        acil_iletisim_1_ad: e.target.value,\r\n                      }));\r\n                    }}\r\n                    readOnly={!editMode}\r\n                  />\r\n                </div>\r\n                <div className=\"grid grid-cols-2 gap-2\">\r\n                  <div className=\"space-y-1\">\r\n                    <Label className=\"text-xs font-medium text-gray-700\">Yak─▒nl─▒─ş─▒</Label>\r\n                    <Input\r\n                      className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\"\r\n                      value={(editableData?.acil_iletisim_1_yakinlik as string) || ''}\r\n                      onChange={(e) => {\r\n                        setEditableData((prev: any) => ({\r\n                          ...prev,\r\n                          acil_iletisim_1_yakinlik: e.target.value,\r\n                        }));\r\n                      }}\r\n                      readOnly={!editMode}\r\n                    />\r\n                  </div>\r\n                  <div className=\"space-y-1\">\r\n                    <Label className=\"text-xs font-medium text-gray-700\">Telefon</Label>\r\n                    <Input\r\n                      className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\"\r\n                      value={(editableData?.acil_iletisim_1_telefon as string) || ''}\r\n                      onChange={(e) => {\r\n                        setEditableData((prev: any) => ({\r\n                          ...prev,\r\n                          acil_iletisim_1_telefon: e.target.value,\r\n                        }));\r\n                      }}\r\n                      readOnly={!editMode}\r\n                    />\r\n                  </div>\r\n                </div>\r\n                <div className=\"space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">\r\n                    ─░leti┼şime Ge├ğilecek 2 (Yak─▒n) Ad─▒\r\n                  </Label>\r\n                  <Input\r\n                    className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\"\r\n                    value={(editableData?.acil_iletisim_2_ad as string) || ''}\r\n                    onChange={(e) => {\r\n                      setEditableData((prev: any) => ({\r\n                        ...prev,\r\n                        acil_iletisim_2_ad: e.target.value,\r\n                      }));\r\n                    }}\r\n                    readOnly={!editMode}\r\n                  />\r\n                </div>\r\n                <div className=\"grid grid-cols-2 gap-2\">\r\n                  <div className=\"space-y-1\">\r\n                    <Label className=\"text-xs font-medium text-gray-700\">Yak─▒nl─▒─ş─▒</Label>\r\n                    <Input\r\n                      className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\"\r\n                      value={(editableData?.acil_iletisim_2_yakinlik as string) || ''}\r\n                      onChange={(e) => {\r\n                        setEditableData((prev: any) => ({\r\n                          ...prev,\r\n                          acil_iletisim_2_yakinlik: e.target.value,\r\n                        }));\r\n                      }}\r\n                      readOnly={!editMode}\r\n                    />\r\n                  </div>\r\n                  <div className=\"space-y-1\">\r\n                    <Label className=\"text-xs font-medium text-gray-700\">Telefon</Label>\r\n                    <Input\r\n                      className=\"h-9 text-sm border border-gray-300 focus:border-blue-500\"\r\n                      value={(editableData?.acil_iletisim_2_telefon as string) || ''}\r\n                      onChange={(e) => {\r\n                        setEditableData((prev: any) => ({\r\n                          ...prev,\r\n                          acil_iletisim_2_telefon: e.target.value,\r\n                        }));\r\n                      }}\r\n                      readOnly={!editMode}\r\n                    />\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Tags */}\r\n            <Card className=\"col-span-12 lg:col-span-4 shadow-sm border-0 bg-white\">\r\n              <CardHeader className=\"pb-3\">\r\n                <CardTitle className=\"text-sm font-semibold flex items-center gap-2\">\r\n                  <Target className=\"w-4 h-4 text-primary\" />\r\n                  Etiketler\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <div className=\"flex flex-col gap-3\">\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <Checkbox id=\"regular-aid-allowed\" disabled={!editMode} />\r\n                    <Label htmlFor=\"regular-aid-allowed\" className=\"text-xs\">\r\n                      D├╝zenli Yard─▒m Yap─▒labilir\r\n                    </Label>\r\n                  </div>\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <Checkbox id=\"support-rejected\" disabled={!editMode} />\r\n                    <Label htmlFor=\"support-rejected\" className=\"text-xs\">\r\n                      Destek Ba┼şvurular─▒ Reddedilmeli\r\n                    </Label>\r\n                  </div>\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <Checkbox id=\"false-documents\" disabled={!editMode} />\r\n                    <Label htmlFor=\"false-documents\" className=\"text-xs\">\r\n                      Sahte Evrak Giri┼şi / Yalan Beyanda Bulundu\r\n                    </Label>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n\r\n            {/* Special Situations */}\r\n            <Card className=\"col-span-12 lg:col-span-4 shadow-sm border-0 bg-white\">\r\n              <CardHeader className=\"pb-3\">\r\n                <CardTitle className=\"text-sm font-semibold flex items-center gap-2\">\r\n                  <Shield className=\"w-4 h-4 text-primary\" />\r\n                  ├ûzel Durumlar\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent>\r\n                <RadioGroup disabled={!editMode}>\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <RadioGroupItem value=\"earthquake-victim\" id=\"earthquake-victim\" />\r\n                    <Label htmlFor=\"earthquake-victim\" className=\"text-xs\">\r\n                      Depremzede\r\n                    </Label>\r\n                  </div>\r\n                  <div className=\"flex items-center space-x-2\">\r\n                    <RadioGroupItem value=\"not-earthquake-victim\" id=\"not-earthquake-victim\" />\r\n                    <Label htmlFor=\"not-earthquake-victim\" className=\"text-xs\">\r\n                      Depremzede De─şil\r\n                    </Label>\r\n                  </div>\r\n                </RadioGroup>\r\n              </CardContent>\r\n            </Card>\r\n          </div>\r\n\r\n          {/* Record Information */}\r\n          <Card className=\"shadow-sm border-0 bg-white\">\r\n            <CardHeader className=\"pb-4\">\r\n              <CardTitle className=\"text-sm font-semibold flex items-center gap-2\">\r\n                <Info className=\"w-4 h-4 text-primary\" />\r\n                Kay─▒t Bilgisi\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"grid grid-cols-12 gap-3\">\r\n                <div className=\"col-span-12 md:col-span-3 space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">Kay─▒t Zaman─▒</Label>\r\n                  <Input className=\"h-9 text-sm bg-muted/30\" placeholder=\"ÔÇö\" readOnly />\r\n                </div>\r\n                <div className=\"col-span-12 md:col-span-3 space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">Kay─▒t Eden</Label>\r\n                  <Input className=\"h-9 text-sm bg-muted/30\" placeholder=\"ÔÇö\" readOnly />\r\n                </div>\r\n                <div className=\"col-span-12 md:col-span-3 space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">IP Adresi</Label>\r\n                  <Input className=\"h-9 text-sm bg-muted/30\" placeholder=\"ÔÇö\" readOnly />\r\n                </div>\r\n                <div className=\"col-span-12 md:col-span-3 space-y-1\">\r\n                  <Label className=\"text-xs font-medium text-gray-700\">Toplam Yard─▒m (Ôé║)</Label>\r\n                  <Input\r\n                    className=\"h-9 text-sm bg-muted/30 font-medium\"\r\n                    placeholder=\"0,00\"\r\n                    readOnly\r\n                  />\r\n                </div>\r\n              </div>\r\n              <p className=\"mt-4 text-xs text-gray-500 leading-relaxed\">\r\n                1. ─░┼şaretlemeli veriler, bakmakla y├╝k├╝ml├╝ olan ve olunan ki┼şilerle ortakt─▒r.\r\n                Herhangi birisinde g├╝ncelleme, hepsinde ayn─▒ ┼şekilde g├╝ncellenir.\r\n              </p>\r\n            </CardContent>\r\n          </Card>\r\n        </section>\r\n\r\n        {/* Connected Records Sidebar */}\r\n        <aside className=\"col-span-12 lg:col-span-3\">\r\n          <Card className=\"shadow-sm border-0 bg-white h-fit\">\r\n            <CardHeader className=\"pb-4\">\r\n              <CardTitle className=\"text-sm font-semibold flex items-center gap-2\">\r\n                <FileText className=\"w-4 h-4 text-primary\" />\r\n                Ba─şlant─▒l─▒ Kay─▒tlar\r\n              </CardTitle>\r\n            </CardHeader>\r\n            <CardContent>\r\n              <div className=\"connected-records-grid\">\r\n                {connectedRecords?.map((record) => (\r\n                  <Button\r\n                    key={record}\r\n                    variant=\"outline\"\r\n                    className=\"connected-record-button border-gray-200 text-gray-700 hover:border-primary/30 hover:text-primary\"\r\n                    title=\"\"\r\n                    onClick={\r\n                      record === 'Banka Hesaplar─▒'\r\n                        ? handleOpenBankAccountModal\r\n                        : record === 'Dok├╝manlar'\r\n                          ? handleOpenDocumentModal\r\n                          : record === 'Ba─şl─▒ Ki┼şiler'\r\n                            ? handleOpenDependentPersonModal\r\n                            : record === 'Foto─şraflar'\r\n                              ? handleOpenPhotosModal\r\n                              : record === 'Ba─ş─▒┼ş├ğ─▒lar'\r\n                                ? handleOpenDonorsModal\r\n                                : record === 'Sponsorlar'\r\n                                  ? handleOpenSponsorsModal\r\n                                  : record === 'Yard─▒m Talepleri'\r\n                                    ? handleOpenHelpRequestsModal\r\n                                    : record === 'Yap─▒lan Yard─▒mlar'\r\n                                      ? handleOpenHelpProvidedModal\r\n                                      : record === 'R─▒za Beyanlar─▒'\r\n                                        ? handleOpenConsentModal\r\n                                        : undefined\r\n                    }\r\n                  >\r\n                    <div className=\"flex items-center justify-between w-full\">\r\n                      <span>{record}</span>\r\n                      {record === 'Banka Hesaplar─▒' && (beneficiaryData?.iban as string) && (\r\n                        <div className=\"w-2 h-2 bg-green-500 rounded-full ml-2\" />\r\n                      )}\r\n                    </div>\r\n                  </Button>\r\n                ))}\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </aside>\r\n      </div>\r\n\r\n      {/* Bank Account Modal */}\r\n      <Dialog open={isBankAccountModalOpen} onOpenChange={setIsBankAccountModalOpen}>\r\n        <DialogContent className=\"sm:max-w-[500px]\">\r\n          <DialogHeader>\r\n            <DialogTitle className=\"text-lg font-semibold\">Banka Hesab─▒ Bilgileri</DialogTitle>\r\n          </DialogHeader>\r\n\r\n          <div className=\"space-y-4 py-4\">\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"iban\" className=\"text-sm font-medium\">\r\n                IBAN *\r\n              </Label>\r\n              <Input\r\n                id=\"iban\"\r\n                placeholder=\"TR00 0000 0000 0000 0000 0000 00\"\r\n                value={iban}\r\n                onChange={(e) => {\r\n                  setIban(e.target.value);\r\n                }}\r\n                className=\"h-10\"\r\n                maxLength={34}\r\n              />\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"bankName\" className=\"text-sm font-medium\">\r\n                Banka Ad─▒ *\r\n              </Label>\r\n              <Input\r\n                id=\"bankName\"\r\n                placeholder=\"Banka ad─▒n─▒ giriniz\"\r\n                value={bankName}\r\n                onChange={(e) => {\r\n                  setBankName(e.target.value);\r\n                }}\r\n                className=\"h-10\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"accountHolder\" className=\"text-sm font-medium\">\r\n                Hesap Sahibi Ad─▒ *\r\n              </Label>\r\n              <Input\r\n                id=\"accountHolder\"\r\n                placeholder=\"Hesap sahibinin ad─▒n─▒ giriniz\"\r\n                value={accountHolder}\r\n                onChange={(e) => {\r\n                  setAccountHolder(e.target.value);\r\n                }}\r\n                className=\"h-10\"\r\n              />\r\n            </div>\r\n\r\n            <div className=\"space-y-2\">\r\n              <Label htmlFor=\"description\" className=\"text-sm font-medium\">\r\n                A├ğ─▒klama\r\n              </Label>\r\n              <Textarea\r\n                id=\"description\"\r\n                placeholder=\"Ek a├ğ─▒klama giriniz (opsiyonel)\"\r\n                value={description}\r\n                onChange={(e) => {\r\n                  setDescription(e.target.value);\r\n                }}\r\n                className=\"min-h-[80px] resize-none\"\r\n              />\r\n            </div>\r\n          </div>\r\n\r\n          <DialogFooter className=\"gap-2\">\r\n            <Button variant=\"outline\" onClick={handleCloseBankAccountModal} className=\"px-6\">\r\n              ─░ptal\r\n            </Button>\r\n            <Button onClick={handleSaveBankAccount} className=\"px-6 bg-blue-600 hover:bg-blue-700\">\r\n              Kaydet\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {/* Document Management Modal */}\r\n      <Dialog open={isDocumentModalOpen} onOpenChange={setIsDocumentModalOpen}>\r\n        <DialogContent className=\"sm:max-w-[900px] max-h-[80vh] overflow-hidden\">\r\n          <DialogHeader>\r\n            <DialogTitle className=\"text-lg font-semibold flex items-center gap-2\">\r\n              <FileIcon className=\"w-5 h-5\" />\r\n              Dok├╝man Y├Ânetimi\r\n            </DialogTitle>\r\n          </DialogHeader>\r\n\r\n          <div className=\"space-y-6 py-4\">\r\n            {/* File Upload Section */}\r\n            <div className=\"space-y-4\">\r\n              <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-gray-400 transition-colors\">\r\n                <Upload className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\r\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Dosya Y├╝kle</h3>\r\n                <p className=\"text-sm text-gray-600 mb-4\">\r\n                  Dosyalar─▒ buraya s├╝r├╝kleyip b─▒rak─▒n veya se├ğmek i├ğin t─▒klay─▒n\r\n                </p>\r\n                <div className=\"flex items-center justify-center gap-4\">\r\n                  <input\r\n                    type=\"file\"\r\n                    multiple\r\n                    accept=\".pdf,.doc,.docx,.jpg,.jpeg,.png,.xlsx,.xls\"\r\n                    onChange={handleFileUpload}\r\n                    className=\"hidden\"\r\n                    id=\"file-upload\"\r\n                  />\r\n                  <label htmlFor=\"file-upload\">\r\n                    <Button className=\"bg-blue-600 hover:bg-blue-700\" asChild>\r\n                      <span>\r\n                        <Upload className=\"w-4 h-4 mr-2\" />\r\n                        Dosya Se├ğ\r\n                      </span>\r\n                    </Button>\r\n                  </label>\r\n                </div>\r\n                <p className=\"text-xs text-gray-500 mt-2\">\r\n                  Desteklenen formatlar: PDF, DOC, DOCX, JPG, PNG, XLSX (Maks. 10MB)\r\n                </p>\r\n              </div>\r\n\r\n              {/* Upload Progress */}\r\n              {isUploading && (\r\n                <div className=\"space-y-2\">\r\n                  <div className=\"flex items-center justify-between text-sm\">\r\n                    <span>Y├╝kleniyor...</span>\r\n                    <span>{uploadProgress}%</span>\r\n                  </div>\r\n                  <div className=\"w-full bg-gray-200 rounded-full h-2\">\r\n                    <div\r\n                      className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\r\n                      style={{ width: `${uploadProgress}%` }}\r\n                     />\r\n                  </div>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* Search and Filter */}\r\n            <div className=\"flex items-center gap-4\">\r\n              <div className=\"flex-1 relative\">\r\n                <Search className=\"w-4 h-4 absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400\" />\r\n                <Input\r\n                  placeholder=\"Dosya ara...\"\r\n                  value={searchTerm}\r\n                  onChange={(e) => {\r\n                    setSearchTerm(e.target.value);\r\n                  }}\r\n                  className=\"pl-10\"\r\n                />\r\n              </div>\r\n              <Select value={selectedFileType} onValueChange={setSelectedFileType}>\r\n                <SelectTrigger className=\"w-40\">\r\n                  <Filter className=\"w-4 h-4 mr-2\" />\r\n                  <SelectValue />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  <SelectItem value=\"all\">T├╝m Dosyalar</SelectItem>\r\n                  <SelectItem value=\"image\">Resimler</SelectItem>\r\n                  <SelectItem value=\"pdf\">PDF Dosyalar</SelectItem>\r\n                  <SelectItem value=\"document\">Di─şer Dok├╝manlar</SelectItem>\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n\r\n            {/* Files List */}\r\n            <div className=\"space-y-2 max-h-60 overflow-y-auto\">\r\n              {filteredFiles?.length === 0 ? (\r\n                <div className=\"text-center py-8 text-gray-500\">\r\n                  <FileIcon className=\"w-12 h-12 mx-auto mb-2 text-gray-300\" />\r\n                  <p>Hen├╝z dosya y├╝klenmemi┼ş</p>\r\n                </div>\r\n              ) : (\r\n                filteredFiles?.map((file) => (\r\n                  <div\r\n                    key={file.id}\r\n                    className=\"flex items-center justify-between p-3 border rounded-lg hover:bg-gray-50\"\r\n                  >\r\n                    <div className=\"flex items-center gap-3\">\r\n                      {getFileIcon(file.type)}\r\n                      <div>\r\n                        <p className=\"font-medium text-sm\">{file.name}</p>\r\n                        <p className=\"text-xs text-gray-500\">\r\n                          {file.size} ÔÇó {file.uploadDate}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <Button\r\n                        size=\"sm\"\r\n                        variant=\"outline\"\r\n                        onClick={() => {\r\n                          handlePreviewFile(file);\r\n                        }}\r\n                        className=\"h-8 w-8 p-0\"\r\n                      >\r\n                        <Eye className=\"w-4 h-4\" />\r\n                      </Button>\r\n                      <Button\r\n                        size=\"sm\"\r\n                        variant=\"outline\"\r\n                        onClick={() => {\r\n                          handleDownloadFile(file);\r\n                        }}\r\n                        className=\"h-8 w-8 p-0\"\r\n                      >\r\n                        <Download className=\"w-4 h-4\" />\r\n                      </Button>\r\n                      <Button\r\n                        size=\"sm\"\r\n                        variant=\"outline\"\r\n                        onClick={() => {\r\n                          handleDeleteFile(file.id);\r\n                        }}\r\n                        className=\"h-8 w-8 p-0 text-red-600 hover:text-red-700\"\r\n                      >\r\n                        <Trash className=\"w-4 h-4\" />\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                ))\r\n              )}\r\n            </div>\r\n\r\n            {/* File Statistics */}\r\n            <div className=\"flex items-center justify-between text-sm text-gray-600 pt-4 border-t\">\r\n              <span>Toplam {uploadedFiles?.length ?? 0} dosya</span>\r\n              <span>\r\n                Toplam boyut:{' '}\r\n                {(uploadedFiles || [])\r\n                  .reduce((total, file) => {\r\n                    const size = parseFloat(file.size.replace(' MB', ''));\r\n                    return total + size;\r\n                  }, 0)\r\n                  .toFixed(1)}{' '}\r\n                MB\r\n              </span>\r\n            </div>\r\n          </div>\r\n\r\n          <DialogFooter>\r\n            <Button variant=\"outline\" onClick={handleCloseDocumentModal} className=\"px-6\">\r\n              Kapat\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {/* File Preview Modal */}\r\n      <Dialog open={isPreviewOpen} onOpenChange={setIsPreviewOpen}>\r\n        <DialogContent className=\"sm:max-w-[700px] max-h-[80vh]\">\r\n          <DialogHeader>\r\n            <DialogTitle className=\"text-lg font-semibold\">{previewFile?.name}</DialogTitle>\r\n          </DialogHeader>\r\n\r\n          <div className=\"py-4\">\r\n            {previewFile?.type.startsWith('image/') ? (\r\n              <div className=\"text-center\">\r\n                <img\r\n                  src={previewFile.url}\r\n                  alt={previewFile.name}\r\n                  className=\"max-w-full max-h-96 mx-auto rounded-lg\"\r\n                />\r\n              </div>\r\n            ) : previewFile?.type.includes('pdf') ? (\r\n              <div className=\"text-center py-8\">\r\n                <FileIcon className=\"w-16 h-16 mx-auto mb-4 text-gray-400\" />\r\n                <p className=\"text-gray-600\">PDF ├Ânizlemesi mevcut de─şil</p>\r\n                <p className=\"text-sm text-gray-500 mt-2\">Dosyay─▒ g├Âr├╝nt├╝lemek i├ğin indirin</p>\r\n              </div>\r\n            ) : (\r\n              <div className=\"text-center py-8\">\r\n                <File className=\"w-16 h-16 mx-auto mb-4 text-gray-400\" />\r\n                <p className=\"text-gray-600\">Bu dosya t├╝r├╝ i├ğin ├Ânizleme mevcut de─şil</p>\r\n                <div className=\"mt-4 text-sm text-gray-500\">\r\n                  <p>\r\n                    <strong>Dosya ad─▒:</strong> {previewFile?.name}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Boyut:</strong> {previewFile?.size}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Y├╝klenme tarihi:</strong> {previewFile?.uploadDate}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <DialogFooter className=\"gap-2\">\r\n            <Button\r\n              variant=\"outline\"\r\n              onClick={() => {\r\n                setIsPreviewOpen(false);\r\n              }}\r\n            >\r\n              Kapat\r\n            </Button>\r\n            <Button\r\n              onClick={() => {\r\n                handleDownloadFile(previewFile);\r\n              }}\r\n              className=\"bg-blue-600 hover:bg-blue-700\"\r\n            >\r\n              <Download className=\"w-4 h-4 mr-2\" />\r\n              ─░ndir\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {/* Dependent Person Modal */}\r\n      <Dialog open={isDependentPersonModalOpen} onOpenChange={setIsDependentPersonModalOpen}>\r\n        <DialogContent className=\"sm:max-w-[800px] max-h-[90vh] overflow-y-auto\">\r\n          <DialogHeader>\r\n            <DialogTitle className=\"text-lg font-semibold flex items-center gap-2\">\r\n              <Users className=\"w-5 h-5\" />\r\n              Ba─şl─▒ Ki┼şiler Y├Ânetimi\r\n            </DialogTitle>\r\n          </DialogHeader>\r\n\r\n          {/* Mode Selection Tabs */}\r\n          <div className=\"flex items-center gap-1 p-1 bg-gray-100 rounded-lg\">\r\n            <Button\r\n              variant={modalMode === 'list' ? 'default' : 'ghost'}\r\n              size=\"sm\"\r\n              onClick={() => {\r\n                setModalMode('list');\r\n              }}\r\n              className=\"flex-1\"\r\n            >\r\n              Ba─şl─▒ Ki┼şiler\r\n            </Button>\r\n            <Button\r\n              variant={modalMode === 'create' ? 'default' : 'ghost'}\r\n              size=\"sm\"\r\n              onClick={() => {\r\n                setModalMode('create');\r\n              }}\r\n              className=\"flex-1\"\r\n            >\r\n              Yeni Ekle\r\n            </Button>\r\n            <Button\r\n              variant={modalMode === 'select' ? 'default' : 'ghost'}\r\n              size=\"sm\"\r\n              onClick={() => {\r\n                setModalMode('select');\r\n                loadExistingDependents();\r\n              }}\r\n              className=\"flex-1\"\r\n            >\r\n              Mevcut Se├ğ\r\n            </Button>\r\n          </div>\r\n\r\n          <div className=\"space-y-4 py-4\">\r\n            {modalMode === 'list' ? (\r\n              // Mevcut Ba─şl─▒ Ki┼şiler Listesi\r\n              <div className=\"space-y-4\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <div className=\"text-sm text-gray-600\">Bu ki┼şiye ba─şl─▒ olan ki┼şiler listesi</div>\r\n                  <div className=\"flex gap-2\">\r\n                    <Button\r\n                      size=\"sm\"\r\n                      variant=\"outline\"\r\n                      onClick={() => {\r\n                        setModalMode('create');\r\n                      }}\r\n                    >\r\n                      Yeni Ekle\r\n                    </Button>\r\n                    <Button\r\n                      size=\"sm\"\r\n                      variant=\"outline\"\r\n                      onClick={() => {\r\n                        setModalMode('select');\r\n                        loadExistingDependents();\r\n                      }}\r\n                    >\r\n                      Mevcut Se├ğ\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Connected Dependents List */}\r\n                <div className=\"space-y-3 max-h-96 overflow-y-auto\">\r\n                  {connectedDependents.length === 0 ? (\r\n                    <div className=\"text-center py-12\">\r\n                      <Users className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\r\n                      <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\r\n                        Hen├╝z ba─şl─▒ ki┼şi yok\r\n                      </h3>\r\n                      <p className=\"text-gray-500 mb-6\">\r\n                        Bu ki┼şiyle ili┼şkili herhangi bir kay─▒t bulunmuyor. Yeni ki┼şi ekleyebilir\r\n                        veya mevcut kay─▒tlardan birini ba─şlayabilirsiniz.\r\n                      </p>\r\n                      <div className=\"flex gap-3 justify-center\">\r\n                        <Button\r\n                          onClick={() => {\r\n                            setModalMode('create');\r\n                          }}\r\n                          className=\"bg-blue-600 hover:bg-blue-700\"\r\n                        >\r\n                          Yeni Ki┼şi Ekle\r\n                        </Button>\r\n                        <Button\r\n                          variant=\"outline\"\r\n                          onClick={() => {\r\n                            setModalMode('select');\r\n                            loadExistingDependents();\r\n                          }}\r\n                        >\r\n                          Mevcut Ki┼şi Ba─şla\r\n                        </Button>\r\n                      </div>\r\n                    </div>\r\n                  ) : (\r\n                    connectedDependents.map((person) => (\r\n                      <div\r\n                        key={person.id}\r\n                        className=\"p-4 border rounded-lg bg-white hover:shadow-md transition-shadow\"\r\n                      >\r\n                        <div className=\"flex items-start justify-between\">\r\n                          <div className=\"flex-1\">\r\n                            <div className=\"flex items-center gap-3 mb-3\">\r\n                              <div className=\"w-12 h-12 bg-gradient-to-br from-blue-500 to-purple-600 rounded-full flex items-center justify-center\">\r\n                                <Users className=\"w-6 h-6 text-white\" />\r\n                              </div>\r\n                              <div>\r\n                                <h3 className=\"font-semibold text-lg text-gray-900\">\r\n                                  {person.ad_soyad}\r\n                                </h3>\r\n                                <div className=\"flex items-center gap-2 mt-1\">\r\n                                  <Badge\r\n                                    variant={\r\n                                      person.tur?.includes('Bakmakla Y├╝k├╝ml├╝')\r\n                                        ? 'default'\r\n                                        : 'secondary'\r\n                                    }\r\n                                    className={\r\n                                      person.tur?.includes('Bakmakla Y├╝k├╝ml├╝')\r\n                                        ? 'bg-purple-100 text-purple-800'\r\n                                        : 'bg-blue-100 text-blue-800'\r\n                                    }\r\n                                  >\r\n                                    {person.tur}\r\n                                  </Badge>\r\n                                  <Badge variant=\"outline\" className=\"bg-green-50 text-green-700\">\r\n                                    {person.yakinlik}\r\n                                  </Badge>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n\r\n                            <div className=\"grid grid-cols-3 gap-4 text-sm bg-gray-50 p-3 rounded-lg\">\r\n                              <div>\r\n                                <p className=\"text-gray-500 text-xs\">TC Kimlik No</p>\r\n                                <p className=\"font-medium\">{person.kimlik_no}</p>\r\n                              </div>\r\n                              <div>\r\n                                <p className=\"text-gray-500 text-xs\">Telefon</p>\r\n                                <p className=\"font-medium\">{person.telefon_no}</p>\r\n                              </div>\r\n                              <div>\r\n                                <p className=\"text-gray-500 text-xs\">Ba─şlant─▒ Tarihi</p>\r\n                                <p className=\"font-medium\">{person.baglanti_tarihi}</p>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n\r\n                          <div className=\"flex flex-col gap-2 ml-4\">\r\n                            <Button size=\"sm\" variant=\"outline\">\r\n                              <Eye className=\"w-3 h-3 mr-1\" />\r\n                              Detay\r\n                            </Button>\r\n                            <Button\r\n                              size=\"sm\"\r\n                              variant=\"outline\"\r\n                              className=\"text-red-600 hover:text-red-700\"\r\n                              onClick={() =>\r\n                                handleRemoveConnection(\r\n                                  person.relationship_id ?? '',\r\n                                  person.ad_soyad ?? '',\r\n                                )\r\n                              }\r\n                            >\r\n                              <X className=\"w-3 h-3 mr-1\" />\r\n                              Ba─şlant─▒y─▒ Kald─▒r\r\n                            </Button>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    ))\r\n                  )}\r\n                </div>\r\n              </div>\r\n            ) : modalMode === 'create' ? (\r\n              // Yeni Ki┼şi Ekleme Formu\r\n              <>\r\n                {/* Name and Surname */}\r\n                <div className=\"grid grid-cols-2 gap-4\">\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"dependent-name\" className=\"text-sm font-medium\">\r\n                      Ad *\r\n                    </Label>\r\n                    <Input\r\n                      id=\"dependent-name\"\r\n                      placeholder=\"Ad─▒n─▒ giriniz\"\r\n                      value={dependentPersonData.name}\r\n                      onChange={(e) => {\r\n                        setDependentPersonData((prev) => ({ ...prev, name: e.target.value }));\r\n                      }}\r\n                      className=\"h-10\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"dependent-surname\" className=\"text-sm font-medium\">\r\n                      Soyad *\r\n                    </Label>\r\n                    <Input\r\n                      id=\"dependent-surname\"\r\n                      placeholder=\"Soyad─▒n─▒ giriniz\"\r\n                      value={dependentPersonData.surname}\r\n                      onChange={(e) => {\r\n                        setDependentPersonData((prev) => ({ ...prev, surname: e.target.value }));\r\n                      }}\r\n                      className=\"h-10\"\r\n                    />\r\n                  </div>\r\n                </div>\r\n\r\n                {/* TC Kimlik No */}\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"dependent-id\" className=\"text-sm font-medium\">\r\n                    TC Kimlik No *\r\n                  </Label>\r\n                  <Input\r\n                    id=\"dependent-id\"\r\n                    placeholder=\"11 haneli TC kimlik numaras─▒\"\r\n                    value={dependentPersonData.id_number}\r\n                    onChange={(e) => {\r\n                      setDependentPersonData((prev) => ({ ...prev, id_number: e.target.value }));\r\n                    }}\r\n                    className=\"h-10\"\r\n                    maxLength={11}\r\n                  />\r\n                </div>\r\n\r\n                {/* Phone and Relationship */}\r\n                <div className=\"grid grid-cols-2 gap-4\">\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"dependent-phone\" className=\"text-sm font-medium\">\r\n                      Telefon\r\n                    </Label>\r\n                    <Input\r\n                      id=\"dependent-phone\"\r\n                      placeholder=\"05XX XXX XX XX\"\r\n                      value={dependentPersonData.phone}\r\n                      onChange={(e) => {\r\n                        setDependentPersonData((prev) => ({ ...prev, phone: e.target.value }));\r\n                      }}\r\n                      className=\"h-10\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"dependent-relationship\" className=\"text-sm font-medium\">\r\n                      Yak─▒nl─▒k Derecesi *\r\n                    </Label>\r\n                    <Select\r\n                      value={dependentPersonData.relationship}\r\n                      onValueChange={(value: any) => {\r\n                        setDependentPersonData((prev) => ({ ...prev, relationship: value }));\r\n                      }}\r\n                    >\r\n                      <SelectTrigger className=\"h-10\">\r\n                        <SelectValue placeholder=\"Se├ğiniz\" />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"anne\">Anne</SelectItem>\r\n                        <SelectItem value=\"baba\">Baba</SelectItem>\r\n                        <SelectItem value=\"es\">E┼ş</SelectItem>\r\n                        <SelectItem value=\"cocuk\">├çocuk</SelectItem>\r\n                        <SelectItem value=\"kardes\">Karde┼ş</SelectItem>\r\n                        <SelectItem value=\"diger\">Di─şer</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Birth Date and Gender */}\r\n                <div className=\"grid grid-cols-2 gap-4\">\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"dependent-birth-date\" className=\"text-sm font-medium\">\r\n                      Do─şum Tarihi\r\n                    </Label>\r\n                    <Input\r\n                      id=\"dependent-birth-date\"\r\n                      type=\"date\"\r\n                      value={dependentPersonData.birth_date}\r\n                      onChange={(e) => {\r\n                        setDependentPersonData((prev) => ({ ...prev, birth_date: e.target.value }));\r\n                      }}\r\n                      className=\"h-10\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"dependent-gender\" className=\"text-sm font-medium\">\r\n                      Cinsiyet\r\n                    </Label>\r\n                    <Select\r\n                      value={dependentPersonData.gender}\r\n                      onValueChange={(value: any) => {\r\n                        setDependentPersonData((prev) => ({ ...prev, gender: value }));\r\n                      }}\r\n                    >\r\n                      <SelectTrigger className=\"h-10\">\r\n                        <SelectValue placeholder=\"Se├ğiniz\" />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"erkek\">Erkek</SelectItem>\r\n                        <SelectItem value=\"kadin\">Kad─▒n</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Address */}\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"dependent-address\" className=\"text-sm font-medium\">\r\n                    Adres\r\n                  </Label>\r\n                  <Textarea\r\n                    id=\"dependent-address\"\r\n                    placeholder=\"Adres bilgilerini giriniz (opsiyonel)\"\r\n                    value={dependentPersonData.address}\r\n                    onChange={(e) => {\r\n                      setDependentPersonData((prev) => ({ ...prev, address: e.target.value }));\r\n                    }}\r\n                    className=\"min-h-[80px] resize-none\"\r\n                  />\r\n                </div>\r\n              </>\r\n            ) : (\r\n              // Mevcut Ki┼şi Se├ğimi\r\n              <div className=\"space-y-4\">\r\n                <div className=\"text-sm text-gray-600 mb-4\">\r\n                  Sistemde kay─▒tl─▒ ki┼şilerden birini se├ğerek bu ki┼şiyle ili┼şkilendirebilirsiniz.\r\n                </div>\r\n\r\n                {/* Search Bar */}\r\n                <div className=\"relative\">\r\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\r\n                  <Input\r\n                    placeholder=\"Ad, soyad, TC, telefon, ┼şehir veya uyruk ile ara...\"\r\n                    value={dependentSearchTerm}\r\n                    onChange={(e) => {\r\n                      setDependentSearchTerm(e.target.value);\r\n                    }}\r\n                    className=\"pl-10\"\r\n                  />\r\n                </div>\r\n\r\n                {/* Existing Dependents List */}\r\n                <div className=\"space-y-2 max-h-80 overflow-y-auto\">\r\n                  {isLoadingDependents ? (\r\n                    <div className=\"text-center py-8\">\r\n                      <div className=\"animate-spin rounded-full h-8 w-8 border-b-2 border-primary mx-auto mb-4\" />\r\n                      <p className=\"text-sm text-gray-600\">Kay─▒tlar y├╝kleniyor...</p>\r\n                    </div>\r\n                  ) : filteredDependents.length === 0 ? (\r\n                    <div className=\"text-center py-8\">\r\n                      <Users className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\r\n                      <p className=\"text-gray-500\">\r\n                        {dependentSearchTerm\r\n                          ? 'Arama kriterlerine uygun ki┼şi bulunamad─▒'\r\n                          : 'Hen├╝z kay─▒tl─▒ ki┼şi bulunmuyor'}\r\n                      </p>\r\n                      <Button\r\n                        variant=\"outline\"\r\n                        size=\"sm\"\r\n                        className=\"mt-4\"\r\n                        onClick={() => {\r\n                          setModalMode('create');\r\n                        }}\r\n                      >\r\n                        Yeni Ki┼şi Ekle\r\n                      </Button>\r\n                    </div>\r\n                  ) : (\r\n                    filteredDependents.map((person) => (\r\n                      <div\r\n                        key={person.id}\r\n                        className={`p-4 border rounded-lg cursor-pointer transition-all ${\r\n                          selectedDependentId === person.id\r\n                            ? 'border-blue-500 bg-blue-50'\r\n                            : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'\r\n                        }`}\r\n                        onClick={() => {\r\n                          setSelectedDependentId(person.id);\r\n                        }}\r\n                      >\r\n                        <div className=\"flex items-start justify-between\">\r\n                          <div className=\"flex-1\">\r\n                            <div className=\"flex items-center gap-3 mb-2\">\r\n                              <div className=\"w-10 h-10 bg-blue-100 rounded-full flex items-center justify-center\">\r\n                                <Users className=\"w-5 h-5 text-blue-600\" />\r\n                              </div>\r\n                              <div>\r\n                                <h3 className=\"font-semibold text-gray-900\">{person.ad_soyad}</h3>\r\n                                <div className=\"flex items-center gap-2\">\r\n                                  <Badge\r\n                                    variant={\r\n                                      person.tur?.includes('Bakmakla Y├╝k├╝ml├╝')\r\n                                        ? 'default'\r\n                                        : 'secondary'\r\n                                    }\r\n                                    className={\r\n                                      person.tur?.includes('Bakmakla Y├╝k├╝ml├╝')\r\n                                        ? 'bg-purple-100 text-purple-800'\r\n                                        : 'bg-blue-100 text-blue-800'\r\n                                    }\r\n                                  >\r\n                                    {person.tur ?? person.Tur ?? '─░htiya├ğ Sahibi'}\r\n                                  </Badge>\r\n                                </div>\r\n                              </div>\r\n                            </div>\r\n\r\n                            <div className=\"grid grid-cols-3 gap-3 text-sm\">\r\n                              <div>\r\n                                <p className=\"text-gray-500\">TC Kimlik No</p>\r\n                                <p className=\"font-medium text-xs\">\r\n                                  {person.kimlik_no ?? person.Kimlik_No ?? 'ÔÇö'}\r\n                                </p>\r\n                              </div>\r\n                              <div>\r\n                                <p className=\"text-gray-500\">Telefon</p>\r\n                                <p className=\"font-medium text-xs\">\r\n                                  {person.telefon_no ?? person.Telefon_No ?? 'ÔÇö'}\r\n                                </p>\r\n                              </div>\r\n                              <div>\r\n                                <p className=\"text-gray-500\">┼Şehir</p>\r\n                                <p className=\"font-medium text-xs\">{person.sehri ?? 'ÔÇö'}</p>\r\n                              </div>\r\n                              <div>\r\n                                <p className=\"text-gray-500\">Uyruk</p>\r\n                                <p className=\"font-medium text-xs\">\r\n                                  {person.uyruk ?? person.Uyruk ?? 'ÔÇö'}\r\n                                </p>\r\n                              </div>\r\n                              <div>\r\n                                <p className=\"text-gray-500\">Kategori</p>\r\n                                <p className=\"font-medium text-xs\">\r\n                                  {person.kategori ?? person.Kategori ?? 'ÔÇö'}\r\n                                </p>\r\n                              </div>\r\n                              <div>\r\n                                <p className=\"text-gray-500\">ID</p>\r\n                                <Badge variant=\"outline\" className=\"text-xs\">\r\n                                  #{person.id}\r\n                                </Badge>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n\r\n                          {selectedDependentId === person.id && (\r\n                            <div className=\"ml-4\">\r\n                              <CheckCircle2 className=\"w-5 h-5 text-blue-600\" />\r\n                            </div>\r\n                          )}\r\n                        </div>\r\n                      </div>\r\n                    ))\r\n                  )}\r\n                </div>\r\n\r\n                {/* Relationship Selection for Existing Person */}\r\n                {selectedDependentId && (\r\n                  <div className=\"space-y-2 p-4 bg-blue-50 rounded-lg\">\r\n                    <Label className=\"text-sm font-medium\">Bu ki┼şiyle yak─▒nl─▒k dereceniz *</Label>\r\n                    <Select\r\n                      value={selectedRelationshipType}\r\n                      onValueChange={setSelectedRelationshipType}\r\n                    >\r\n                      <SelectTrigger className=\"h-10\">\r\n                        <SelectValue placeholder=\"Yak─▒nl─▒k derecesi se├ğiniz\" />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"parent\">Anne/Baba</SelectItem>\r\n                        <SelectItem value=\"spouse\">E┼ş</SelectItem>\r\n                        <SelectItem value=\"child\">├çocuk</SelectItem>\r\n                        <SelectItem value=\"sibling\">Karde┼ş</SelectItem>\r\n                        <SelectItem value=\"grandparent\">B├╝y├╝kanne/B├╝y├╝kbaba</SelectItem>\r\n                        <SelectItem value=\"grandchild\">Torun</SelectItem>\r\n                        <SelectItem value=\"other\">Di─şer</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <DialogFooter className=\"gap-2\">\r\n            <Button\r\n              variant=\"outline\"\r\n              onClick={handleCloseDependentPersonModal}\r\n              disabled={isSavingDependent}\r\n              className=\"px-6\"\r\n            >\r\n              ─░ptal\r\n            </Button>\r\n\r\n            {modalMode === 'list' ? null : modalMode === 'create' ? ( // Liste modunda sadece kapat butonu\r\n              <>\r\n                <Button\r\n                  variant=\"secondary\"\r\n                  onClick={handleSaveDependent}\r\n                  disabled={isSavingDependent}\r\n                  className=\"px-6\"\r\n                >\r\n                  {isSavingDependent ? 'Kaydediliyor...' : 'Sadece Kaydet'}\r\n                </Button>\r\n                <Button\r\n                  onClick={handleSaveAndGoToDetail}\r\n                  disabled={isSavingDependent}\r\n                  className=\"px-6 bg-blue-600 hover:bg-blue-700\"\r\n                >\r\n                  {isSavingDependent ? 'Kaydediliyor...' : 'Kaydet ve Detaya Git'}\r\n                </Button>\r\n              </>\r\n            ) : (\r\n              <Button\r\n                onClick={handleLinkExistingPerson}\r\n                disabled={(!selectedDependentId || !selectedRelationshipType) ?? isSavingDependent}\r\n                className=\"px-6 bg-green-600 hover:bg-green-700\"\r\n              >\r\n                {isSavingDependent ? 'Ba─şlan─▒yor...' : 'Ki┼şiyi Ba─şla'}\r\n              </Button>\r\n            )}\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {/* Photos Modal */}\r\n      <Dialog open={isPhotosModalOpen} onOpenChange={setIsPhotosModalOpen}>\r\n        <DialogContent className=\"sm:max-w-[900px] max-h-[80vh] overflow-hidden\">\r\n          <DialogHeader>\r\n            <DialogTitle className=\"text-lg font-semibold flex items-center gap-2\">\r\n              <Camera className=\"w-5 h-5\" />\r\n              Foto─şraf Galerisi\r\n            </DialogTitle>\r\n          </DialogHeader>\r\n\r\n          <div className=\"space-y-6 py-4\">\r\n            {/* Photo Upload Section */}\r\n            <div className=\"space-y-4\">\r\n              <div className=\"border-2 border-dashed border-gray-300 rounded-lg p-8 text-center hover:border-gray-400 transition-colors\">\r\n                <Camera className=\"w-12 h-12 text-gray-400 mx-auto mb-4\" />\r\n                <h3 className=\"text-lg font-medium text-gray-900 mb-2\">Foto─şraf Y├╝kle</h3>\r\n                <p className=\"text-sm text-gray-600 mb-4\">\r\n                  Foto─şraflar─▒ buraya s├╝r├╝kleyip b─▒rak─▒n veya se├ğmek i├ğin t─▒klay─▒n\r\n                </p>\r\n                <div className=\"flex items-center justify-center gap-4\">\r\n                  <input\r\n                    type=\"file\"\r\n                    multiple\r\n                    accept=\".jpg,.jpeg,.png,.gif,.webp\"\r\n                    onChange={handlePhotoUpload}\r\n                    className=\"hidden\"\r\n                    id=\"photo-upload\"\r\n                  />\r\n                  <label\r\n                    htmlFor=\"photo-upload\"\r\n                    className=\"cursor-pointer bg-blue-600 text-white px-4 py-2 rounded-lg hover:bg-blue-700 transition-colors\"\r\n                  >\r\n                    Foto─şraf Se├ğ\r\n                  </label>\r\n                </div>\r\n                {isUploadingPhoto && (\r\n                  <div className=\"mt-4\">\r\n                    <div className=\"w-full bg-gray-200 rounded-full h-2\">\r\n                      <div\r\n                        className=\"bg-blue-600 h-2 rounded-full transition-all duration-300\"\r\n                        style={{ width: `${photoUploadProgress}%` }}\r\n                       />\r\n                    </div>\r\n                    <p className=\"text-sm text-gray-600 mt-2\">\r\n                      Y├╝kleniyor... {photoUploadProgress}%\r\n                    </p>\r\n                  </div>\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Photos Grid */}\r\n            <div className=\"space-y-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <h3 className=\"text-lg font-medium\">Foto─şraflar ({photos?.length ?? 0})</h3>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <Button variant=\"outline\" size=\"sm\">\r\n                    <Grid className=\"w-4 h-4 mr-2\" />\r\n                    Izgara\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n\r\n              {photos?.length === 0 ? (\r\n                <div className=\"text-center py-8\">\r\n                  <Camera className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\r\n                  <p className=\"text-gray-500\">Hen├╝z foto─şraf y├╝klenmemi┼ş</p>\r\n                </div>\r\n              ) : (\r\n                <div className=\"grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4 max-h-96 overflow-y-auto\">\r\n                  {photos?.map((photo) => (\r\n                    <div key={photo.id} className=\"relative group\">\r\n                      <div className=\"aspect-square bg-gray-100 rounded-lg overflow-hidden\">\r\n                        <img\r\n                          src={photo.url}\r\n                          alt={photo.name}\r\n                          className=\"w-full h-full object-cover cursor-pointer hover:scale-105 transition-transform\"\r\n                          onClick={() => {\r\n                            handlePhotoPreview(photo);\r\n                          }}\r\n                        />\r\n                      </div>\r\n                      <div className=\"absolute top-2 right-2 opacity-0 group-hover:opacity-100 transition-opacity\">\r\n                        <div className=\"flex gap-1\">\r\n                          <Button\r\n                            size=\"sm\"\r\n                            variant=\"secondary\"\r\n                            className=\"h-8 w-8 p-0 bg-white/90 hover:bg-white\"\r\n                            onClick={() => {\r\n                              handlePhotoDownload(photo);\r\n                            }}\r\n                          >\r\n                            <Download className=\"w-3 h-3\" />\r\n                          </Button>\r\n                          <Button\r\n                            size=\"sm\"\r\n                            variant=\"destructive\"\r\n                            className=\"h-8 w-8 p-0 bg-red-500/90 hover:bg-red-600\"\r\n                            onClick={() => {\r\n                              handlePhotoDelete(photo.id);\r\n                            }}\r\n                          >\r\n                            <Trash2 className=\"w-3 h-3\" />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                      <div className=\"mt-2\">\r\n                        <p className=\"text-xs font-medium truncate\">{photo.name}</p>\r\n                        <p className=\"text-xs text-gray-500\">\r\n                          {photo.size} ÔÇó {photo.uploadDate}\r\n                        </p>\r\n                      </div>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n          </div>\r\n\r\n          <DialogFooter className=\"gap-2\">\r\n            <Button variant=\"outline\" onClick={handleClosePhotosModal}>\r\n              Kapat\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {/* Photo Preview Modal */}\r\n      <Dialog open={isPhotoPreviewOpen} onOpenChange={setIsPhotoPreviewOpen}>\r\n        <DialogContent className=\"sm:max-w-[800px] max-h-[90vh]\">\r\n          <DialogHeader>\r\n            <DialogTitle className=\"text-lg font-semibold\">{selectedPhoto?.name}</DialogTitle>\r\n          </DialogHeader>\r\n\r\n          <div className=\"py-4\">\r\n            {selectedPhoto && (\r\n              <div className=\"text-center\">\r\n                <img\r\n                  src={selectedPhoto.url}\r\n                  alt={selectedPhoto.name}\r\n                  className=\"max-w-full max-h-96 mx-auto rounded-lg\"\r\n                />\r\n                <div className=\"mt-4 text-sm text-gray-500\">\r\n                  <p>\r\n                    <strong>Boyut:</strong> {selectedPhoto.size}\r\n                  </p>\r\n                  <p>\r\n                    <strong>Y├╝klenme tarihi:</strong> {selectedPhoto.uploadDate}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <DialogFooter className=\"gap-2\">\r\n            <Button\r\n              variant=\"outline\"\r\n              onClick={() => {\r\n                setIsPhotoPreviewOpen(false);\r\n              }}\r\n            >\r\n              Kapat\r\n            </Button>\r\n            <Button\r\n              onClick={() => selectedPhoto && handlePhotoDownload(selectedPhoto)}\r\n              className=\"bg-blue-600 hover:bg-blue-700\"\r\n            >\r\n              <Download className=\"w-4 h-4 mr-2\" />\r\n              ─░ndir\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {/* Donors Modal */}\r\n      <Dialog open={isDonorsModalOpen} onOpenChange={setIsDonorsModalOpen}>\r\n        <DialogContent className=\"sm:max-w-[1000px] max-h-[80vh] overflow-hidden\">\r\n          <DialogHeader>\r\n            <DialogTitle className=\"text-lg font-semibold flex items-center gap-2\">\r\n              <Heart className=\"w-5 h-5\" />\r\n              Ba─ş─▒┼ş├ğ─▒lar\r\n            </DialogTitle>\r\n          </DialogHeader>\r\n\r\n          <div className=\"space-y-6 py-4\">\r\n            {/* Search and Filter Section */}\r\n            <div className=\"flex items-center gap-4\">\r\n              <div className=\"flex-1 relative\">\r\n                <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\r\n                <Input\r\n                  placeholder=\"Ba─ş─▒┼ş├ğ─▒ ara (isim, email)...\"\r\n                  value={donorSearchTerm}\r\n                  onChange={(e) => {\r\n                    setDonorSearchTerm(e.target.value);\r\n                  }}\r\n                  className=\"pl-10\"\r\n                />\r\n              </div>\r\n              <Button variant=\"outline\" size=\"sm\">\r\n                <Filter className=\"w-4 h-4 mr-2\" />\r\n                Filtrele\r\n              </Button>\r\n            </div>\r\n\r\n            {/* Donors Table */}\r\n            <div className=\"border rounded-lg overflow-hidden\">\r\n              <div className=\"bg-gray-50 px-6 py-3 border-b\">\r\n                <div className=\"grid grid-cols-6 gap-4 text-sm font-medium text-gray-700\">\r\n                  <div>Ba─ş─▒┼ş├ğ─▒</div>\r\n                  <div>─░leti┼şim</div>\r\n                  <div>Toplam Ba─ş─▒┼ş</div>\r\n                  <div>Son Ba─ş─▒┼ş</div>\r\n                  <div>Ba─ş─▒┼ş Say─▒s─▒</div>\r\n                  <div>─░┼şlemler</div>\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"max-h-96 overflow-y-auto\">\r\n                {filteredDonors?.length === 0 ? (\r\n                  <div className=\"text-center py-8\">\r\n                    <Heart className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\r\n                    <p className=\"text-gray-500\">\r\n                      {donorSearchTerm\r\n                        ? 'Arama kriterlerine uygun ba─ş─▒┼ş├ğ─▒ bulunamad─▒'\r\n                        : 'Hen├╝z ba─ş─▒┼ş├ğ─▒ kayd─▒ bulunmuyor'}\r\n                    </p>\r\n                  </div>\r\n                ) : (\r\n                  filteredDonors?.map((donor) => (\r\n                    <div\r\n                      key={donor.id}\r\n                      className=\"px-6 py-4 border-b hover:bg-gray-50 transition-colors\"\r\n                    >\r\n                      <div className=\"grid grid-cols-6 gap-4 items-center\">\r\n                        <div>\r\n                          <p className=\"font-medium text-gray-900\">{donor.name}</p>\r\n                        </div>\r\n                        <div>\r\n                          <p className=\"text-sm text-gray-600\">{donor.email}</p>\r\n                          <p className=\"text-sm text-gray-500\">{donor.phone}</p>\r\n                        </div>\r\n                        <div>\r\n                          <p className=\"font-medium text-green-600\">{donor.totalDonation}</p>\r\n                        </div>\r\n                        <div>\r\n                          <p className=\"text-sm text-gray-600\">{donor.lastDonation}</p>\r\n                        </div>\r\n                        <div>\r\n                          <Badge variant=\"secondary\">{donor.donationCount} ba─ş─▒┼ş</Badge>\r\n                        </div>\r\n                        <div>\r\n                          <div className=\"flex gap-2\">\r\n                            <Button size=\"sm\" variant=\"outline\">\r\n                              <Eye className=\"w-3 h-3 mr-1\" />\r\n                              Detay\r\n                            </Button>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n                    </div>\r\n                  ))\r\n                )}\r\n              </div>\r\n            </div>\r\n\r\n            {/* Summary */}\r\n            <div className=\"bg-blue-50 p-4 rounded-lg\">\r\n              <div className=\"grid grid-cols-3 gap-4 text-center\">\r\n                <div>\r\n                  <p className=\"text-2xl font-bold text-blue-600\">{donors.length}</p>\r\n                  <p className=\"text-sm text-gray-600\">Toplam Ba─ş─▒┼ş├ğ─▒</p>\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-2xl font-bold text-green-600\">\r\n                    {donors\r\n                      .reduce(\r\n                        (sum, donor) => sum + parseInt(donor.totalDonation.replace(/[^0-9]/g, '')),\r\n                        0,\r\n                      )\r\n                      .toLocaleString('tr-TR')}{' '}\r\n                    TL\r\n                  </p>\r\n                  <p className=\"text-sm text-gray-600\">Toplam Ba─ş─▒┼ş</p>\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-2xl font-bold text-purple-600\">\r\n                    {donors.reduce((sum, donor) => sum + donor.donationCount, 0)}\r\n                  </p>\r\n                  <p className=\"text-sm text-gray-600\">Toplam Ba─ş─▒┼ş Say─▒s─▒</p>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <DialogFooter className=\"gap-2\">\r\n            <Button variant=\"outline\" onClick={handleCloseDonorsModal}>\r\n              Kapat\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {/* Sponsors Modal */}\r\n      <Dialog open={isSponsorsModalOpen} onOpenChange={setIsSponsorsModalOpen}>\r\n        <DialogContent className=\"sm:max-w-[1000px] max-h-[80vh] overflow-hidden\">\r\n          <DialogHeader>\r\n            <DialogTitle className=\"text-lg font-semibold flex items-center gap-2\">\r\n              <Shield className=\"w-5 h-5\" />\r\n              Sponsorlar\r\n            </DialogTitle>\r\n          </DialogHeader>\r\n\r\n          <div className=\"space-y-6 py-4\">\r\n            {/* Sponsors Cards */}\r\n            <div className=\"space-y-4\">\r\n              {sponsors.length === 0 ? (\r\n                <div className=\"text-center py-8\">\r\n                  <Shield className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\r\n                  <p className=\"text-gray-500\">Hen├╝z sponsor kayd─▒ bulunmuyor</p>\r\n                </div>\r\n              ) : (\r\n                <div className=\"grid gap-4 max-h-96 overflow-y-auto\">\r\n                  {sponsors?.map((sponsor) => (\r\n                    <Card key={sponsor.id} className=\"hover:shadow-md transition-shadow\">\r\n                      <CardContent className=\"p-6\">\r\n                        <div className=\"flex items-start justify-between\">\r\n                          <div className=\"flex-1\">\r\n                            <div className=\"flex items-center gap-3 mb-3\">\r\n                              <div className=\"w-12 h-12 bg-blue-100 rounded-lg flex items-center justify-center\">\r\n                                <Shield className=\"w-6 h-6 text-blue-600\" />\r\n                              </div>\r\n                              <div>\r\n                                <h3 className=\"font-semibold text-lg text-gray-900\">\r\n                                  {sponsor.name}\r\n                                </h3>\r\n                                <Badge variant=\"outline\" className=\"text-xs\">\r\n                                  {sponsor.type}\r\n                                </Badge>\r\n                              </div>\r\n                            </div>\r\n\r\n                            <div className=\"grid grid-cols-2 gap-4 mb-4\">\r\n                              <div>\r\n                                <p className=\"text-sm text-gray-500\">─░leti┼şim</p>\r\n                                <p className=\"text-sm font-medium\">{sponsor.contact}</p>\r\n                                <p className=\"text-sm text-gray-600\">{sponsor.phone}</p>\r\n                              </div>\r\n                              <div>\r\n                                <p className=\"text-sm text-gray-500\">Sponsorluk Miktar─▒</p>\r\n                                <p className=\"text-lg font-bold text-green-600\">\r\n                                  {sponsor.sponsorshipAmount}\r\n                                </p>\r\n                              </div>\r\n                            </div>\r\n\r\n                            <div className=\"grid grid-cols-3 gap-4 mb-4\">\r\n                              <div>\r\n                                <p className=\"text-sm text-gray-500\">Ba┼şlang─▒├ğ</p>\r\n                                <p className=\"text-sm font-medium\">{sponsor.startDate}</p>\r\n                              </div>\r\n                              <div>\r\n                                <p className=\"text-sm text-gray-500\">Biti┼ş</p>\r\n                                <p className=\"text-sm font-medium\">{sponsor.endDate}</p>\r\n                              </div>\r\n                              <div>\r\n                                <p className=\"text-sm text-gray-500\">Durum</p>\r\n                                <Badge\r\n                                  variant={sponsor.status === 'Aktif' ? 'default' : 'secondary'}\r\n                                  className={\r\n                                    sponsor.status === 'Aktif' ? 'bg-green-100 text-green-800' : ''\r\n                                  }\r\n                                >\r\n                                  {sponsor.status}\r\n                                </Badge>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n\r\n                          <div className=\"flex flex-col gap-2 ml-4\">\r\n                            <Button size=\"sm\" variant=\"outline\">\r\n                              <Eye className=\"w-3 h-3 mr-1\" />\r\n                              Detay\r\n                            </Button>\r\n                            <Button size=\"sm\" variant=\"outline\">\r\n                              <Edit3 className=\"w-3 h-3 mr-1\" />\r\n                              D├╝zenle\r\n                            </Button>\r\n                          </div>\r\n                        </div>\r\n                      </CardContent>\r\n                    </Card>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* Summary */}\r\n            {sponsors.length > 0 && (\r\n              <div className=\"bg-green-50 p-4 rounded-lg\">\r\n                <div className=\"grid grid-cols-3 gap-4 text-center\">\r\n                  <div>\r\n                    <p className=\"text-2xl font-bold text-green-600\">{sponsors.length}</p>\r\n                    <p className=\"text-sm text-gray-600\">Toplam Sponsor</p>\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text-2xl font-bold text-blue-600\">\r\n                      {sponsors.filter((s) => s.status === 'Aktif').length}\r\n                    </p>\r\n                    <p className=\"text-sm text-gray-600\">Aktif Sponsor</p>\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text-2xl font-bold text-purple-600\">\r\n                      {sponsors\r\n                        .reduce(\r\n                          (sum, sponsor) =>\r\n                            sum + parseInt(sponsor.sponsorshipAmount.replace(/[^0-9]/g, '')),\r\n                          0,\r\n                        )\r\n                        .toLocaleString('tr-TR')}{' '}\r\n                      TL\r\n                    </p>\r\n                    <p className=\"text-sm text-gray-600\">Toplam Sponsorluk</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <DialogFooter className=\"gap-2\">\r\n            <Button variant=\"outline\" onClick={handleCloseSponsorsModal}>\r\n              Kapat\r\n            </Button>\r\n            <Button className=\"bg-blue-600 hover:bg-blue-700\">\r\n              <Shield className=\"w-4 h-4 mr-2\" />\r\n              Yeni Sponsor Ekle\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {/* Help Requests Modal */}\r\n      <Dialog open={isHelpRequestsModalOpen} onOpenChange={setIsHelpRequestsModalOpen}>\r\n        <DialogContent className=\"sm:max-w-[1000px] max-h-[80vh] overflow-hidden\">\r\n          <DialogHeader>\r\n            <DialogTitle className=\"text-lg font-semibold flex items-center gap-2\">\r\n              <AlertTriangle className=\"w-5 h-5\" />\r\n              Yard─▒m Talepleri\r\n            </DialogTitle>\r\n          </DialogHeader>\r\n\r\n          <div className=\"space-y-6 py-4\">\r\n            {/* Help Requests List */}\r\n            <div className=\"space-y-4\">\r\n              {helpRequests.length === 0 ? (\r\n                <div className=\"text-center py-8\">\r\n                  <AlertTriangle className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\r\n                  <p className=\"text-gray-500\">Hen├╝z yard─▒m talebi bulunmuyor</p>\r\n                </div>\r\n              ) : (\r\n                <div className=\"space-y-3 max-h-96 overflow-y-auto\">\r\n                  {helpRequests?.map((request) => (\r\n                    <Card key={request.id} className=\"hover:shadow-md transition-shadow\">\r\n                      <CardContent className=\"p-4\">\r\n                        <div className=\"flex items-start justify-between\">\r\n                          <div className=\"flex-1\">\r\n                            <div className=\"flex items-center gap-3 mb-2\">\r\n                              <div className=\"w-10 h-10 bg-orange-100 rounded-lg flex items-center justify-center\">\r\n                                <AlertTriangle className=\"w-5 h-5 text-orange-600\" />\r\n                              </div>\r\n                              <div>\r\n                                <h3 className=\"font-semibold text-gray-900\">{request.title}</h3>\r\n                                <p className=\"text-sm text-gray-600\">{request.description}</p>\r\n                              </div>\r\n                            </div>\r\n\r\n                            <div className=\"grid grid-cols-4 gap-4 mt-3\">\r\n                              <div>\r\n                                <p className=\"text-xs text-gray-500\">Durum</p>\r\n                                <Badge\r\n                                  variant={\r\n                                    request.status === 'Tamamland─▒' ? 'default' : 'secondary'\r\n                                  }\r\n                                  className={\r\n                                    request.status === 'Tamamland─▒'\r\n                                      ? 'bg-green-100 text-green-800'\r\n                                      : request.status === 'Beklemede'\r\n                                        ? 'bg-yellow-100 text-yellow-800'\r\n                                        : 'bg-gray-100 text-gray-800'\r\n                                  }\r\n                                >\r\n                                  {request.status}\r\n                                </Badge>\r\n                              </div>\r\n                              <div>\r\n                                <p className=\"text-xs text-gray-500\">Tarih</p>\r\n                                <p className=\"text-sm font-medium\">{request.requestDate}</p>\r\n                              </div>\r\n                              <div>\r\n                                <p className=\"text-xs text-gray-500\">├ûncelik</p>\r\n                                <Badge\r\n                                  variant=\"outline\"\r\n                                  className={\r\n                                    request.priority === 'Y├╝ksek'\r\n                                      ? 'border-red-200 text-red-700'\r\n                                      : request.priority === 'Orta'\r\n                                        ? 'border-yellow-200 text-yellow-700'\r\n                                        : 'border-green-200 text-green-700'\r\n                                  }\r\n                                >\r\n                                  {request.priority}\r\n                                </Badge>\r\n                              </div>\r\n                              <div>\r\n                                <p className=\"text-xs text-gray-500\">Kategori</p>\r\n                                <Badge variant=\"outline\" className=\"text-xs\">\r\n                                  {request.category}\r\n                                </Badge>\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n\r\n                          <div className=\"flex flex-col gap-2 ml-4\">\r\n                            <Button size=\"sm\" variant=\"outline\">\r\n                              <Eye className=\"w-3 h-3 mr-1\" />\r\n                              Detay\r\n                            </Button>\r\n                            {request.status === 'Beklemede' && (\r\n                              <Button size=\"sm\" className=\"bg-green-600 hover:bg-green-700\">\r\n                                <CheckCircle2 className=\"w-3 h-3 mr-1\" />\r\n                                Tamamla\r\n                              </Button>\r\n                            )}\r\n                          </div>\r\n                        </div>\r\n                      </CardContent>\r\n                    </Card>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* Summary */}\r\n            {helpRequests.length > 0 && (\r\n              <div className=\"bg-orange-50 p-4 rounded-lg\">\r\n                <div className=\"grid grid-cols-4 gap-4 text-center\">\r\n                  <div>\r\n                    <p className=\"text-2xl font-bold text-orange-600\">{helpRequests.length}</p>\r\n                    <p className=\"text-sm text-gray-600\">Toplam Talep</p>\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text-2xl font-bold text-yellow-600\">\r\n                      {helpRequests.filter((r) => r.status === 'Beklemede').length}\r\n                    </p>\r\n                    <p className=\"text-sm text-gray-600\">Beklemede</p>\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text-2xl font-bold text-green-600\">\r\n                      {helpRequests.filter((r) => r.status === 'Tamamland─▒').length}\r\n                    </p>\r\n                    <p className=\"text-sm text-gray-600\">Tamamland─▒</p>\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text-2xl font-bold text-red-600\">\r\n                      {helpRequests.filter((r) => r.priority === 'Y├╝ksek').length}\r\n                    </p>\r\n                    <p className=\"text-sm text-gray-600\">Y├╝ksek ├ûncelik</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <DialogFooter className=\"gap-2\">\r\n            <Button variant=\"outline\" onClick={handleCloseHelpRequestsModal}>\r\n              Kapat\r\n            </Button>\r\n            <Button className=\"bg-blue-600 hover:bg-blue-700\">\r\n              <AlertTriangle className=\"w-4 h-4 mr-2\" />\r\n              Yeni Talep Ekle\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {/* Completed Aids Modal */}\r\n      <Dialog open={isCompletedAidsModalOpen} onOpenChange={setIsCompletedAidsModalOpen}>\r\n        <DialogContent className=\"sm:max-w-[1000px] max-h-[80vh] overflow-hidden\">\r\n          <DialogHeader>\r\n            <DialogTitle className=\"text-lg font-semibold flex items-center gap-2\">\r\n              <Heart className=\"w-5 h-5\" />\r\n              Yap─▒lan Yard─▒mlar\r\n            </DialogTitle>\r\n          </DialogHeader>\r\n\r\n          <div className=\"space-y-6 py-4\">\r\n            {/* Completed Aids List */}\r\n            <div className=\"space-y-4\">\r\n              {completedAids.length === 0 ? (\r\n                <div className=\"text-center py-8\">\r\n                  <Heart className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\r\n                  <p className=\"text-gray-500\">Hen├╝z yap─▒lan yard─▒m bulunmuyor</p>\r\n                </div>\r\n              ) : (\r\n                <div className=\"space-y-3 max-h-96 overflow-y-auto\">\r\n                  {completedAids?.map((aid) => (\r\n                    <Card key={aid.id} className=\"hover:shadow-md transition-shadow\">\r\n                      <CardContent className=\"p-4\">\r\n                        <div className=\"flex items-start justify-between\">\r\n                          <div className=\"flex-1\">\r\n                            <div className=\"flex items-center gap-3 mb-2\">\r\n                              <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\r\n                                <Heart className=\"w-5 h-5 text-green-600\" />\r\n                              </div>\r\n                              <div>\r\n                                <h3 className=\"font-semibold text-gray-900\">{aid.description}</h3>\r\n                                <p className=\"text-sm text-gray-600\">\r\n                                  {aid.type} yard─▒m─▒ - {aid.provider}\r\n                                </p>\r\n                              </div>\r\n                            </div>\r\n\r\n                            <div className=\"grid grid-cols-4 gap-4 mt-3\">\r\n                              <div>\r\n                                <p className=\"text-xs text-gray-500\">Tarih</p>\r\n                                <p className=\"text-sm font-medium\">{aid.date}</p>\r\n                              </div>\r\n                              <div>\r\n                                <p className=\"text-xs text-gray-500\">Miktar</p>\r\n                                <p className=\"text-sm font-medium text-green-600\">{aid.amount}</p>\r\n                              </div>\r\n                              <div>\r\n                                <p className=\"text-xs text-gray-500\">T├╝r</p>\r\n                                <Badge\r\n                                  variant=\"outline\"\r\n                                  className={\r\n                                    aid.type === 'Nakdi'\r\n                                      ? 'border-green-200 text-green-700'\r\n                                      : aid.type === 'Ayni'\r\n                                        ? 'border-blue-200 text-blue-700'\r\n                                        : 'border-purple-200 text-purple-700'\r\n                                  }\r\n                                >\r\n                                  {aid.type}\r\n                                </Badge>\r\n                              </div>\r\n                              <div>\r\n                                <p className=\"text-xs text-gray-500\">Kaynak</p>\r\n                                <p className=\"text-sm font-medium\">{aid.provider}</p>\r\n                              </div>\r\n                            </div>\r\n\r\n                            {aid.notes && (\r\n                              <div className=\"mt-3 p-2 bg-gray-50 rounded\">\r\n                                <p className=\"text-xs text-gray-500 mb-1\">Notes</p>\r\n                                <p className=\"text-sm text-gray-700\">{aid.notes}</p>\r\n                              </div>\r\n                            )}\r\n                          </div>\r\n\r\n                          <div className=\"flex flex-col gap-2 ml-4\">\r\n                            <Button size=\"sm\" variant=\"outline\">\r\n                              <Eye className=\"w-3 h-3 mr-1\" />\r\n                              Detay\r\n                            </Button>\r\n                            <Button size=\"sm\" variant=\"outline\">\r\n                              <Download className=\"w-3 h-3 mr-1\" />\r\n                              Rapor\r\n                            </Button>\r\n                          </div>\r\n                        </div>\r\n                      </CardContent>\r\n                    </Card>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* Summary */}\r\n            {completedAids.length > 0 && (\r\n              <div className=\"bg-green-50 p-4 rounded-lg\">\r\n                <div className=\"grid grid-cols-4 gap-4 text-center\">\r\n                  <div>\r\n                    <p className=\"text-2xl font-bold text-green-600\">{completedAids.length}</p>\r\n                    <p className=\"text-sm text-gray-600\">Toplam Yard─▒m</p>\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text-2xl font-bold text-green-600\">\r\n                      {completedAids.filter((a) => a.type === 'Nakdi').length}\r\n                    </p>\r\n                    <p className=\"text-sm text-gray-600\">Nakdi Yard─▒m</p>\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text-2xl font-bold text-blue-600\">\r\n                      {completedAids.filter((a) => a.type === 'Ayni').length}\r\n                    </p>\r\n                    <p className=\"text-sm text-gray-600\">Ayni Yard─▒m</p>\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text-2xl font-bold text-purple-600\">\r\n                      {completedAids.filter((a) => a.type === 'Hizmet').length}\r\n                    </p>\r\n                    <p className=\"text-sm text-gray-600\">Hizmet</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <DialogFooter className=\"gap-2\">\r\n            <Button variant=\"outline\" onClick={handleCloseCompletedAidsModal}>\r\n              Kapat\r\n            </Button>\r\n            <Button className=\"bg-blue-600 hover:bg-blue-700\">\r\n              <Heart className=\"w-4 h-4 mr-2\" />\r\n              Yeni Yard─▒m Ekle\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n\r\n      {/* Consent Declarations Modal */}\r\n      <Dialog\r\n        open={isConsentDeclarationsModalOpen}\r\n        onOpenChange={setIsConsentDeclarationsModalOpen}\r\n      >\r\n        <DialogContent className=\"sm:max-w-[900px] max-h-[80vh] overflow-hidden\">\r\n          <DialogHeader>\r\n            <DialogTitle className=\"text-lg font-semibold flex items-center gap-2\">\r\n              <Shield className=\"w-5 h-5\" />\r\n              R─▒za Beyanlar─▒\r\n            </DialogTitle>\r\n          </DialogHeader>\r\n\r\n          <div className=\"space-y-6 py-4\">\r\n            {/* Consent Declarations List */}\r\n            <div className=\"space-y-4\">\r\n              {consentDeclarations.length === 0 ? (\r\n                <div className=\"text-center py-8\">\r\n                  <Shield className=\"w-16 h-16 text-gray-300 mx-auto mb-4\" />\r\n                  <p className=\"text-gray-500\">Hen├╝z r─▒za beyan─▒ bulunmuyor</p>\r\n                </div>\r\n              ) : (\r\n                <div className=\"space-y-3 max-h-96 overflow-y-auto\">\r\n                  {consentDeclarations?.map((consent) => (\r\n                    <Card key={consent.id} className=\"hover:shadow-md transition-shadow\">\r\n                      <CardContent className=\"p-4\">\r\n                        <div className=\"flex items-start justify-between\">\r\n                          <div className=\"flex-1\">\r\n                            <div className=\"flex items-center gap-3 mb-2\">\r\n                              <div\r\n                                className={`w-10 h-10 rounded-lg flex items-center justify-center ${\r\n                                  consent.status === 'Onayland─▒'\r\n                                    ? 'bg-green-100'\r\n                                    : consent.status === 'Beklemede'\r\n                                      ? 'bg-yellow-100'\r\n                                      : 'bg-red-100'\r\n                                }`}\r\n                              >\r\n                                <Shield\r\n                                  className={`w-5 h-5 ${\r\n                                    consent.status === 'Onayland─▒'\r\n                                      ? 'text-green-600'\r\n                                      : consent.status === 'Beklemede'\r\n                                        ? 'text-yellow-600'\r\n                                        : 'text-red-600'\r\n                                  }`}\r\n                                />\r\n                              </div>\r\n                              <div>\r\n                                <h3 className=\"font-semibold text-gray-900\">{consent.title}</h3>\r\n                                <p className=\"text-sm text-gray-600\">{consent.description}</p>\r\n                              </div>\r\n                            </div>\r\n\r\n                            <div className=\"grid grid-cols-3 gap-4 mt-3\">\r\n                              <div>\r\n                                <p className=\"text-xs text-gray-500\">Durum</p>\r\n                                <Badge\r\n                                  variant={consent.status === 'Onayland─▒' ? 'default' : 'secondary'}\r\n                                  className={\r\n                                    consent.status === 'Onayland─▒'\r\n                                      ? 'bg-green-100 text-green-800'\r\n                                      : consent.status === 'Beklemede'\r\n                                        ? 'bg-yellow-100 text-yellow-800'\r\n                                        : 'bg-red-100 text-red-800'\r\n                                  }\r\n                                >\r\n                                  {consent.status}\r\n                                </Badge>\r\n                              </div>\r\n                              <div>\r\n                                <p className=\"text-xs text-gray-500\">Tarih</p>\r\n                                <p className=\"text-sm font-medium\">{consent.date}</p>\r\n                              </div>\r\n                              <div>\r\n                                <p className=\"text-xs text-gray-500\">Kategori</p>\r\n                                <Badge variant=\"outline\" className=\"text-xs\">\r\n                                  {consent.type}\r\n                                </Badge>\r\n                              </div>\r\n                            </div>\r\n                            {consent.details && (\r\n                              <div className=\"mt-3 p-2 bg-gray-50 rounded\">\r\n                                <p className=\"text-xs text-gray-500 mb-1\">Detaylar</p>\r\n                                <p className=\"text-sm text-gray-700\">{consent.details}</p>\r\n                              </div>\r\n                            )}\r\n                          </div>\r\n\r\n                          <div className=\"flex flex-col gap-2 ml-4\">\r\n                            <Button size=\"sm\" variant=\"outline\">\r\n                              <Eye className=\"w-3 h-3 mr-1\" />\r\n                              G├Âr├╝nt├╝le\r\n                            </Button>\r\n                            {consent.status === 'Beklemede' && (\r\n                              <Button size=\"sm\" className=\"bg-green-600 hover:bg-green-700\">\r\n                                <CheckCircle2 className=\"w-3 h-3 mr-1\" />\r\n                                Onayla\r\n                              </Button>\r\n                            )}\r\n                            <Button size=\"sm\" variant=\"outline\">\r\n                              <Download className=\"w-3 h-3 mr-1\" />\r\n                              ─░ndir\r\n                            </Button>\r\n                          </div>\r\n                        </div>\r\n                      </CardContent>\r\n                    </Card>\r\n                  ))}\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* Summary */}\r\n            {consentDeclarations.length > 0 && (\r\n              <div className=\"bg-blue-50 p-4 rounded-lg\">\r\n                <div className=\"grid grid-cols-4 gap-4 text-center\">\r\n                  <div>\r\n                    <p className=\"text-2xl font-bold text-blue-600\">{consentDeclarations.length}</p>\r\n                    <p className=\"text-sm text-gray-600\">Toplam Beyan</p>\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text-2xl font-bold text-green-600\">\r\n                      {consentDeclarations.filter((c) => c.status === 'Onayland─▒').length}\r\n                    </p>\r\n                    <p className=\"text-sm text-gray-600\">Onayland─▒</p>\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text-2xl font-bold text-yellow-600\">\r\n                      {consentDeclarations.filter((c) => c.status === 'Beklemede').length}\r\n                    </p>\r\n                    <p className=\"text-sm text-gray-600\">Beklemede</p>\r\n                  </div>\r\n                  <div>\r\n                    <p className=\"text-2xl font-bold text-red-600\">\r\n                      {consentDeclarations.filter((c) => c.status === 'Reddedildi').length}\r\n                    </p>\r\n                    <p className=\"text-sm text-gray-600\">Reddedildi</p>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n\r\n          <DialogFooter className=\"gap-2\">\r\n            <Button variant=\"outline\" onClick={handleCloseConsentDeclarationsModal}>\r\n              Kapat\r\n            </Button>\r\n            <Button className=\"bg-blue-600 hover:bg-blue-700\">\r\n              <Shield className=\"w-4 h-4 mr-2\" />\r\n              Yeni Beyan Ekle\r\n            </Button>\r\n          </DialogFooter>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default BeneficiaryDetailPageComprehensive;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\BursApplicationsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":224,"column":12,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":224,"endColumn":32},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":224,"column":12,"nodeType":"MemberExpression","endLine":224,"endColumn":32},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":234,"column":12,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":234,"endColumn":36},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":234,"column":12,"nodeType":"MemberExpression","endLine":234,"endColumn":36}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview BursApplicationsPage Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { AlertCircle, Check, Clock, Download, Eye, FileText, Plus, Search, X } from 'lucide-react';\r\nimport { motion } from 'motion/react';\r\nimport { useMemo, useState } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { useIsMobile } from '../../hooks/useTouchDevice';\r\nimport { MobileInfoCard, ResponsiveCardGrid } from '../ResponsiveCard';\r\nimport { Avatar, AvatarFallback } from '../ui/avatar';\r\nimport { Badge } from '../ui/badge';\r\nimport { Button } from '../ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Input } from '../ui/input';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\n\r\ninterface Application {\r\n  id: number;\r\n  applicantName: string;\r\n  email: string;\r\n  phone: string;\r\n  school: string;\r\n  program: string;\r\n  grade: string;\r\n  requestedAmount: number;\r\n  familyIncome: number;\r\n  gpa: number;\r\n  status: 'pending' | 'approved' | 'rejected' | 'interview';\r\n  applicationDate: string;\r\n  documents: {\r\n    transcript: boolean;\r\n    incomeProof: boolean;\r\n    recommendation: boolean;\r\n    essay: boolean;\r\n  };\r\n  priority: 'high' | 'medium' | 'low';\r\n}\r\n\r\ninterface ApplicationStats {\r\n  total: number;\r\n  pending: number;\r\n  approved: number;\r\n  rejected: number;\r\n  interview: number;\r\n}\r\n\r\n/**\r\n * BursApplicationsPage function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function BursApplicationsPage() {\r\n  const isMobile = useIsMobile();\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState<string>('all');\r\n  const [priorityFilter, setPriorityFilter] = useState<string>('all');\r\n\r\n  const applications: Application[] = useMemo(\r\n    () => [\r\n      {\r\n        id: 1,\r\n        applicantName: 'Zeynep ├çelik',\r\n        email: 'zeynep@email.com',\r\n        phone: '0532 111 2222',\r\n        school: '─░stanbul Teknik ├£niversitesi',\r\n        program: 'Bilgisayar M├╝hendisli─şi',\r\n        grade: '2. S─▒n─▒f',\r\n        requestedAmount: 1500,\r\n        familyIncome: 8000,\r\n        gpa: 3.67,\r\n        status: 'pending',\r\n        applicationDate: '2024-10-15',\r\n        documents: {\r\n          transcript: true,\r\n          incomeProof: true,\r\n          recommendation: false,\r\n          essay: true,\r\n        },\r\n        priority: 'high',\r\n      },\r\n      {\r\n        id: 2,\r\n        applicantName: 'Ali Vural',\r\n        email: 'ali@email.com',\r\n        phone: '0533 333 4444',\r\n        school: 'Ankara ├£niversitesi',\r\n        program: 'Hukuk',\r\n        grade: '4. S─▒n─▒f',\r\n        requestedAmount: 2000,\r\n        familyIncome: 5500,\r\n        gpa: 3.21,\r\n        status: 'interview',\r\n        applicationDate: '2024-10-12',\r\n        documents: {\r\n          transcript: true,\r\n          incomeProof: true,\r\n          recommendation: true,\r\n          essay: true,\r\n        },\r\n        priority: 'medium',\r\n      },\r\n      {\r\n        id: 3,\r\n        applicantName: 'Selin Kocaman',\r\n        email: 'selin@email.com',\r\n        phone: '0534 555 6666',\r\n        school: 'Ege ├£niversitesi',\r\n        program: 'T─▒p',\r\n        grade: '3. S─▒n─▒f',\r\n        requestedAmount: 2500,\r\n        familyIncome: 6200,\r\n        gpa: 3.89,\r\n        status: 'approved',\r\n        applicationDate: '2024-10-08',\r\n        documents: {\r\n          transcript: true,\r\n          incomeProof: true,\r\n          recommendation: true,\r\n          essay: true,\r\n        },\r\n        priority: 'high',\r\n      },\r\n      {\r\n        id: 4,\r\n        applicantName: 'Emre ┼Şahin',\r\n        email: 'emre@email.com',\r\n        phone: '0535 777 8888',\r\n        school: 'Gazi ├£niversitesi',\r\n        program: 'Makine M├╝hendisli─şi',\r\n        grade: '1. S─▒n─▒f',\r\n        requestedAmount: 1200,\r\n        familyIncome: 9500,\r\n        gpa: 2.98,\r\n        status: 'rejected',\r\n        applicationDate: '2024-10-05',\r\n        documents: {\r\n          transcript: true,\r\n          incomeProof: false,\r\n          recommendation: false,\r\n          essay: true,\r\n        },\r\n        priority: 'low',\r\n      },\r\n      {\r\n        id: 5,\r\n        applicantName: 'B├╝┼şra ├ûzdemir',\r\n        email: 'busra@email.com',\r\n        phone: '0536 999 0000',\r\n        school: 'Marmara ├£niversitesi',\r\n        program: '─░ktisat',\r\n        grade: '2. S─▒n─▒f',\r\n        requestedAmount: 1800,\r\n        familyIncome: 4800,\r\n        gpa: 3.45,\r\n        status: 'pending',\r\n        applicationDate: '2024-10-18',\r\n        documents: {\r\n          transcript: true,\r\n          incomeProof: true,\r\n          recommendation: true,\r\n          essay: false,\r\n        },\r\n        priority: 'medium',\r\n      },\r\n    ],\r\n    [],\r\n  );\r\n\r\n  // Calculate statistics\r\n  const stats: ApplicationStats = useMemo(() => {\r\n    const total = applications.length;\r\n    const pending = applications.filter((a) => a.status === 'pending').length;\r\n    const approved = applications.filter((a) => a.status === 'approved').length;\r\n    const rejected = applications.filter((a) => a.status === 'rejected').length;\r\n    const interview = applications.filter((a) => a.status === 'interview').length;\r\n\r\n    return { total, pending, approved, rejected, interview };\r\n  }, [applications]);\r\n\r\n  // Filter applications\r\n  const filteredApplications = useMemo(() => {\r\n    return applications.filter((application) => {\r\n      const matchesSearch =\r\n        application.applicantName.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        application.school.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        application.program.toLowerCase().includes(searchQuery.toLowerCase());\r\n\r\n      const matchesStatus = statusFilter === 'all' || application.status === statusFilter;\r\n      const matchesPriority = priorityFilter === 'all' || application.priority === priorityFilter;\r\n\r\n      return matchesSearch && matchesStatus && matchesPriority;\r\n    });\r\n  }, [applications, searchQuery, statusFilter, priorityFilter]);\r\n\r\n  const getStatusBadge = (status: Application['status']) => {\r\n    const statusConfig = {\r\n      pending: {\r\n        label: 'Beklemede',\r\n        variant: 'outline' as const,\r\n        icon: <Clock className=\"w-3 h-3\" />,\r\n      },\r\n      approved: {\r\n        label: 'Onayland─▒',\r\n        variant: 'default' as const,\r\n        icon: <Check className=\"w-3 h-3\" />,\r\n      },\r\n      rejected: {\r\n        label: 'Reddedildi',\r\n        variant: 'destructive' as const,\r\n        icon: <X className=\"w-3 h-3\" />,\r\n      },\r\n      interview: {\r\n        label: 'G├Âr├╝┼şme',\r\n        variant: 'secondary' as const,\r\n        icon: <AlertCircle className=\"w-3 h-3\" />,\r\n      },\r\n    };\r\n\r\n    return statusConfig[status] ?? statusConfig.pending;\r\n  };\r\n\r\n  const getPriorityBadge = (priority: Application['priority']) => {\r\n    const priorityConfig = {\r\n      high: { label: 'Y├╝ksek', color: 'text-red-600', bg: 'bg-red-100' },\r\n      medium: { label: 'Orta', color: 'text-amber-600', bg: 'bg-amber-100' },\r\n      low: { label: 'D├╝┼ş├╝k', color: 'text-green-600', bg: 'bg-green-100' },\r\n    };\r\n\r\n    return priorityConfig[priority] ?? priorityConfig.medium;\r\n  };\r\n\r\n  const getDocumentProgress = (documents: Application['documents']) => {\r\n    const totalDocs = Object.keys(documents).length;\r\n    const completedDocs = Object.values(documents).filter(Boolean).length;\r\n    const percentage = Math.round((completedDocs / totalDocs) * 100);\r\n\r\n    return { completed: completedDocs, total: totalDocs, percentage };\r\n  };\r\n\r\n  const handleViewApplication = (applicationId: number) => {\r\n    toast.success(`Ba┼şvuru detaylar─▒ a├ğ─▒l─▒yor: ${applicationId}`);\r\n  };\r\n\r\n  const handleApproveApplication = (applicationId: number) => {\r\n    toast.success(`Ba┼şvuru onaylan─▒yor: ${applicationId}`);\r\n  };\r\n\r\n  const handleRejectApplication = (applicationId: number) => {\r\n    toast.error(`Ba┼şvuru reddediliyor: ${applicationId}`);\r\n  };\r\n\r\n  const handleNewApplication = () => {\r\n    toast.success('Yeni ba┼şvuru formu a├ğ─▒l─▒yor...');\r\n  };\r\n\r\n  const handleBulkExport = () => {\r\n    toast.success('Ba┼şvurular Excel format─▒nda d─▒┼şa aktar─▒l─▒yor...');\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-3 sm:p-6 lg:p-8 space-y-6 lg:space-y-8 bg-slate-50/50 min-h-full safe-area\">\r\n      {/* Header */}\r\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\r\n        <div className=\"space-y-1 sm:space-y-2\">\r\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-slate-800 flex items-center gap-3\">\r\n            <div className=\"w-8 h-8 sm:w-10 sm:h-10 bg-gradient-to-br from-blue-600 to-indigo-700 rounded-xl flex items-center justify-center\">\r\n              <FileText className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\r\n            </div>\r\n            Burs Ba┼şvurular─▒\r\n          </h1>\r\n          <p className=\"text-sm sm:text-base text-slate-600\">\r\n            ├û─şrenciler ad─▒na olu┼şturulan burs ba┼şvurular─▒n─▒ inceleyin ve de─şerlendirin\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"flex items-center gap-2\">\r\n          <Button onClick={handleBulkExport} variant=\"outline\" size=\"sm\" className=\"hidden sm:flex\">\r\n            <Download className=\"w-4 h-4 mr-2\" />\r\n            D─▒┼şa Aktar\r\n          </Button>\r\n          <Button onClick={handleNewApplication} size=\"sm\">\r\n            <Plus className=\"w-4 h-4 mr-2\" />\r\n            ├û─şrenci Ad─▒na Ba┼şvuru Olu┼ştur\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Statistics Cards */}\r\n      <ResponsiveCardGrid cols={{ default: 2, sm: 5 }} gap=\"sm\">\r\n        <MobileInfoCard\r\n          icon={<FileText className=\"w-5 h-5\" />}\r\n          title=\"Toplam Ba┼şvuru\"\r\n          value={stats.total.toString()}\r\n          color=\"text-blue-600\"\r\n        />\r\n        <MobileInfoCard\r\n          icon={<Clock className=\"w-5 h-5\" />}\r\n          title=\"Beklemede\"\r\n          value={stats.pending.toString()}\r\n          color=\"text-amber-600\"\r\n        />\r\n        <MobileInfoCard\r\n          icon={<AlertCircle className=\"w-5 h-5\" />}\r\n          title=\"G├Âr├╝┼şme\"\r\n          value={stats.interview.toString()}\r\n          color=\"text-purple-600\"\r\n        />\r\n        <MobileInfoCard\r\n          icon={<Check className=\"w-5 h-5\" />}\r\n          title=\"Onayland─▒\"\r\n          value={stats.approved.toString()}\r\n          color=\"text-green-600\"\r\n        />\r\n        <MobileInfoCard\r\n          icon={<X className=\"w-5 h-5\" />}\r\n          title=\"Reddedildi\"\r\n          value={stats.rejected.toString()}\r\n          color=\"text-red-600\"\r\n        />\r\n      </ResponsiveCardGrid>\r\n\r\n      {/* Filters */}\r\n      <Card>\r\n        <CardContent className=\"p-4 sm:p-6\">\r\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n            <div className=\"sm:col-span-2 lg:col-span-2\">\r\n              <div className=\"relative\">\r\n                <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-slate-400\" />\r\n                <Input\r\n                  placeholder=\"Ba┼şvuran, okul veya program ara...\"\r\n                  value={searchQuery}\r\n                  onChange={(e) => {\r\n                    setSearchQuery(e.target.value);\r\n                  }}\r\n                  className=\"pl-10\"\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\r\n              <SelectTrigger>\r\n                <SelectValue placeholder=\"Durum Filtresi\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"all\">T├╝m Durumlar</SelectItem>\r\n                <SelectItem value=\"pending\">Beklemede</SelectItem>\r\n                <SelectItem value=\"interview\">G├Âr├╝┼şme</SelectItem>\r\n                <SelectItem value=\"approved\">Onayland─▒</SelectItem>\r\n                <SelectItem value=\"rejected\">Reddedildi</SelectItem>\r\n              </SelectContent>\r\n            </Select>\r\n\r\n            <Select value={priorityFilter} onValueChange={setPriorityFilter}>\r\n              <SelectTrigger>\r\n                <SelectValue placeholder=\"├ûncelik Filtresi\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"all\">T├╝m ├ûncelikler</SelectItem>\r\n                <SelectItem value=\"high\">Y├╝ksek</SelectItem>\r\n                <SelectItem value=\"medium\">Orta</SelectItem>\r\n                <SelectItem value=\"low\">D├╝┼ş├╝k</SelectItem>\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Applications List */}\r\n      <Card>\r\n        <CardHeader className=\"pb-4\">\r\n          <CardTitle className=\"flex items-center justify-between\">\r\n            <span>Ba┼şvuru Listesi</span>\r\n            <Badge variant=\"secondary\" className=\"text-xs\">\r\n              {filteredApplications.length} ba┼şvuru\r\n            </Badge>\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"p-0 sm:p-6 sm:pt-0\">\r\n          {isMobile ? (\r\n            <div className=\"space-y-4 p-4\">\r\n              {filteredApplications.map((application, index) => {\r\n                const statusConfig = getStatusBadge(application.status);\r\n                const priorityConfig = getPriorityBadge(application.priority);\r\n                const docProgress = getDocumentProgress(application.documents);\r\n\r\n                return (\r\n                  <motion.div\r\n                    key={application.id}\r\n                    initial={{ opacity: 0, y: 20 }}\r\n                    animate={{ opacity: 1, y: 0 }}\r\n                    transition={{ delay: index * 0.05 }}\r\n                    className=\"bg-white border border-slate-200 rounded-lg p-4 space-y-3\"\r\n                  >\r\n                    <div className=\"flex items-start justify-between\">\r\n                      <div className=\"flex-1\">\r\n                        <h3 className=\"font-semibold text-slate-900\">\r\n                          {application.applicantName}\r\n                        </h3>\r\n                        <p className=\"text-sm text-slate-600\">{application.program}</p>\r\n                        <p className=\"text-xs text-slate-500\">{application.school}</p>\r\n                      </div>\r\n                      <div className=\"flex flex-col items-end gap-1\">\r\n                        <Badge variant={statusConfig.variant} className=\"text-xs\">\r\n                          {statusConfig.icon}\r\n                          <span className=\"ml-1\">{statusConfig.label}</span>\r\n                        </Badge>\r\n                        <span\r\n                          className={`text-xs px-2 py-1 rounded ${priorityConfig.bg} ${priorityConfig.color}`}\r\n                        >\r\n                          {priorityConfig.label}\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"grid grid-cols-2 gap-2 text-sm\">\r\n                      <div>\r\n                        <span className=\"text-slate-500\">Burs:</span>\r\n                        <span className=\"ml-1 font-semibold text-green-600\">\r\n                          Ôé║{application.requestedAmount.toLocaleString()}\r\n                        </span>\r\n                      </div>\r\n                      <div>\r\n                        <span className=\"text-slate-500\">GPA:</span>\r\n                        <span className=\"ml-1 font-semibold\">{application.gpa.toFixed(2)}</span>\r\n                      </div>\r\n                      <div>\r\n                        <span className=\"text-slate-500\">Aile Geliri:</span>\r\n                        <span className=\"ml-1\">Ôé║{application.familyIncome.toLocaleString()}</span>\r\n                      </div>\r\n                      <div>\r\n                        <span className=\"text-slate-500\">Belgeler:</span>\r\n                        <span className=\"ml-1\">\r\n                          {docProgress.completed}/{docProgress.total}\r\n                        </span>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"flex items-center gap-2\">\r\n                      <Button\r\n                        size=\"sm\"\r\n                        variant=\"outline\"\r\n                        onClick={() => {\r\n                          handleViewApplication(application.id);\r\n                        }}\r\n                        className=\"flex-1 text-xs\"\r\n                      >\r\n                        <Eye className=\"w-3 h-3 mr-1\" />\r\n                        Detay\r\n                      </Button>\r\n                      {application.status === 'pending' && (\r\n                        <>\r\n                          <Button\r\n                            size=\"sm\"\r\n                            onClick={() => {\r\n                              handleApproveApplication(application.id);\r\n                            }}\r\n                            className=\"text-xs\"\r\n                          >\r\n                            <Check className=\"w-3 h-3\" />\r\n                          </Button>\r\n                          <Button\r\n                            size=\"sm\"\r\n                            variant=\"destructive\"\r\n                            onClick={() => {\r\n                              handleRejectApplication(application.id);\r\n                            }}\r\n                            className=\"text-xs\"\r\n                          >\r\n                            <X className=\"w-3 h-3\" />\r\n                          </Button>\r\n                        </>\r\n                      )}\r\n                    </div>\r\n                  </motion.div>\r\n                );\r\n              })}\r\n            </div>\r\n          ) : (\r\n            <div className=\"overflow-x-auto\">\r\n              <table className=\"w-full\">\r\n                <thead>\r\n                  <tr className=\"border-b border-slate-200\">\r\n                    <th className=\"text-left py-3 px-4 font-medium text-slate-700\">Ba┼şvuran</th>\r\n                    <th className=\"text-left py-3 px-4 font-medium text-slate-700\">Okul/Program</th>\r\n                    <th className=\"text-left py-3 px-4 font-medium text-slate-700\">Burs Miktar─▒</th>\r\n                    <th className=\"text-left py-3 px-4 font-medium text-slate-700\">GPA</th>\r\n                    <th className=\"text-left py-3 px-4 font-medium text-slate-700\">Belgeler</th>\r\n                    <th className=\"text-left py-3 px-4 font-medium text-slate-700\">├ûncelik</th>\r\n                    <th className=\"text-left py-3 px-4 font-medium text-slate-700\">Durum</th>\r\n                    <th className=\"text-left py-3 px-4 font-medium text-slate-700\">─░┼şlemler</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {filteredApplications.map((application, index) => {\r\n                    const statusConfig = getStatusBadge(application.status);\r\n                    const priorityConfig = getPriorityBadge(application.priority);\r\n                    const docProgress = getDocumentProgress(application.documents);\r\n\r\n                    return (\r\n                      <motion.tr\r\n                        key={application.id}\r\n                        initial={{ opacity: 0, x: -20 }}\r\n                        animate={{ opacity: 1, x: 0 }}\r\n                        transition={{ delay: index * 0.05 }}\r\n                        className=\"border-b border-slate-100 hover:bg-slate-50 transition-colors\"\r\n                      >\r\n                        <td className=\"py-4 px-4\">\r\n                          <div className=\"flex items-center gap-3\">\r\n                            <Avatar className=\"w-10 h-10\">\r\n                              <AvatarFallback className=\"bg-gradient-to-br from-blue-600 to-indigo-700 text-white\">\r\n                                {application.applicantName\r\n                                  .split(' ')\r\n                                  .map((n) => n[0])\r\n                                  .join('')}\r\n                              </AvatarFallback>\r\n                            </Avatar>\r\n                            <div>\r\n                              <div className=\"font-medium text-slate-900\">\r\n                                {application.applicantName}\r\n                              </div>\r\n                              <div className=\"text-sm text-slate-500\">{application.grade}</div>\r\n                            </div>\r\n                          </div>\r\n                        </td>\r\n                        <td className=\"py-4 px-4\">\r\n                          <div>\r\n                            <div className=\"font-medium text-slate-900\">{application.program}</div>\r\n                            <div className=\"text-sm text-slate-500\">{application.school}</div>\r\n                          </div>\r\n                        </td>\r\n                        <td className=\"py-4 px-4\">\r\n                          <span className=\"font-semibold text-green-600\">\r\n                            Ôé║{application.requestedAmount.toLocaleString()}\r\n                          </span>\r\n                        </td>\r\n                        <td className=\"py-4 px-4\">\r\n                          <span\r\n                            className={`font-medium ${\r\n                              application.gpa >= 3.5\r\n                                ? 'text-green-600'\r\n                                : application.gpa >= 3.0\r\n                                  ? 'text-amber-600'\r\n                                  : 'text-red-600'\r\n                            }`}\r\n                          >\r\n                            {application.gpa.toFixed(2)}\r\n                          </span>\r\n                        </td>\r\n                        <td className=\"py-4 px-4\">\r\n                          <div className=\"flex items-center gap-2\">\r\n                            <div className=\"w-12 h-2 bg-slate-200 rounded-full overflow-hidden\">\r\n                              <div\r\n                                className=\"h-full bg-green-500 transition-all duration-300\"\r\n                                data-progress-width={`${docProgress.percentage}%`}\r\n                              />\r\n                            </div>\r\n                            <span className=\"text-sm text-slate-600\">\r\n                              {docProgress.completed}/{docProgress.total}\r\n                            </span>\r\n                          </div>\r\n                        </td>\r\n                        <td className=\"py-4 px-4\">\r\n                          <span\r\n                            className={`text-xs px-2 py-1 rounded font-medium ${priorityConfig.bg} ${priorityConfig.color}`}\r\n                          >\r\n                            {priorityConfig.label}\r\n                          </span>\r\n                        </td>\r\n                        <td className=\"py-4 px-4\">\r\n                          <Badge variant={statusConfig.variant} className=\"text-xs\">\r\n                            {statusConfig.icon}\r\n                            <span className=\"ml-1\">{statusConfig.label}</span>\r\n                          </Badge>\r\n                        </td>\r\n                        <td className=\"py-4 px-4\">\r\n                          <div className=\"flex items-center gap-1\">\r\n                            <Button\r\n                              variant=\"ghost\"\r\n                              size=\"sm\"\r\n                              onClick={() => {\r\n                                handleViewApplication(application.id);\r\n                              }}\r\n                            >\r\n                              <Eye className=\"w-4 h-4\" />\r\n                            </Button>\r\n                            {application.status === 'pending' && (\r\n                              <>\r\n                                <Button\r\n                                  variant=\"ghost\"\r\n                                  size=\"sm\"\r\n                                  onClick={() => {\r\n                                    handleApproveApplication(application.id);\r\n                                  }}\r\n                                  className=\"text-green-600 hover:text-green-700 hover:bg-green-50\"\r\n                                >\r\n                                  <Check className=\"w-4 h-4\" />\r\n                                </Button>\r\n                                <Button\r\n                                  variant=\"ghost\"\r\n                                  size=\"sm\"\r\n                                  onClick={() => {\r\n                                    handleRejectApplication(application.id);\r\n                                  }}\r\n                                  className=\"text-red-600 hover:text-red-700 hover:bg-red-50\"\r\n                                >\r\n                                  <X className=\"w-4 h-4\" />\r\n                                </Button>\r\n                              </>\r\n                            )}\r\n                          </div>\r\n                        </td>\r\n                      </motion.tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\BursStudentsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":171,"column":12,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":171,"endColumn":32},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":171,"column":12,"nodeType":"MemberExpression","endLine":171,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview BursStudentsPage Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport {\r\n  Award,\r\n  BookOpen,\r\n  Calendar,\r\n  Eye,\r\n  FileText,\r\n  GraduationCap,\r\n  Plus,\r\n  Search,\r\n  TrendingUp,\r\n} from 'lucide-react';\r\nimport { motion } from 'motion/react';\r\nimport { useMemo, useState } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { useIsMobile } from '../../hooks/useTouchDevice';\r\nimport { MobileInfoCard, ResponsiveCardGrid, TouchActionCard } from '../ResponsiveCard';\r\nimport { Avatar, AvatarFallback, AvatarImage } from '../ui/avatar';\r\nimport { Badge } from '../ui/badge';\r\nimport { Button } from '../ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Input } from '../ui/input';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\n\r\ninterface Student {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  phone: string;\r\n  school: string;\r\n  grade: string;\r\n  program: string;\r\n  scholarshipAmount: number;\r\n  status: 'active' | 'graduated' | 'dropped' | 'suspended';\r\n  startDate: string;\r\n  gpa: number;\r\n  avatar?: string;\r\n}\r\n\r\ninterface StudentStats {\r\n  total: number;\r\n  active: number;\r\n  graduated: number;\r\n  totalAmount: number;\r\n}\r\n\r\n/**\r\n * BursStudentsPage function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function BursStudentsPage() {\r\n  const isMobile = useIsMobile();\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState<string>('all');\r\n  const [programFilter, setProgramFilter] = useState<string>('all');\r\n\r\n  const students: Student[] = useMemo(\r\n    () => [\r\n      {\r\n        id: 1,\r\n        name: 'Ahmet Y─▒lmaz',\r\n        email: 'ahmet@email.com',\r\n        phone: '0532 123 4567',\r\n        school: '─░stanbul ├£niversitesi',\r\n        grade: '3. S─▒n─▒f',\r\n        program: 'Bilgisayar M├╝hendisli─şi',\r\n        scholarshipAmount: 1500,\r\n        status: 'active',\r\n        startDate: '2023-09-15',\r\n        gpa: 3.45,\r\n      },\r\n      {\r\n        id: 2,\r\n        name: 'Ay┼şe Kaya',\r\n        email: 'ayse@email.com',\r\n        phone: '0533 987 6543',\r\n        school: 'Bo─şazi├ği ├£niversitesi',\r\n        grade: '4. S─▒n─▒f',\r\n        program: '─░ktisat',\r\n        scholarshipAmount: 2000,\r\n        status: 'active',\r\n        startDate: '2022-09-12',\r\n        gpa: 3.78,\r\n      },\r\n      {\r\n        id: 3,\r\n        name: 'Mehmet Demir',\r\n        email: 'mehmet@email.com',\r\n        phone: '0534 555 1234',\r\n        school: 'ODT├£',\r\n        grade: 'Mezun',\r\n        program: 'Makine M├╝hendisli─şi',\r\n        scholarshipAmount: 1800,\r\n        status: 'graduated',\r\n        startDate: '2020-09-14',\r\n        gpa: 3.12,\r\n      },\r\n      {\r\n        id: 4,\r\n        name: 'Fatma ├ûzkan',\r\n        email: 'fatma@email.com',\r\n        phone: '0535 777 8899',\r\n        school: 'Hacettepe ├£niversitesi',\r\n        grade: '2. S─▒n─▒f',\r\n        program: 'T─▒p',\r\n        scholarshipAmount: 2500,\r\n        status: 'active',\r\n        startDate: '2024-09-16',\r\n        gpa: 3.89,\r\n      },\r\n      {\r\n        id: 5,\r\n        name: 'Can Polat',\r\n        email: 'can@email.com',\r\n        phone: '0536 111 2233',\r\n        school: '─░T├£',\r\n        grade: '1. S─▒n─▒f',\r\n        program: 'Elektrik M├╝hendisli─şi',\r\n        scholarshipAmount: 1200,\r\n        status: 'active',\r\n        startDate: '2024-09-20',\r\n        gpa: 3.25,\r\n      },\r\n    ],\r\n    [],\r\n  );\r\n\r\n  // Calculate statistics\r\n  const stats: StudentStats = useMemo(() => {\r\n    const total = students.length;\r\n    const active = students.filter((s) => s.status === 'active').length;\r\n    const graduated = students.filter((s) => s.status === 'graduated').length;\r\n    const totalAmount = students\r\n      .filter((s) => s.status === 'active')\r\n      .reduce((sum, s) => sum + s.scholarshipAmount, 0);\r\n\r\n    return { total, active, graduated, totalAmount };\r\n  }, [students]);\r\n\r\n  // Filter students\r\n  const filteredStudents = useMemo(() => {\r\n    return students.filter((student) => {\r\n      const matchesSearch =\r\n        student.name.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        student.school.toLowerCase().includes(searchQuery.toLowerCase()) ||\r\n        student.program.toLowerCase().includes(searchQuery.toLowerCase());\r\n\r\n      const matchesStatus = statusFilter === 'all' || student.status === statusFilter;\r\n      const matchesProgram = programFilter === 'all' || student.program === programFilter;\r\n\r\n      return matchesSearch && matchesStatus && matchesProgram;\r\n    });\r\n  }, [students, searchQuery, statusFilter, programFilter]);\r\n\r\n  const getStatusBadge = (status: Student['status']) => {\r\n    const statusConfig = {\r\n      active: { label: 'Aktif', variant: 'default' as const, color: 'bg-green-500' },\r\n      graduated: { label: 'Mezun', variant: 'secondary' as const, color: 'bg-blue-500' },\r\n      dropped: { label: 'B─▒rakm─▒┼ş', variant: 'destructive' as const, color: 'bg-gray-500' },\r\n      suspended: { label: 'Ask─▒da', variant: 'outline' as const, color: 'bg-yellow-500' },\r\n    };\r\n\r\n    return statusConfig[status] ?? statusConfig.active;\r\n  };\r\n\r\n  const handleViewStudent = (studentId: number) => {\r\n    toast.success(`├û─şrenci detaylar─▒ a├ğ─▒l─▒yor: ${studentId}`);\r\n  };\r\n\r\n  const handleNewStudent = () => {\r\n    toast.success('Yeni ├Â─şrenci ekleme formu a├ğ─▒l─▒yor...');\r\n  };\r\n\r\n  const handleBulkAction = () => {\r\n    toast.success('Toplu i┼şlem men├╝s├╝ a├ğ─▒l─▒yor...');\r\n  };\r\n\r\n  const programs = [...new Set(students.map((s) => s.program))];\r\n\r\n  return (\r\n    <div className=\"p-3 sm:p-6 lg:p-8 space-y-6 lg:space-y-8 bg-slate-50/50 min-h-full safe-area\">\r\n      {/* Header */}\r\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\r\n        <div className=\"space-y-1 sm:space-y-2\">\r\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-slate-800 flex items-center gap-3\">\r\n            <div className=\"w-8 h-8 sm:w-10 sm:h-10 bg-gradient-to-br from-amber-600 to-orange-700 rounded-xl flex items-center justify-center\">\r\n              <GraduationCap className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\r\n            </div>\r\n            Burs ├û─şrencileri\r\n          </h1>\r\n          <p className=\"text-sm sm:text-base text-slate-600\">\r\n            Burslu ├Â─şrencileri y├Ânetin ve takip edin\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"flex items-center gap-2\">\r\n          <Button onClick={handleBulkAction} variant=\"outline\" size=\"sm\" className=\"hidden sm:flex\">\r\n            <FileText className=\"w-4 h-4 mr-2\" />\r\n            Raporlar\r\n          </Button>\r\n          <Button onClick={handleNewStudent} size=\"sm\">\r\n            <Plus className=\"w-4 h-4 mr-2\" />\r\n            Yeni ├û─şrenci\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Statistics Cards */}\r\n      <ResponsiveCardGrid cols={{ default: 2, sm: 4 }} gap=\"sm\">\r\n        <MobileInfoCard\r\n          icon={<BookOpen className=\"w-5 h-5\" />}\r\n          title=\"Toplam ├û─şrenci\"\r\n          value={stats.total.toString()}\r\n          color=\"text-blue-600\"\r\n        />\r\n        <MobileInfoCard\r\n          icon={<Award className=\"w-5 h-5\" />}\r\n          title=\"Aktif ├û─şrenci\"\r\n          value={stats.active.toString()}\r\n          color=\"text-green-600\"\r\n        />\r\n        <MobileInfoCard\r\n          icon={<TrendingUp className=\"w-5 h-5\" />}\r\n          title=\"Mezun Say─▒s─▒\"\r\n          value={stats.graduated.toString()}\r\n          color=\"text-purple-600\"\r\n        />\r\n        <MobileInfoCard\r\n          icon={<Calendar className=\"w-5 h-5\" />}\r\n          title=\"Ayl─▒k Toplam\"\r\n          value={`Ôé║${stats.totalAmount.toLocaleString()}`}\r\n          color=\"text-amber-600\"\r\n        />\r\n      </ResponsiveCardGrid>\r\n\r\n      {/* Filters */}\r\n      <Card>\r\n        <CardContent className=\"p-4 sm:p-6\">\r\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n            <div className=\"sm:col-span-2 lg:col-span-2\">\r\n              <div className=\"relative\">\r\n                <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-slate-400\" />\r\n                <Input\r\n                  placeholder=\"Burslu ├Â─şrenci, okul veya program ara...\"\r\n                  value={searchQuery}\r\n                  onChange={(e) => {\r\n                    setSearchQuery(e.target.value);\r\n                  }}\r\n                  className=\"pl-10\"\r\n                />\r\n              </div>\r\n            </div>\r\n\r\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\r\n              <SelectTrigger>\r\n                <SelectValue placeholder=\"Durum Filtresi\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"all\">T├╝m Durumlar</SelectItem>\r\n                <SelectItem value=\"active\">Aktif</SelectItem>\r\n                <SelectItem value=\"graduated\">Mezun</SelectItem>\r\n                <SelectItem value=\"dropped\">B─▒rakm─▒┼ş</SelectItem>\r\n                <SelectItem value=\"suspended\">Ask─▒da</SelectItem>\r\n              </SelectContent>\r\n            </Select>\r\n\r\n            <Select value={programFilter} onValueChange={setProgramFilter}>\r\n              <SelectTrigger>\r\n                <SelectValue placeholder=\"Program Filtresi\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"all\">T├╝m Programlar</SelectItem>\r\n                {programs.map((program) => (\r\n                  <SelectItem key={program} value={program}>\r\n                    {program}\r\n                  </SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Students List */}\r\n      <Card>\r\n        <CardHeader className=\"pb-4\">\r\n          <CardTitle className=\"flex items-center justify-between\">\r\n            <span>├û─şrenci Listesi</span>\r\n            <Badge variant=\"secondary\" className=\"text-xs\">\r\n              {filteredStudents.length} ├Â─şrenci\r\n            </Badge>\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"p-0 sm:p-6 sm:pt-0\">\r\n          {isMobile ? (\r\n            <div className=\"space-y-3 p-4\">\r\n              {filteredStudents.map((student, index) => (\r\n                <motion.div\r\n                  key={student.id}\r\n                  initial={{ opacity: 0, y: 20 }}\r\n                  animate={{ opacity: 1, y: 0 }}\r\n                  transition={{ delay: index * 0.05 }}\r\n                >\r\n                  <TouchActionCard\r\n                    icon={<GraduationCap className=\"w-5 h-5\" />}\r\n                    title={student.name}\r\n                    description={`${student.program} ÔÇó ${student.school}`}\r\n                    onClick={() => {\r\n                      handleViewStudent(student.id);\r\n                    }}\r\n                    variant=\"secondary\"\r\n                  />\r\n                </motion.div>\r\n              ))}\r\n            </div>\r\n          ) : (\r\n            <div className=\"overflow-x-auto\">\r\n              <table className=\"w-full\">\r\n                <thead>\r\n                  <tr className=\"border-b border-slate-200\">\r\n                    <th className=\"text-left py-3 px-4 font-medium text-slate-700\">├û─şrenci</th>\r\n                    <th className=\"text-left py-3 px-4 font-medium text-slate-700\">Okul</th>\r\n                    <th className=\"text-left py-3 px-4 font-medium text-slate-700\">Program</th>\r\n                    <th className=\"text-left py-3 px-4 font-medium text-slate-700\">Burs</th>\r\n                    <th className=\"text-left py-3 px-4 font-medium text-slate-700\">GPA</th>\r\n                    <th className=\"text-left py-3 px-4 font-medium text-slate-700\">Durum</th>\r\n                    <th className=\"text-left py-3 px-4 font-medium text-slate-700\">─░┼şlemler</th>\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {filteredStudents.map((student, index) => {\r\n                    const statusConfig = getStatusBadge(student.status);\r\n                    return (\r\n                      <motion.tr\r\n                        key={student.id}\r\n                        initial={{ opacity: 0, x: -20 }}\r\n                        animate={{ opacity: 1, x: 0 }}\r\n                        transition={{ delay: index * 0.05 }}\r\n                        className=\"border-b border-slate-100 hover:bg-slate-50 transition-colors\"\r\n                      >\r\n                        <td className=\"py-4 px-4\">\r\n                          <div className=\"flex items-center gap-3\">\r\n                            <Avatar className=\"w-10 h-10\">\r\n                              <AvatarImage src={student.avatar} />\r\n                              <AvatarFallback className=\"bg-gradient-to-br from-amber-600 to-orange-700 text-white\">\r\n                                {student.name\r\n                                  .split(' ')\r\n                                  .map((n) => n[0])\r\n                                  .join('')}\r\n                              </AvatarFallback>\r\n                            </Avatar>\r\n                            <div>\r\n                              <div className=\"font-medium text-slate-900\">{student.name}</div>\r\n                              <div className=\"text-sm text-slate-500\">{student.grade}</div>\r\n                            </div>\r\n                          </div>\r\n                        </td>\r\n                        <td className=\"py-4 px-4 text-slate-700\">{student.school}</td>\r\n                        <td className=\"py-4 px-4 text-slate-700\">{student.program}</td>\r\n                        <td className=\"py-4 px-4\">\r\n                          <span className=\"font-semibold text-green-600\">\r\n                            Ôé║{student.scholarshipAmount.toLocaleString()}\r\n                          </span>\r\n                        </td>\r\n                        <td className=\"py-4 px-4\">\r\n                          <span\r\n                            className={`font-medium ${\r\n                              student.gpa >= 3.5\r\n                                ? 'text-green-600'\r\n                                : student.gpa >= 3.0\r\n                                  ? 'text-amber-600'\r\n                                  : 'text-red-600'\r\n                            }`}\r\n                          >\r\n                            {student.gpa.toFixed(2)}\r\n                          </span>\r\n                        </td>\r\n                        <td className=\"py-4 px-4\">\r\n                          <Badge variant={statusConfig.variant}>{statusConfig.label}</Badge>\r\n                        </td>\r\n                        <td className=\"py-4 px-4\">\r\n                          <Button\r\n                            variant=\"ghost\"\r\n                            size=\"sm\"\r\n                            onClick={() => {\r\n                              handleViewStudent(student.id);\r\n                            }}\r\n                          >\r\n                            <Eye className=\"w-4 h-4\" />\r\n                          </Button>\r\n                        </td>\r\n                      </motion.tr>\r\n                    );\r\n                  })}\r\n                </tbody>\r\n              </table>\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\CaseManagementPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setDonors' is assigned a value but never used.","line":68,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":27},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'setDonors' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":68,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":68,"endColumn":27},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":126,"column":34,"nodeType":"MemberExpression","endLine":126,"endColumn":48},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":143,"column":34,"nodeType":"MemberExpression","endLine":143,"endColumn":46}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview CaseManagementPage Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport {\r\n  Building2,\r\n  Calendar,\r\n  DollarSign,\r\n  Eye,\r\n  Heart,\r\n  Mail,\r\n  MapPin,\r\n  Phone,\r\n  Plus,\r\n  Search,\r\n  Star,\r\n  TrendingUp,\r\n} from 'lucide-react';\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { Badge } from '../ui/badge';\r\nimport { Button } from '../ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '../ui/dialog';\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger,\r\n} from '../ui/dropdown-menu';\r\nimport { Input } from '../ui/input';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';\r\n\r\ninterface DonorInstitution {\r\n  id: number;\r\n  name: string;\r\n  type: 'kamu' | 'ozel' | 'vakif' | 'dernek' | 'uluslararasi';\r\n  contactPerson: string;\r\n  phone: string;\r\n  email: string;\r\n  address: string;\r\n  status: 'aktif' | 'pasif' | 'beklemede';\r\n  totalDonations: number;\r\n  lastDonationDate: string;\r\n  donationCount: number;\r\n  averageDonation: number;\r\n  preferredTypes: string[];\r\n  rating: number;\r\n  establishedDate?: string;\r\n  website?: string;\r\n  taxNumber?: string;\r\n  description?: string;\r\n  tags: string[];\r\n}\r\n\r\n// Mock data kald─▒r─▒ld─▒ - ger├ğek veriler API'den gelecek\r\n\r\n/**\r\n * PartnerDonorsPage function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport default function PartnerDonorsPage() {\r\n  const [donors, setDonors] = useState<DonorInstitution[]>([]);\r\n  const [filteredDonors, setFilteredDonors] = useState<DonorInstitution[]>([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [filterType, setFilterType] = useState<string>('all');\r\n  const [filterStatus, setFilterStatus] = useState<string>('all');\r\n  const [selectedDonor, setSelectedDonor] = useState<DonorInstitution | null>(null);\r\n  const [isDetailOpen, setIsDetailOpen] = useState(false);\r\n  const [activeTab, setActiveTab] = useState('all');\r\n\r\n  // Filtering logic\r\n  useEffect(() => {\r\n    let filtered = donors;\r\n\r\n    // Search filter\r\n    if (searchTerm) {\r\n      const searchLower = searchTerm.toLowerCase();\r\n      filtered = filtered.filter(\r\n        (donor) =>\r\n          donor.name.toLowerCase().includes(searchLower) ||\r\n          donor.contactPerson.toLowerCase().includes(searchLower) ||\r\n          donor.phone.includes(searchTerm) ||\r\n          donor.email.toLowerCase().includes(searchLower) ||\r\n          donor.tags.some((tag) => tag.toLowerCase().includes(searchLower)),\r\n      );\r\n    }\r\n\r\n    // Type filter\r\n    if (filterType !== 'all') {\r\n      filtered = filtered.filter((donor) => donor.type === filterType);\r\n    }\r\n\r\n    // Status filter\r\n    if (filterStatus !== 'all') {\r\n      filtered = filtered.filter((donor) => donor.status === filterStatus);\r\n    }\r\n\r\n    // Tab filter\r\n    if (activeTab === 'top') {\r\n      filtered = filtered.filter((donor) => donor.rating >= 4);\r\n    } else if (activeTab === 'active') {\r\n      filtered = filtered.filter((donor) => donor.status === 'aktif');\r\n    } else if (activeTab === 'large') {\r\n      filtered = filtered.filter((donor) => donor.totalDonations >= 500000);\r\n    }\r\n\r\n    setFilteredDonors(filtered);\r\n  }, [donors, searchTerm, filterType, filterStatus, activeTab]);\r\n\r\n  const getStatusBadge = (status: DonorInstitution['status']) => {\r\n    const config = {\r\n      aktif: { label: 'Aktif', className: 'bg-green-50 text-green-700 border-green-200' },\r\n      pasif: { label: 'Pasif', className: 'bg-gray-50 text-gray-700 border-gray-200' },\r\n      beklemede: {\r\n        label: 'Beklemede',\r\n        className: 'bg-yellow-50 text-yellow-700 border-yellow-200',\r\n      },\r\n    };\r\n\r\n    const { label, className } = config[status];\r\n    return (\r\n      <Badge variant=\"outline\" className={`${className} text-xs px-2 py-1`}>\r\n        {label}\r\n      </Badge>\r\n    );\r\n  };\r\n\r\n  const getTypeBadge = (type: DonorInstitution['type']) => {\r\n    const config = {\r\n      kamu: { label: 'Kamu', className: 'bg-blue-50 text-blue-700' },\r\n      ozel: { label: '├ûzel', className: 'bg-purple-50 text-purple-700' },\r\n      vakif: { label: 'Vak─▒f', className: 'bg-green-50 text-green-700' },\r\n      dernek: { label: 'Dernek', className: 'bg-orange-50 text-orange-700' },\r\n      uluslararasi: { label: 'Uluslararas─▒', className: 'bg-indigo-50 text-indigo-700' },\r\n    };\r\n\r\n    const { label, className } = config[type];\r\n    return <Badge className={`${className} text-xs px-2 py-1 border-0`}>{label}</Badge>;\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('tr-TR', {\r\n      style: 'currency',\r\n      currency: 'TRY',\r\n      minimumFractionDigits: 0,\r\n      maximumFractionDigits: 0,\r\n    }).format(amount);\r\n  };\r\n\r\n  const handleViewDetails = useCallback((donor: DonorInstitution) => {\r\n    setSelectedDonor(donor);\r\n    setIsDetailOpen(true);\r\n  }, []);\r\n\r\n  const clearFilters = useCallback(() => {\r\n    setSearchTerm('');\r\n    setFilterType('all');\r\n    setFilterStatus('all');\r\n    setActiveTab('all');\r\n  }, []);\r\n\r\n  const totalDonations = donors.reduce((sum, donor) => sum + donor.totalDonations, 0);\r\n  const activeDonors = donors.filter((d) => d.status === 'aktif').length;\r\n  const topDonors = donors.filter((d) => d.rating >= 4).length;\r\n\r\n  return (\r\n    <div className=\"flex-1 space-y-4 p-4 sm:space-y-6 sm:p-6\">\r\n      {/* Header */}\r\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\r\n        <div>\r\n          <h1 className=\"text-2xl font-medium\">Ba─ş─▒┼ş├ğ─▒ Kurumlar</h1>\r\n          <p className=\"text-muted-foreground mt-1\">Kurumsal ba─ş─▒┼ş├ğ─▒ y├Ânetimi ve ili┼şki takibi</p>\r\n        </div>\r\n        <Button className=\"gap-2 w-full sm:w-auto\">\r\n          <Plus className=\"w-4 h-4\" />\r\n          Yeni Ba─ş─▒┼ş├ğ─▒\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Quick Stats */}\r\n      <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-4\">\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm text-muted-foreground\">Toplam Ba─ş─▒┼ş</p>\r\n                <p className=\"text-xl font-medium text-green-600\">\r\n                  {formatCurrency(totalDonations)}\r\n                </p>\r\n              </div>\r\n              <DollarSign className=\"w-5 h-5 text-green-600\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm text-muted-foreground\">Aktif Ba─ş─▒┼ş├ğ─▒</p>\r\n                <p className=\"text-2xl font-medium text-blue-600\">{activeDonors}</p>\r\n              </div>\r\n              <Heart className=\"w-5 h-5 text-blue-600\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm text-muted-foreground\">Toplam Kurum</p>\r\n                <p className=\"text-2xl font-medium\">{donors.length}</p>\r\n              </div>\r\n              <Building2 className=\"w-5 h-5 text-muted-foreground\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm text-muted-foreground\">En ─░yi</p>\r\n                <p className=\"text-2xl font-medium text-orange-600\">{topDonors}</p>\r\n              </div>\r\n              <Star className=\"w-5 h-5 text-orange-600\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Search and Filters */}\r\n      <div className=\"flex flex-col sm:flex-row gap-4\">\r\n        <div className=\"relative flex-1\">\r\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\r\n          <Input\r\n            placeholder=\"Ba─ş─▒┼ş├ğ─▒ kurum ara...\"\r\n            value={searchTerm}\r\n            onChange={(e) => {\r\n              setSearchTerm(e.target.value);\r\n            }}\r\n            className=\"pl-10\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"flex gap-2 overflow-x-auto\">\r\n          <Select value={filterType} onValueChange={setFilterType}>\r\n            <SelectTrigger className=\"w-[130px] shrink-0\">\r\n              <SelectValue placeholder=\"T├╝r\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"all\">T├╝m T├╝rler</SelectItem>\r\n              <SelectItem value=\"kamu\">Kamu</SelectItem>\r\n              <SelectItem value=\"ozel\">├ûzel</SelectItem>\r\n              <SelectItem value=\"vakif\">Vak─▒f</SelectItem>\r\n              <SelectItem value=\"dernek\">Dernek</SelectItem>\r\n              <SelectItem value=\"uluslararasi\">Uluslararas─▒</SelectItem>\r\n            </SelectContent>\r\n          </Select>\r\n\r\n          <Select value={filterStatus} onValueChange={setFilterStatus}>\r\n            <SelectTrigger className=\"w-[120px] shrink-0\">\r\n              <SelectValue placeholder=\"Durum\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"all\">T├╝m Durumlar</SelectItem>\r\n              <SelectItem value=\"aktif\">Aktif</SelectItem>\r\n              <SelectItem value=\"pasif\">Pasif</SelectItem>\r\n              <SelectItem value=\"beklemede\">Beklemede</SelectItem>\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Tabs */}\r\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\r\n        <TabsList className=\"grid w-full grid-cols-4\">\r\n          <TabsTrigger value=\"all\">T├╝m├╝</TabsTrigger>\r\n          <TabsTrigger value=\"active\">Aktif</TabsTrigger>\r\n          <TabsTrigger value=\"large\">B├╝y├╝k Ba─ş─▒┼ş├ğ─▒</TabsTrigger>\r\n          <TabsTrigger value=\"top\">En ─░yi</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value={activeTab} className=\"mt-4\">\r\n          {filteredDonors.length === 0 ? (\r\n            <Card>\r\n              <CardContent className=\"flex flex-col items-center justify-center py-12\">\r\n                <Heart className=\"w-12 h-12 text-muted-foreground mb-4\" />\r\n                <h3 className=\"text-lg font-medium mb-2\">Ba─ş─▒┼ş├ğ─▒ bulunamad─▒</h3>\r\n                <p className=\"text-muted-foreground text-center mb-4\">\r\n                  Arama kriterlerinize uygun ba─ş─▒┼ş├ğ─▒ kurumu bulunmuyor.\r\n                </p>\r\n                <Button onClick={clearFilters}>Filtreleri Temizle</Button>\r\n              </CardContent>\r\n            </Card>\r\n          ) : (\r\n            <div className=\"grid gap-4\">\r\n              {filteredDonors.map((donor) => (\r\n                <Card key={donor.id} className=\"hover:shadow-md transition-shadow\">\r\n                  <CardHeader className=\"pb-3\">\r\n                    <div className=\"flex flex-col sm:flex-row sm:items-start sm:justify-between gap-3\">\r\n                      <div className=\"flex-1 min-w-0\">\r\n                        <CardTitle className=\"text-lg font-medium\">{donor.name}</CardTitle>\r\n                        <div className=\"flex flex-wrap items-center gap-2 mt-2\">\r\n                          {getStatusBadge(donor.status)}\r\n                          {getTypeBadge(donor.type)}\r\n                          <div className=\"flex items-center gap-1\">\r\n                            <Star className=\"w-3 h-3 text-yellow-500 fill-current\" />\r\n                            <span className=\"text-xs text-muted-foreground\">{donor.rating}</span>\r\n                          </div>\r\n                        </div>\r\n                      </div>\r\n\r\n                      <DropdownMenu>\r\n                        <DropdownMenuTrigger asChild>\r\n                          <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\">\r\n                            <Eye className=\"w-4 h-4\" />\r\n                          </Button>\r\n                        </DropdownMenuTrigger>\r\n                        <DropdownMenuContent align=\"end\">\r\n                          <DropdownMenuItem\r\n                            onClick={() => {\r\n                              handleViewDetails(donor);\r\n                            }}\r\n                          >\r\n                            <Eye className=\"w-4 h-4 mr-2\" />\r\n                            Detaylar─▒ G├Âr├╝nt├╝le\r\n                          </DropdownMenuItem>\r\n                        </DropdownMenuContent>\r\n                      </DropdownMenu>\r\n                    </div>\r\n                  </CardHeader>\r\n\r\n                  <CardContent className=\"pt-0\">\r\n                    <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 gap-4 mb-4\">\r\n                      <div className=\"flex items-center gap-2 text-sm\">\r\n                        <Phone className=\"w-4 h-4 text-muted-foreground\" />\r\n                        <span className=\"truncate\">{donor.phone}</span>\r\n                      </div>\r\n                      <div className=\"flex items-center gap-2 text-sm\">\r\n                        <Mail className=\"w-4 h-4 text-muted-foreground\" />\r\n                        <span className=\"truncate\">{donor.email}</span>\r\n                      </div>\r\n                      <div className=\"flex items-center gap-2 text-sm\">\r\n                        <MapPin className=\"w-4 h-4 text-muted-foreground\" />\r\n                        <span className=\"truncate\">{donor.address}</span>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-4\">\r\n                      <div className=\"text-center p-3 bg-green-50 rounded-lg\">\r\n                        <div className=\"flex items-center justify-center mb-1\">\r\n                          <DollarSign className=\"w-4 h-4 text-green-600\" />\r\n                        </div>\r\n                        <div className=\"text-sm font-medium text-green-800\">\r\n                          {formatCurrency(donor.totalDonations)}\r\n                        </div>\r\n                        <div className=\"text-xs text-green-600\">Toplam Ba─ş─▒┼ş</div>\r\n                      </div>\r\n\r\n                      <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\r\n                        <div className=\"flex items-center justify-center mb-1\">\r\n                          <TrendingUp className=\"w-4 h-4 text-blue-600\" />\r\n                        </div>\r\n                        <div className=\"text-sm font-medium text-blue-800\">\r\n                          {donor.donationCount}\r\n                        </div>\r\n                        <div className=\"text-xs text-blue-600\">Ba─ş─▒┼ş Say─▒s─▒</div>\r\n                      </div>\r\n\r\n                      <div className=\"text-center p-3 bg-purple-50 rounded-lg\">\r\n                        <div className=\"flex items-center justify-center mb-1\">\r\n                          <Heart className=\"w-4 h-4 text-purple-600\" />\r\n                        </div>\r\n                        <div className=\"text-sm font-medium text-purple-800\">\r\n                          {formatCurrency(donor.averageDonation)}\r\n                        </div>\r\n                        <div className=\"text-xs text-purple-600\">Ortalama</div>\r\n                      </div>\r\n\r\n                      <div className=\"text-center p-3 bg-orange-50 rounded-lg\">\r\n                        <div className=\"flex items-center justify-center mb-1\">\r\n                          <Calendar className=\"w-4 h-4 text-orange-600\" />\r\n                        </div>\r\n                        <div className=\"text-sm font-medium text-orange-800\">\r\n                          {new Date(donor.lastDonationDate).toLocaleDateString('tr-TR')}\r\n                        </div>\r\n                        <div className=\"text-xs text-orange-600\">Son Ba─ş─▒┼ş</div>\r\n                      </div>\r\n                    </div>\r\n\r\n                    {donor.preferredTypes.length > 0 && (\r\n                      <div className=\"mt-4\">\r\n                        <p className=\"text-sm text-muted-foreground mb-2\">Tercih Edilen Alanlar:</p>\r\n                        <div className=\"flex flex-wrap gap-1\">\r\n                          {donor.preferredTypes.map((type, index) => (\r\n                            <Badge key={index} variant=\"secondary\" className=\"text-xs\">\r\n                              {type}\r\n                            </Badge>\r\n                          ))}\r\n                        </div>\r\n                      </div>\r\n                    )}\r\n                  </CardContent>\r\n                </Card>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </TabsContent>\r\n      </Tabs>\r\n\r\n      {/* Donor Detail Dialog */}\r\n      <Dialog open={isDetailOpen} onOpenChange={setIsDetailOpen}>\r\n        <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\r\n          <DialogHeader>\r\n            <DialogTitle className=\"flex items-center gap-2\">\r\n              <Heart className=\"w-5 h-5\" />\r\n              {selectedDonor?.name}\r\n            </DialogTitle>\r\n          </DialogHeader>\r\n\r\n          {selectedDonor && (\r\n            <div className=\"space-y-6\">\r\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n                <div className=\"space-y-3\">\r\n                  <div>\r\n                    <label className=\"text-sm font-medium text-muted-foreground\">\r\n                      ─░leti┼şim Ki┼şisi\r\n                    </label>\r\n                    <p>{selectedDonor.contactPerson}</p>\r\n                  </div>\r\n                  <div>\r\n                    <label className=\"text-sm font-medium text-muted-foreground\">Telefon</label>\r\n                    <p>{selectedDonor.phone}</p>\r\n                  </div>\r\n                  <div>\r\n                    <label className=\"text-sm font-medium text-muted-foreground\">E-posta</label>\r\n                    <p>{selectedDonor.email}</p>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"space-y-3\">\r\n                  <div>\r\n                    <label className=\"text-sm font-medium text-muted-foreground\">Adres</label>\r\n                    <p>{selectedDonor.address}</p>\r\n                  </div>\r\n                  {selectedDonor.website && (\r\n                    <div>\r\n                      <label className=\"text-sm font-medium text-muted-foreground\">Website</label>\r\n                      <p>{selectedDonor.website}</p>\r\n                    </div>\r\n                  )}\r\n                  {selectedDonor.taxNumber && (\r\n                    <div>\r\n                      <label className=\"text-sm font-medium text-muted-foreground\">Vergi No</label>\r\n                      <p>{selectedDonor.taxNumber}</p>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-4\">\r\n                <div className=\"text-center p-4 bg-green-50 rounded-lg\">\r\n                  <div className=\"text-lg font-bold text-green-800\">\r\n                    {formatCurrency(selectedDonor.totalDonations)}\r\n                  </div>\r\n                  <div className=\"text-sm text-green-600\">Toplam Ba─ş─▒┼ş</div>\r\n                </div>\r\n                <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\r\n                  <div className=\"text-lg font-bold text-blue-800\">\r\n                    {selectedDonor.donationCount}\r\n                  </div>\r\n                  <div className=\"text-sm text-blue-600\">Ba─ş─▒┼ş Say─▒s─▒</div>\r\n                </div>\r\n                <div className=\"text-center p-4 bg-purple-50 rounded-lg\">\r\n                  <div className=\"text-lg font-bold text-purple-800\">\r\n                    {formatCurrency(selectedDonor.averageDonation)}\r\n                  </div>\r\n                  <div className=\"text-sm text-purple-600\">Ortalama Ba─ş─▒┼ş</div>\r\n                </div>\r\n                <div className=\"text-center p-4 bg-orange-50 rounded-lg\">\r\n                  <div className=\"text-lg font-bold text-orange-800\">{selectedDonor.rating}</div>\r\n                  <div className=\"text-sm text-orange-600\">De─şerlendirme</div>\r\n                </div>\r\n              </div>\r\n\r\n              {selectedDonor.description && (\r\n                <div>\r\n                  <label className=\"text-sm font-medium text-muted-foreground\">A├ğ─▒klama</label>\r\n                  <p className=\"mt-1\">{selectedDonor.description}</p>\r\n                </div>\r\n              )}\r\n\r\n              <div className=\"flex flex-wrap gap-2\">\r\n                {selectedDonor.tags.map((tag, index) => (\r\n                  <Badge key={index} variant=\"secondary\" className=\"text-xs\">\r\n                    {tag}\r\n                  </Badge>\r\n                ))}\r\n              </div>\r\n            </div>\r\n          )}\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\CashAidTransactionsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setTransactions' is assigned a value but never used.","line":110,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":110,"endColumn":39},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'setTransactions' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":110,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":110,"endColumn":39},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":122,"column":20,"nodeType":"MemberExpression","endLine":122,"endColumn":40},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":133,"column":20,"nodeType":"MemberExpression","endLine":133,"endColumn":40}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview CashAidTransactionsPage Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { useState } from 'react';\r\nimport { PageLayout } from '../PageLayout';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Button } from '../ui/button';\r\nimport { Input } from '../ui/input';\r\nimport { Badge } from '../ui/badge';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../ui/table';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\nimport {\r\n  Banknote,\r\n  Search,\r\n  Plus,\r\n  Eye,\r\n  FileText,\r\n  Calendar,\r\n  TrendingUp,\r\n  HandHeart,\r\n  Download,\r\n} from 'lucide-react';\r\n\r\ninterface CashTransaction {\r\n  id: number;\r\n  transactionNumber: string;\r\n  recipientName: string;\r\n  recipientId: string;\r\n  amount: number;\r\n  transactionDate: string;\r\n  aidCategory: string;\r\n  paymentMethod: 'cash' | 'bank_transfer' | 'check';\r\n  status: 'completed' | 'pending' | 'cancelled';\r\n  description: string;\r\n  processedBy: string;\r\n  approvedBy: string;\r\n  documentPath?: string;\r\n}\r\n\r\nconst mockTransactions: CashTransaction[] = [\r\n  {\r\n    id: 1,\r\n    transactionNumber: 'NCT-2024-001',\r\n    recipientName: 'Ay┼şe Y─▒lmaz',\r\n    recipientId: '12345678901',\r\n    amount: 2500,\r\n    transactionDate: '2024-01-15 14:30',\r\n    aidCategory: 'Kira Yard─▒m─▒',\r\n    paymentMethod: 'bank_transfer',\r\n    status: 'completed',\r\n    description: 'Ocak ay─▒ kira yard─▒m─▒ ├Âdemesi',\r\n    processedBy: 'Fatma Koordinat├Âr',\r\n    approvedBy: 'Mehmet Y├Ânetici',\r\n  },\r\n  {\r\n    id: 2,\r\n    transactionNumber: 'NCT-2024-002',\r\n    recipientName: 'Mehmet Demir',\r\n    recipientId: '98765432109',\r\n    amount: 1200,\r\n    transactionDate: '2024-01-15 11:15',\r\n    aidCategory: 'Fatura Yard─▒m─▒',\r\n    paymentMethod: 'cash',\r\n    status: 'completed',\r\n    description: 'Elektrik ve do─şalgaz fatura ├Âdemesi',\r\n    processedBy: 'Hasan Mali M├╝┼şavir',\r\n    approvedBy: 'Ay┼şe Muhasebe',\r\n  },\r\n  {\r\n    id: 3,\r\n    transactionNumber: 'NCT-2024-003',\r\n    recipientName: 'Fatma Kaya',\r\n    recipientId: '11223344556',\r\n    amount: 3500,\r\n    transactionDate: '2024-01-14 16:45',\r\n    aidCategory: 'Sa─şl─▒k Yard─▒m─▒',\r\n    paymentMethod: 'bank_transfer',\r\n    status: 'pending',\r\n    description: 'Ameliyat masraflar─▒ i├ğin yard─▒m',\r\n    processedBy: 'Zeynep Sosyal Hizmet',\r\n    approvedBy: 'Dr. Ali Ba┼şhekim',\r\n  },\r\n  {\r\n    id: 4,\r\n    transactionNumber: 'NCT-2024-004',\r\n    recipientName: 'Ali ├ûzkan',\r\n    recipientId: '55667788990',\r\n    amount: 1500,\r\n    transactionDate: '2024-01-14 09:20',\r\n    aidCategory: 'E─şitim Yard─▒m─▒',\r\n    paymentMethod: 'check',\r\n    status: 'completed',\r\n    description: '├£niversite har├ğ ve kitap masraflar─▒',\r\n    processedBy: 'Elif E─şitim Sorumlusu',\r\n    approvedBy: 'Mehmet Y├Ânetici',\r\n  },\r\n];\r\n\r\n/**\r\n * CashAidTransactionsPage function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function CashAidTransactionsPage() {\r\n  const [transactions, setTransactions] = useState<CashTransaction[]>(mockTransactions);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState<string>('all');\r\n  const [paymentMethodFilter, setPaymentMethodFilter] = useState<string>('all');\r\n\r\n  const getStatusBadge = (status: CashTransaction['status']) => {\r\n    const statusConfig = {\r\n      completed: { label: 'Tamamland─▒', color: 'bg-green-100 text-green-800' },\r\n      pending: { label: 'Beklemede', color: 'bg-yellow-100 text-yellow-800' },\r\n      cancelled: { label: '─░ptal Edildi', color: 'bg-red-100 text-red-800' },\r\n    };\r\n\r\n    const config = statusConfig[status];\r\n    return <Badge className={config.color}>{config.label}</Badge>;\r\n  };\r\n\r\n  const getPaymentMethodBadge = (method: CashTransaction['paymentMethod']) => {\r\n    const methodConfig = {\r\n      cash: { label: 'Nakit', color: 'bg-blue-100 text-blue-800' },\r\n      bank_transfer: { label: 'Havale', color: 'bg-purple-100 text-purple-800' },\r\n      check: { label: '├çek', color: 'bg-orange-100 text-orange-800' },\r\n    };\r\n\r\n    const config = methodConfig[method];\r\n    return <Badge className={config.color}>{config.label}</Badge>;\r\n  };\r\n\r\n  const filteredTransactions = transactions.filter((transaction) => {\r\n    const matchesSearch =\r\n      transaction.recipientName.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      transaction.recipientId.includes(searchTerm) ||\r\n      transaction.transactionNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      transaction.description.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesStatus = statusFilter === 'all' || transaction.status === statusFilter;\r\n    const matchesPaymentMethod =\r\n      paymentMethodFilter === 'all' || transaction.paymentMethod === paymentMethodFilter;\r\n\r\n    return matchesSearch && matchesStatus && matchesPaymentMethod;\r\n  });\r\n\r\n  const stats = {\r\n    total: transactions.length,\r\n    completed: transactions.filter((t) => t.status === 'completed').length,\r\n    pending: transactions.filter((t) => t.status === 'pending').length,\r\n    totalAmount: transactions\r\n      .filter((t) => t.status === 'completed')\r\n      .reduce((sum, t) => sum + t.amount, 0),\r\n    todayAmount: transactions\r\n      .filter(\r\n        (t) =>\r\n          t.status === 'completed' &&\r\n          new Date(t.transactionDate).toDateString() === new Date().toDateString(),\r\n      )\r\n      .reduce((sum, t) => sum + t.amount, 0),\r\n  };\r\n\r\n  return (\r\n    <PageLayout\r\n      title=\"Nakdi Yard─▒m ─░┼şlemleri\"\r\n      subtitle=\"─░htiya├ğ sahiplerine ger├ğekle┼ştirilen nakdi yard─▒m i┼şlemlerini g├Âr├╝nt├╝leyin ve y├Ânetin\"\r\n      actions={\r\n        <div className=\"flex gap-2\">\r\n          <Button variant=\"outline\">\r\n            <Download className=\"w-4 h-4 mr-2\" />\r\n            Rapor Al\r\n          </Button>\r\n          <Button>\r\n            <Plus className=\"w-4 h-4 mr-2\" />\r\n            ─░htiya├ğ Sahibi ─░├ğin Yeni ─░┼şlem\r\n          </Button>\r\n        </div>\r\n      }\r\n    >\r\n      <div className=\"p-6 space-y-6\">\r\n        {/* Stats Cards */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <div className=\"p-2 bg-blue-100 rounded-lg\">\r\n                  <FileText className=\"w-5 h-5 text-blue-600\" />\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-sm text-muted-foreground\">Toplam ─░┼şlem</p>\r\n                  <p className=\"text-2xl font-bold\">{stats.total}</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <div className=\"p-2 bg-green-100 rounded-lg\">\r\n                  <HandHeart className=\"w-5 h-5 text-green-600\" />\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-sm text-muted-foreground\">Tamamlanan</p>\r\n                  <p className=\"text-2xl font-bold\">{stats.completed}</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <div className=\"p-2 bg-purple-100 rounded-lg\">\r\n                  <TrendingUp className=\"w-5 h-5 text-purple-600\" />\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-sm text-muted-foreground\">Toplam Tutar</p>\r\n                  <p className=\"text-2xl font-bold\">Ôé║{stats.totalAmount.toLocaleString('tr-TR')}</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <div className=\"p-2 bg-orange-100 rounded-lg\">\r\n                  <Calendar className=\"w-5 h-5 text-orange-600\" />\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-sm text-muted-foreground\">Bug├╝n ├ûdenen</p>\r\n                  <p className=\"text-2xl font-bold\">Ôé║{stats.todayAmount.toLocaleString('tr-TR')}</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Filters */}\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex flex-col md:flex-row gap-4\">\r\n              <div className=\"flex-1\">\r\n                <div className=\"relative\">\r\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\r\n                  <Input\r\n                    placeholder=\"─░htiya├ğ sahibinin ad─▒, TC kimlik, i┼şlem no veya a├ğ─▒klama ile ara...\"\r\n                    value={searchTerm}\r\n                    onChange={(e) => {\r\n                      setSearchTerm(e.target.value);\r\n                    }}\r\n                    className=\"pl-10\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"flex gap-2\">\r\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\r\n                  <SelectTrigger className=\"w-40\">\r\n                    <SelectValue placeholder=\"Durum\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"all\">T├╝m Durumlar</SelectItem>\r\n                    <SelectItem value=\"completed\">Tamamland─▒</SelectItem>\r\n                    <SelectItem value=\"pending\">Beklemede</SelectItem>\r\n                    <SelectItem value=\"cancelled\">─░ptal Edildi</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n\r\n                <Select value={paymentMethodFilter} onValueChange={setPaymentMethodFilter}>\r\n                  <SelectTrigger className=\"w-40\">\r\n                    <SelectValue placeholder=\"├ûdeme Y├Ântemi\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"all\">T├╝m Y├Ântemler</SelectItem>\r\n                    <SelectItem value=\"cash\">Nakit</SelectItem>\r\n                    <SelectItem value=\"bank_transfer\">Havale</SelectItem>\r\n                    <SelectItem value=\"check\">├çek</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Transactions Table */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Banknote className=\"w-5 h-5 text-blue-600\" />\r\n              Nakdi Yard─▒m ─░┼şlemleri ({filteredTransactions.length} i┼şlem)\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"overflow-x-auto\">\r\n              <Table>\r\n                <TableHeader>\r\n                  <TableRow>\r\n                    <TableHead>─░┼şlem No</TableHead>\r\n                    <TableHead>─░htiya├ğ Sahibi</TableHead>\r\n                    <TableHead>Tutar</TableHead>\r\n                    <TableHead>Kategori</TableHead>\r\n                    <TableHead>├ûdeme Y├Ântemi</TableHead>\r\n                    <TableHead>─░┼şlem Tarihi</TableHead>\r\n                    <TableHead>Durum</TableHead>\r\n                    <TableHead>─░┼şleyen</TableHead>\r\n                    <TableHead>─░┼şlemler</TableHead>\r\n                  </TableRow>\r\n                </TableHeader>\r\n                <TableBody>\r\n                  {filteredTransactions.map((transaction) => (\r\n                    <TableRow key={transaction.id}>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <FileText className=\"w-4 h-4 text-gray-400\" />\r\n                          <span className=\"font-mono text-sm\">{transaction.transactionNumber}</span>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div>\r\n                          <p className=\"font-medium\">{transaction.recipientName}</p>\r\n                          <p className=\"text-sm text-muted-foreground\">{transaction.recipientId}</p>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <Banknote className=\"w-4 h-4 text-green-600\" />\r\n                          <span className=\"font-medium\">\r\n                            Ôé║{transaction.amount.toLocaleString('tr-TR')}\r\n                          </span>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <Badge variant=\"outline\">{transaction.aidCategory}</Badge>\r\n                      </TableCell>\r\n                      <TableCell>{getPaymentMethodBadge(transaction.paymentMethod)}</TableCell>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <Calendar className=\"w-4 h-4 text-gray-400\" />\r\n                          <span className=\"text-sm\">\r\n                            {new Date(transaction.transactionDate).toLocaleString('tr-TR')}\r\n                          </span>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>{getStatusBadge(transaction.status)}</TableCell>\r\n                      <TableCell>\r\n                        <div>\r\n                          <p className=\"text-sm font-medium\">{transaction.processedBy}</p>\r\n                          <p className=\"text-xs text-muted-foreground\">\r\n                            Onay: {transaction.approvedBy}\r\n                          </p>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <Button variant=\"ghost\" size=\"sm\">\r\n                            <Eye className=\"w-4 h-4\" />\r\n                          </Button>\r\n                          <Button variant=\"ghost\" size=\"sm\">\r\n                            <FileText className=\"w-4 h-4\" />\r\n                          </Button>\r\n                          <Button variant=\"ghost\" size=\"sm\">\r\n                            <Download className=\"w-4 h-4\" />\r\n                          </Button>\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </PageLayout>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\CashAidVaultPage.tsx","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":148,"column":83,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":148,"endColumn":85,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4408,4410],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview CashAidVaultPage Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport {\r\n  ArrowDownCircle,\r\n  ArrowUpCircle,\r\n  Banknote,\r\n  Calendar,\r\n  DollarSign,\r\n  Eye,\r\n  FileText,\r\n  History,\r\n  Plus,\r\n  Search,\r\n  Vault,\r\n  Wallet,\r\n} from 'lucide-react';\r\nimport { useState } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { PageLayout } from '../PageLayout';\r\nimport { Badge } from '../ui/badge';\r\nimport { Button } from '../ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from '../ui/dialog';\r\nimport { Input } from '../ui/input';\r\nimport { Label } from '../ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../ui/table';\r\nimport { Textarea } from '../ui/textarea';\r\n\r\ninterface VaultTransaction {\r\n  id: number;\r\n  type: 'deposit' | 'withdrawal';\r\n  amount: number;\r\n  date: string;\r\n  description: string;\r\n  reference: string;\r\n  operator: string;\r\n  recipientName?: string;\r\n  recipientId?: string;\r\n  approvedBy: string;\r\n  balance: number;\r\n}\r\n\r\nconst mockTransactions: VaultTransaction[] = [\r\n  {\r\n    id: 1,\r\n    type: 'deposit',\r\n    amount: 10000,\r\n    date: '2024-01-15 09:30',\r\n    description: 'Ayl─▒k ba─ş─▒┼ş geliri aktar─▒m─▒',\r\n    reference: 'VLT-2024-001',\r\n    operator: 'Mehmet Y├Ânetici',\r\n    approvedBy: 'Ay┼şe Muhasebe',\r\n    balance: 35000,\r\n  },\r\n  {\r\n    id: 2,\r\n    type: 'withdrawal',\r\n    amount: 2500,\r\n    date: '2024-01-15 14:20',\r\n    description: 'Kira yard─▒m─▒ ├Âdemesi',\r\n    reference: 'VLT-2024-002',\r\n    operator: 'Fatma Koordinat├Âr',\r\n    recipientName: 'Ay┼şe Y─▒lmaz',\r\n    recipientId: '12345678901',\r\n    approvedBy: 'Mehmet Y├Ânetici',\r\n    balance: 32500,\r\n  },\r\n  {\r\n    id: 3,\r\n    type: 'withdrawal',\r\n    amount: 1200,\r\n    date: '2024-01-14 16:45',\r\n    description: 'Fatura yard─▒m─▒ ├Âdemesi',\r\n    reference: 'VLT-2024-003',\r\n    operator: 'Hasan Mali M├╝┼şavir',\r\n    recipientName: 'Zeynep Arslan',\r\n    recipientId: '99887766554',\r\n    approvedBy: 'Mehmet Y├Ânetici',\r\n    balance: 31300,\r\n  },\r\n  {\r\n    id: 4,\r\n    type: 'deposit',\r\n    amount: 5000,\r\n    date: '2024-01-14 10:15',\r\n    description: '├ûzel ba─ş─▒┼ş geliri',\r\n    reference: 'VLT-2024-004',\r\n    operator: 'Ali G├Ân├╝ll├╝',\r\n    approvedBy: 'Ay┼şe Muhasebe',\r\n    balance: 32500,\r\n  },\r\n  {\r\n    id: 5,\r\n    type: 'withdrawal',\r\n    amount: 800,\r\n    date: '2024-01-13 11:30',\r\n    description: 'Acil ihtiya├ğ yard─▒m─▒',\r\n    reference: 'VLT-2024-005',\r\n    operator: 'Zeynep Sosyal Hizmet',\r\n    recipientName: 'Ahmet Kaya',\r\n    recipientId: '44556677889',\r\n    approvedBy: 'Fatma Koordinat├Âr',\r\n    balance: 27500,\r\n  },\r\n];\r\n\r\n/**\r\n * CashAidVaultPage function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function CashAidVaultPage() {\r\n  const [transactions, setTransactions] = useState<VaultTransaction[]>(mockTransactions);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [typeFilter, setTypeFilter] = useState<string>('all');\r\n  const [isNewTransactionOpen, setIsNewTransactionOpen] = useState(false);\r\n  const [newTransaction, setNewTransaction] = useState({\r\n    type: 'deposit' as 'deposit' | 'withdrawal',\r\n    amount: '',\r\n    description: '',\r\n    recipientName: '',\r\n    recipientId: '',\r\n  });\r\n\r\n  const currentBalance = transactions.length > 0 ? transactions[0].balance : 0;\r\n  const todayTransactions = transactions.filter(\r\n    (t) => new Date(t.date).toDateString() === new Date().toDateString(),\r\n  );\r\n  const todayDeposits = todayTransactions\r\n    .filter((t) => t.type === 'deposit')\r\n    .reduce((sum, t) => sum + t.amount, 0);\r\n  const todayWithdrawals = todayTransactions\r\n    .filter((t) => t.type === 'withdrawal')\r\n    .reduce((sum, t) => sum + t.amount, 0);\r\n\r\n  const filteredTransactions = transactions.filter((transaction) => {\r\n    const matchesSearch =\r\n      transaction.description.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      transaction.reference.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      transaction.operator.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      transaction.recipientName?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      transaction.recipientId?.includes(searchTerm);\r\n    const matchesType = typeFilter === 'all' || transaction.type === typeFilter;\r\n\r\n    return matchesSearch && matchesType;\r\n  });\r\n\r\n  const handleNewTransaction = () => {\r\n    if (!newTransaction.amount || !newTransaction.description) {\r\n      toast.error('L├╝tfen t├╝m alanlar─▒ doldurun');\r\n      return;\r\n    }\r\n\r\n    const amount = parseFloat(newTransaction.amount);\r\n    if (amount <= 0) {\r\n      toast.error('Ge├ğerli bir tutar girin');\r\n      return;\r\n    }\r\n\r\n    if (newTransaction.type === 'withdrawal' && amount > currentBalance) {\r\n      toast.error('Yetersiz bakiye');\r\n      return;\r\n    }\r\n\r\n    const newBalance =\r\n      newTransaction.type === 'deposit' ? currentBalance + amount : currentBalance - amount;\r\n\r\n    const transaction: VaultTransaction = {\r\n      id: Date.now(),\r\n      type: newTransaction.type,\r\n      amount,\r\n      date: new Date().toISOString().slice(0, 16).replace('T', ' '),\r\n      description: newTransaction.description,\r\n      reference: `VLT-2024-${String(transactions.length + 1).padStart(3, '0')}`,\r\n      operator: 'Admin Y├Âneticisi',\r\n      recipientName:\r\n        newTransaction.type === 'withdrawal' ? newTransaction.recipientName : undefined,\r\n      recipientId: newTransaction.type === 'withdrawal' ? newTransaction.recipientId : undefined,\r\n      approvedBy: 'Sistem',\r\n      balance: newBalance,\r\n    };\r\n\r\n    setTransactions((prev) => [\r\n      transaction,\r\n      ...prev.map((t) => ({\r\n        ...t,\r\n        balance: t.balance + (newTransaction.type === 'deposit' ? amount : -amount),\r\n      })),\r\n    ]);\r\n    setNewTransaction({\r\n      type: 'deposit',\r\n      amount: '',\r\n      description: '',\r\n      recipientName: '',\r\n      recipientId: '',\r\n    });\r\n    setIsNewTransactionOpen(false);\r\n    toast.success(\r\n      `${\r\n        newTransaction.type === 'deposit' ? 'Para yat─▒rma' : 'Para ├ğekme'\r\n      } i┼şlemi ba┼şar─▒yla kaydedildi`,\r\n    );\r\n  };\r\n\r\n  return (\r\n    <PageLayout\r\n      title=\"Nakdi Yard─▒m Veznesi\"\r\n      subtitle=\"Nakdi yard─▒m kasas─▒n─▒ y├Ânetin ve i┼şlemleri takip edin\"\r\n      actions={\r\n        <Dialog open={isNewTransactionOpen} onOpenChange={setIsNewTransactionOpen}>\r\n          <DialogTrigger asChild>\r\n            <Button>\r\n              <Plus className=\"w-4 h-4 mr-2\" />\r\n              Yeni ─░┼şlem\r\n            </Button>\r\n          </DialogTrigger>\r\n          <DialogContent className=\"sm:max-w-md\">\r\n            <DialogHeader>\r\n              <DialogTitle>Yeni Vezne ─░┼şlemi</DialogTitle>\r\n            </DialogHeader>\r\n            <div className=\"space-y-4\">\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"transaction-type\">─░┼şlem T├╝r├╝</Label>\r\n                <Select\r\n                  value={newTransaction.type}\r\n                  onValueChange={(value: 'deposit' | 'withdrawal') => {\r\n                    setNewTransaction((prev) => ({ ...prev, type: value }));\r\n                  }}\r\n                >\r\n                  <SelectTrigger>\r\n                    <SelectValue />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"deposit\">Para Yat─▒rma</SelectItem>\r\n                    <SelectItem value=\"withdrawal\">Para ├çekme</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"amount\">Tutar (TL)</Label>\r\n                <Input\r\n                  id=\"amount\"\r\n                  type=\"number\"\r\n                  placeholder=\"0.00\"\r\n                  value={newTransaction.amount}\r\n                  onChange={(e) => {\r\n                    setNewTransaction((prev) => ({ ...prev, amount: e.target.value }));\r\n                  }}\r\n                />\r\n              </div>\r\n\r\n              <div className=\"space-y-2\">\r\n                <Label htmlFor=\"description\">A├ğ─▒klama</Label>\r\n                <Textarea\r\n                  id=\"description\"\r\n                  placeholder=\"─░┼şlem a├ğ─▒klamas─▒...\"\r\n                  value={newTransaction.description}\r\n                  onChange={(e) => {\r\n                    setNewTransaction((prev) => ({ ...prev, description: e.target.value }));\r\n                  }}\r\n                />\r\n              </div>\r\n\r\n              {newTransaction.type === 'withdrawal' && (\r\n                <>\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"recipient-name\">Al─▒c─▒ Ad─▒</Label>\r\n                    <Input\r\n                      id=\"recipient-name\"\r\n                      placeholder=\"Yard─▒m alan ki┼şinin ad─▒\"\r\n                      value={newTransaction.recipientName}\r\n                      onChange={(e) => {\r\n                        setNewTransaction((prev) => ({ ...prev, recipientName: e.target.value }));\r\n                      }}\r\n                    />\r\n                  </div>\r\n\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"recipient-id\">TC Kimlik No</Label>\r\n                    <Input\r\n                      id=\"recipient-id\"\r\n                      placeholder=\"12345678901\"\r\n                      value={newTransaction.recipientId}\r\n                      onChange={(e) => {\r\n                        setNewTransaction((prev) => ({ ...prev, recipientId: e.target.value }));\r\n                      }}\r\n                    />\r\n                  </div>\r\n                </>\r\n              )}\r\n\r\n              <div className=\"flex justify-end gap-2\">\r\n                <Button\r\n                  variant=\"outline\"\r\n                  onClick={() => {\r\n                    setIsNewTransactionOpen(false);\r\n                  }}\r\n                >\r\n                  ─░ptal\r\n                </Button>\r\n                <Button onClick={handleNewTransaction}>─░┼şlemi Kaydet</Button>\r\n              </div>\r\n            </div>\r\n          </DialogContent>\r\n        </Dialog>\r\n      }\r\n    >\r\n      <div className=\"p-6 space-y-6\">\r\n        {/* Balance Overview */}\r\n        <Card className=\"bg-gradient-to-r from-blue-600 to-indigo-700 text-white\">\r\n          <CardContent className=\"p-6\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-blue-100 mb-2\">G├╝ncel Kasa Bakiyesi</p>\r\n                <p className=\"text-4xl font-bold\">Ôé║{currentBalance.toLocaleString('tr-TR')}</p>\r\n              </div>\r\n              <div className=\"p-3 bg-white/20 rounded-xl\">\r\n                <Vault className=\"w-8 h-8\" />\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Daily Stats */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-4\">\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <div className=\"p-2 bg-green-100 rounded-lg\">\r\n                  <ArrowUpCircle className=\"w-5 h-5 text-green-600\" />\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-sm text-muted-foreground\">Bug├╝n Giren</p>\r\n                  <p className=\"text-2xl font-bold text-green-600\">\r\n                    Ôé║{todayDeposits.toLocaleString('tr-TR')}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <div className=\"p-2 bg-red-100 rounded-lg\">\r\n                  <ArrowDownCircle className=\"w-5 h-5 text-red-600\" />\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-sm text-muted-foreground\">Bug├╝n ├ç─▒kan</p>\r\n                  <p className=\"text-2xl font-bold text-red-600\">\r\n                    Ôé║{todayWithdrawals.toLocaleString('tr-TR')}\r\n                  </p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <div className=\"p-2 bg-blue-100 rounded-lg\">\r\n                  <History className=\"w-5 h-5 text-blue-600\" />\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-sm text-muted-foreground\">Bug├╝n ─░┼şlem</p>\r\n                  <p className=\"text-2xl font-bold\">{todayTransactions.length}</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Filters */}\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex flex-col md:flex-row gap-4\">\r\n              <div className=\"flex-1\">\r\n                <div className=\"relative\">\r\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\r\n                  <Input\r\n                    placeholder=\"─░┼şlem a├ğ─▒klamas─▒, referans no, operat├Âr veya al─▒c─▒ ile ara...\"\r\n                    value={searchTerm}\r\n                    onChange={(e) => {\r\n                      setSearchTerm(e.target.value);\r\n                    }}\r\n                    className=\"pl-10\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"flex gap-2\">\r\n                <Select value={typeFilter} onValueChange={setTypeFilter}>\r\n                  <SelectTrigger className=\"w-40\">\r\n                    <SelectValue placeholder=\"─░┼şlem T├╝r├╝\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"all\">T├╝m ─░┼şlemler</SelectItem>\r\n                    <SelectItem value=\"deposit\">Para Yat─▒rma</SelectItem>\r\n                    <SelectItem value=\"withdrawal\">Para ├çekme</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Transactions Table */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Wallet className=\"w-5 h-5 text-blue-600\" />\r\n              ─░┼şlem Ge├ğmi┼şi ({filteredTransactions.length} i┼şlem)\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"overflow-x-auto\">\r\n              <Table>\r\n                <TableHeader>\r\n                  <TableRow>\r\n                    <TableHead>Referans</TableHead>\r\n                    <TableHead>Tarih/Saat</TableHead>\r\n                    <TableHead>─░┼şlem T├╝r├╝</TableHead>\r\n                    <TableHead>Tutar</TableHead>\r\n                    <TableHead>A├ğ─▒klama</TableHead>\r\n                    <TableHead>Al─▒c─▒/Kaynak</TableHead>\r\n                    <TableHead>Operat├Âr</TableHead>\r\n                    <TableHead>Bakiye</TableHead>\r\n                    <TableHead>─░┼şlemler</TableHead>\r\n                  </TableRow>\r\n                </TableHeader>\r\n                <TableBody>\r\n                  {filteredTransactions.map((transaction) => (\r\n                    <TableRow key={transaction.id}>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <FileText className=\"w-4 h-4 text-gray-400\" />\r\n                          <span className=\"font-mono text-sm\">{transaction.reference}</span>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <Calendar className=\"w-4 h-4 text-gray-400\" />\r\n                          <span className=\"text-sm\">{transaction.date}</span>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          {transaction.type === 'deposit' ? (\r\n                            <>\r\n                              <ArrowUpCircle className=\"w-4 h-4 text-green-600\" />\r\n                              <Badge className=\"bg-green-100 text-green-800\">Para Yat─▒rma</Badge>\r\n                            </>\r\n                          ) : (\r\n                            <>\r\n                              <ArrowDownCircle className=\"w-4 h-4 text-red-600\" />\r\n                              <Badge className=\"bg-red-100 text-red-800\">Para ├çekme</Badge>\r\n                            </>\r\n                          )}\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <Banknote className=\"w-4 h-4 text-gray-400\" />\r\n                          <span\r\n                            className={`font-medium ${\r\n                              transaction.type === 'deposit' ? 'text-green-600' : 'text-red-600'\r\n                            }`}\r\n                          >\r\n                            {transaction.type === 'deposit' ? '+' : '-'}Ôé║\r\n                            {transaction.amount.toLocaleString('tr-TR')}\r\n                          </span>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <span className=\"text-sm\">{transaction.description}</span>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {transaction.recipientName ? (\r\n                          <div>\r\n                            <p className=\"font-medium text-sm\">{transaction.recipientName}</p>\r\n                            <p className=\"text-xs text-muted-foreground\">\r\n                              {transaction.recipientId}\r\n                            </p>\r\n                          </div>\r\n                        ) : (\r\n                          <span className=\"text-sm text-muted-foreground\">-</span>\r\n                        )}\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <span className=\"text-sm\">{transaction.operator}</span>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <DollarSign className=\"w-4 h-4 text-gray-400\" />\r\n                          <span className=\"font-medium\">\r\n                            Ôé║{transaction.balance.toLocaleString('tr-TR')}\r\n                          </span>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <Button variant=\"ghost\" size=\"sm\">\r\n                            <Eye className=\"w-4 h-4\" />\r\n                          </Button>\r\n                          <Button variant=\"ghost\" size=\"sm\">\r\n                            <FileText className=\"w-4 h-4\" />\r\n                          </Button>\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </PageLayout>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\DistributionTrackingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\DocumentManagementPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\DonationsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":110,"column":21,"nodeType":"CallExpression","messageId":"neverNullish","endLine":110,"endColumn":38},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":125,"column":32,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":125,"endColumn":34,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3729,3731],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":188,"column":24,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":188,"endColumn":45},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":188,"column":24,"nodeType":"MemberExpression","endLine":188,"endColumn":45},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":201,"column":22,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":201,"endColumn":54},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":201,"column":46,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":201,"endColumn":48,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[6226,6228],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":202,"column":22,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":202,"endColumn":54},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":202,"column":46,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":202,"endColumn":48,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[6295,6297],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":205,"column":19,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":205,"endColumn":48},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":205,"column":40,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":205,"endColumn":42,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[6493,6495],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":206,"column":22,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":206,"endColumn":54},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":206,"column":46,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":206,"endColumn":48,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[6562,6564],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":551,"column":24,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":551,"endColumn":41},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":564,"column":71,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":564,"endColumn":82},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":576,"column":73,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":576,"endColumn":86},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":589,"column":24,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":589,"endColumn":43},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":740,"column":45,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[30678,30774],"text":"\r\n                    Yeni ba─ş─▒┼ş eklemek i├ğin &quot;Yeni Ba─ş─▒┼ş\" butonunu kullan─▒n\r\n                  "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[30678,30774],"text":"\r\n                    Yeni ba─ş─▒┼ş eklemek i├ğin &ldquo;Yeni Ba─ş─▒┼ş\" butonunu kullan─▒n\r\n                  "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[30678,30774],"text":"\r\n                    Yeni ba─ş─▒┼ş eklemek i├ğin &#34;Yeni Ba─ş─▒┼ş\" butonunu kullan─▒n\r\n                  "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[30678,30774],"text":"\r\n                    Yeni ba─ş─▒┼ş eklemek i├ğin &rdquo;Yeni Ba─ş─▒┼ş\" butonunu kullan─▒n\r\n                  "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":740,"column":56,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[30678,30774],"text":"\r\n                    Yeni ba─ş─▒┼ş eklemek i├ğin \"Yeni Ba─ş─▒┼ş&quot; butonunu kullan─▒n\r\n                  "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[30678,30774],"text":"\r\n                    Yeni ba─ş─▒┼ş eklemek i├ğin \"Yeni Ba─ş─▒┼ş&ldquo; butonunu kullan─▒n\r\n                  "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[30678,30774],"text":"\r\n                    Yeni ba─ş─▒┼ş eklemek i├ğin \"Yeni Ba─ş─▒┼ş&#34; butonunu kullan─▒n\r\n                  "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[30678,30774],"text":"\r\n                    Yeni ba─ş─▒┼ş eklemek i├ğin \"Yeni Ba─ş─▒┼ş&rdquo; butonunu kullan─▒n\r\n                  "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":871,"column":51,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[38091,38199],"text":"\r\n                          Yeni ba─ş─▒┼ş eklemek i├ğin &quot;Yeni Ba─ş─▒┼ş\" butonunu kullan─▒n\r\n                        "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[38091,38199],"text":"\r\n                          Yeni ba─ş─▒┼ş eklemek i├ğin &ldquo;Yeni Ba─ş─▒┼ş\" butonunu kullan─▒n\r\n                        "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[38091,38199],"text":"\r\n                          Yeni ba─ş─▒┼ş eklemek i├ğin &#34;Yeni Ba─ş─▒┼ş\" butonunu kullan─▒n\r\n                        "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[38091,38199],"text":"\r\n                          Yeni ba─ş─▒┼ş eklemek i├ğin &rdquo;Yeni Ba─ş─▒┼ş\" butonunu kullan─▒n\r\n                        "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":871,"column":62,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[38091,38199],"text":"\r\n                          Yeni ba─ş─▒┼ş eklemek i├ğin \"Yeni Ba─ş─▒┼ş&quot; butonunu kullan─▒n\r\n                        "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[38091,38199],"text":"\r\n                          Yeni ba─ş─▒┼ş eklemek i├ğin \"Yeni Ba─ş─▒┼ş&ldquo; butonunu kullan─▒n\r\n                        "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[38091,38199],"text":"\r\n                          Yeni ba─ş─▒┼ş eklemek i├ğin \"Yeni Ba─ş─▒┼ş&#34; butonunu kullan─▒n\r\n                        "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[38091,38199],"text":"\r\n                          Yeni ba─ş─▒┼ş eklemek i├ğin \"Yeni Ba─ş─▒┼ş&rdquo; butonunu kullan─▒n\r\n                        "},"desc":"Replace with `&rdquo;`."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview DonationsPage Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport {\r\n  CheckCircle,\r\n  Clock,\r\n  DollarSign,\r\n  Download,\r\n  Eye,\r\n  Loader2,\r\n  Plus,\r\n  Search,\r\n  Trash2,\r\n  TrendingUp,\r\n  XCircle,\r\n} from 'lucide-react';\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { useFormValidation } from '../../hooks/useFormValidation';\r\nimport { VALIDATION_SCHEMAS } from '../../lib/validation';\r\nimport {\r\n  donationsService,\r\n  type Donation,\r\n  type DonationsFilters,\r\n} from '../../services/donationsService';\r\nimport { PageLoading } from '../LoadingSpinner';\r\nimport { PageLayout } from '../PageLayout';\r\nimport { Badge } from '../ui/badge';\r\nimport { Button } from '../ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogTrigger,\r\n} from '../ui/dialog';\r\nimport { Input } from '../ui/input';\r\nimport { Label } from '../ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../ui/table';\r\nimport { Textarea } from '../ui/textarea';\r\n\r\nimport { logger } from '../../lib/logging/logger';\r\ninterface DonationFormData {\r\n  donor_name: string;\r\n  donor_phone: string;\r\n  donor_email: string;\r\n  amount: number;\r\n  donation_type: string;\r\n  payment_method: string;\r\n  category: string;\r\n  description: string;\r\n}\r\n\r\n/**\r\n * DonationsPage function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function DonationsPage() {\r\n  const [loading, setLoading] = useState(true);\r\n  const [saving, setSaving] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState('all');\r\n  const [donationTypeFilter, setDonationTypeFilter] = useState('all');\r\n  const [paymentMethodFilter, setPaymentMethodFilter] = useState('all');\r\n  const [donations, setDonations] = useState<Donation[]>([]);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [pageSize] = useState(10);\r\n  const [showCreateModal, setShowCreateModal] = useState(false);\r\n  const [stats, setStats] = useState({\r\n    total: 0,\r\n    totalAmount: 0,\r\n    pending: 0,\r\n    approved: 0,\r\n    rejected: 0,\r\n    averageAmount: 0,\r\n  });\r\n  // Form validation\r\n  const donationForm = useFormValidation({\r\n    schema: VALIDATION_SCHEMAS.donation,\r\n    initialValues: {\r\n      donor_name: '',\r\n      donor_email: '',\r\n      donor_phone: '',\r\n      amount: 0,\r\n      donation_type: 'cash',\r\n      category: '',\r\n      description: '',\r\n      payment_method: 'bank_transfer',\r\n    },\r\n    onSubmit: async (values) => {\r\n      await handleCreateDonation(values);\r\n    },\r\n  });\r\n\r\n  // Load donations data\r\n  const loadDonations = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      const filters: DonationsFilters = {\r\n        searchTerm: searchTerm.trim() ?? undefined,\r\n        status: statusFilter !== 'all' ? statusFilter : undefined,\r\n        donationType: donationTypeFilter !== 'all' ? donationTypeFilter : undefined,\r\n        paymentMethod: paymentMethodFilter !== 'all' ? paymentMethodFilter : undefined,\r\n      };\r\n\r\n      const result = await donationsService.getDonations(currentPage, pageSize, filters);\r\n\r\n      if (result.error) {\r\n        logger.error('ÔØî Error loading donations:', result.error);\r\n        setDonations([]);\r\n        toast.error('Ba─ş─▒┼şlar y├╝klenirken hata olu┼ştu');\r\n        return;\r\n      }\r\n\r\n      setDonations(result.data || []);\r\n    } catch (error) {\r\n      logger.error('Error loading donations:', error);\r\n      setDonations([]);\r\n      toast.error('Ba─ş─▒┼şlar y├╝klenirken hata olu┼ştu');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [currentPage, pageSize, searchTerm, statusFilter, donationTypeFilter, paymentMethodFilter]);\r\n\r\n  // Load statistics\r\n  const loadStats = useCallback(async () => {\r\n    try {\r\n      const result = await donationsService.getDonationStats();\r\n\r\n      if (result.data) {\r\n        setStats({\r\n          total: result.data.total,\r\n          totalAmount: result.data.totalAmount,\r\n          pending: result.data.pending,\r\n          approved: result.data.approved,\r\n          rejected: result.data.rejected,\r\n          averageAmount: result.data.averageAmount,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      logger.error('Error loading donation stats:', error);\r\n    }\r\n  }, []);\r\n\r\n  // Initial load\r\n  useEffect(() => {\r\n    loadDonations();\r\n    loadStats();\r\n  }, [loadDonations, loadStats]);\r\n\r\n  // Reload on filter changes with debounce\r\n  useEffect(() => {\r\n    const timeoutId = setTimeout(() => {\r\n      setCurrentPage(1);\r\n      loadDonations();\r\n    }, 300);\r\n\r\n    return () => {\r\n      clearTimeout(timeoutId);\r\n    };\r\n  }, [searchTerm, statusFilter, donationTypeFilter, paymentMethodFilter, loadDonations]);\r\n\r\n  const getStatusBadge = (status: Donation['status']) => {\r\n    const statusMapping = {\r\n      pending: {\r\n        label: 'Beklemede',\r\n        className: 'bg-yellow-100 text-yellow-800 hover:bg-yellow-100',\r\n      },\r\n      approved: { label: 'Onayland─▒', className: 'bg-green-100 text-green-800 hover:bg-green-100' },\r\n      rejected: { label: 'Reddedildi', className: 'bg-red-100 text-red-800 hover:bg-red-100' },\r\n      processing: { label: '─░┼şleniyor', className: 'bg-blue-100 text-blue-800 hover:bg-blue-100' },\r\n      completed: {\r\n        label: 'Tamamland─▒',\r\n        className: 'bg-green-100 text-green-800 hover:bg-green-100',\r\n      },\r\n    };\r\n\r\n    const statusInfo = statusMapping[status] ?? statusMapping.pending;\r\n\r\n    return <Badge className={statusInfo.className}>{statusInfo.label}</Badge>;\r\n  };\r\n\r\n  const handleCreateDonation = async (values?: DonationFormData) => {\r\n    const donationData = values ?? donationForm.values;\r\n\r\n    try {\r\n      setSaving(true);\r\n\r\n      const result = await donationsService.createDonation({\r\n        donor_name: donationData.donor_name.trim(),\r\n        donor_email: donationData.donor_email?.trim() ?? undefined,\r\n        donor_phone: donationData.donor_phone?.trim() ?? undefined,\r\n        amount: donationData.amount,\r\n        donation_type: donationData.donation_type as 'cash' | 'in_kind' | 'services' | 'other',\r\n        category: donationData.category?.trim() ?? undefined,\r\n        description: donationData.description?.trim() ?? undefined,\r\n        payment_method: donationData.payment_method as\r\n          | 'bank_transfer'\r\n          | 'credit_card'\r\n          | 'cash'\r\n          | 'check'\r\n          | 'online'\r\n          | 'other',\r\n        status: 'pending',\r\n      });\r\n\r\n      if (result.error) {\r\n        throw new Error(result.error);\r\n      }\r\n\r\n      toast.success('Ba─ş─▒┼ş ba┼şar─▒yla kaydedildi!');\r\n\r\n      // Reset form\r\n      donationForm.reset();\r\n      setShowCreateModal(false);\r\n\r\n      // Reload data\r\n      await loadDonations();\r\n      await loadStats();\r\n    } catch (error) {\r\n      logger.error('Error creating donation:', error);\r\n      toast.error(error instanceof Error ? error.message : 'Ba─ş─▒┼ş kaydedilemedi');\r\n    } finally {\r\n      setSaving(false);\r\n    }\r\n  };\r\n\r\n  const handleUpdateStatus = async (id: number, newStatus: Donation['status']) => {\r\n    try {\r\n      const result = await donationsService.updateDonation(id, { status: newStatus });\r\n\r\n      if (result.error) {\r\n        throw new Error(result.error);\r\n      }\r\n\r\n      toast.success('Ba─ş─▒┼ş durumu g├╝ncellendi');\r\n      await loadDonations();\r\n      await loadStats();\r\n    } catch (error) {\r\n      logger.error('Error updating donation status:', error);\r\n      toast.error('Durum g├╝ncellenemedi');\r\n    }\r\n  };\r\n\r\n  const handleDeleteDonation = async (id: number) => {\r\n    if (!confirm('Bu ba─ş─▒┼ş─▒ silmek istedi─şinizden emin misiniz?')) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const result = await donationsService.deleteDonation(id);\r\n\r\n      if (result.error) {\r\n        throw new Error(result.error);\r\n      }\r\n\r\n      toast.success('Ba─ş─▒┼ş silindi');\r\n      await loadDonations();\r\n      await loadStats();\r\n    } catch (error) {\r\n      logger.error('Error deleting donation:', error);\r\n      toast.error('Ba─ş─▒┼ş silinemedi');\r\n    }\r\n  };\r\n\r\n  if (loading && donations.length === 0) {\r\n    return <PageLoading />;\r\n  }\r\n\r\n  return (\r\n    <PageLayout\r\n      title=\"Ba─ş─▒┼ş Y├Ânetimi\"\r\n      subtitle=\"T├╝m ba─ş─▒┼şlar─▒ g├Âr├╝nt├╝leyin ve y├Ânetin\"\r\n      actions={\r\n        <div className=\"flex gap-2 flex-wrap items-center justify-end w-full sm:w-auto p-2 sm:p-0\">\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            className=\"min-h-[44px] px-4 text-sm border-gray-300 hover:border-gray-400 order-2 sm:order-1\"\r\n          >\r\n            <Download className=\"w-4 h-4 mr-2\" />\r\n            <span className=\"hidden sm:inline\">D─▒┼şa Aktar</span>\r\n            <span className=\"sm:hidden\">D─▒┼şa Aktar</span>\r\n          </Button>\r\n          <Dialog open={showCreateModal} onOpenChange={setShowCreateModal}>\r\n            <DialogTrigger asChild>\r\n              <Button\r\n                size=\"sm\"\r\n                className=\"min-h-[44px] px-6 py-3 corporate-gradient text-white border-0 shadow-lg hover:shadow-xl transition-all duration-300 order-1 sm:order-2 flex-shrink-0\"\r\n              >\r\n                <Plus className=\"w-4 h-4 mr-2\" />\r\n                <span className=\"hidden sm:inline\">Yeni Ba─ş─▒┼ş</span>\r\n                <span className=\"sm:hidden\">Yeni Ba─ş─▒┼ş</span>\r\n              </Button>\r\n            </DialogTrigger>\r\n            <DialogContent className=\"sm:max-w-lg max-w-[95vw] max-h-[90vh] overflow-y-auto professional-card\">\r\n              <DialogHeader className=\"pb-4\">\r\n                <DialogTitle className=\"flex items-center gap-2\">\r\n                  <Plus className=\"w-6 h-6 text-primary\" />\r\n                  Yeni Ba─ş─▒┼ş Kayd─▒\r\n                </DialogTitle>\r\n                <DialogDescription className=\"text-muted-foreground mt-1\">\r\n                  Ba─ş─▒┼ş bilgilerini doldurun. Zorunlu alanlar─▒ (*) doldurman─▒z gereklidir.\r\n                </DialogDescription>\r\n              </DialogHeader>\r\n\r\n              <form onSubmit={donationForm.handleSubmit} className=\"space-y-4 py-4\">\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"donor_name\">Ba─ş─▒┼ş├ğ─▒ Ad─▒ *</Label>\r\n                  <Input\r\n                    id=\"donor_name\"\r\n                    value={donationForm.values.donor_name}\r\n                    onChange={(e) => {\r\n                      donationForm.handleChange('donor_name', e.target.value);\r\n                    }}\r\n                    onBlur={() => {\r\n                      donationForm.handleBlur('donor_name');\r\n                    }}\r\n                    placeholder=\"Ba─ş─▒┼ş├ğ─▒n─▒n tam ad─▒n─▒ giriniz\"\r\n                    className={`min-h-[44px] focus-corporate ${\r\n                      donationForm.touched.donor_name && donationForm.errors.donor_name\r\n                        ? 'border-red-500 focus:border-red-500'\r\n                        : ''\r\n                    }`}\r\n                    disabled={saving}\r\n                  />\r\n                  {donationForm.touched.donor_name && donationForm.errors.donor_name && (\r\n                    <p className=\"text-sm text-red-600\">{donationForm.errors.donor_name}</p>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"donor_email\">E-posta</Label>\r\n                    <Input\r\n                      id=\"donor_email\"\r\n                      type=\"email\"\r\n                      value={donationForm.values.donor_email}\r\n                      onChange={(e) => {\r\n                        donationForm.handleChange('donor_email', e.target.value);\r\n                      }}\r\n                      onBlur={() => {\r\n                        donationForm.handleBlur('donor_email');\r\n                      }}\r\n                      placeholder=\"ba─ş─▒┼ş├ğ─▒@email.com\"\r\n                      className={`min-h-[44px] focus-corporate ${\r\n                        donationForm.touched.donor_email && donationForm.errors.donor_email\r\n                          ? 'border-red-500 focus:border-red-500'\r\n                          : ''\r\n                      }`}\r\n                      disabled={saving}\r\n                    />\r\n                    {donationForm.touched.donor_email && donationForm.errors.donor_email && (\r\n                      <p className=\"text-sm text-red-600\">{donationForm.errors.donor_email}</p>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"donor_phone\">Telefon</Label>\r\n                    <Input\r\n                      id=\"donor_phone\"\r\n                      type=\"tel\"\r\n                      value={donationForm.values.donor_phone}\r\n                      onChange={(e) => {\r\n                        donationForm.handleChange('donor_phone', e.target.value);\r\n                      }}\r\n                      onBlur={() => {\r\n                        donationForm.handleBlur('donor_phone');\r\n                      }}\r\n                      placeholder=\"0555 123 45 67\"\r\n                      className={`min-h-[44px] focus-corporate ${\r\n                        donationForm.touched.donor_phone && donationForm.errors.donor_phone\r\n                          ? 'border-red-500 focus:border-red-500'\r\n                          : ''\r\n                      }`}\r\n                      disabled={saving}\r\n                    />\r\n                    {donationForm.touched.donor_phone && donationForm.errors.donor_phone && (\r\n                      <p className=\"text-sm text-red-600\">{donationForm.errors.donor_phone}</p>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"amount\">Miktar (TL) *</Label>\r\n                  <Input\r\n                    id=\"amount\"\r\n                    type=\"number\"\r\n                    value={donationForm.values.amount}\r\n                    onChange={(e) => {\r\n                      donationForm.handleChange('amount', e.target.value);\r\n                    }}\r\n                    onBlur={() => {\r\n                      donationForm.handleBlur('amount');\r\n                    }}\r\n                    placeholder=\"0.00\"\r\n                    className={`min-h-[44px] focus-corporate ${\r\n                      donationForm.touched.amount && donationForm.errors.amount\r\n                        ? 'border-red-500 focus:border-red-500'\r\n                        : ''\r\n                    }`}\r\n                    disabled={saving}\r\n                    min=\"0\"\r\n                    step=\"0.01\"\r\n                  />\r\n                  {donationForm.touched.amount && donationForm.errors.amount && (\r\n                    <p className=\"text-sm text-red-600\">{donationForm.errors.amount}</p>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"donation_type\">Ba─ş─▒┼ş T├╝r├╝</Label>\r\n                    <Select\r\n                      value={donationForm.values.donation_type}\r\n                      onValueChange={(value: string) => {\r\n                        donationForm.handleChange('donation_type', value);\r\n                      }}\r\n                    >\r\n                      <SelectTrigger className=\"min-h-[44px] focus-corporate\">\r\n                        <SelectValue />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"cash\">Nakdi</SelectItem>\r\n                        <SelectItem value=\"in_kind\">Ayni</SelectItem>\r\n                        <SelectItem value=\"services\">Hizmet</SelectItem>\r\n                        <SelectItem value=\"other\">Di─şer</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"payment_method\">├ûdeme Y├Ântemi</Label>\r\n                    <Select\r\n                      value={donationForm.values.payment_method}\r\n                      onValueChange={(value: string) => {\r\n                        donationForm.handleChange('payment_method', value);\r\n                      }}\r\n                    >\r\n                      <SelectTrigger className=\"min-h-[44px] focus-corporate\">\r\n                        <SelectValue />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"bank_transfer\">Banka Havalesi</SelectItem>\r\n                        <SelectItem value=\"credit_card\">Kredi Kart─▒</SelectItem>\r\n                        <SelectItem value=\"cash\">Nakit</SelectItem>\r\n                        <SelectItem value=\"check\">├çek</SelectItem>\r\n                        <SelectItem value=\"online\">Online</SelectItem>\r\n                        <SelectItem value=\"other\">Di─şer</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"category\">Kategori</Label>\r\n                  <Input\r\n                    id=\"category\"\r\n                    value={donationForm.values.category}\r\n                    onChange={(e) => {\r\n                      donationForm.handleChange('category', e.target.value);\r\n                    }}\r\n                    onBlur={() => {\r\n                      donationForm.handleBlur('category');\r\n                    }}\r\n                    placeholder=\"Ba─ş─▒┼ş kategorisi (├Ârn: E─şitim, Sa─şl─▒k)\"\r\n                    className=\"min-h-[44px] focus-corporate\"\r\n                    disabled={saving}\r\n                  />\r\n                  {donationForm.touched.category && donationForm.errors.category && (\r\n                    <p className=\"text-sm text-red-600\">{donationForm.errors.category}</p>\r\n                  )}\r\n                </div>\r\n\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"description\">A├ğ─▒klama</Label>\r\n                  <Textarea\r\n                    id=\"description\"\r\n                    value={donationForm.values.description}\r\n                    onChange={(e) => {\r\n                      donationForm.handleChange('description', e.target.value);\r\n                    }}\r\n                    onBlur={() => {\r\n                      donationForm.handleBlur('description');\r\n                    }}\r\n                    placeholder=\"Ba─ş─▒┼ş hakk─▒nda ek bilgiler...\"\r\n                    className=\"min-h-[80px] focus-corporate\"\r\n                    disabled={saving}\r\n                  />\r\n                  {donationForm.touched.description && donationForm.errors.description && (\r\n                    <p className=\"text-sm text-red-600\">{donationForm.errors.description}</p>\r\n                  )}\r\n                </div>\r\n              </form>\r\n\r\n              <div className=\"flex flex-col sm:flex-row justify-end gap-3 pt-6 border-t\">\r\n                <Button\r\n                  variant=\"outline\"\r\n                  onClick={() => {\r\n                    setShowCreateModal(false);\r\n                    donationForm.reset();\r\n                  }}\r\n                  className=\"min-h-[44px] px-6\"\r\n                  disabled={saving}\r\n                >\r\n                  ─░ptal\r\n                </Button>\r\n                <Button\r\n                  onClick={() => {\r\n                    if (donationForm.isValid) {\r\n                      handleCreateDonation(donationForm.values);\r\n                    }\r\n                  }}\r\n                  className=\"min-h-[44px] px-6 corporate-gradient shadow-md hover:shadow-lg\"\r\n                  disabled={saving || !donationForm.isValid}\r\n                >\r\n                  {saving ? (\r\n                    <>\r\n                      <Loader2 className=\"animate-spin h-4 w-4 mr-2\" />\r\n                      Kaydediliyor...\r\n                    </>\r\n                  ) : (\r\n                    <>\r\n                      <Plus className=\"w-4 h-4 mr-2\" />\r\n                      Kaydet\r\n                    </>\r\n                  )}\r\n                </Button>\r\n              </div>\r\n            </DialogContent>\r\n          </Dialog>\r\n        </div>\r\n      }\r\n    >\r\n      <div className=\"safe-area p-3 sm:p-6 lg:p-8 space-y-4 sm:space-y-6\">\r\n        {/* Enhanced Summary Cards */}\r\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-3 sm:gap-4\">\r\n          <Card className=\"professional-card micro-interaction\">\r\n            <CardContent className=\"p-3 sm:p-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <div className=\"text-xl sm:text-2xl text-green-600\">\r\n                    Ôé║{(stats.totalAmount ?? 0).toLocaleString()}\r\n                  </div>\r\n                  <p className=\"text-xs sm:text-sm text-gray-600\">Toplam Ba─ş─▒┼ş</p>\r\n                </div>\r\n                <DollarSign className=\"h-8 w-8 text-green-500 opacity-80\" />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card className=\"professional-card micro-interaction\">\r\n            <CardContent className=\"p-3 sm:p-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <div className=\"text-xl sm:text-2xl text-blue-600\">{stats.total ?? 0}</div>\r\n                  <p className=\"text-xs sm:text-sm text-gray-600\">Toplam ─░┼şlem</p>\r\n                </div>\r\n                <TrendingUp className=\"h-8 w-8 text-blue-500 opacity-80\" />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card className=\"professional-card micro-interaction\">\r\n            <CardContent className=\"p-3 sm:p-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <div className=\"text-xl sm:text-2xl text-yellow-600\">{stats.pending ?? 0}</div>\r\n                  <p className=\"text-xs sm:text-sm text-gray-600\">Bekleyen</p>\r\n                </div>\r\n                <Clock className=\"h-8 w-8 text-yellow-500 opacity-80\" />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card className=\"professional-card micro-interaction\">\r\n            <CardContent className=\"p-3 sm:p-4\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  <div className=\"text-xl sm:text-2xl text-emerald-600\">\r\n                    Ôé║{(stats.averageAmount ?? 0).toLocaleString()}\r\n                  </div>\r\n                  <p className=\"text-xs sm:text-sm text-gray-600\">Ortalama</p>\r\n                </div>\r\n                <CheckCircle className=\"h-8 w-8 text-emerald-500 opacity-80\" />\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Mobile-Optimized Filters and Table */}\r\n        <Card className=\"border-0 shadow-md\">\r\n          <CardHeader className=\"pb-4\">\r\n            <div className=\"space-y-4\">\r\n              <CardTitle className=\"text-lg sm:text-xl\">Ba─ş─▒┼ş Listesi</CardTitle>\r\n\r\n              {/* Enhanced Filters */}\r\n              <div className=\"space-y-3 sm:space-y-0 sm:flex sm:gap-4\">\r\n                <div className=\"relative flex-1\">\r\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\r\n                  <Input\r\n                    placeholder=\"Ba─ş─▒┼ş├ğ─▒ ad─▒, e-posta veya referans ara...\"\r\n                    value={searchTerm}\r\n                    onChange={(e) => {\r\n                      setSearchTerm(e.target.value);\r\n                    }}\r\n                    className=\"pl-10 min-h-[44px] text-base focus-corporate\"\r\n                    inputMode=\"search\"\r\n                  />\r\n                </div>\r\n\r\n                <div className=\"grid grid-cols-2 gap-2 sm:gap-3 sm:flex sm:w-auto\">\r\n                  <Select value={statusFilter} onValueChange={setStatusFilter}>\r\n                    <SelectTrigger className=\"min-h-[44px] text-base focus-corporate\">\r\n                      <SelectValue placeholder=\"T├╝m Durumlar\" />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"all\">T├╝m Durumlar</SelectItem>\r\n                      <SelectItem value=\"pending\">Beklemede</SelectItem>\r\n                      <SelectItem value=\"approved\">Onayland─▒</SelectItem>\r\n                      <SelectItem value=\"rejected\">Reddedildi</SelectItem>\r\n                      <SelectItem value=\"processing\">─░┼şleniyor</SelectItem>\r\n                      <SelectItem value=\"completed\">Tamamland─▒</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n\r\n                  <Select value={donationTypeFilter} onValueChange={setDonationTypeFilter}>\r\n                    <SelectTrigger className=\"min-h-[44px] text-base focus-corporate\">\r\n                      <SelectValue placeholder=\"T├╝m T├╝rler\" />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"all\">T├╝m T├╝rler</SelectItem>\r\n                      <SelectItem value=\"cash\">Nakdi</SelectItem>\r\n                      <SelectItem value=\"in_kind\">Ayni</SelectItem>\r\n                      <SelectItem value=\"services\">Hizmet</SelectItem>\r\n                      <SelectItem value=\"other\">Di─şer</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n\r\n                  <Select value={paymentMethodFilter} onValueChange={setPaymentMethodFilter}>\r\n                    <SelectTrigger className=\"min-h-[44px] text-base focus-corporate\">\r\n                      <SelectValue placeholder=\"T├╝m ├ûdeme Y├Ântemleri\" />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      <SelectItem value=\"all\">T├╝m ├ûdeme Y├Ântemleri</SelectItem>\r\n                      <SelectItem value=\"bank_transfer\">Banka Havalesi</SelectItem>\r\n                      <SelectItem value=\"credit_card\">Kredi Kart─▒</SelectItem>\r\n                      <SelectItem value=\"cash\">Nakit</SelectItem>\r\n                      <SelectItem value=\"check\">├çek</SelectItem>\r\n                      <SelectItem value=\"online\">Online</SelectItem>\r\n                      <SelectItem value=\"other\">Di─şer</SelectItem>\r\n                    </SelectContent>\r\n                  </Select>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </CardHeader>\r\n\r\n          <CardContent className=\"p-0\">\r\n            {/* Mobile Card View for small screens */}\r\n            <div className=\"block sm:hidden\">\r\n              {donations.length > 0 ? (\r\n                <div className=\"space-y-3 p-4\">\r\n                  {donations.map((donation) => (\r\n                    <Card\r\n                      key={donation.id}\r\n                      className=\"border border-gray-200 hover:shadow-md transition-shadow\"\r\n                    >\r\n                      <CardContent className=\"p-4\">\r\n                        <div className=\"flex justify-between items-start mb-3\">\r\n                          <div className=\"flex-1\">\r\n                            <h3 className=\"font-medium text-gray-900\">{donation.donor_name}</h3>\r\n                            <p className=\"text-sm text-gray-600\">\r\n                              {donation.category ?? donation.donation_type}\r\n                            </p>\r\n                          </div>\r\n                          <div className=\"text-right\">\r\n                            <div className=\"font-semibold text-green-600 text-lg\">\r\n                              Ôé║{donation.amount.toLocaleString()}\r\n                            </div>\r\n                            {getStatusBadge(donation.status)}\r\n                          </div>\r\n                        </div>\r\n\r\n                        <div className=\"flex justify-between items-center text-sm text-gray-500\">\r\n                          <span>{donation.payment_method}</span>\r\n                          <span>{new Date(donation.created_at).toLocaleDateString('tr-TR')}</span>\r\n                        </div>\r\n\r\n                        <div className=\"flex justify-end gap-2 mt-3\">\r\n                          {donation.status === 'pending' && (\r\n                            <>\r\n                              <Button\r\n                                variant=\"ghost\"\r\n                                size=\"sm\"\r\n                                className=\"min-h-[44px] min-w-[44px] p-2 text-green-600 hover:text-green-700\"\r\n                                onClick={() => handleUpdateStatus(donation.id, 'approved')}\r\n                                aria-label=\"Onayla\"\r\n                              >\r\n                                <CheckCircle className=\"w-4 h-4\" />\r\n                              </Button>\r\n                              <Button\r\n                                variant=\"ghost\"\r\n                                size=\"sm\"\r\n                                className=\"min-h-[44px] min-w-[44px] p-2 text-red-600 hover:text-red-700\"\r\n                                onClick={() => handleUpdateStatus(donation.id, 'rejected')}\r\n                                aria-label=\"Reddet\"\r\n                              >\r\n                                <XCircle className=\"w-4 h-4\" />\r\n                              </Button>\r\n                            </>\r\n                          )}\r\n                          <Button\r\n                            variant=\"ghost\"\r\n                            size=\"sm\"\r\n                            className=\"min-h-[44px] min-w-[44px] p-2 text-red-600 hover:text-red-700\"\r\n                            onClick={() => handleDeleteDonation(donation.id)}\r\n                            aria-label=\"Sil\"\r\n                          >\r\n                            <Trash2 className=\"w-4 h-4\" />\r\n                          </Button>\r\n                        </div>\r\n                      </CardContent>\r\n                    </Card>\r\n                  ))}\r\n                </div>\r\n              ) : (\r\n                <div className=\"p-6 text-center\">\r\n                  <Plus className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\r\n                  <p className=\"text-gray-600 mb-2\">Hen├╝z ba─ş─▒┼ş kayd─▒ bulunmuyor</p>\r\n                  <p className=\"text-sm text-gray-400\">\r\n                    Yeni ba─ş─▒┼ş eklemek i├ğin \"Yeni Ba─ş─▒┼ş\" butonunu kullan─▒n\r\n                  </p>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* Desktop Table View */}\r\n            <div className=\"hidden sm:block overflow-x-auto\">\r\n              <Table>\r\n                <TableHeader>\r\n                  <TableRow className=\"bg-gray-50/50\">\r\n                    <TableHead className=\"min-w-[150px] p-3 sm:p-4\">Ba─ş─▒┼ş├ğ─▒</TableHead>\r\n                    <TableHead className=\"min-w-[100px] p-3 sm:p-4\">Miktar</TableHead>\r\n                    <TableHead className=\"min-w-[100px] p-3 sm:p-4\">Tarih</TableHead>\r\n                    <TableHead className=\"min-w-[100px] p-3 sm:p-4\">Durum</TableHead>\r\n                    <TableHead className=\"hidden lg:table-cell min-w-[100px] p-3 sm:p-4\">\r\n                      Y├Ântem\r\n                    </TableHead>\r\n                    <TableHead className=\"hidden lg:table-cell min-w-[100px] p-3 sm:p-4\">\r\n                      T├╝r\r\n                    </TableHead>\r\n                    <TableHead className=\"min-w-[120px] p-3 sm:p-4 text-center\">─░┼şlemler</TableHead>\r\n                  </TableRow>\r\n                </TableHeader>\r\n                <TableBody>\r\n                  {loading ? (\r\n                    Array.from({ length: 5 }).map((_, i) => (\r\n                      <TableRow key={i}>\r\n                        <TableCell className=\"p-3 sm:p-4\">\r\n                          <div className=\"h-4 bg-gray-200 rounded w-32 animate-pulse\" />\r\n                        </TableCell>\r\n                        <TableCell className=\"p-3 sm:p-4\">\r\n                          <div className=\"h-4 bg-gray-200 rounded w-20 animate-pulse\" />\r\n                        </TableCell>\r\n                        <TableCell className=\"p-3 sm:p-4\">\r\n                          <div className=\"h-4 bg-gray-200 rounded w-24 animate-pulse\" />\r\n                        </TableCell>\r\n                        <TableCell className=\"p-3 sm:p-4\">\r\n                          <div className=\"h-6 bg-gray-200 rounded w-20 animate-pulse\" />\r\n                        </TableCell>\r\n                        <TableCell className=\"hidden lg:table-cell p-3 sm:p-4\">\r\n                          <div className=\"h-4 bg-gray-200 rounded w-24 animate-pulse\" />\r\n                        </TableCell>\r\n                        <TableCell className=\"hidden lg:table-cell p-3 sm:p-4\">\r\n                          <div className=\"h-4 bg-gray-200 rounded w-16 animate-pulse\" />\r\n                        </TableCell>\r\n                        <TableCell className=\"p-3 sm:p-4\">\r\n                          <div className=\"flex justify-center gap-2\">\r\n                            <div className=\"w-8 h-8 bg-gray-200 rounded animate-pulse\" />\r\n                            <div className=\"w-8 h-8 bg-gray-200 rounded animate-pulse\" />\r\n                          </div>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))\r\n                  ) : donations.length > 0 ? (\r\n                    donations.map((donation) => (\r\n                      <TableRow key={donation.id} className=\"hover:bg-gray-50/50 transition-colors\">\r\n                        <TableCell className=\"font-medium p-3 sm:p-4\">\r\n                          <div>\r\n                            <div className=\"font-medium\">{donation.donor_name}</div>\r\n                            {donation.donor_email && (\r\n                              <div className=\"text-sm text-gray-500\">{donation.donor_email}</div>\r\n                            )}\r\n                          </div>\r\n                        </TableCell>\r\n                        <TableCell className=\"font-semibold text-green-600 p-3 sm:p-4\">\r\n                          Ôé║{donation.amount.toLocaleString()}\r\n                        </TableCell>\r\n                        <TableCell className=\"text-gray-500 p-3 sm:p-4\">\r\n                          {new Date(donation.created_at).toLocaleDateString('tr-TR')}\r\n                        </TableCell>\r\n                        <TableCell className=\"p-3 sm:p-4\">\r\n                          {getStatusBadge(donation.status)}\r\n                        </TableCell>\r\n                        <TableCell className=\"hidden lg:table-cell text-gray-600 p-3 sm:p-4\">\r\n                          {donation.payment_method}\r\n                        </TableCell>\r\n                        <TableCell className=\"hidden lg:table-cell text-gray-600 p-3 sm:p-4\">\r\n                          {donation.donation_type}\r\n                        </TableCell>\r\n                        <TableCell className=\"text-center p-3 sm:p-4\">\r\n                          <div className=\"flex items-center justify-center gap-2\">\r\n                            {donation.status === 'pending' && (\r\n                              <>\r\n                                <Button\r\n                                  variant=\"ghost\"\r\n                                  size=\"sm\"\r\n                                  className=\"h-8 w-8 p-0 text-green-600 hover:text-green-700 hover:bg-green-50\"\r\n                                  onClick={() => handleUpdateStatus(donation.id, 'approved')}\r\n                                  aria-label=\"Onayla\"\r\n                                >\r\n                                  <CheckCircle className=\"w-4 h-4\" />\r\n                                </Button>\r\n                                <Button\r\n                                  variant=\"ghost\"\r\n                                  size=\"sm\"\r\n                                  className=\"h-8 w-8 p-0 text-red-600 hover:text-red-700 hover:bg-red-50\"\r\n                                  onClick={() => handleUpdateStatus(donation.id, 'rejected')}\r\n                                  aria-label=\"Reddet\"\r\n                                >\r\n                                  <XCircle className=\"w-4 h-4\" />\r\n                                </Button>\r\n                              </>\r\n                            )}\r\n                            <Button\r\n                              variant=\"ghost\"\r\n                              size=\"sm\"\r\n                              className=\"h-8 w-8 p-0 text-blue-600 hover:text-blue-700 hover:bg-blue-50\"\r\n                              aria-label={`${donation.donor_name} ba─ş─▒┼ş─▒n─▒ g├Âr├╝nt├╝le`}\r\n                            >\r\n                              <Eye className=\"w-4 h-4\" />\r\n                            </Button>\r\n                            <Button\r\n                              variant=\"ghost\"\r\n                              size=\"sm\"\r\n                              className=\"h-8 w-8 p-0 text-red-600 hover:text-red-700 hover:bg-red-50\"\r\n                              onClick={() => handleDeleteDonation(donation.id)}\r\n                              aria-label=\"Sil\"\r\n                            >\r\n                              <Trash2 className=\"w-4 h-4\" />\r\n                            </Button>\r\n                          </div>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))\r\n                  ) : (\r\n                    <TableRow>\r\n                      <TableCell colSpan={7} className=\"text-center py-8 text-gray-500\">\r\n                        <Plus className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\r\n                        <p className=\"text-gray-600 mb-2\">Hen├╝z ba─ş─▒┼ş kayd─▒ bulunmuyor</p>\r\n                        <p className=\"text-sm text-gray-400\">\r\n                          Yeni ba─ş─▒┼ş eklemek i├ğin \"Yeni Ba─ş─▒┼ş\" butonunu kullan─▒n\r\n                        </p>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  )}\r\n                </TableBody>\r\n              </Table>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </PageLayout>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\EventsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'viewType' is assigned a value but never used.","line":38,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":18},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'viewType' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":38,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":18},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setViewType' is assigned a value but never used.","line":38,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":31},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'setViewType' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":38,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":38,"endColumn":31},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":87,"column":12,"nodeType":"MemberExpression","endLine":87,"endColumn":24},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":97,"column":12,"nodeType":"MemberExpression","endLine":97,"endColumn":24}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview EventsPage Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { Calendar, Clock, Filter, MapPin, Plus, Users } from 'lucide-react';\r\nimport { motion } from 'motion/react';\r\nimport { useState } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { Badge } from '../ui/badge';\r\nimport { Button } from '../ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { DesktopActionButtons, DesktopStatsCard } from '../ui/desktop-table';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\n\r\ninterface Event {\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n  date: string;\r\n  time: string;\r\n  location: string;\r\n  attendees: number;\r\n  maxAttendees?: number;\r\n  type: 'meeting' | 'charity' | 'education' | 'social';\r\n  status: 'upcoming' | 'ongoing' | 'completed';\r\n}\r\n\r\n/**\r\n * EventsPage function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function EventsPage() {\r\n  const [viewType, setViewType] = useState('list');\r\n  const [filterType, setFilterType] = useState('all');\r\n\r\n  const events: Event[] = [\r\n    {\r\n      id: 1,\r\n      title: 'Ayl─▒k Y├Ânetim Toplant─▒s─▒',\r\n      description: 'Kas─▒m ay─▒ y├Ânetim kurulu toplant─▒s─▒',\r\n      date: '2024-11-15',\r\n      time: '14:00',\r\n      location: 'Dernek Merkezi',\r\n      attendees: 12,\r\n      maxAttendees: 15,\r\n      type: 'meeting',\r\n      status: 'upcoming',\r\n    },\r\n    {\r\n      id: 2,\r\n      title: 'Hay─▒r Bazaar─▒',\r\n      description: 'Yard─▒m toplama ama├ğl─▒ hay─▒r bazaar─▒',\r\n      date: '2024-11-20',\r\n      time: '10:00',\r\n      location: 'Merkez Park',\r\n      attendees: 45,\r\n      maxAttendees: 100,\r\n      type: 'charity',\r\n      status: 'upcoming',\r\n    },\r\n    {\r\n      id: 3,\r\n      title: 'E─şitim Semineri',\r\n      description: 'Gen├ğler i├ğin ki┼şisel geli┼şim semineri',\r\n      date: '2024-11-25',\r\n      time: '19:00',\r\n      location: 'Konferans Salonu',\r\n      attendees: 28,\r\n      maxAttendees: 50,\r\n      type: 'education',\r\n      status: 'upcoming',\r\n    },\r\n  ];\r\n\r\n  const getEventTypeColor = (type: Event['type']) => {\r\n    const colors = {\r\n      meeting: 'bg-blue-100 text-blue-700',\r\n      charity: 'bg-green-100 text-green-700',\r\n      education: 'bg-purple-100 text-purple-700',\r\n      social: 'bg-amber-100 text-amber-700',\r\n    };\r\n    return colors[type];\r\n  };\r\n\r\n  const getEventTypeLabel = (type: Event['type']) => {\r\n    const labels = {\r\n      meeting: 'Toplant─▒',\r\n      charity: 'Hay─▒r ─░┼şi',\r\n      education: 'E─şitim',\r\n      social: 'Sosyal',\r\n    };\r\n    return labels[type];\r\n  };\r\n\r\n  const handleNewEvent = () => {\r\n    toast.success('Yeni etkinlik ekleme formu a├ğ─▒l─▒yor...');\r\n  };\r\n\r\n  const handleViewEvent = (eventId: number) => {\r\n    toast.success(`Etkinlik detaylar─▒ a├ğ─▒l─▒yor: ${eventId}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-8 space-y-6 bg-slate-50/50 min-h-full\">\r\n      {/* Desktop Header */}\r\n      <div className=\"flex flex-col space-y-4\">\r\n        <div className=\"space-y-2\">\r\n          <h1 className=\"text-3xl font-bold text-slate-800 flex items-center gap-3\">\r\n            <div className=\"w-10 h-10 bg-gradient-to-br from-slate-600 to-gray-700 rounded-xl flex items-center justify-center\">\r\n              <Calendar className=\"w-6 h-6 text-white\" />\r\n            </div>\r\n            Etkinlik Takvimi\r\n          </h1>\r\n          <p className=\"text-slate-600\">Dernek etkinliklerini planlay─▒n ve takip edin</p>\r\n        </div>\r\n\r\n        {/* Desktop Actions and Filters */}\r\n        <div className=\"flex items-center justify-between gap-4\">\r\n          <Select value={filterType} onValueChange={setFilterType}>\r\n            <SelectTrigger className=\"w-48\">\r\n              <Filter className=\"w-4 h-4 mr-2\" />\r\n              <SelectValue />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"all\">T├╝m Etkinlikler</SelectItem>\r\n              <SelectItem value=\"meeting\">Toplant─▒lar</SelectItem>\r\n              <SelectItem value=\"charity\">Hay─▒r ─░┼şleri</SelectItem>\r\n              <SelectItem value=\"education\">E─şitimler</SelectItem>\r\n            </SelectContent>\r\n          </Select>\r\n\r\n          <DesktopActionButtons\r\n            primaryAction={{\r\n              label: 'Yeni Etkinlik Ekle',\r\n              icon: <Plus className=\"w-4 h-4\" />,\r\n              onClick: handleNewEvent,\r\n            }}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      {/* Stats Summary */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n        <DesktopStatsCard\r\n          title=\"Toplam Etkinlik\"\r\n          value={events.length}\r\n          subtitle=\"Bu ay toplam\"\r\n          icon={<Calendar className=\"w-4 h-4\" />}\r\n          color=\"blue\"\r\n        />\r\n\r\n        <DesktopStatsCard\r\n          title=\"Yakla┼şan\"\r\n          value={events.filter((e) => e.status === 'upcoming').length}\r\n          subtitle=\"Bu hafta\"\r\n          icon={<Clock className=\"w-4 h-4\" />}\r\n          color=\"yellow\"\r\n        />\r\n\r\n        <DesktopStatsCard\r\n          title=\"Toplam Kat─▒l─▒mc─▒\"\r\n          value={events.reduce((sum, e) => sum + e.attendees, 0)}\r\n          subtitle=\"T├╝m etkinlikler\"\r\n          icon={<Users className=\"w-4 h-4\" />}\r\n          color=\"green\"\r\n        />\r\n\r\n        <DesktopStatsCard\r\n          title=\"Doluluk Oran─▒\"\r\n          value={`%${\r\n            Math.round(\r\n              (events.reduce((sum, e) => sum + e.attendees, 0) /\r\n                events.reduce((sum, e) => sum + (e.maxAttendees ?? 0), 1)) *\r\n                100,\r\n            ) || 0\r\n          }`}\r\n          subtitle=\"Ortalama\"\r\n          icon={<MapPin className=\"w-4 h-4\" />}\r\n          color=\"purple\"\r\n        />\r\n      </div>\r\n\r\n      {/* Desktop Event Cards */}\r\n      <div className=\"grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6\">\r\n        {events.map((event, index) => (\r\n          <motion.div\r\n            key={event.id}\r\n            initial={{ opacity: 0, y: 20 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            transition={{ delay: index * 0.1 }}\r\n          >\r\n            <Card\r\n              className=\"hover:shadow-lg transition-all duration-200 cursor-pointer border-0 shadow-md\"\r\n              onClick={() => {\r\n                handleViewEvent(event.id);\r\n              }}\r\n            >\r\n              <CardHeader className=\"pb-3\">\r\n                <div className=\"flex items-start justify-between gap-3\">\r\n                  <CardTitle className=\"text-lg sm:text-xl flex-1 pr-2\">{event.title}</CardTitle>\r\n                  <Badge className={`${getEventTypeColor(event.type)} flex-shrink-0`}>\r\n                    {getEventTypeLabel(event.type)}\r\n                  </Badge>\r\n                </div>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4\">\r\n                <p className=\"text-sm text-slate-600 leading-relaxed\">{event.description}</p>\r\n\r\n                {/* Mobile-Optimized Event Details */}\r\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-3 text-sm\">\r\n                  <div className=\"flex items-center gap-3 text-slate-600\">\r\n                    <div className=\"w-8 h-8 bg-blue-100 rounded-full flex items-center justify-center flex-shrink-0\">\r\n                      <Calendar className=\"w-4 h-4 text-blue-600\" />\r\n                    </div>\r\n                    <div>\r\n                      <p className=\"font-medium\">\r\n                        {new Date(event.date).toLocaleDateString('tr-TR')}\r\n                      </p>\r\n                      <p className=\"text-xs text-slate-500\">Tarih</p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"flex items-center gap-3 text-slate-600\">\r\n                    <div className=\"w-8 h-8 bg-green-100 rounded-full flex items-center justify-center flex-shrink-0\">\r\n                      <Clock className=\"w-4 h-4 text-green-600\" />\r\n                    </div>\r\n                    <div>\r\n                      <p className=\"font-medium\">{event.time}</p>\r\n                      <p className=\"text-xs text-slate-500\">Saat</p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"flex items-center gap-3 text-slate-600 sm:col-span-2\">\r\n                    <div className=\"w-8 h-8 bg-purple-100 rounded-full flex items-center justify-center flex-shrink-0\">\r\n                      <MapPin className=\"w-4 h-4 text-purple-600\" />\r\n                    </div>\r\n                    <div>\r\n                      <p className=\"font-medium\">{event.location}</p>\r\n                      <p className=\"text-xs text-slate-500\">Konum</p>\r\n                    </div>\r\n                  </div>\r\n\r\n                  <div className=\"flex items-center gap-3 text-slate-600 sm:col-span-2\">\r\n                    <div className=\"w-8 h-8 bg-orange-100 rounded-full flex items-center justify-center flex-shrink-0\">\r\n                      <Users className=\"w-4 h-4 text-orange-600\" />\r\n                    </div>\r\n                    <div className=\"flex-1\">\r\n                      <p className=\"font-medium\">\r\n                        {event.attendees} kat─▒l─▒mc─▒\r\n                        {event.maxAttendees && (\r\n                          <span className=\"text-slate-500\"> / {event.maxAttendees} maksimum</span>\r\n                        )}\r\n                      </p>\r\n                      <p className=\"text-xs text-slate-500\">Kat─▒l─▒m</p>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                {/* Mobile-Optimized Progress Bar */}\r\n                {event.maxAttendees && (\r\n                  <div className=\"space-y-2\">\r\n                    <div className=\"flex justify-between text-xs text-slate-600\">\r\n                      <span>Doluluk Oran─▒</span>\r\n                      <span>{Math.round((event.attendees / event.maxAttendees) * 100)}%</span>\r\n                    </div>\r\n                    <div className=\"w-full bg-slate-200 rounded-full h-2\">\r\n                      <div\r\n                        className=\"bg-gradient-to-r from-blue-500 to-blue-600 h-2 rounded-full transition-all duration-300\"\r\n                        style={{\r\n                          width: `${Math.min((event.attendees / event.maxAttendees) * 100, 100)}%`,\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                )}\r\n\r\n                {/* Mobile Action Button */}\r\n                <Button\r\n                  variant=\"outline\"\r\n                  className=\"w-full min-h-[44px] mt-4 border-blue-200 hover:border-blue-300 hover:bg-blue-50\"\r\n                  onClick={(e) => {\r\n                    e.stopPropagation();\r\n                    handleViewEvent(event.id);\r\n                  }}\r\n                >\r\n                  Detaylar─▒ G├Âr├╝nt├╝le\r\n                </Button>\r\n              </CardContent>\r\n            </Card>\r\n          </motion.div>\r\n        ))}\r\n      </div>\r\n\r\n      <motion.div\r\n        initial={{ opacity: 0, y: 20 }}\r\n        animate={{ opacity: 1, y: 0 }}\r\n        className=\"text-center py-12\"\r\n      >\r\n        <div className=\"w-16 h-16 bg-gradient-to-br from-slate-600 to-gray-700 rounded-2xl flex items-center justify-center mx-auto shadow-lg mb-4\">\r\n          <span className=\"text-white text-2xl\">­şôà</span>\r\n        </div>\r\n        <h2 className=\"text-xl font-semibold text-slate-800 mb-2\">Etkinlik Y├Ânetimi</h2>\r\n        <p className=\"text-slate-600 mb-4\">\r\n          Geli┼şmi┼ş takvim ├Âzellikleri yak─▒nda kullan─▒labilir olacak.\r\n        </p>\r\n        <Badge variant=\"secondary\">Geli┼ştiriliyor</Badge>\r\n      </motion.div>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\FinanceIncomePage.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2954,2957],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2954,2957],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??=`) instead of an assignment expression, as it is simpler to read.","line":100,"column":7,"nodeType":"IfStatement","messageId":"preferNullishOverAssignment","endLine":107,"endColumn":8,"suggestions":[{"messageId":"suggestNullish","data":{"equals":"="},"fix":{"range":[3057,3236],"text":"acc[key] ??= {\r\n          category: transaction.category,\r\n          type: transaction.type,\r\n          total: 0,\r\n          count: 0,\r\n        };"},"desc":"Fix to nullish coalescing operator (`??=`)."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":100,"column":12,"nodeType":"MemberExpression","endLine":100,"endColumn":20},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":101,"column":9,"nodeType":"MemberExpression","endLine":101,"endColumn":17},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":109,"column":9,"nodeType":"MemberExpression","endLine":109,"endColumn":17},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":110,"column":9,"nodeType":"MemberExpression","endLine":110,"endColumn":17},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":149,"column":12,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":149,"endColumn":32},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":149,"column":12,"nodeType":"MemberExpression","endLine":149,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview FinanceIncomePage Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport {\r\n  Banknote,\r\n  BarChart3,\r\n  Calendar,\r\n  CreditCard,\r\n  Plus,\r\n  Receipt,\r\n  TrendingDown,\r\n  TrendingUp,\r\n  Wallet,\r\n} from 'lucide-react';\r\nimport { motion } from 'motion/react';\r\nimport { useMemo, useState } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { useIsMobile } from '../../hooks/useTouchDevice';\r\nimport { MobileInfoCard, ResponsiveCardGrid } from '../ResponsiveCard';\r\nimport { Badge } from '../ui/badge';\r\nimport { Button } from '../ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Progress } from '../ui/progress';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\n\r\ninterface Transaction {\r\n  id: number;\r\n  type: 'income' | 'expense';\r\n  category: string;\r\n  description: string;\r\n  amount: number;\r\n  date: string;\r\n  paymentMethod: 'cash' | 'bank' | 'card';\r\n  status: 'completed' | 'pending' | 'cancelled';\r\n}\r\n\r\ninterface MonthlyData {\r\n  month: string;\r\n  income: number;\r\n  expense: number;\r\n  balance: number;\r\n}\r\n\r\n/**\r\n * FinanceIncomePage function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function FinanceIncomePage() {\r\n  const isMobile = useIsMobile();\r\n  const [selectedPeriod, setSelectedPeriod] = useState('thisMonth');\r\n  const [selectedCategory, setSelectedCategory] = useState('all');\r\n\r\n  // Mock data kald─▒r─▒ld─▒ - ger├ğek veriler API'den gelecek\r\n  const transactions: Transaction[] = useMemo(() => [], []);\r\n\r\n  const monthlyData: MonthlyData[] = useMemo(\r\n    () => [\r\n      // Mock data kald─▒r─▒ld─▒ - ger├ğek veriler API'den gelecek\r\n      { month: 'Temmuz', income: 58000, expense: 42000, balance: 16000 },\r\n      { month: 'A─şustos', income: 49000, expense: 45000, balance: 4000 },\r\n      { month: 'Eyl├╝l', income: 61000, expense: 39000, balance: 22000 },\r\n      { month: 'Ekim', income: 63800, expense: 49000, balance: 14800 },\r\n    ],\r\n    [],\r\n  );\r\n\r\n  // Calculate current period stats\r\n  const currentStats = useMemo(() => {\r\n    const totalIncome = transactions\r\n      .filter((t) => t.type === 'income' && t.status === 'completed')\r\n      .reduce((sum, t) => sum + t.amount, 0);\r\n\r\n    const totalExpense = transactions\r\n      .filter((t) => t.type === 'expense' && t.status === 'completed')\r\n      .reduce((sum, t) => sum + t.amount, 0);\r\n\r\n    const balance = totalIncome - totalExpense;\r\n    const pendingIncome = transactions\r\n      .filter((t) => t.type === 'income' && t.status === 'pending')\r\n      .reduce((sum, t) => sum + t.amount, 0);\r\n\r\n    return {\r\n      totalIncome,\r\n      totalExpense,\r\n      balance,\r\n      pendingIncome,\r\n    };\r\n  }, [transactions]);\r\n\r\n  // Category breakdown\r\n  const categoryBreakdown = useMemo(() => {\r\n    const categories = transactions.reduce<Record<string, any>>((acc, transaction) => {\r\n      const key = `${transaction.type}_${transaction.category}`;\r\n      if (!acc[key]) {\r\n        acc[key] = {\r\n          category: transaction.category,\r\n          type: transaction.type,\r\n          total: 0,\r\n          count: 0,\r\n        };\r\n      }\r\n      if (transaction.status === 'completed') {\r\n        acc[key].total += transaction.amount;\r\n        acc[key].count += 1;\r\n      }\r\n      return acc;\r\n    }, {});\r\n\r\n    return Object.values(categories);\r\n  }, [transactions]);\r\n\r\n  const incomeCategories = categoryBreakdown.filter((c) => c.type === 'income');\r\n  const expenseCategories = categoryBreakdown.filter((c) => c.type === 'expense');\r\n\r\n  const handleNewTransaction = () => {\r\n    toast.success('Yeni i┼şlem ekleme formu a├ğ─▒l─▒yor...');\r\n  };\r\n\r\n  const handleExportReport = () => {\r\n    toast.success('Mali rapor Excel format─▒nda d─▒┼şa aktar─▒l─▒yor...');\r\n  };\r\n\r\n  const getPaymentMethodIcon = (method: Transaction['paymentMethod']) => {\r\n    switch (method) {\r\n      case 'cash':\r\n        return <Banknote className=\"w-4 h-4\" />;\r\n      case 'bank':\r\n        return <Receipt className=\"w-4 h-4\" />;\r\n      case 'card':\r\n        return <CreditCard className=\"w-4 h-4\" />;\r\n      default:\r\n        return <Wallet className=\"w-4 h-4\" />;\r\n    }\r\n  };\r\n\r\n  const getStatusBadge = (status: Transaction['status']) => {\r\n    const statusConfig = {\r\n      completed: { label: 'Tamamland─▒', variant: 'default' as const },\r\n      pending: { label: 'Beklemede', variant: 'secondary' as const },\r\n      cancelled: { label: '─░ptal', variant: 'destructive' as const },\r\n    };\r\n\r\n    return statusConfig[status] ?? statusConfig.completed;\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-3 sm:p-6 lg:p-8 space-y-6 lg:space-y-8 bg-slate-50/50 min-h-full safe-area\">\r\n      {/* Header */}\r\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\r\n        <div className=\"space-y-1 sm:space-y-2\">\r\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-slate-800 flex items-center gap-3\">\r\n            <div className=\"w-8 h-8 sm:w-10 sm:h-10 bg-gradient-to-br from-emerald-600 to-teal-700 rounded-xl flex items-center justify-center\">\r\n              <Wallet className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\r\n            </div>\r\n            Gelir-Gider Y├Ânetimi\r\n          </h1>\r\n          <p className=\"text-sm sm:text-base text-slate-600\">\r\n            Mali durumu takip edin ve raporlay─▒n\r\n          </p>\r\n        </div>\r\n\r\n        <div className=\"flex items-center gap-2\">\r\n          <Select value={selectedPeriod} onValueChange={setSelectedPeriod}>\r\n            <SelectTrigger className=\"w-32 sm:w-36\">\r\n              <SelectValue />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"thisMonth\">Bu Ay</SelectItem>\r\n              <SelectItem value=\"lastMonth\">Ge├ğen Ay</SelectItem>\r\n              <SelectItem value=\"thisYear\">Bu Y─▒l</SelectItem>\r\n              <SelectItem value=\"custom\">├ûzel Tarih</SelectItem>\r\n            </SelectContent>\r\n          </Select>\r\n          <Button\r\n            onClick={handleExportReport}\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            className=\"hidden sm:flex\"\r\n          >\r\n            <BarChart3 className=\"w-4 h-4 mr-2\" />\r\n            Rapor\r\n          </Button>\r\n          <Button onClick={handleNewTransaction} size=\"sm\">\r\n            <Plus className=\"w-4 h-4 mr-2\" />\r\n            {isMobile ? 'Yeni' : 'Yeni ─░┼şlem'}\r\n          </Button>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Financial Summary Cards */}\r\n      <ResponsiveCardGrid cols={{ default: 2, sm: 4 }} gap=\"sm\">\r\n        <MobileInfoCard\r\n          icon={<TrendingUp className=\"w-5 h-5\" />}\r\n          title=\"Toplam Gelir\"\r\n          value={`Ôé║${currentStats.totalIncome.toLocaleString()}`}\r\n          color=\"text-green-600\"\r\n        />\r\n        <MobileInfoCard\r\n          icon={<TrendingDown className=\"w-5 h-5\" />}\r\n          title=\"Toplam Gider\"\r\n          value={`Ôé║${currentStats.totalExpense.toLocaleString()}`}\r\n          color=\"text-red-600\"\r\n        />\r\n        <MobileInfoCard\r\n          icon={<Wallet className=\"w-5 h-5\" />}\r\n          title=\"Net Bakiye\"\r\n          value={`Ôé║${currentStats.balance.toLocaleString()}`}\r\n          color={currentStats.balance >= 0 ? 'text-green-600' : 'text-red-600'}\r\n        />\r\n        <MobileInfoCard\r\n          icon={<Calendar className=\"w-5 h-5\" />}\r\n          title=\"Bekleyen Gelir\"\r\n          value={`Ôé║${currentStats.pendingIncome.toLocaleString()}`}\r\n          color=\"text-amber-600\"\r\n        />\r\n      </ResponsiveCardGrid>\r\n\r\n      {/* Charts and Analysis */}\r\n      <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-6 lg:gap-8\">\r\n        {/* Income Categories */}\r\n        <Card>\r\n          <CardHeader className=\"pb-4\">\r\n            <CardTitle className=\"text-lg sm:text-xl flex items-center gap-2\">\r\n              <TrendingUp className=\"w-5 h-5 text-green-600\" />\r\n              Gelir Kategorileri\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            {incomeCategories.map((category, index) => {\r\n              const percentage = Math.round((category.total / currentStats.totalIncome) * 100);\r\n              return (\r\n                <motion.div\r\n                  key={category.category}\r\n                  initial={{ opacity: 0, x: -20 }}\r\n                  animate={{ opacity: 1, x: 0 }}\r\n                  transition={{ delay: index * 0.1 }}\r\n                  className=\"space-y-2\"\r\n                >\r\n                  <div className=\"flex items-center justify-between text-sm\">\r\n                    <span className=\"font-medium text-slate-700\">{category.category}</span>\r\n                    <span className=\"font-semibold text-green-600\">\r\n                      Ôé║{category.total.toLocaleString()}\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"flex items-center gap-3\">\r\n                    <Progress value={percentage} className=\"flex-1 h-2\" />\r\n                    <span className=\"text-xs text-slate-500 w-10 text-right\">%{percentage}</span>\r\n                  </div>\r\n                </motion.div>\r\n              );\r\n            })}\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Expense Categories */}\r\n        <Card>\r\n          <CardHeader className=\"pb-4\">\r\n            <CardTitle className=\"text-lg sm:text-xl flex items-center gap-2\">\r\n              <TrendingDown className=\"w-5 h-5 text-red-600\" />\r\n              Gider Kategorileri\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent className=\"space-y-4\">\r\n            {expenseCategories.map((category, index) => {\r\n              const percentage = Math.round((category.total / currentStats.totalExpense) * 100);\r\n              return (\r\n                <motion.div\r\n                  key={category.category}\r\n                  initial={{ opacity: 0, x: 20 }}\r\n                  animate={{ opacity: 1, x: 0 }}\r\n                  transition={{ delay: index * 0.1 }}\r\n                  className=\"space-y-2\"\r\n                >\r\n                  <div className=\"flex items-center justify-between text-sm\">\r\n                    <span className=\"font-medium text-slate-700\">{category.category}</span>\r\n                    <span className=\"font-semibold text-red-600\">\r\n                      Ôé║{category.total.toLocaleString()}\r\n                    </span>\r\n                  </div>\r\n                  <div className=\"flex items-center gap-3\">\r\n                    <Progress value={percentage} className=\"flex-1 h-2 [&>div]:bg-red-500\" />\r\n                    <span className=\"text-xs text-slate-500 w-10 text-right\">%{percentage}</span>\r\n                  </div>\r\n                </motion.div>\r\n              );\r\n            })}\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Monthly Trend */}\r\n      <Card>\r\n        <CardHeader className=\"pb-4\">\r\n          <CardTitle className=\"text-lg sm:text-xl flex items-center gap-2\">\r\n            <BarChart3 className=\"w-5 h-5\" />\r\n            Ayl─▒k Trend\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"p-4 sm:p-6\">\r\n          <div className=\"space-y-4\">\r\n            {monthlyData.map((month, index) => (\r\n              <motion.div\r\n                key={month.month}\r\n                initial={{ opacity: 0, y: 20 }}\r\n                animate={{ opacity: 1, y: 0 }}\r\n                transition={{ delay: index * 0.1 }}\r\n                className=\"flex items-center justify-between p-3 bg-slate-50 rounded-lg\"\r\n              >\r\n                <div className=\"flex-1\">\r\n                  <div className=\"font-medium text-slate-900 mb-1\">{month.month}</div>\r\n                  <div className=\"flex items-center gap-4 text-sm\">\r\n                    <span className=\"text-green-600\">Gelir: Ôé║{month.income.toLocaleString()}</span>\r\n                    <span className=\"text-red-600\">Gider: Ôé║{month.expense.toLocaleString()}</span>\r\n                  </div>\r\n                </div>\r\n                <div\r\n                  className={`font-semibold ${\r\n                    month.balance >= 0 ? 'text-green-600' : 'text-red-600'\r\n                  }`}\r\n                >\r\n                  {month.balance >= 0 ? '+' : ''}Ôé║{month.balance.toLocaleString()}\r\n                </div>\r\n              </motion.div>\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Recent Transactions */}\r\n      <Card>\r\n        <CardHeader className=\"pb-4\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <CardTitle className=\"text-lg sm:text-xl\">Son ─░┼şlemler</CardTitle>\r\n            <Select value={selectedCategory} onValueChange={setSelectedCategory}>\r\n              <SelectTrigger className=\"w-32 sm:w-36\">\r\n                <SelectValue placeholder=\"Kategori\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"all\">T├╝m├╝</SelectItem>\r\n                <SelectItem value=\"income\">Gelir</SelectItem>\r\n                <SelectItem value=\"expense\">Gider</SelectItem>\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent className=\"p-0 sm:p-6 sm:pt-0\">\r\n          <div className=\"space-y-3 p-4 sm:p-0\">\r\n            {transactions.slice(0, 8).map((transaction, index) => {\r\n              const statusConfig = getStatusBadge(transaction.status);\r\n              return (\r\n                <motion.div\r\n                  key={transaction.id}\r\n                  initial={{ opacity: 0, x: -20 }}\r\n                  animate={{ opacity: 1, x: 0 }}\r\n                  transition={{ delay: index * 0.05 }}\r\n                  className=\"flex items-center justify-between p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors\"\r\n                >\r\n                  <div className=\"flex items-center gap-3\">\r\n                    <div\r\n                      className={`w-10 h-10 rounded-lg flex items-center justify-center ${\r\n                        transaction.type === 'income'\r\n                          ? 'bg-green-100 text-green-600'\r\n                          : 'bg-red-100 text-red-600'\r\n                      }`}\r\n                    >\r\n                      {getPaymentMethodIcon(transaction.paymentMethod)}\r\n                    </div>\r\n                    <div>\r\n                      <div className=\"font-medium text-slate-900\">{transaction.description}</div>\r\n                      <div className=\"text-sm text-slate-500 flex items-center gap-2\">\r\n                        <span>{transaction.category}</span>\r\n                        <span>ÔÇó</span>\r\n                        <span>{new Date(transaction.date).toLocaleDateString('tr-TR')}</span>\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"text-right\">\r\n                    <div\r\n                      className={`font-semibold ${\r\n                        transaction.type === 'income' ? 'text-green-600' : 'text-red-600'\r\n                      }`}\r\n                    >\r\n                      {transaction.type === 'income' ? '+' : '-'}Ôé║\r\n                      {transaction.amount.toLocaleString()}\r\n                    </div>\r\n                    <Badge variant={statusConfig.variant} className=\"text-xs mt-1\">\r\n                      {statusConfig.label}\r\n                    </Badge>\r\n                  </div>\r\n                </motion.div>\r\n              );\r\n            })}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\HospitalReferralPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setReferrals' is assigned a value but never used.","line":176,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":176,"endColumn":33},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'setReferrals' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":176,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":176,"endColumn":33},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":190,"column":20,"nodeType":"MemberExpression","endLine":190,"endColumn":40},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":201,"column":20,"nodeType":"MemberExpression","endLine":201,"endColumn":42},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":213,"column":12,"nodeType":"MemberExpression","endLine":213,"endColumn":25}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview HospitalReferralPage Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { useState } from 'react';\r\nimport { PageLayout } from '../PageLayout';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Button } from '../ui/button';\r\nimport { Input } from '../ui/input';\r\nimport { Badge } from '../ui/badge';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../ui/table';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\nimport {\r\n  Stethoscope,\r\n  Search,\r\n  Plus,\r\n  Eye,\r\n  FileText,\r\n  Calendar,\r\n  Clock,\r\n  CheckCircle,\r\n  AlertCircle,\r\n  XCircle,\r\n  Activity,\r\n  Hospital,\r\n  Phone,\r\n  Download,\r\n} from 'lucide-react';\r\n\r\ninterface HospitalReferral {\r\n  id: number;\r\n  referralNumber: string;\r\n  patientName: string;\r\n  patientId: string;\r\n  patientAge: number;\r\n  patientGender: 'male' | 'female';\r\n  patientPhone: string;\r\n  medicalCondition: string;\r\n  urgencyLevel: 'routine' | 'urgent' | 'emergency';\r\n  referralDate: string;\r\n  appointmentDate?: string;\r\n  hospital: string;\r\n  department: string;\r\n  doctorName?: string;\r\n  status: 'pending' | 'scheduled' | 'completed' | 'cancelled' | 'missed';\r\n  referredBy: string;\r\n  notes?: string;\r\n  estimatedCost?: number;\r\n  actualCost?: number;\r\n  transportNeeded: boolean;\r\n  followUpRequired: boolean;\r\n}\r\n\r\nconst mockReferrals: HospitalReferral[] = [\r\n  {\r\n    id: 1,\r\n    referralNumber: 'HSK-2024-001',\r\n    patientName: 'Ay┼şe Y─▒lmaz',\r\n    patientId: '12345678901',\r\n    patientAge: 45,\r\n    patientGender: 'female',\r\n    patientPhone: '0555 123 45 67',\r\n    medicalCondition: 'Kalp rahats─▒zl─▒─ş─▒ kontrol muayenesi',\r\n    urgencyLevel: 'urgent',\r\n    referralDate: '2024-01-15',\r\n    appointmentDate: '2024-01-18 14:30',\r\n    hospital: '┼Şi┼şli Etfal Hastanesi',\r\n    department: 'Kardiyoloji',\r\n    doctorName: 'Dr. Mehmet Kardiyolog',\r\n    status: 'scheduled',\r\n    referredBy: 'Dr. Ali Aile Hekimi',\r\n    notes: 'EKG ve kan tahlilleri ile birlikte',\r\n    estimatedCost: 350,\r\n    transportNeeded: true,\r\n    followUpRequired: true,\r\n  },\r\n  {\r\n    id: 2,\r\n    referralNumber: 'HSK-2024-002',\r\n    patientName: 'Mehmet Demir',\r\n    patientId: '98765432109',\r\n    patientAge: 38,\r\n    patientGender: 'male',\r\n    patientPhone: '0532 987 65 43',\r\n    medicalCondition: 'Diz a─şr─▒s─▒ ve hareket k─▒s─▒tl─▒l─▒─ş─▒',\r\n    urgencyLevel: 'routine',\r\n    referralDate: '2024-01-14',\r\n    appointmentDate: '2024-01-16 10:00',\r\n    hospital: 'Fatih Sultan Mehmet Hastanesi',\r\n    department: 'Ortopedi',\r\n    doctorName: 'Dr. Fatma Ortopedist',\r\n    status: 'completed',\r\n    referredBy: 'Zeynep Fizyoterapist',\r\n    notes: 'Fizik tedavi sonras─▒ kontrol',\r\n    estimatedCost: 280,\r\n    actualCost: 280,\r\n    transportNeeded: false,\r\n    followUpRequired: true,\r\n  },\r\n  {\r\n    id: 3,\r\n    referralNumber: 'HSK-2024-003',\r\n    patientName: 'Fatma Kaya',\r\n    patientId: '11223344556',\r\n    patientAge: 67,\r\n    patientGender: 'female',\r\n    patientPhone: '0545 123 98 76',\r\n    medicalCondition: 'G├Âz katarakt ameliyat─▒',\r\n    urgencyLevel: 'urgent',\r\n    referralDate: '2024-01-13',\r\n    appointmentDate: '2024-01-20 09:00',\r\n    hospital: 'Beyo─şlu G├Âz Hastanesi',\r\n    department: 'G├Âz Hastal─▒klar─▒',\r\n    doctorName: 'Dr. Hasan G├Âz Doktoru',\r\n    status: 'scheduled',\r\n    referredBy: 'Dr. Zeynep Oftalmolog',\r\n    notes: 'Sol g├Âz katarakt ameliyat─▒ planland─▒',\r\n    estimatedCost: 2500,\r\n    transportNeeded: true,\r\n    followUpRequired: true,\r\n  },\r\n  {\r\n    id: 4,\r\n    referralNumber: 'HSK-2024-004',\r\n    patientName: 'Ali ├ûzkan',\r\n    patientId: '55667788990',\r\n    patientAge: 22,\r\n    patientGender: 'male',\r\n    patientPhone: '0533 456 78 90',\r\n    medicalCondition: 'Spor yaralanmas─▒ kontrol',\r\n    urgencyLevel: 'routine',\r\n    referralDate: '2024-01-12',\r\n    status: 'pending',\r\n    hospital: 'Ac─▒badem Hastanesi',\r\n    department: 'Spor Hekimli─şi',\r\n    referredBy: 'Fizik Tedavi Merkezi',\r\n    notes: 'Ayak bile─şi burkulmasi sonras─▒ kontrol',\r\n    estimatedCost: 200,\r\n    transportNeeded: false,\r\n    followUpRequired: false,\r\n  },\r\n  {\r\n    id: 5,\r\n    referralNumber: 'HSK-2024-005',\r\n    patientName: 'Zeynep Arslan',\r\n    patientId: '99887766554',\r\n    patientAge: 55,\r\n    patientGender: 'female',\r\n    patientPhone: '0544 321 65 98',\r\n    medicalCondition: 'N├Âroloji kons├╝ltasyonu',\r\n    urgencyLevel: 'emergency',\r\n    referralDate: '2024-01-11',\r\n    appointmentDate: '2024-01-15 16:00',\r\n    hospital: '─░stanbul ├£niversitesi Hastanesi',\r\n    department: 'N├Âroloji',\r\n    doctorName: 'Prof. Dr. Ahmet N├Âroloji',\r\n    status: 'missed',\r\n    referredBy: 'Dr. Ay┼şe Dahiliye',\r\n    notes: 'Acil n├Âroloji kons├╝ltasyonu - randevuya gelemedi',\r\n    estimatedCost: 450,\r\n    transportNeeded: true,\r\n    followUpRequired: true,\r\n  },\r\n];\r\n\r\n/**\r\n * HospitalReferralPage function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function HospitalReferralPage() {\r\n  const [referrals, setReferrals] = useState<HospitalReferral[]>(mockReferrals);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState<string>('all');\r\n  const [urgencyFilter, setUrgencyFilter] = useState<string>('all');\r\n\r\n  const getStatusBadge = (status: HospitalReferral['status']) => {\r\n    const statusConfig = {\r\n      pending: { label: 'Bekliyor', color: 'bg-yellow-100 text-yellow-800' },\r\n      scheduled: { label: 'Randevu Al─▒nd─▒', color: 'bg-blue-100 text-blue-800' },\r\n      completed: { label: 'Tamamland─▒', color: 'bg-green-100 text-green-800' },\r\n      cancelled: { label: '─░ptal Edildi', color: 'bg-red-100 text-red-800' },\r\n      missed: { label: 'Gitmedi', color: 'bg-orange-100 text-orange-800' },\r\n    };\r\n\r\n    const config = statusConfig[status];\r\n    return <Badge className={config.color}>{config.label}</Badge>;\r\n  };\r\n\r\n  const getUrgencyBadge = (urgency: HospitalReferral['urgencyLevel']) => {\r\n    const urgencyConfig = {\r\n      routine: { label: 'Rutin', color: 'bg-gray-100 text-gray-800' },\r\n      urgent: { label: 'Acil', color: 'bg-orange-100 text-orange-800' },\r\n      emergency: { label: '├çok Acil', color: 'bg-red-100 text-red-800' },\r\n    };\r\n\r\n    const config = urgencyConfig[urgency];\r\n    return <Badge className={config.color}>{config.label}</Badge>;\r\n  };\r\n\r\n  const getStatusIcon = (status: HospitalReferral['status']) => {\r\n    const icons = {\r\n      pending: <Clock className=\"w-4 h-4 text-yellow-600\" />,\r\n      scheduled: <Calendar className=\"w-4 h-4 text-blue-600\" />,\r\n      completed: <CheckCircle className=\"w-4 h-4 text-green-600\" />,\r\n      cancelled: <XCircle className=\"w-4 h-4 text-red-600\" />,\r\n      missed: <AlertCircle className=\"w-4 h-4 text-orange-600\" />,\r\n    };\r\n    return icons[status];\r\n  };\r\n\r\n  const filteredReferrals = referrals.filter((referral) => {\r\n    const matchesSearch =\r\n      referral.patientName.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      referral.patientId.includes(searchTerm) ||\r\n      referral.referralNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      referral.medicalCondition.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      referral.hospital.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesStatus = statusFilter === 'all' || referral.status === statusFilter;\r\n    const matchesUrgency = urgencyFilter === 'all' || referral.urgencyLevel === urgencyFilter;\r\n\r\n    return matchesSearch && matchesStatus && matchesUrgency;\r\n  });\r\n\r\n  const stats = {\r\n    total: referrals.length,\r\n    pending: referrals.filter((r) => r.status === 'pending').length,\r\n    scheduled: referrals.filter((r) => r.status === 'scheduled').length,\r\n    completed: referrals.filter((r) => r.status === 'completed').length,\r\n    emergency: referrals.filter((r) => r.urgencyLevel === 'emergency').length,\r\n    totalCost: referrals\r\n      .filter((r) => r.actualCost ?? r.estimatedCost)\r\n      .reduce((sum, r) => sum + (r.actualCost ?? r.estimatedCost ?? 0), 0),\r\n  };\r\n\r\n  return (\r\n    <PageLayout\r\n      title=\"Hastane Sevk ─░┼şlemleri\"\r\n      subtitle=\"─░htiya├ğ sahipleri i├ğin hastane sevk i┼şlemlerini takip edin ve y├Ânetin\"\r\n      actions={\r\n        <div className=\"flex gap-2\">\r\n          <Button variant=\"outline\">\r\n            <Download className=\"w-4 h-4 mr-2\" />\r\n            Sevk Raporu\r\n          </Button>\r\n          <Button>\r\n            <Plus className=\"w-4 h-4 mr-2\" />\r\n            ─░htiya├ğ Sahibi ─░├ğin Yeni Sevk\r\n          </Button>\r\n        </div>\r\n      }\r\n    >\r\n      <div className=\"p-6 space-y-6\">\r\n        {/* Stats Cards */}\r\n        <div className=\"grid grid-cols-2 md:grid-cols-6 gap-4\">\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <div className=\"p-2 bg-blue-100 rounded-lg\">\r\n                  <Hospital className=\"w-5 h-5 text-blue-600\" />\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-xs text-muted-foreground\">Toplam</p>\r\n                  <p className=\"text-xl font-bold\">{stats.total}</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <div className=\"p-2 bg-yellow-100 rounded-lg\">\r\n                  <Clock className=\"w-5 h-5 text-yellow-600\" />\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-xs text-muted-foreground\">Bekliyor</p>\r\n                  <p className=\"text-xl font-bold\">{stats.pending}</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <div className=\"p-2 bg-blue-100 rounded-lg\">\r\n                  <Calendar className=\"w-5 h-5 text-blue-600\" />\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-xs text-muted-foreground\">Randevulu</p>\r\n                  <p className=\"text-xl font-bold\">{stats.scheduled}</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <div className=\"p-2 bg-green-100 rounded-lg\">\r\n                  <CheckCircle className=\"w-5 h-5 text-green-600\" />\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-xs text-muted-foreground\">Tamamland─▒</p>\r\n                  <p className=\"text-xl font-bold\">{stats.completed}</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <div className=\"p-2 bg-red-100 rounded-lg\">\r\n                  <AlertCircle className=\"w-5 h-5 text-red-600\" />\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-xs text-muted-foreground\">Acil</p>\r\n                  <p className=\"text-xl font-bold\">{stats.emergency}</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <div className=\"p-2 bg-purple-100 rounded-lg\">\r\n                  <Activity className=\"w-5 h-5 text-purple-600\" />\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-xs text-muted-foreground\">Maliyet</p>\r\n                  <p className=\"text-lg font-bold\">Ôé║{stats.totalCost.toLocaleString('tr-TR')}</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Filters */}\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex flex-col md:flex-row gap-4\">\r\n              <div className=\"flex-1\">\r\n                <div className=\"relative\">\r\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\r\n                  <Input\r\n                    placeholder=\"─░htiya├ğ sahibinin ad─▒, TC kimlik, sevk no, hastal─▒k veya hastane ile ara...\"\r\n                    value={searchTerm}\r\n                    onChange={(e) => {\r\n                      setSearchTerm(e.target.value);\r\n                    }}\r\n                    className=\"pl-10\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"flex gap-2\">\r\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\r\n                  <SelectTrigger className=\"w-40\">\r\n                    <SelectValue placeholder=\"Durum\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"all\">T├╝m Durumlar</SelectItem>\r\n                    <SelectItem value=\"pending\">Bekliyor</SelectItem>\r\n                    <SelectItem value=\"scheduled\">Randevulu</SelectItem>\r\n                    <SelectItem value=\"completed\">Tamamland─▒</SelectItem>\r\n                    <SelectItem value=\"cancelled\">─░ptal Edildi</SelectItem>\r\n                    <SelectItem value=\"missed\">Gitmedi</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n\r\n                <Select value={urgencyFilter} onValueChange={setUrgencyFilter}>\r\n                  <SelectTrigger className=\"w-40\">\r\n                    <SelectValue placeholder=\"Aciliyet\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"all\">T├╝m ├ûncelikler</SelectItem>\r\n                    <SelectItem value=\"emergency\">├çok Acil</SelectItem>\r\n                    <SelectItem value=\"urgent\">Acil</SelectItem>\r\n                    <SelectItem value=\"routine\">Rutin</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Referrals Table */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Stethoscope className=\"w-5 h-5 text-blue-600\" />\r\n              Hastane Sevk Listesi ({filteredReferrals.length} sevk)\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"overflow-x-auto\">\r\n              <Table>\r\n                <TableHeader>\r\n                  <TableRow>\r\n                    <TableHead>Sevk No</TableHead>\r\n                    <TableHead>─░htiya├ğ Sahibi Bilgileri</TableHead>\r\n                    <TableHead>Hastal─▒k/Durum</TableHead>\r\n                    <TableHead>Hastane/B├Âl├╝m</TableHead>\r\n                    <TableHead>Randevu</TableHead>\r\n                    <TableHead>Aciliyet</TableHead>\r\n                    <TableHead>Durum</TableHead>\r\n                    <TableHead>Maliyet</TableHead>\r\n                    <TableHead>─░┼şlemler</TableHead>\r\n                  </TableRow>\r\n                </TableHeader>\r\n                <TableBody>\r\n                  {filteredReferrals.map((referral) => (\r\n                    <TableRow key={referral.id}>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <FileText className=\"w-4 h-4 text-gray-400\" />\r\n                          <span className=\"font-mono text-sm\">{referral.referralNumber}</span>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div>\r\n                          <p className=\"font-medium\">{referral.patientName}</p>\r\n                          <p className=\"text-sm text-muted-foreground\">\r\n                            {referral.patientGender === 'male' ? 'E' : 'K'}, {referral.patientAge}{' '}\r\n                            ya┼ş\r\n                          </p>\r\n                          <div className=\"flex items-center gap-1 mt-1\">\r\n                            <Phone className=\"w-3 h-3 text-gray-400\" />\r\n                            <span className=\"text-xs text-muted-foreground\">\r\n                              {referral.patientPhone}\r\n                            </span>\r\n                          </div>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div>\r\n                          <p className=\"text-sm font-medium\">{referral.medicalCondition}</p>\r\n                          {referral.notes && (\r\n                            <p className=\"text-xs text-muted-foreground mt-1\">{referral.notes}</p>\r\n                          )}\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div>\r\n                          <p className=\"font-medium text-sm\">{referral.hospital}</p>\r\n                          <p className=\"text-sm text-muted-foreground\">{referral.department}</p>\r\n                          {referral.doctorName && (\r\n                            <p className=\"text-xs text-muted-foreground\">{referral.doctorName}</p>\r\n                          )}\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        {referral.appointmentDate ? (\r\n                          <div className=\"flex items-center gap-2\">\r\n                            <Calendar className=\"w-4 h-4 text-blue-400\" />\r\n                            <div>\r\n                              <p className=\"text-sm font-medium\">\r\n                                {new Date(referral.appointmentDate).toLocaleDateString('tr-TR')}\r\n                              </p>\r\n                              <p className=\"text-xs text-muted-foreground\">\r\n                                {new Date(referral.appointmentDate).toLocaleTimeString('tr-TR', {\r\n                                  hour: '2-digit',\r\n                                  minute: '2-digit',\r\n                                })}\r\n                              </p>\r\n                            </div>\r\n                          </div>\r\n                        ) : (\r\n                          <span className=\"text-sm text-muted-foreground\">Randevu al─▒nacak</span>\r\n                        )}\r\n                      </TableCell>\r\n                      <TableCell>{getUrgencyBadge(referral.urgencyLevel)}</TableCell>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          {getStatusIcon(referral.status)}\r\n                          {getStatusBadge(referral.status)}\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div>\r\n                          <p className=\"font-medium\">\r\n                            Ôé║\r\n                            {(referral.actualCost ?? referral.estimatedCost ?? 0).toLocaleString(\r\n                              'tr-TR',\r\n                            )}\r\n                          </p>\r\n                          <p className=\"text-xs text-muted-foreground\">\r\n                            {referral.actualCost ? 'Ger├ğek' : 'Tahmini'}\r\n                          </p>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <Button variant=\"ghost\" size=\"sm\">\r\n                            <Eye className=\"w-4 h-4\" />\r\n                          </Button>\r\n                          <Button variant=\"ghost\" size=\"sm\">\r\n                            <FileText className=\"w-4 h-4\" />\r\n                          </Button>\r\n                          <Button variant=\"ghost\" size=\"sm\">\r\n                            <Calendar className=\"w-4 h-4\" />\r\n                          </Button>\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </PageLayout>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\InKindAidTransactionsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setTransactions' is assigned a value but never used.","line":150,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":150,"endColumn":39},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'setTransactions' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":150,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":150,"endColumn":39},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":162,"column":20,"nodeType":"MemberExpression","endLine":162,"endColumn":40},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":173,"column":20,"nodeType":"MemberExpression","endLine":173,"endColumn":40},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":185,"column":12,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":185,"endColumn":49}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview InKindAidTransactionsPage Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { useState } from 'react';\r\nimport { PageLayout } from '../PageLayout';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Button } from '../ui/button';\r\nimport { Input } from '../ui/input';\r\nimport { Badge } from '../ui/badge';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../ui/table';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\nimport {\r\n  Gift,\r\n  Search,\r\n  Plus,\r\n  Eye,\r\n  FileText,\r\n  Calendar,\r\n  Package,\r\n  Shirt,\r\n  Utensils,\r\n  Home,\r\n  BookOpen,\r\n  Heart,\r\n  Download,\r\n} from 'lucide-react';\r\n\r\ninterface InKindTransaction {\r\n  id: number;\r\n  transactionNumber: string;\r\n  recipientName: string;\r\n  recipientId: string;\r\n  itemCategory: string;\r\n  itemDescription: string;\r\n  quantity: number;\r\n  unit: string;\r\n  estimatedValue: number;\r\n  deliveryDate: string;\r\n  deliveryMethod: 'pickup' | 'delivery' | 'voucher';\r\n  status: 'delivered' | 'prepared' | 'cancelled';\r\n  processedBy: string;\r\n  approvedBy: string;\r\n  storageLocation?: string;\r\n  notes?: string;\r\n}\r\n\r\nconst mockTransactions: InKindTransaction[] = [\r\n  {\r\n    id: 1,\r\n    transactionNumber: 'AYT-2024-001',\r\n    recipientName: 'Ay┼şe Y─▒lmaz',\r\n    recipientId: '12345678901',\r\n    itemCategory: 'G─▒da',\r\n    itemDescription: 'G─▒da kolisi (15 par├ğa temel g─▒da)',\r\n    quantity: 1,\r\n    unit: 'Koli',\r\n    estimatedValue: 350,\r\n    deliveryDate: '2024-01-15 14:30',\r\n    deliveryMethod: 'delivery',\r\n    status: 'delivered',\r\n    processedBy: 'Fatma Koordinat├Âr',\r\n    approvedBy: 'Mehmet Y├Ânetici',\r\n    storageLocation: 'Depo A-15',\r\n    notes: 'Ailede 4 ki┼şi var',\r\n  },\r\n  {\r\n    id: 2,\r\n    transactionNumber: 'AYT-2024-002',\r\n    recipientName: 'Mehmet Demir',\r\n    recipientId: '98765432109',\r\n    itemCategory: 'Giyim',\r\n    itemDescription: 'K─▒┼ş k─▒yafetleri seti (├ğocuk)',\r\n    quantity: 3,\r\n    unit: 'Tak─▒m',\r\n    estimatedValue: 450,\r\n    deliveryDate: '2024-01-15 11:15',\r\n    deliveryMethod: 'pickup',\r\n    status: 'delivered',\r\n    processedBy: 'Zeynep Sosyal Hizmet',\r\n    approvedBy: 'Ay┼şe Muhasebe',\r\n    storageLocation: 'Depo B-08',\r\n    notes: '3 ├ğocuk i├ğin farkl─▒ boylar',\r\n  },\r\n  {\r\n    id: 3,\r\n    transactionNumber: 'AYT-2024-003',\r\n    recipientName: 'Fatma Kaya',\r\n    recipientId: '11223344556',\r\n    itemCategory: 'Ev E┼şyas─▒',\r\n    itemDescription: 'Temizlik malzemesi paketi',\r\n    quantity: 2,\r\n    unit: 'Paket',\r\n    estimatedValue: 180,\r\n    deliveryDate: '2024-01-14 16:45',\r\n    deliveryMethod: 'voucher',\r\n    status: 'prepared',\r\n    processedBy: 'Hasan Depo Sorumlusu',\r\n    approvedBy: 'Fatma Koordinat├Âr',\r\n    storageLocation: 'Depo C-12',\r\n    notes: 'Market voucher olarak verilecek',\r\n  },\r\n  {\r\n    id: 4,\r\n    transactionNumber: 'AYT-2024-004',\r\n    recipientName: 'Ali ├ûzkan',\r\n    recipientId: '55667788990',\r\n    itemCategory: 'E─şitim',\r\n    itemDescription: 'Okul malzemesi seti',\r\n    quantity: 1,\r\n    unit: 'Set',\r\n    estimatedValue: 275,\r\n    deliveryDate: '2024-01-14 09:20',\r\n    deliveryMethod: 'pickup',\r\n    status: 'delivered',\r\n    processedBy: 'Elif E─şitim Sorumlusu',\r\n    approvedBy: 'Mehmet Y├Ânetici',\r\n    storageLocation: 'Depo D-05',\r\n    notes: 'Lise ├Â─şrencisi i├ğin',\r\n  },\r\n  {\r\n    id: 5,\r\n    transactionNumber: 'AYT-2024-005',\r\n    recipientName: 'Zeynep Arslan',\r\n    recipientId: '99887766554',\r\n    itemCategory: 'Sa─şl─▒k',\r\n    itemDescription: 'Medikal malzeme paketi',\r\n    quantity: 1,\r\n    unit: 'Paket',\r\n    estimatedValue: 320,\r\n    deliveryDate: '2024-01-13 13:00',\r\n    deliveryMethod: 'delivery',\r\n    status: 'cancelled',\r\n    processedBy: 'Dr. Ali Ba┼şhekim',\r\n    approvedBy: 'Zeynep Sosyal Hizmet',\r\n    notes: '─░ptal - ba┼şka yerden temin edildi',\r\n  },\r\n];\r\n\r\n/**\r\n * InKindAidTransactionsPage function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function InKindAidTransactionsPage() {\r\n  const [transactions, setTransactions] = useState<InKindTransaction[]>(mockTransactions);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState<string>('all');\r\n  const [categoryFilter, setCategoryFilter] = useState<string>('all');\r\n\r\n  const getStatusBadge = (status: InKindTransaction['status']) => {\r\n    const statusConfig = {\r\n      delivered: { label: 'Teslim Edildi', color: 'bg-green-100 text-green-800' },\r\n      prepared: { label: 'Haz─▒rland─▒', color: 'bg-blue-100 text-blue-800' },\r\n      cancelled: { label: '─░ptal Edildi', color: 'bg-red-100 text-red-800' },\r\n    };\r\n\r\n    const config = statusConfig[status];\r\n    return <Badge className={config.color}>{config.label}</Badge>;\r\n  };\r\n\r\n  const getDeliveryMethodBadge = (method: InKindTransaction['deliveryMethod']) => {\r\n    const methodConfig = {\r\n      pickup: { label: 'Teslim Al─▒nd─▒', color: 'bg-purple-100 text-purple-800' },\r\n      delivery: { label: 'Kurye', color: 'bg-orange-100 text-orange-800' },\r\n      voucher: { label: 'Voucher', color: 'bg-blue-100 text-blue-800' },\r\n    };\r\n\r\n    const config = methodConfig[method];\r\n    return <Badge className={config.color}>{config.label}</Badge>;\r\n  };\r\n\r\n  const getCategoryIcon = (category: string) => {\r\n    const icons = {\r\n      G─▒da: <Utensils className=\"w-4 h-4 text-green-600\" />,\r\n      Giyim: <Shirt className=\"w-4 h-4 text-blue-600\" />,\r\n      'Ev E┼şyas─▒': <Home className=\"w-4 h-4 text-orange-600\" />,\r\n      E─şitim: <BookOpen className=\"w-4 h-4 text-purple-600\" />,\r\n      Sa─şl─▒k: <Heart className=\"w-4 h-4 text-red-600\" />,\r\n    };\r\n    return icons[category as keyof typeof icons] || <Package className=\"w-4 h-4 text-gray-600\" />;\r\n  };\r\n\r\n  const filteredTransactions = transactions.filter((transaction) => {\r\n    const matchesSearch =\r\n      transaction.recipientName.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      transaction.recipientId.includes(searchTerm) ||\r\n      transaction.transactionNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      transaction.itemDescription.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesStatus = statusFilter === 'all' || transaction.status === statusFilter;\r\n    const matchesCategory = categoryFilter === 'all' || transaction.itemCategory === categoryFilter;\r\n\r\n    return matchesSearch && matchesStatus && matchesCategory;\r\n  });\r\n\r\n  const stats = {\r\n    total: transactions.length,\r\n    delivered: transactions.filter((t) => t.status === 'delivered').length,\r\n    prepared: transactions.filter((t) => t.status === 'prepared').length,\r\n    totalValue: transactions\r\n      .filter((t) => t.status === 'delivered')\r\n      .reduce((sum, t) => sum + t.estimatedValue, 0),\r\n    todayDeliveries: transactions.filter(\r\n      (t) =>\r\n        t.status === 'delivered' &&\r\n        new Date(t.deliveryDate).toDateString() === new Date().toDateString(),\r\n    ).length,\r\n  };\r\n\r\n  return (\r\n    <PageLayout\r\n      title=\"Ayni Yard─▒m ─░┼şlemleri\"\r\n      subtitle=\"─░htiya├ğ sahiplerine ger├ğekle┼ştirilen ayni yard─▒m teslimatlar─▒n─▒ g├Âr├╝nt├╝leyin ve y├Ânetin\"\r\n      actions={\r\n        <div className=\"flex gap-2\">\r\n          <Button variant=\"outline\">\r\n            <Download className=\"w-4 h-4 mr-2\" />\r\n            Envanter Raporu\r\n          </Button>\r\n          <Button>\r\n            <Plus className=\"w-4 h-4 mr-2\" />\r\n            ─░htiya├ğ Sahibi ─░├ğin Yeni Teslimat\r\n          </Button>\r\n        </div>\r\n      }\r\n    >\r\n      <div className=\"p-6 space-y-6\">\r\n        {/* Stats Cards */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-4\">\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <div className=\"p-2 bg-blue-100 rounded-lg\">\r\n                  <Package className=\"w-5 h-5 text-blue-600\" />\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-sm text-muted-foreground\">Toplam ─░┼şlem</p>\r\n                  <p className=\"text-2xl font-bold\">{stats.total}</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <div className=\"p-2 bg-green-100 rounded-lg\">\r\n                  <Gift className=\"w-5 h-5 text-green-600\" />\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-sm text-muted-foreground\">Teslim Edildi</p>\r\n                  <p className=\"text-2xl font-bold\">{stats.delivered}</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <div className=\"p-2 bg-purple-100 rounded-lg\">\r\n                  <FileText className=\"w-5 h-5 text-purple-600\" />\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-sm text-muted-foreground\">Toplam De─şer</p>\r\n                  <p className=\"text-2xl font-bold\">Ôé║{stats.totalValue.toLocaleString('tr-TR')}</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card>\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center gap-3\">\r\n                <div className=\"p-2 bg-orange-100 rounded-lg\">\r\n                  <Calendar className=\"w-5 h-5 text-orange-600\" />\r\n                </div>\r\n                <div>\r\n                  <p className=\"text-sm text-muted-foreground\">Bug├╝n Teslim</p>\r\n                  <p className=\"text-2xl font-bold\">{stats.todayDeliveries}</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Filters */}\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex flex-col md:flex-row gap-4\">\r\n              <div className=\"flex-1\">\r\n                <div className=\"relative\">\r\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\r\n                  <Input\r\n                    placeholder=\"─░htiya├ğ sahibinin ad─▒, TC kimlik, i┼şlem no veya ├╝r├╝n a├ğ─▒klamas─▒ ile ara...\"\r\n                    value={searchTerm}\r\n                    onChange={(e) => {\r\n                      setSearchTerm(e.target.value);\r\n                    }}\r\n                    className=\"pl-10\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"flex gap-2\">\r\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\r\n                  <SelectTrigger className=\"w-40\">\r\n                    <SelectValue placeholder=\"Durum\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"all\">T├╝m Durumlar</SelectItem>\r\n                    <SelectItem value=\"delivered\">Teslim Edildi</SelectItem>\r\n                    <SelectItem value=\"prepared\">Haz─▒rland─▒</SelectItem>\r\n                    <SelectItem value=\"cancelled\">─░ptal Edildi</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n\r\n                <Select value={categoryFilter} onValueChange={setCategoryFilter}>\r\n                  <SelectTrigger className=\"w-40\">\r\n                    <SelectValue placeholder=\"Kategori\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent>\r\n                    <SelectItem value=\"all\">T├╝m Kategoriler</SelectItem>\r\n                    <SelectItem value=\"G─▒da\">G─▒da</SelectItem>\r\n                    <SelectItem value=\"Giyim\">Giyim</SelectItem>\r\n                    <SelectItem value=\"Ev E┼şyas─▒\">Ev E┼şyas─▒</SelectItem>\r\n                    <SelectItem value=\"E─şitim\">E─şitim</SelectItem>\r\n                    <SelectItem value=\"Sa─şl─▒k\">Sa─şl─▒k</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Transactions Table */}\r\n        <Card>\r\n          <CardHeader>\r\n            <CardTitle className=\"flex items-center gap-2\">\r\n              <Gift className=\"w-5 h-5 text-blue-600\" />\r\n              Ayni Yard─▒m ─░┼şlemleri ({filteredTransactions.length} i┼şlem)\r\n            </CardTitle>\r\n          </CardHeader>\r\n          <CardContent>\r\n            <div className=\"overflow-x-auto\">\r\n              <Table>\r\n                <TableHeader>\r\n                  <TableRow>\r\n                    <TableHead>─░┼şlem No</TableHead>\r\n                    <TableHead>─░htiya├ğ Sahibi</TableHead>\r\n                    <TableHead>Kategori</TableHead>\r\n                    <TableHead>├£r├╝n/A├ğ─▒klama</TableHead>\r\n                    <TableHead>Miktar</TableHead>\r\n                    <TableHead>De─şer</TableHead>\r\n                    <TableHead>Teslimat</TableHead>\r\n                    <TableHead>Durum</TableHead>\r\n                    <TableHead>─░┼şleyen</TableHead>\r\n                    <TableHead>─░┼şlemler</TableHead>\r\n                  </TableRow>\r\n                </TableHeader>\r\n                <TableBody>\r\n                  {filteredTransactions.map((transaction) => (\r\n                    <TableRow key={transaction.id}>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <FileText className=\"w-4 h-4 text-gray-400\" />\r\n                          <span className=\"font-mono text-sm\">{transaction.transactionNumber}</span>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div>\r\n                          <p className=\"font-medium\">{transaction.recipientName}</p>\r\n                          <p className=\"text-sm text-muted-foreground\">{transaction.recipientId}</p>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          {getCategoryIcon(transaction.itemCategory)}\r\n                          <Badge variant=\"outline\">{transaction.itemCategory}</Badge>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div>\r\n                          <p className=\"font-medium text-sm\">{transaction.itemDescription}</p>\r\n                          {transaction.notes && (\r\n                            <p className=\"text-xs text-muted-foreground\">{transaction.notes}</p>\r\n                          )}\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div className=\"text-center\">\r\n                          <p className=\"font-medium\">{transaction.quantity}</p>\r\n                          <p className=\"text-xs text-muted-foreground\">{transaction.unit}</p>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <span className=\"font-medium\">\r\n                          Ôé║{transaction.estimatedValue.toLocaleString('tr-TR')}\r\n                        </span>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div>\r\n                          {getDeliveryMethodBadge(transaction.deliveryMethod)}\r\n                          <p className=\"text-xs text-muted-foreground mt-1\">\r\n                            {new Date(transaction.deliveryDate).toLocaleDateString('tr-TR')}\r\n                          </p>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>{getStatusBadge(transaction.status)}</TableCell>\r\n                      <TableCell>\r\n                        <div>\r\n                          <p className=\"text-sm font-medium\">{transaction.processedBy}</p>\r\n                          <p className=\"text-xs text-muted-foreground\">\r\n                            Onay: {transaction.approvedBy}\r\n                          </p>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell>\r\n                        <div className=\"flex items-center gap-2\">\r\n                          <Button variant=\"ghost\" size=\"sm\">\r\n                            <Eye className=\"w-4 h-4\" />\r\n                          </Button>\r\n                          <Button variant=\"ghost\" size=\"sm\">\r\n                            <FileText className=\"w-4 h-4\" />\r\n                          </Button>\r\n                          <Button variant=\"ghost\" size=\"sm\">\r\n                            <Download className=\"w-4 h-4\" />\r\n                          </Button>\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    </PageLayout>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\InternalMessagingPage.tsx","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_message' is defined but never used.","line":24,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":24,"endColumn":21,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\InventoryManagementPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\KumbaraPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setLoading' is assigned a value but never used.","line":60,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":29},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'setLoading' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":60,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":29},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":83,"column":33,"nodeType":"MemberExpression","endLine":83,"endColumn":49}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview KumbaraPage Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport {\r\n  Calendar,\r\n  DollarSign,\r\n  Download,\r\n  Edit,\r\n  Eye,\r\n  MapPin,\r\n  Plus,\r\n  Printer,\r\n  QrCode,\r\n  Search,\r\n  TrendingUp,\r\n} from 'lucide-react';\r\nimport { useState } from 'react';\r\nimport { PageLoading } from '../LoadingSpinner';\r\nimport { PageLayout } from '../PageLayout';\r\nimport { Badge } from '../ui/badge';\r\nimport { Button } from '../ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Dialog, DialogContent, DialogDescription, DialogHeader, DialogTitle } from '../ui/dialog';\r\nimport { Input } from '../ui/input';\r\nimport { Label } from '../ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../ui/table';\r\nimport { Textarea } from '../ui/textarea';\r\n\r\ninterface Kumbara {\r\n  id: number;\r\n  code: string;\r\n  name: string;\r\n  location: string;\r\n  address: string;\r\n  status: 'Aktif' | 'Pasif' | 'Bak─▒mda';\r\n  installDate: string;\r\n  lastCollection: string;\r\n  totalAmount: number;\r\n  monthlyAverage: number;\r\n  qrCode: string;\r\n  contactPerson?: string;\r\n  phone?: string;\r\n  notes?: string;\r\n}\r\n\r\n// Mock data kald─▒r─▒ld─▒ - ger├ğek veriler API'den gelecek\r\n\r\n/**\r\n * KumbaraPage function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function KumbaraPage() {\r\n  const [loading, setLoading] = useState(false);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState('all');\r\n  const [kumbaralar] = useState<Kumbara[]>([]);\r\n  const [selectedKumbara, setSelectedKumbara] = useState<Kumbara | null>(null);\r\n  const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\r\n  const [isQrDialogOpen, setIsQrDialogOpen] = useState(false);\r\n\r\n  const filteredKumbaralar = kumbaralar.filter((kumbara) => {\r\n    const matchesSearch =\r\n      kumbara.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      kumbara.location.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      kumbara.code.toLowerCase().includes(searchTerm.toLowerCase());\r\n    const matchesStatus = statusFilter === 'all' || kumbara.status === statusFilter;\r\n    return matchesSearch && matchesStatus;\r\n  });\r\n\r\n  const getStatusBadge = (status: Kumbara['status']) => {\r\n    const variants = {\r\n      Aktif: 'bg-emerald-100 text-emerald-700 border-emerald-200 font-semibold',\r\n      Pasif: 'bg-slate-100 text-slate-700 border-slate-200 font-semibold',\r\n      Bak─▒mda: 'bg-amber-100 text-amber-700 border-amber-200 font-semibold',\r\n    };\r\n    return <Badge className={`${variants[status]} px-3 py-1 rounded-full border`}>{status}</Badge>;\r\n  };\r\n\r\n  const generateQRCode = (kumbara: Kumbara) => {\r\n    // QR kod sim├╝lasyonu - ger├ğek uygulamada QR k├╝t├╝phanesi kullan─▒lacak\r\n    const qrData = {\r\n      kumbaraId: kumbara.id,\r\n      code: kumbara.code,\r\n      name: kumbara.name,\r\n      location: kumbara.location,\r\n      url: `https://bagis.dernek.org/kumbara/${kumbara.code}`,\r\n    };\r\n    return JSON.stringify(qrData);\r\n  };\r\n\r\n  const printQRCode = (kumbara: Kumbara) => {\r\n    const printWindow = window.open('', '_blank');\r\n    const qrContent = `\r\n      <html>\r\n        <head>\r\n          <title>Kumbara QR Kod - ${kumbara.code}</title>\r\n          <style>\r\n            @page { size: 40mm 30mm; margin: 2mm; }\r\n            body { \r\n              font-family: Arial, sans-serif; \r\n              margin: 0; \r\n              padding: 0;\r\n              display: flex;\r\n              flex-direction: column;\r\n              align-items: center;\r\n              justify-content: center;\r\n              height: 26mm;\r\n              width: 36mm;\r\n            }\r\n            .qr-container {\r\n              text-align: center;\r\n              border: 1px solid #ddd;\r\n              padding: 2mm;\r\n              border-radius: 2mm;\r\n            }\r\n            .qr-placeholder {\r\n              width: 20mm;\r\n              height: 20mm;\r\n              border: 2px solid #333;\r\n              margin: 0 auto 1mm auto;\r\n              display: flex;\r\n              align-items: center;\r\n              justify-content: center;\r\n              font-size: 8px;\r\n              background: #f9f9f9;\r\n            }\r\n            .qr-info {\r\n              font-size: 6px;\r\n              margin: 0;\r\n              line-height: 1.2;\r\n            }\r\n            .qr-code {\r\n              font-weight: bold;\r\n              margin-bottom: 0.5mm;\r\n            }\r\n          </style>\r\n        </head>\r\n        <body>\r\n          <div class=\"qr-container\">\r\n            <div class=\"qr-placeholder\">QR KOD</div>\r\n            <div class=\"qr-info qr-code\">${kumbara.code}</div>\r\n            <div class=\"qr-info\">${kumbara.name}</div>\r\n            <div class=\"qr-info\">${kumbara.location}</div>\r\n          </div>\r\n        </body>\r\n      </html>\r\n    `;\r\n\r\n    if (printWindow) {\r\n      printWindow.document.write(qrContent);\r\n      printWindow.document.close();\r\n      printWindow.focus();\r\n      setTimeout(() => {\r\n        printWindow.print();\r\n        printWindow.close();\r\n      }, 500);\r\n    }\r\n  };\r\n\r\n  const totalKumbaralar = kumbaralar.length;\r\n  const aktifKumbaralar = kumbaralar.filter((k) => k.status === 'Aktif').length;\r\n  const toplamGelir = kumbaralar.reduce((sum, k) => sum + k.totalAmount, 0);\r\n  const aylikOrtalama = kumbaralar.reduce((sum, k) => sum + k.monthlyAverage, 0);\r\n\r\n  if (loading) {\r\n    return <PageLoading />;\r\n  }\r\n\r\n  return (\r\n    <PageLayout\r\n      title=\"Kumbara Takibi\"\r\n      subtitle=\"Kumbara yerle┼ştirme, takip ve gelir y├Ânetimi\"\r\n      actions={\r\n        <div className=\"flex gap-3\">\r\n          <Button\r\n            variant=\"outline\"\r\n            size=\"sm\"\r\n            className=\"h-10 px-4 border-slate-200 hover:bg-slate-50 rounded-xl shadow-sm\"\r\n          >\r\n            <Download className=\"w-4 h-4 mr-2\" />\r\n            Rapor Al\r\n          </Button>\r\n          <Button\r\n            size=\"sm\"\r\n            onClick={() => {\r\n              setIsAddDialogOpen(true);\r\n            }}\r\n            className=\"h-10 px-4 bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 rounded-xl shadow-lg\"\r\n          >\r\n            <Plus className=\"w-4 h-4 mr-2\" />\r\n            Yeni Kumbara\r\n          </Button>\r\n        </div>\r\n      }\r\n    >\r\n      <div className=\"p-8 space-y-8 bg-gradient-to-br from-slate-50/50 to-blue-50/30\">\r\n        {/* Summary Cards */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-4 gap-6\">\r\n          <Card className=\"border-0 shadow-lg hover:shadow-xl transition-all duration-300 group bg-gradient-to-br from-blue-50 to-indigo-50 hover:from-blue-100 hover:to-indigo-100\">\r\n            <CardContent className=\"p-6\">\r\n              <div className=\"flex items-center gap-4\">\r\n                <div className=\"w-14 h-14 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300\">\r\n                  <QrCode className=\"w-7 h-7 text-white\" />\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <div className=\"text-3xl font-bold text-slate-700 mb-1\">{totalKumbaralar}</div>\r\n                  <p className=\"text-sm text-slate-500 font-medium\">Toplam Kumbara</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card className=\"border-0 shadow-lg hover:shadow-xl transition-all duration-300 group bg-gradient-to-br from-emerald-50 to-green-50 hover:from-emerald-100 hover:to-green-100\">\r\n            <CardContent className=\"p-6\">\r\n              <div className=\"flex items-center gap-4\">\r\n                <div className=\"w-14 h-14 bg-gradient-to-br from-emerald-500 to-green-600 rounded-xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300\">\r\n                  <TrendingUp className=\"w-7 h-7 text-white\" />\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <div className=\"text-3xl font-bold text-slate-700 mb-1\">{aktifKumbaralar}</div>\r\n                  <p className=\"text-sm text-slate-500 font-medium\">Aktif Kumbara</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card className=\"border-0 shadow-lg hover:shadow-xl transition-all duration-300 group bg-gradient-to-br from-violet-50 to-purple-50 hover:from-violet-100 hover:to-purple-100\">\r\n            <CardContent className=\"p-6\">\r\n              <div className=\"flex items-center gap-4\">\r\n                <div className=\"w-14 h-14 bg-gradient-to-br from-violet-500 to-purple-600 rounded-xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300\">\r\n                  <DollarSign className=\"w-7 h-7 text-white\" />\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <div className=\"text-3xl font-bold text-slate-700 mb-1\">\r\n                    Ôé║{toplamGelir.toLocaleString()}\r\n                  </div>\r\n                  <p className=\"text-sm text-slate-500 font-medium\">Toplam Gelir</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n\r\n          <Card className=\"border-0 shadow-lg hover:shadow-xl transition-all duration-300 group bg-gradient-to-br from-amber-50 to-orange-50 hover:from-amber-100 hover:to-orange-100\">\r\n            <CardContent className=\"p-6\">\r\n              <div className=\"flex items-center gap-4\">\r\n                <div className=\"w-14 h-14 bg-gradient-to-br from-amber-500 to-orange-600 rounded-xl flex items-center justify-center shadow-lg group-hover:scale-110 transition-transform duration-300\">\r\n                  <Calendar className=\"w-7 h-7 text-white\" />\r\n                </div>\r\n                <div className=\"flex-1\">\r\n                  <div className=\"text-3xl font-bold text-slate-700 mb-1\">\r\n                    Ôé║{aylikOrtalama.toLocaleString()}\r\n                  </div>\r\n                  <p className=\"text-sm text-slate-500 font-medium\">Ayl─▒k Ortalama</p>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        </div>\r\n\r\n        {/* Filters and Search */}\r\n        <Card className=\"border-0 shadow-xl bg-white/80 backdrop-blur-sm\">\r\n          <CardHeader className=\"pb-6\">\r\n            <div className=\"flex flex-col sm:flex-row gap-6 items-start sm:items-center justify-between\">\r\n              <div className=\"space-y-2\">\r\n                <CardTitle className=\"text-2xl text-slate-800\">Kumbara Listesi</CardTitle>\r\n                <p className=\"text-slate-500\">T├╝m kumbara konumlar─▒n─▒ g├Âr├╝nt├╝leyin ve y├Ânetin</p>\r\n              </div>\r\n              <div className=\"flex gap-3 w-full sm:w-auto\">\r\n                <div className=\"relative flex-1 sm:w-72\">\r\n                  <Search className=\"absolute left-4 top-1/2 transform -translate-y-1/2 text-slate-400 w-5 h-5\" />\r\n                  <Input\r\n                    placeholder=\"Kumbara ara...\"\r\n                    value={searchTerm}\r\n                    onChange={(e) => {\r\n                      setSearchTerm(e.target.value);\r\n                    }}\r\n                    className=\"pl-12 h-11 border-slate-200 focus:border-blue-500 focus:ring-blue-500/20 rounded-xl shadow-sm\"\r\n                  />\r\n                </div>\r\n                <Select value={statusFilter} onValueChange={setStatusFilter}>\r\n                  <SelectTrigger className=\"w-40 h-11 border-slate-200 focus:border-blue-500 focus:ring-blue-500/20 rounded-xl shadow-sm\">\r\n                    <SelectValue placeholder=\"Durum\" />\r\n                  </SelectTrigger>\r\n                  <SelectContent className=\"rounded-xl border-slate-200 shadow-xl\">\r\n                    <SelectItem value=\"all\">T├╝m Durumlar</SelectItem>\r\n                    <SelectItem value=\"Aktif\">Aktif</SelectItem>\r\n                    <SelectItem value=\"Pasif\">Pasif</SelectItem>\r\n                    <SelectItem value=\"Bak─▒mda\">Bak─▒mda</SelectItem>\r\n                  </SelectContent>\r\n                </Select>\r\n              </div>\r\n            </div>\r\n          </CardHeader>\r\n          <CardContent className=\"pt-0\">\r\n            <div className=\"rounded-xl overflow-hidden border border-slate-200\">\r\n              <Table>\r\n                <TableHeader>\r\n                  <TableRow className=\"bg-slate-50/80 hover:bg-slate-50/80 border-slate-200\">\r\n                    <TableHead className=\"font-semibold text-slate-700\">Kumbara Kodu</TableHead>\r\n                    <TableHead className=\"font-semibold text-slate-700\">─░sim & Lokasyon</TableHead>\r\n                    <TableHead className=\"font-semibold text-slate-700\">Durum</TableHead>\r\n                    <TableHead className=\"font-semibold text-slate-700\">Son Toplama</TableHead>\r\n                    <TableHead className=\"font-semibold text-slate-700\">Toplam Gelir</TableHead>\r\n                    <TableHead className=\"font-semibold text-slate-700\">Ayl─▒k Ort.</TableHead>\r\n                    <TableHead className=\"text-right font-semibold text-slate-700\">\r\n                      ─░┼şlemler\r\n                    </TableHead>\r\n                  </TableRow>\r\n                </TableHeader>\r\n                <TableBody>\r\n                  {filteredKumbaralar.map((kumbara, index) => (\r\n                    <TableRow\r\n                      key={kumbara.id}\r\n                      className={`hover:bg-blue-50/50 transition-colors duration-200 border-slate-100 ${\r\n                        index % 2 === 0 ? 'bg-white' : 'bg-slate-50/30'\r\n                      }`}\r\n                    >\r\n                      <TableCell className=\"py-4\">\r\n                        <div className=\"font-mono font-bold text-blue-600 bg-blue-50 px-3 py-1 rounded-lg inline-block\">\r\n                          {kumbara.code}\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell className=\"py-4\">\r\n                        <div className=\"space-y-1\">\r\n                          <div className=\"font-semibold text-slate-800\">{kumbara.name}</div>\r\n                          <div className=\"text-sm text-slate-500 flex items-center gap-2\">\r\n                            <MapPin className=\"w-4 h-4 text-slate-400\" />\r\n                            {kumbara.location}\r\n                          </div>\r\n                        </div>\r\n                      </TableCell>\r\n                      <TableCell className=\"py-4\">{getStatusBadge(kumbara.status)}</TableCell>\r\n                      <TableCell className=\"text-slate-600 py-4 font-medium\">\r\n                        {new Date(kumbara.lastCollection).toLocaleDateString('tr-TR')}\r\n                      </TableCell>\r\n                      <TableCell className=\"font-bold text-emerald-600 py-4\">\r\n                        Ôé║{kumbara.totalAmount.toLocaleString()}\r\n                      </TableCell>\r\n                      <TableCell className=\"font-bold text-blue-600 py-4\">\r\n                        Ôé║{kumbara.monthlyAverage.toLocaleString()}\r\n                      </TableCell>\r\n                      <TableCell className=\"text-right py-4\">\r\n                        <div className=\"flex gap-1 justify-end\">\r\n                          <Button\r\n                            variant=\"ghost\"\r\n                            size=\"sm\"\r\n                            className=\"h-9 w-9 rounded-lg hover:bg-blue-100 hover:text-blue-600 transition-colors\"\r\n                            onClick={() => {\r\n                              setSelectedKumbara(kumbara);\r\n                              setIsQrDialogOpen(true);\r\n                            }}\r\n                          >\r\n                            <QrCode className=\"w-4 h-4\" />\r\n                          </Button>\r\n                          <Button\r\n                            variant=\"ghost\"\r\n                            size=\"sm\"\r\n                            className=\"h-9 w-9 rounded-lg hover:bg-purple-100 hover:text-purple-600 transition-colors\"\r\n                            onClick={() => {\r\n                              printQRCode(kumbara);\r\n                            }}\r\n                          >\r\n                            <Printer className=\"w-4 h-4\" />\r\n                          </Button>\r\n                          <Button\r\n                            variant=\"ghost\"\r\n                            size=\"sm\"\r\n                            className=\"h-9 w-9 rounded-lg hover:bg-green-100 hover:text-green-600 transition-colors\"\r\n                          >\r\n                            <Eye className=\"w-4 h-4\" />\r\n                          </Button>\r\n                          <Button\r\n                            variant=\"ghost\"\r\n                            size=\"sm\"\r\n                            className=\"h-9 w-9 rounded-lg hover:bg-amber-100 hover:text-amber-600 transition-colors\"\r\n                          >\r\n                            <Edit className=\"w-4 h-4\" />\r\n                          </Button>\r\n                        </div>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  ))}\r\n                </TableBody>\r\n              </Table>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Add New Kumbara Dialog */}\r\n        <Dialog open={isAddDialogOpen} onOpenChange={setIsAddDialogOpen}>\r\n          <DialogContent className=\"max-w-lg border-0 shadow-2xl rounded-2xl bg-white\">\r\n            <DialogHeader className=\"space-y-3 pb-6\">\r\n              <DialogTitle className=\"text-2xl text-slate-800 flex items-center gap-3\">\r\n                <div className=\"w-10 h-10 bg-gradient-to-br from-blue-500 to-indigo-600 rounded-xl flex items-center justify-center\">\r\n                  <Plus className=\"w-5 h-5 text-white\" />\r\n                </div>\r\n                Yeni Kumbara Ekle\r\n              </DialogTitle>\r\n              <DialogDescription className=\"text-slate-600 leading-relaxed\">\r\n                Yeni kumbara konumu ekleyin ve otomatik QR kod ├╝retimi i├ğin gerekli bilgileri\r\n                doldurun.\r\n              </DialogDescription>\r\n            </DialogHeader>\r\n            <div className=\"space-y-6\">\r\n              <div className=\"grid grid-cols-2 gap-4\">\r\n                <div className=\"space-y-3\">\r\n                  <Label htmlFor=\"name\" className=\"text-slate-700 font-semibold\">\r\n                    Kumbara Ad─▒\r\n                  </Label>\r\n                  <Input\r\n                    id=\"name\"\r\n                    placeholder=\"Merkez Camii Kumbaras─▒\"\r\n                    className=\"h-11 border-slate-200 focus:border-blue-500 focus:ring-blue-500/20 rounded-xl\"\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-3\">\r\n                  <Label htmlFor=\"location\" className=\"text-slate-700 font-semibold\">\r\n                    Lokasyon\r\n                  </Label>\r\n                  <Input\r\n                    id=\"location\"\r\n                    placeholder=\"Fatih Camii\"\r\n                    className=\"h-11 border-slate-200 focus:border-blue-500 focus:ring-blue-500/20 rounded-xl\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"space-y-3\">\r\n                <Label htmlFor=\"address\" className=\"text-slate-700 font-semibold\">\r\n                  Adres\r\n                </Label>\r\n                <Textarea\r\n                  id=\"address\"\r\n                  placeholder=\"Tam adres bilgisi...\"\r\n                  rows={3}\r\n                  className=\"border-slate-200 focus:border-blue-500 focus:ring-blue-500/20 rounded-xl resize-none\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-2 gap-4\">\r\n                <div className=\"space-y-3\">\r\n                  <Label htmlFor=\"contact\" className=\"text-slate-700 font-semibold\">\r\n                    ─░leti┼şim Ki┼şisi\r\n                  </Label>\r\n                  <Input\r\n                    id=\"contact\"\r\n                    placeholder=\"Ahmet ├ûzt├╝rk\"\r\n                    className=\"h-11 border-slate-200 focus:border-blue-500 focus:ring-blue-500/20 rounded-xl\"\r\n                  />\r\n                </div>\r\n                <div className=\"space-y-3\">\r\n                  <Label htmlFor=\"phone\" className=\"text-slate-700 font-semibold\">\r\n                    Telefon\r\n                  </Label>\r\n                  <Input\r\n                    id=\"phone\"\r\n                    placeholder=\"0532 123 45 67\"\r\n                    className=\"h-11 border-slate-200 focus:border-blue-500 focus:ring-blue-500/20 rounded-xl\"\r\n                  />\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"space-y-3\">\r\n                <Label htmlFor=\"notes\" className=\"text-slate-700 font-semibold\">\r\n                  Notlar\r\n                </Label>\r\n                <Textarea\r\n                  id=\"notes\"\r\n                  placeholder=\"├ûzel notlar...\"\r\n                  rows={3}\r\n                  className=\"border-slate-200 focus:border-blue-500 focus:ring-blue-500/20 rounded-xl resize-none\"\r\n                />\r\n              </div>\r\n\r\n              <div className=\"flex gap-4 pt-6 border-t border-slate-100\">\r\n                <Button\r\n                  variant=\"outline\"\r\n                  className=\"flex-1 h-12 border-slate-200 hover:bg-slate-50 rounded-xl\"\r\n                  onClick={() => {\r\n                    setIsAddDialogOpen(false);\r\n                  }}\r\n                >\r\n                  ─░ptal\r\n                </Button>\r\n                <Button className=\"flex-1 h-12 bg-gradient-to-r from-blue-600 to-indigo-600 hover:from-blue-700 hover:to-indigo-700 rounded-xl shadow-lg\">\r\n                  <QrCode className=\"w-5 h-5 mr-2\" />\r\n                  QR Kod ile Ekle\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </DialogContent>\r\n        </Dialog>\r\n\r\n        {/* QR Code Dialog */}\r\n        <Dialog open={isQrDialogOpen} onOpenChange={setIsQrDialogOpen}>\r\n          <DialogContent className=\"max-w-md border-0 shadow-2xl rounded-2xl bg-white\">\r\n            <DialogHeader className=\"space-y-3 pb-6\">\r\n              <DialogTitle className=\"text-2xl text-slate-800 flex items-center gap-3\">\r\n                <div className=\"w-10 h-10 bg-gradient-to-br from-purple-500 to-pink-600 rounded-xl flex items-center justify-center\">\r\n                  <QrCode className=\"w-5 h-5 text-white\" />\r\n                </div>\r\n                QR Kod - {selectedKumbara?.code}\r\n              </DialogTitle>\r\n              <DialogDescription className=\"text-slate-600 leading-relaxed\">\r\n                Kumbara i├ğin benzersiz QR kodu g├Âr├╝nt├╝leyin ve 40x30mm boyutunda yazd─▒r─▒n.\r\n              </DialogDescription>\r\n            </DialogHeader>\r\n            {selectedKumbara && (\r\n              <div className=\"space-y-6\">\r\n                <div className=\"bg-gradient-to-br from-slate-50 to-blue-50 p-8 rounded-2xl text-center border border-slate-100\">\r\n                  <div className=\"w-40 h-40 mx-auto bg-white border-2 border-slate-200 rounded-2xl flex items-center justify-center mb-6 shadow-lg\">\r\n                    <div className=\"text-center\">\r\n                      <QrCode className=\"w-20 h-20 mx-auto text-slate-400 mb-3\" />\r\n                      <div className=\"text-xs text-slate-500 font-medium\">QR Kod Sim├╝lasyonu</div>\r\n                    </div>\r\n                  </div>\r\n                  <div className=\"space-y-2\">\r\n                    <div className=\"text-lg font-bold text-slate-800\">{selectedKumbara.name}</div>\r\n                    <div className=\"text-sm text-slate-600 flex items-center justify-center gap-2\">\r\n                      <MapPin className=\"w-4 h-4\" />\r\n                      {selectedKumbara.location}\r\n                    </div>\r\n                    <div className=\"text-sm font-mono text-blue-600 bg-blue-100 px-3 py-1 rounded-lg inline-block mt-3\">\r\n                      {selectedKumbara.code}\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"bg-gradient-to-br from-blue-50 to-indigo-50 p-6 rounded-2xl border border-blue-100\">\r\n                  <div className=\"font-semibold text-blue-800 mb-3 flex items-center gap-2\">\r\n                    ­şô▒ QR Kod Bilgileri\r\n                  </div>\r\n                  <div className=\"space-y-2 text-blue-700\">\r\n                    <div className=\"flex justify-between\">\r\n                      <span className=\"font-medium\">Kumbara ID:</span>\r\n                      <span>{selectedKumbara.id}</span>\r\n                    </div>\r\n                    <div className=\"flex justify-between\">\r\n                      <span className=\"font-medium\">Kod:</span>\r\n                      <span className=\"font-mono\">{selectedKumbara.code}</span>\r\n                    </div>\r\n                    <div className=\"pt-2\">\r\n                      <span className=\"font-medium\">URL:</span>\r\n                      <div className=\"text-xs bg-white p-2 rounded-lg mt-1 font-mono break-all\">\r\n                        bagis.dernek.org/kumbara/{selectedKumbara.code}\r\n                      </div>\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"flex gap-4 pt-4 border-t border-slate-100\">\r\n                  <Button\r\n                    variant=\"outline\"\r\n                    className=\"flex-1 h-12 border-slate-200 hover:bg-slate-50 rounded-xl\"\r\n                    onClick={() => {\r\n                      printQRCode(selectedKumbara);\r\n                    }}\r\n                  >\r\n                    <Printer className=\"w-5 h-5 mr-2\" />\r\n                    40x30mm Yazd─▒r\r\n                  </Button>\r\n                  <Button\r\n                    className=\"flex-1 h-12 bg-gradient-to-r from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 rounded-xl shadow-lg\"\r\n                    onClick={() => {\r\n                      // QR kod verilerini kopyala\r\n                      navigator.clipboard.writeText(generateQRCode(selectedKumbara));\r\n                    }}\r\n                  >\r\n                    <Download className=\"w-5 h-5 mr-2\" />\r\n                    Kodu Kopyala\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </DialogContent>\r\n        </Dialog>\r\n      </div>\r\n    </PageLayout>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\LawsuitTrackingPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setLawsuits' is assigned a value but never used.","line":66,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":31},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'setLawsuits' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":66,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":66,"endColumn":31},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":106,"column":34,"nodeType":"MemberExpression","endLine":106,"endColumn":48},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":125,"column":34,"nodeType":"MemberExpression","endLine":125,"endColumn":47},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":139,"column":12,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":139,"endColumn":23},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":139,"column":12,"nodeType":"MemberExpression","endLine":139,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'totalCosts' is assigned a value but never used.","line":163,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":163,"endColumn":19},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'totalCosts' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":163,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":163,"endColumn":19}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview LawsuitTrackingPage Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport {\r\n  AlertTriangle,\r\n  Building2,\r\n  Calendar,\r\n  CheckCircle,\r\n  Clock,\r\n  Eye,\r\n  Gavel,\r\n  Plus,\r\n  Search,\r\n  Timer,\r\n  User,\r\n} from 'lucide-react';\r\nimport { useState } from 'react';\r\nimport { Badge } from '../ui/badge';\r\nimport { Button } from '../ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle } from '../ui/dialog';\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger,\r\n} from '../ui/dropdown-menu';\r\nimport { Input } from '../ui/input';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';\r\n\r\ninterface Lawsuit {\r\n  id: number;\r\n  caseNumber: string;\r\n  court: string;\r\n  caseType: 'medeni' | 'ceza' | 'is' | 'idare' | 'ticaret' | 'aile' | 'icra';\r\n  plaintiff: string;\r\n  defendant: string;\r\n  subject: string;\r\n  amount?: number;\r\n  lawyer: string;\r\n  startDate: string;\r\n  nextHearing?: string;\r\n  status: 'devam' | 'kazanildi' | 'kaybedildi' | 'uzlasti' | 'askida';\r\n  stage: 'baslangic' | 'delil' | 'savunma' | 'yargilama' | 'karar' | 'temyiz' | 'kesinlesti';\r\n  notes?: string;\r\n  documents: string[];\r\n  priority: 'yuksek' | 'orta' | 'dusuk';\r\n  estimatedDuration?: number; // months\r\n  costs: number;\r\n}\r\n\r\n// Mock data kald─▒r─▒ld─▒ - ger├ğek veriler API'den gelecek\r\n\r\n/**\r\n * LawsuitTrackingPage function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function LawsuitTrackingPage() {\r\n  const [lawsuits, setLawsuits] = useState<Lawsuit[]>([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [filterType, setFilterType] = useState<string>('all');\r\n  const [filterStatus, setFilterStatus] = useState<string>('all');\r\n  const [filterStage, setFilterStage] = useState<string>('all');\r\n  const [selectedLawsuit, setSelectedLawsuit] = useState<Lawsuit | null>(null);\r\n  const [isDetailOpen, setIsDetailOpen] = useState(false);\r\n  const [activeTab, setActiveTab] = useState('all');\r\n\r\n  const filteredLawsuits = lawsuits.filter((lawsuit) => {\r\n    const matchesSearch =\r\n      searchTerm === '' ||\r\n      lawsuit.caseNumber.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      lawsuit.subject.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      lawsuit.plaintiff.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      lawsuit.defendant.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      lawsuit.lawyer.toLowerCase().includes(searchTerm.toLowerCase());\r\n\r\n    const matchesType = filterType === 'all' || lawsuit.caseType === filterType;\r\n    const matchesStatus = filterStatus === 'all' || lawsuit.status === filterStatus;\r\n    const matchesStage = filterStage === 'all' || lawsuit.stage === filterStage;\r\n\r\n    const matchesTab =\r\n      activeTab === 'all' ||\r\n      (activeTab === 'active' && lawsuit.status === 'devam') ||\r\n      (activeTab === 'won' && lawsuit.status === 'kazanildi') ||\r\n      (activeTab === 'priority' && lawsuit.priority === 'yuksek');\r\n\r\n    return matchesSearch && matchesType && matchesStatus && matchesStage && matchesTab;\r\n  });\r\n\r\n  const getStatusBadge = (status: Lawsuit['status']) => {\r\n    const config = {\r\n      devam: { label: 'Devam Ediyor', className: 'bg-blue-50 text-blue-700 border-blue-200' },\r\n      kazanildi: { label: 'Kazan─▒ld─▒', className: 'bg-green-50 text-green-700 border-green-200' },\r\n      kaybedildi: { label: 'Kaybedildi', className: 'bg-red-50 text-red-700 border-red-200' },\r\n      uzlasti: { label: 'Uzla┼şt─▒', className: 'bg-yellow-50 text-yellow-700 border-yellow-200' },\r\n      askida: { label: 'Ask─▒da', className: 'bg-gray-50 text-gray-700 border-gray-200' },\r\n    };\r\n\r\n    const { label, className } = config[status];\r\n    return (\r\n      <Badge variant=\"outline\" className={`${className} text-xs px-2 py-1`}>\r\n        {label}\r\n      </Badge>\r\n    );\r\n  };\r\n\r\n  const getStageBadge = (stage: Lawsuit['stage']) => {\r\n    const config = {\r\n      baslangic: { label: 'Ba┼şlang─▒├ğ', className: 'bg-gray-50 text-gray-700' },\r\n      delil: { label: 'Delil Toplama', className: 'bg-blue-50 text-blue-700' },\r\n      savunma: { label: 'Savunma', className: 'bg-purple-50 text-purple-700' },\r\n      yargilama: { label: 'Yarg─▒lama', className: 'bg-orange-50 text-orange-700' },\r\n      karar: { label: 'Karar', className: 'bg-green-50 text-green-700' },\r\n      temyiz: { label: 'Temyiz', className: 'bg-red-50 text-red-700' },\r\n      kesinlesti: { label: 'Kesinle┼şti', className: 'bg-indigo-50 text-indigo-700' },\r\n    };\r\n\r\n    const { label, className } = config[stage];\r\n    return <Badge className={`${className} text-xs px-2 py-1 border-0`}>{label}</Badge>;\r\n  };\r\n\r\n  const getTypeLabel = (type: Lawsuit['caseType']) => {\r\n    const types = {\r\n      medeni: 'Medeni',\r\n      ceza: 'Ceza',\r\n      is: '─░┼ş',\r\n      idare: '─░dare',\r\n      ticaret: 'Ticaret',\r\n      aile: 'Aile',\r\n      icra: '─░cra',\r\n    };\r\n    return types[type] ?? type;\r\n  };\r\n\r\n  const getPriorityIcon = (priority: Lawsuit['priority']) => {\r\n    if (priority === 'yuksek') return <AlertTriangle className=\"w-4 h-4 text-red-500\" />;\r\n    if (priority === 'orta') return <Clock className=\"w-4 h-4 text-yellow-500\" />;\r\n    return <Timer className=\"w-4 h-4 text-green-500\" />;\r\n  };\r\n\r\n  const formatCurrency = (amount: number) => {\r\n    return new Intl.NumberFormat('tr-TR', {\r\n      style: 'currency',\r\n      currency: 'TRY',\r\n      minimumFractionDigits: 0,\r\n      maximumFractionDigits: 0,\r\n    }).format(amount);\r\n  };\r\n\r\n  const formatDate = (dateString: string) => {\r\n    return new Date(dateString).toLocaleDateString('tr-TR');\r\n  };\r\n\r\n  const activeCases = lawsuits.filter((l) => l.status === 'devam').length;\r\n  const wonCases = lawsuits.filter((l) => l.status === 'kazanildi').length;\r\n  const totalCosts = lawsuits.reduce((sum, l) => sum + l.costs, 0);\r\n  const totalAmount = lawsuits.reduce((sum, l) => sum + (l.amount ?? 0), 0);\r\n\r\n  return (\r\n    <div className=\"flex-1 space-y-4 p-4 sm:space-y-6 sm:p-6\">\r\n      {/* Header */}\r\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\r\n        <div>\r\n          <h1 className=\"text-2xl font-medium\">Dava Takipleri</h1>\r\n          <p className=\"text-muted-foreground mt-1\">A├ğ─▒lan davalar ve duru┼şma takibi</p>\r\n        </div>\r\n        <Button className=\"gap-2 w-full sm:w-auto\">\r\n          <Plus className=\"w-4 h-4\" />\r\n          Yeni Dava Ekle\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Quick Stats */}\r\n      <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-4\">\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm text-muted-foreground\">Toplam Dava</p>\r\n                <p className=\"text-2xl font-medium\">{lawsuits.length}</p>\r\n              </div>\r\n              <Gavel className=\"w-5 h-5 text-muted-foreground\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm text-muted-foreground\">Devam Eden</p>\r\n                <p className=\"text-2xl font-medium text-blue-600\">{activeCases}</p>\r\n              </div>\r\n              <Clock className=\"w-5 h-5 text-blue-600\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm text-muted-foreground\">Kazan─▒lan</p>\r\n                <p className=\"text-2xl font-medium text-green-600\">{wonCases}</p>\r\n              </div>\r\n              <CheckCircle className=\"w-5 h-5 text-green-600\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm text-muted-foreground\">Toplam Tutar</p>\r\n                <p className=\"text-xl font-medium text-purple-600\">{formatCurrency(totalAmount)}</p>\r\n              </div>\r\n              <Building2 className=\"w-5 h-5 text-purple-600\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Search and Filters */}\r\n      <div className=\"flex flex-col sm:flex-row gap-4\">\r\n        <div className=\"relative flex-1\">\r\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\r\n          <Input\r\n            placeholder=\"Dava ara...\"\r\n            value={searchTerm}\r\n            onChange={(e) => {\r\n              setSearchTerm(e.target.value);\r\n            }}\r\n            className=\"pl-10\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"flex gap-2 overflow-x-auto\">\r\n          <Select value={filterType} onValueChange={setFilterType}>\r\n            <SelectTrigger className=\"w-[120px] shrink-0\">\r\n              <SelectValue placeholder=\"T├╝r\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"all\">T├╝m T├╝rler</SelectItem>\r\n              <SelectItem value=\"medeni\">Medeni</SelectItem>\r\n              <SelectItem value=\"ceza\">Ceza</SelectItem>\r\n              <SelectItem value=\"is\">─░┼ş</SelectItem>\r\n              <SelectItem value=\"idare\">─░dare</SelectItem>\r\n              <SelectItem value=\"ticaret\">Ticaret</SelectItem>\r\n              <SelectItem value=\"aile\">Aile</SelectItem>\r\n              <SelectItem value=\"icra\">─░cra</SelectItem>\r\n            </SelectContent>\r\n          </Select>\r\n\r\n          <Select value={filterStatus} onValueChange={setFilterStatus}>\r\n            <SelectTrigger className=\"w-[130px] shrink-0\">\r\n              <SelectValue placeholder=\"Durum\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"all\">T├╝m Durumlar</SelectItem>\r\n              <SelectItem value=\"devam\">Devam Ediyor</SelectItem>\r\n              <SelectItem value=\"kazanildi\">Kazan─▒ld─▒</SelectItem>\r\n              <SelectItem value=\"kaybedildi\">Kaybedildi</SelectItem>\r\n              <SelectItem value=\"uzlasti\">Uzla┼şt─▒</SelectItem>\r\n              <SelectItem value=\"askida\">Ask─▒da</SelectItem>\r\n            </SelectContent>\r\n          </Select>\r\n\r\n          <Select value={filterStage} onValueChange={setFilterStage}>\r\n            <SelectTrigger className=\"w-[130px] shrink-0\">\r\n              <SelectValue placeholder=\"A┼şama\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"all\">T├╝m A┼şamalar</SelectItem>\r\n              <SelectItem value=\"baslangic\">Ba┼şlang─▒├ğ</SelectItem>\r\n              <SelectItem value=\"delil\">Delil Toplama</SelectItem>\r\n              <SelectItem value=\"savunma\">Savunma</SelectItem>\r\n              <SelectItem value=\"yargilama\">Yarg─▒lama</SelectItem>\r\n              <SelectItem value=\"karar\">Karar</SelectItem>\r\n              <SelectItem value=\"temyiz\">Temyiz</SelectItem>\r\n              <SelectItem value=\"kesinlesti\">Kesinle┼şti</SelectItem>\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Tabs */}\r\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\r\n        <TabsList className=\"grid w-full grid-cols-4\">\r\n          <TabsTrigger value=\"all\">T├╝m├╝</TabsTrigger>\r\n          <TabsTrigger value=\"active\">Devam Eden</TabsTrigger>\r\n          <TabsTrigger value=\"won\">Kazan─▒lan</TabsTrigger>\r\n          <TabsTrigger value=\"priority\">├ûncelikli</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value={activeTab} className=\"mt-4\">\r\n          <div className=\"grid gap-4\">\r\n            {filteredLawsuits.map((lawsuit) => (\r\n              <Card key={lawsuit.id} className=\"hover:shadow-md transition-shadow\">\r\n                <CardHeader className=\"pb-3\">\r\n                  <div className=\"flex flex-col sm:flex-row sm:items-start sm:justify-between gap-3\">\r\n                    <div className=\"flex-1 min-w-0\">\r\n                      <div className=\"flex items-center gap-2\">\r\n                        <CardTitle className=\"text-lg font-medium\">{lawsuit.subject}</CardTitle>\r\n                        {getPriorityIcon(lawsuit.priority)}\r\n                      </div>\r\n                      <p className=\"text-muted-foreground mt-1\">\r\n                        Dava No: {lawsuit.caseNumber} - {lawsuit.court}\r\n                      </p>\r\n                      <div className=\"flex flex-wrap items-center gap-2 mt-2\">\r\n                        {getStatusBadge(lawsuit.status)}\r\n                        {getStageBadge(lawsuit.stage)}\r\n                        <Badge variant=\"outline\" className=\"text-xs\">\r\n                          {getTypeLabel(lawsuit.caseType)}\r\n                        </Badge>\r\n                      </div>\r\n                    </div>\r\n\r\n                    <DropdownMenu>\r\n                      <DropdownMenuTrigger asChild>\r\n                        <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\">\r\n                          <Eye className=\"w-4 h-4\" />\r\n                        </Button>\r\n                      </DropdownMenuTrigger>\r\n                      <DropdownMenuContent align=\"end\">\r\n                        <DropdownMenuItem\r\n                          onClick={() => {\r\n                            setSelectedLawsuit(lawsuit);\r\n                            setIsDetailOpen(true);\r\n                          }}\r\n                        >\r\n                          <Eye className=\"w-4 h-4 mr-2\" />\r\n                          Detaylar─▒ G├Âr├╝nt├╝le\r\n                        </DropdownMenuItem>\r\n                      </DropdownMenuContent>\r\n                    </DropdownMenu>\r\n                  </div>\r\n                </CardHeader>\r\n\r\n                <CardContent className=\"pt-0\">\r\n                  <div className=\"grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-4 mb-4\">\r\n                    <div className=\"flex items-center gap-2 text-sm\">\r\n                      <User className=\"w-4 h-4 text-muted-foreground\" />\r\n                      <span className=\"truncate\">Davac─▒: {lawsuit.plaintiff}</span>\r\n                    </div>\r\n                    <div className=\"flex items-center gap-2 text-sm\">\r\n                      <User className=\"w-4 h-4 text-muted-foreground\" />\r\n                      <span className=\"truncate\">Daval─▒: {lawsuit.defendant}</span>\r\n                    </div>\r\n                    <div className=\"flex items-center gap-2 text-sm\">\r\n                      <Calendar className=\"w-4 h-4 text-muted-foreground\" />\r\n                      <span className=\"truncate\">Ba┼şlang─▒├ğ: {formatDate(lawsuit.startDate)}</span>\r\n                    </div>\r\n                    {lawsuit.nextHearing && (\r\n                      <div className=\"flex items-center gap-2 text-sm\">\r\n                        <Clock className=\"w-4 h-4 text-muted-foreground\" />\r\n                        <span className=\"truncate\">Duru┼şma: {formatDate(lawsuit.nextHearing)}</span>\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n\r\n                  <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-4\">\r\n                    {lawsuit.amount && (\r\n                      <div className=\"text-center p-3 bg-blue-50 rounded-lg\">\r\n                        <div className=\"text-sm font-medium text-blue-800\">\r\n                          {formatCurrency(lawsuit.amount)}\r\n                        </div>\r\n                        <div className=\"text-xs text-blue-600\">Dava Tutar─▒</div>\r\n                      </div>\r\n                    )}\r\n\r\n                    <div className=\"text-center p-3 bg-red-50 rounded-lg\">\r\n                      <div className=\"text-sm font-medium text-red-800\">\r\n                        {formatCurrency(lawsuit.costs)}\r\n                      </div>\r\n                      <div className=\"text-xs text-red-600\">Masraf</div>\r\n                    </div>\r\n\r\n                    <div className=\"text-center p-3 bg-green-50 rounded-lg\">\r\n                      <div className=\"text-sm font-medium text-green-800\">\r\n                        {lawsuit.documents.length}\r\n                      </div>\r\n                      <div className=\"text-xs text-green-600\">Belge</div>\r\n                    </div>\r\n\r\n                    <div className=\"text-center p-3 bg-purple-50 rounded-lg\">\r\n                      <div className=\"text-sm font-medium text-purple-800\">{lawsuit.lawyer}</div>\r\n                      <div className=\"text-xs text-purple-600\">Avukat</div>\r\n                    </div>\r\n                  </div>\r\n                </CardContent>\r\n              </Card>\r\n            ))}\r\n          </div>\r\n        </TabsContent>\r\n      </Tabs>\r\n\r\n      {/* Lawsuit Detail Dialog */}\r\n      <Dialog open={isDetailOpen} onOpenChange={setIsDetailOpen}>\r\n        <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\r\n          <DialogHeader>\r\n            <DialogTitle className=\"flex items-center gap-2\">\r\n              <Gavel className=\"w-5 h-5\" />\r\n              {selectedLawsuit?.subject} - {selectedLawsuit?.caseNumber}\r\n            </DialogTitle>\r\n          </DialogHeader>\r\n\r\n          {selectedLawsuit && (\r\n            <div className=\"space-y-6\">\r\n              <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4\">\r\n                <div className=\"space-y-3\">\r\n                  <div>\r\n                    <label className=\"text-sm font-medium text-muted-foreground\">Mahkeme</label>\r\n                    <p>{selectedLawsuit.court}</p>\r\n                  </div>\r\n                  <div>\r\n                    <label className=\"text-sm font-medium text-muted-foreground\">Davac─▒</label>\r\n                    <p>{selectedLawsuit.plaintiff}</p>\r\n                  </div>\r\n                  <div>\r\n                    <label className=\"text-sm font-medium text-muted-foreground\">Daval─▒</label>\r\n                    <p>{selectedLawsuit.defendant}</p>\r\n                  </div>\r\n                  <div>\r\n                    <label className=\"text-sm font-medium text-muted-foreground\">Avukat</label>\r\n                    <p>{selectedLawsuit.lawyer}</p>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"space-y-3\">\r\n                  <div>\r\n                    <label className=\"text-sm font-medium text-muted-foreground\">Durum</label>\r\n                    <div className=\"mt-1\">{getStatusBadge(selectedLawsuit.status)}</div>\r\n                  </div>\r\n                  <div>\r\n                    <label className=\"text-sm font-medium text-muted-foreground\">A┼şama</label>\r\n                    <div className=\"mt-1\">{getStageBadge(selectedLawsuit.stage)}</div>\r\n                  </div>\r\n                  <div>\r\n                    <label className=\"text-sm font-medium text-muted-foreground\">\r\n                      Ba┼şlang─▒├ğ Tarihi\r\n                    </label>\r\n                    <p>{formatDate(selectedLawsuit.startDate)}</p>\r\n                  </div>\r\n                  {selectedLawsuit.nextHearing && (\r\n                    <div>\r\n                      <label className=\"text-sm font-medium text-muted-foreground\">\r\n                        Sonraki Duru┼şma\r\n                      </label>\r\n                      <p>{formatDate(selectedLawsuit.nextHearing)}</p>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-4\">\r\n                {selectedLawsuit.amount && (\r\n                  <div className=\"text-center p-4 bg-blue-50 rounded-lg\">\r\n                    <div className=\"text-lg font-medium text-blue-800\">\r\n                      {formatCurrency(selectedLawsuit.amount)}\r\n                    </div>\r\n                    <div className=\"text-sm text-blue-600\">Dava Tutar─▒</div>\r\n                  </div>\r\n                )}\r\n\r\n                <div className=\"text-center p-4 bg-red-50 rounded-lg\">\r\n                  <div className=\"text-lg font-medium text-red-800\">\r\n                    {formatCurrency(selectedLawsuit.costs)}\r\n                  </div>\r\n                  <div className=\"text-sm text-red-600\">Masraf</div>\r\n                </div>\r\n\r\n                {selectedLawsuit.estimatedDuration && (\r\n                  <div className=\"text-center p-4 bg-green-50 rounded-lg\">\r\n                    <div className=\"text-lg font-medium text-green-800\">\r\n                      {selectedLawsuit.estimatedDuration} ay\r\n                    </div>\r\n                    <div className=\"text-sm text-green-600\">Tahmini S├╝re</div>\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              <div>\r\n                <label className=\"text-sm font-medium text-muted-foreground\">Belgeler</label>\r\n                <div className=\"flex flex-wrap gap-2 mt-1\">\r\n                  {selectedLawsuit.documents.map((doc, index) => (\r\n                    <Badge key={index} variant=\"secondary\">\r\n                      {doc}\r\n                    </Badge>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n\r\n              {selectedLawsuit.notes && (\r\n                <div>\r\n                  <label className=\"text-sm font-medium text-muted-foreground\">Notlar</label>\r\n                  <p className=\"mt-1 text-sm bg-gray-50 p-3 rounded-lg\">{selectedLawsuit.notes}</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          )}\r\n        </DialogContent>\r\n      </Dialog>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Default export\r\nexport default LawsuitTrackingPage;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\LawyerAssignmentsPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\LegalConsultationPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'LegalConsultation' is defined but never used.","line":13,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":28},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'LegalConsultation' is defined but never used. Allowed unused vars must match /^_/u.","line":13,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":13,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getConsultations' is assigned a value but never used.","line":52,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":23},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'getConsultations' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":52,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":52,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'hasResults' is assigned a value but never used.","line":74,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":15},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'hasResults' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":74,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":74,"endColumn":15},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":95,"column":24,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":95,"endColumn":86},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'filterConfig'. Either include it or remove the dependency array.","line":104,"column":6,"nodeType":"ArrayExpression","endLine":104,"endColumn":57,"suggestions":[{"desc":"Update the dependencies array to be: [filterConfig, activeTab, searchState.results]","fix":{"range":[3192,3243],"text":"[filterConfig, activeTab, searchState.results]"}}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview LegalConsultationPage Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\n\r\n\r\n\r\n\r\n\r\ninterface LegalConsultation {\r\n  id: number;\r\n  clientName: string;\r\n  clientPhone: string;\r\n  clientEmail: string;\r\n  subject: string;\r\n  description: string;\r\n  category: 'medeni' | 'ceza' | 'is' | 'ticaret' | 'idare' | 'aile' | 'icra' | 'diger';\r\n  urgency: 'acil' | 'orta' | 'normal';\r\n  status: 'bekliyor' | 'incelemede' | 'atandi' | 'tamamlandi';\r\n  assignedLawyer?: string;\r\n  lawyerPhone?: string;\r\n  consultationDate?: string;\r\n  notes?: string;\r\n  createdDate: string;\r\n  expectedDate?: string;\r\n  rating?: number;\r\n}\r\n\r\n// Mock data kald─▒r─▒ld─▒ - ger├ğek veriler API'den gelecek\r\n\r\nimport { useState, useMemo } from 'react';\r\nimport { useSearch } from '../../hooks/useSearch';\r\nimport type { Consultation } from '../../types/consultation';\r\nimport type { SearchConfig } from '../../types/search';\r\n\r\n// Search configuration for consultations\r\nconst CONSULTATION_SEARCH_CONFIG: SearchConfig = {\r\n  searchableFields: ['clientName', 'subject', 'description', 'category', 'assignedLawyer'],\r\n  filterableFields: ['category', 'urgency', 'status', 'assignedLawyer'],\r\n  sortableFields: ['createdDate', 'consultationDate', 'clientName', 'urgency'],\r\n  defaultSort: { field: 'createdDate', direction: 'desc' },\r\n  itemsPerPage: 10,\r\n  enableFuzzySearch: true,\r\n  enableTurkishSearch: true,\r\n  debounceMs: 300,\r\n};\r\n\r\n// Consultation data will be fetched from API\r\nconst getConsultations = async (): Promise<Consultation[]> => {\r\n  // TODO: Implement real API call to fetch consultations\r\n  return [];\r\n};\r\n\r\n/**\r\n * LegalConsultationPage function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function LegalConsultationPage() {\r\n  const [selectedConsultation, setSelectedConsultation] = useState<Consultation | null>(null);\r\n  const [isDetailOpen, setIsDetailOpen] = useState(false);\r\n  const [activeTab, setActiveTab] = useState('all');\r\n\r\n  // Use the optimized search hook\r\n  const {\r\n    searchState,\r\n    setQuery,\r\n    setFilters,\r\n    clearFilters,\r\n    hasResults,\r\n    isEmpty,\r\n  } = useSearch<Consultation>({\r\n    config: CONSULTATION_SEARCH_CONFIG,\r\n    data: [], // TODO: Replace with real data from getConsultations()\r\n    initialFilters: [],\r\n  });\r\n\r\n  // Memoized filter transformations\r\n  const filterConfig = useMemo(() => ({\r\n    tabs: {\r\n      all: {},\r\n      pending: { status: 'pending' },\r\n      scheduled: { status: 'scheduled' },\r\n      completed: { status: 'completed' },\r\n      urgent: { priority: 'high' },\r\n    },\r\n  }), []);\r\n\r\n  // Memoized filtered consultations based on active tab\r\n  const filteredConsultations = useMemo(() => {\r\n    const tabFilters = filterConfig.tabs[activeTab as keyof typeof filterConfig.tabs] || {};\r\n    \r\n    return searchState.results.filter((consultation) => {\r\n      // Apply tab-specific filters\r\n      if (tabFilters.status && consultation.status !== tabFilters.status) return false;\r\n      if (tabFilters.priority && consultation.priority !== tabFilters.priority) return false;\r\n      \r\n      return true;\r\n    });\r\n  }, [searchState.results, activeTab, filterConfig.tabs]);\r\n\r\n  // Handler for tab changes\r\n  const handleTabChange = (tab: string) => {\r\n    setActiveTab(tab);\r\n    clearFilters(); // Clear existing filters when changing tabs\r\n  };\r\n\r\n  return (\r\n    <div className=\"legal-consultation\">\r\n      {/* Tabs */}\r\n      <div className=\"tabs\">\r\n        <button\r\n          className={activeTab === 'all' ? 'active' : ''}\r\n          onClick={() => { handleTabChange('all'); }}\r\n        >\r\n          T├╝m Dan─▒┼şmalar\r\n        </button>\r\n        <button\r\n          className={activeTab === 'pending' ? 'active' : ''}\r\n          onClick={() => { handleTabChange('pending'); }}\r\n        >\r\n          Bekleyen\r\n        </button>\r\n        <button\r\n          className={activeTab === 'scheduled' ? 'active' : ''}\r\n          onClick={() => { handleTabChange('scheduled'); }}\r\n        >\r\n          Planlanm─▒┼ş\r\n        </button>\r\n        <button\r\n          className={activeTab === 'completed' ? 'active' : ''}\r\n          onClick={() => { handleTabChange('completed'); }}\r\n        >\r\n          Tamamlanm─▒┼ş\r\n        </button>\r\n        <button\r\n          className={activeTab === 'urgent' ? 'active' : ''}\r\n          onClick={() => { handleTabChange('urgent'); }}\r\n        >\r\n          Acil\r\n        </button>\r\n      </div>\r\n\r\n      {/* Search and filters */}\r\n      <div className=\"search-filters\">\r\n        <input\r\n          type=\"text\"\r\n          placeholder=\"Dan─▒┼şma ara...\"\r\n          value={searchState.query}\r\n          onChange={(e) => { setQuery(e.target.value); }}\r\n        />\r\n        <select\r\n          value={searchState.filters.find((f) => f.field === 'category')?.value ?? ''}\r\n          onChange={(e) => { setFilters([{ field: 'category', value: e.target.value }]); }}\r\n          title=\"Kategori se├ğin\"\r\n          aria-label=\"Kategori filtresi\"\r\n        >\r\n          <option value=\"\">T├╝m Kategoriler</option>\r\n          {/* Add category options */}\r\n        </select>\r\n      </div>\r\n\r\n      {/* Results */}\r\n      {searchState.isLoading ? (\r\n        <div>Y├╝kleniyor...</div>\r\n      ) : isEmpty ? (\r\n        <div>Sonu├ğ bulunamad─▒</div>\r\n      ) : (\r\n        <div className=\"consultations-grid\">\r\n          {filteredConsultations.map((consultation) => (\r\n            <div\r\n              key={consultation.id}\r\n              className=\"consultation-card\"\r\n              onClick={() => {\r\n                setSelectedConsultation(consultation);\r\n                setIsDetailOpen(true);\r\n              }}\r\n            >\r\n              {/* Consultation card content */}\r\n              <h3>{consultation.title}</h3>\r\n              <p>{consultation.description}</p>\r\n              <p>Kategori: {consultation.category}</p>\r\n              <div className={`status ${consultation.status}`}>\r\n                {consultation.status === 'pending' ? 'Bekliyor' :\r\n                 consultation.status === 'scheduled' ? 'Planland─▒' :\r\n                 'Tamamland─▒'}\r\n              </div>\r\n              <div className={`priority ${consultation.priority}`}>\r\n                {consultation.priority === 'high' ? 'Acil' :\r\n                 consultation.priority === 'medium' ? 'Normal' :\r\n                 'D├╝┼ş├╝k'}\r\n              </div>\r\n            </div>\r\n          ))}\r\n        </div>\r\n      )}\r\n\r\n      {/* Consultation detail modal */}\r\n      {isDetailOpen && selectedConsultation && (\r\n        <div className=\"modal\">\r\n          <div className=\"modal-content\">\r\n            <button onClick={() => { setIsDetailOpen(false); }}>Kapat</button>\r\n            <h2>{selectedConsultation.title}</h2>\r\n            {/* Add more consultation details */}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Default export\r\nexport default LegalConsultationPage;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\LegalDocumentsPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setDocuments' is assigned a value but never used.","line":49,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":33},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'setDocuments' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":49,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":49,"endColumn":33},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":80,"column":34,"nodeType":"MemberExpression","endLine":80,"endColumn":48},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":98,"column":34,"nodeType":"MemberExpression","endLine":98,"endColumn":46}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview LegalDocumentsPage Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport {\r\n  Calendar,\r\n  Download,\r\n  Eye,\r\n  FileText,\r\n  Filter,\r\n  Plus,\r\n  Search,\r\n  Upload,\r\n  User,\r\n} from 'lucide-react';\r\nimport { useState } from 'react';\r\nimport { Badge } from '../ui/badge';\r\nimport { Button } from '../ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Input } from '../ui/input';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';\r\n\r\ninterface LegalDocument {\r\n  id: number;\r\n  name: string;\r\n  type: 'sozlesme' | 'dilekce' | 'karar' | 'tutanak' | 'rapor' | 'diger';\r\n  category: 'medeni' | 'ceza' | 'is' | 'idare' | 'ticaret' | 'aile';\r\n  relatedCase?: string;\r\n  uploadDate: string;\r\n  uploadedBy: string;\r\n  size: string;\r\n  status: 'onaylandi' | 'bekliyor' | 'reddedildi';\r\n  description?: string;\r\n}\r\n\r\n// Mock data kald─▒r─▒ld─▒ - ger├ğek veriler API'den gelecek\r\n\r\n/**\r\n * LegalDocumentsPage function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function LegalDocumentsPage() {\r\n  const [documents, setDocuments] = useState<LegalDocument[]>([]);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [filterType, setFilterType] = useState<string>('all');\r\n  const [filterCategory, setFilterCategory] = useState<string>('all');\r\n  const [activeTab, setActiveTab] = useState('all');\r\n\r\n  const filteredDocuments = documents.filter((doc) => {\r\n    const matchesSearch =\r\n      searchTerm === '' ||\r\n      doc.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      doc.uploadedBy.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n      doc.relatedCase?.includes(searchTerm);\r\n\r\n    const matchesType = filterType === 'all' || doc.type === filterType;\r\n    const matchesCategory = filterCategory === 'all' || doc.category === filterCategory;\r\n\r\n    const matchesTab =\r\n      activeTab === 'all' ||\r\n      (activeTab === 'approved' && doc.status === 'onaylandi') ||\r\n      (activeTab === 'pending' && doc.status === 'bekliyor');\r\n\r\n    return matchesSearch && matchesType && matchesCategory && matchesTab;\r\n  });\r\n\r\n  const getStatusBadge = (status: LegalDocument['status']) => {\r\n    const config = {\r\n      onaylandi: { label: 'Onayland─▒', className: 'bg-green-50 text-green-700 border-green-200' },\r\n      bekliyor: { label: 'Bekliyor', className: 'bg-yellow-50 text-yellow-700 border-yellow-200' },\r\n      reddedildi: { label: 'Reddedildi', className: 'bg-red-50 text-red-700 border-red-200' },\r\n    };\r\n\r\n    const { label, className } = config[status];\r\n    return (\r\n      <Badge variant=\"outline\" className={`${className} text-xs px-2 py-1`}>\r\n        {label}\r\n      </Badge>\r\n    );\r\n  };\r\n\r\n  const getTypeBadge = (type: LegalDocument['type']) => {\r\n    const config = {\r\n      sozlesme: { label: 'S├Âzle┼şme', className: 'bg-blue-50 text-blue-700' },\r\n      dilekce: { label: 'Dilek├ğe', className: 'bg-purple-50 text-purple-700' },\r\n      karar: { label: 'Karar', className: 'bg-green-50 text-green-700' },\r\n      tutanak: { label: 'Tutanak', className: 'bg-orange-50 text-orange-700' },\r\n      rapor: { label: 'Rapor', className: 'bg-indigo-50 text-indigo-700' },\r\n      diger: { label: 'Di─şer', className: 'bg-gray-50 text-gray-700' },\r\n    };\r\n\r\n    const { label, className } = config[type];\r\n    return <Badge className={`${className} text-xs px-2 py-1 border-0`}>{label}</Badge>;\r\n  };\r\n\r\n  const approvedDocs = documents.filter((d) => d.status === 'onaylandi').length;\r\n  const pendingDocs = documents.filter((d) => d.status === 'bekliyor').length;\r\n\r\n  return (\r\n    <div className=\"flex-1 space-y-4 p-4 sm:space-y-6 sm:p-6\">\r\n      {/* Header */}\r\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\r\n        <div>\r\n          <h1 className=\"text-2xl font-medium\">Hukuki Belgeler</h1>\r\n          <p className=\"text-muted-foreground mt-1\">Hukuki belge y├Ânetimi ve ar┼şiv sistemi</p>\r\n        </div>\r\n        <Button className=\"gap-2 w-full sm:w-auto\">\r\n          <Upload className=\"w-4 h-4\" />\r\n          Belge Y├╝kle\r\n        </Button>\r\n      </div>\r\n\r\n      {/* Quick Stats */}\r\n      <div className=\"grid grid-cols-2 sm:grid-cols-4 gap-4\">\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm text-muted-foreground\">Toplam Belge</p>\r\n                <p className=\"text-2xl font-medium\">{documents.length}</p>\r\n              </div>\r\n              <FileText className=\"w-5 h-5 text-muted-foreground\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm text-muted-foreground\">Onaylanan</p>\r\n                <p className=\"text-2xl font-medium text-green-600\">{approvedDocs}</p>\r\n              </div>\r\n              <Eye className=\"w-5 h-5 text-green-600\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm text-muted-foreground\">Bekleyen</p>\r\n                <p className=\"text-2xl font-medium text-yellow-600\">{pendingDocs}</p>\r\n              </div>\r\n              <Filter className=\"w-5 h-5 text-yellow-600\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        <Card>\r\n          <CardContent className=\"p-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <div>\r\n                <p className=\"text-sm text-muted-foreground\">Bu Ay</p>\r\n                <p className=\"text-2xl font-medium text-blue-600\">3</p>\r\n              </div>\r\n              <Plus className=\"w-5 h-5 text-blue-600\" />\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n\r\n      {/* Search and Filters */}\r\n      <div className=\"flex flex-col sm:flex-row gap-4\">\r\n        <div className=\"relative flex-1\">\r\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-muted-foreground w-4 h-4\" />\r\n          <Input\r\n            placeholder=\"Belge ara...\"\r\n            value={searchTerm}\r\n            onChange={(e) => {\r\n              setSearchTerm(e.target.value);\r\n            }}\r\n            className=\"pl-10\"\r\n          />\r\n        </div>\r\n\r\n        <div className=\"flex gap-2 overflow-x-auto\">\r\n          <Select value={filterType} onValueChange={setFilterType}>\r\n            <SelectTrigger className=\"w-[130px] shrink-0\">\r\n              <SelectValue placeholder=\"Belge T├╝r├╝\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"all\">T├╝m T├╝rler</SelectItem>\r\n              <SelectItem value=\"sozlesme\">S├Âzle┼şme</SelectItem>\r\n              <SelectItem value=\"dilekce\">Dilek├ğe</SelectItem>\r\n              <SelectItem value=\"karar\">Karar</SelectItem>\r\n              <SelectItem value=\"tutanak\">Tutanak</SelectItem>\r\n              <SelectItem value=\"rapor\">Rapor</SelectItem>\r\n              <SelectItem value=\"diger\">Di─şer</SelectItem>\r\n            </SelectContent>\r\n          </Select>\r\n\r\n          <Select value={filterCategory} onValueChange={setFilterCategory}>\r\n            <SelectTrigger className=\"w-[120px] shrink-0\">\r\n              <SelectValue placeholder=\"Kategori\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"all\">T├╝m Kategoriler</SelectItem>\r\n              <SelectItem value=\"medeni\">Medeni</SelectItem>\r\n              <SelectItem value=\"ceza\">Ceza</SelectItem>\r\n              <SelectItem value=\"is\">─░┼ş</SelectItem>\r\n              <SelectItem value=\"idare\">─░dare</SelectItem>\r\n              <SelectItem value=\"ticaret\">Ticaret</SelectItem>\r\n              <SelectItem value=\"aile\">Aile</SelectItem>\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Tabs */}\r\n      <Tabs value={activeTab} onValueChange={setActiveTab}>\r\n        <TabsList className=\"grid w-full grid-cols-3\">\r\n          <TabsTrigger value=\"all\">T├╝m├╝</TabsTrigger>\r\n          <TabsTrigger value=\"approved\">Onaylanm─▒┼ş</TabsTrigger>\r\n          <TabsTrigger value=\"pending\">Bekleyen</TabsTrigger>\r\n        </TabsList>\r\n\r\n        <TabsContent value={activeTab} className=\"mt-4\">\r\n          <div className=\"grid gap-4\">\r\n            {filteredDocuments.map((document) => (\r\n              <Card key={document.id} className=\"hover:shadow-md transition-shadow\">\r\n                <CardHeader className=\"pb-3\">\r\n                  <div className=\"flex flex-col sm:flex-row sm:items-start sm:justify-between gap-3\">\r\n                    <div className=\"flex-1 min-w-0\">\r\n                      <CardTitle className=\"text-lg font-medium\">{document.name}</CardTitle>\r\n                      {document.relatedCase && (\r\n                        <p className=\"text-muted-foreground mt-1\">\r\n                          Dava No: {document.relatedCase}\r\n                        </p>\r\n                      )}\r\n                      <div className=\"flex flex-wrap items-center gap-2 mt-2\">\r\n                        {getStatusBadge(document.status)}\r\n                        {getTypeBadge(document.type)}\r\n                      </div>\r\n                    </div>\r\n\r\n                    <div className=\"flex gap-2\">\r\n                      <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\">\r\n                        <Eye className=\"w-4 h-4\" />\r\n                      </Button>\r\n                      <Button variant=\"ghost\" size=\"icon\" className=\"h-8 w-8\">\r\n                        <Download className=\"w-4 h-4\" />\r\n                      </Button>\r\n                    </div>\r\n                  </div>\r\n                </CardHeader>\r\n\r\n                <CardContent className=\"pt-0\">\r\n                  <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4 mb-3\">\r\n                    <div className=\"flex items-center gap-2 text-sm\">\r\n                      <User className=\"w-4 h-4 text-muted-foreground\" />\r\n                      <span className=\"truncate\">{document.uploadedBy}</span>\r\n                    </div>\r\n                    <div className=\"flex items-center gap-2 text-sm\">\r\n                      <Calendar className=\"w-4 h-4 text-muted-foreground\" />\r\n                      <span className=\"truncate\">\r\n                        {new Date(document.uploadDate).toLocaleDateString('tr-TR')}\r\n                      </span>\r\n                    </div>\r\n                    <div className=\"flex items-center gap-2 text-sm\">\r\n                      <FileText className=\"w-4 h-4 text-muted-foreground\" />\r\n                      <span className=\"truncate\">{document.size}</span>\r\n                    </div>\r\n                  </div>\r\n\r\n                  {document.description && (\r\n                    <div className=\"p-3 bg-gray-50 rounded-lg\">\r\n                      <p className=\"text-sm text-gray-700\">{document.description}</p>\r\n                    </div>\r\n                  )}\r\n                </CardContent>\r\n              </Card>\r\n            ))}\r\n          </div>\r\n        </TabsContent>\r\n      </Tabs>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Default export\r\nexport default LegalDocumentsPage;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\MembersPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":81,"column":21,"nodeType":"CallExpression","messageId":"neverNullish","endLine":81,"endColumn":38},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":94,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":94,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2870,2872],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has a missing dependency: 'loadMembers'. Either include it or remove the dependency array.","line":139,"column":6,"nodeType":"ArrayExpression","endLine":139,"endColumn":44,"suggestions":[{"desc":"Update the dependencies array to be: [loadMembers, searchTerm, statusFilter, typeFilter]","fix":{"range":[4057,4095],"text":"[loadMembers, searchTerm, statusFilter, typeFilter]"}}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":142,"column":27,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":142,"endColumn":78},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":149,"column":30,"nodeType":"MemberExpression","endLine":149,"endColumn":53},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":153,"column":25,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":153,"endColumn":90},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":163,"column":45,"nodeType":"MemberExpression","endLine":163,"endColumn":66},{"ruleId":"@typescript-eslint/no-empty-function","severity":1,"message":"Unexpected empty method 'onClick'.","line":182,"column":28,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":182,"endColumn":30,"suggestions":[{"messageId":"suggestComment","data":{"name":"method 'onClick'"},"fix":{"range":[5498,5498],"text":" /* empty */ "},"desc":"Add comment inside empty method 'onClick'."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":1,"message":"Unexpected empty method 'onClick'.","line":188,"column":30,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":188,"endColumn":32,"suggestions":[{"messageId":"suggestComment","data":{"name":"method 'onClick'"},"fix":{"range":[5683,5683],"text":" /* empty */ "},"desc":"Add comment inside empty method 'onClick'."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":287,"column":30,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":287,"endColumn":37},{"ruleId":"@typescript-eslint/no-empty-function","severity":1,"message":"Unexpected empty arrow function.","line":357,"column":44,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":357,"endColumn":46,"suggestions":[{"messageId":"suggestComment","data":{"name":"arrow function"},"fix":{"range":[13196,13196],"text":" /* empty */ "},"desc":"Add comment inside empty arrow function."}]},{"ruleId":"@typescript-eslint/no-empty-function","severity":1,"message":"Unexpected empty arrow function.","line":366,"column":44,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":366,"endColumn":46,"suggestions":[{"messageId":"suggestComment","data":{"name":"arrow function"},"fix":{"range":[13641,13641],"text":" /* empty */ "},"desc":"Add comment inside empty arrow function."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":381,"column":43,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[14252,14344],"text":"\r\n                    Yeni ├╝ye eklemek i├ğin &quot;Yeni ├£ye\" butonunu kullan─▒n\r\n                  "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[14252,14344],"text":"\r\n                    Yeni ├╝ye eklemek i├ğin &ldquo;Yeni ├£ye\" butonunu kullan─▒n\r\n                  "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[14252,14344],"text":"\r\n                    Yeni ├╝ye eklemek i├ğin &#34;Yeni ├£ye\" butonunu kullan─▒n\r\n                  "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[14252,14344],"text":"\r\n                    Yeni ├╝ye eklemek i├ğin &rdquo;Yeni ├£ye\" butonunu kullan─▒n\r\n                  "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"react/no-unescaped-entities","severity":2,"message":"`\"` can be escaped with `&quot;`, `&ldquo;`, `&#34;`, `&rdquo;`.","line":381,"column":52,"nodeType":"JSXText","messageId":"unescapedEntityAlts","suggestions":[{"messageId":"replaceWithAlt","data":{"alt":"&quot;"},"fix":{"range":[14252,14344],"text":"\r\n                    Yeni ├╝ye eklemek i├ğin \"Yeni ├£ye&quot; butonunu kullan─▒n\r\n                  "},"desc":"Replace with `&quot;`."},{"messageId":"replaceWithAlt","data":{"alt":"&ldquo;"},"fix":{"range":[14252,14344],"text":"\r\n                    Yeni ├╝ye eklemek i├ğin \"Yeni ├£ye&ldquo; butonunu kullan─▒n\r\n                  "},"desc":"Replace with `&ldquo;`."},{"messageId":"replaceWithAlt","data":{"alt":"&#34;"},"fix":{"range":[14252,14344],"text":"\r\n                    Yeni ├╝ye eklemek i├ğin \"Yeni ├£ye&#34; butonunu kullan─▒n\r\n                  "},"desc":"Replace with `&#34;`."},{"messageId":"replaceWithAlt","data":{"alt":"&rdquo;"},"fix":{"range":[14252,14344],"text":"\r\n                    Yeni ├╝ye eklemek i├ğin \"Yeni ├£ye&rdquo; butonunu kullan─▒n\r\n                  "},"desc":"Replace with `&rdquo;`."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":437,"column":24,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":437,"endColumn":31},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":438,"column":22,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":438,"endColumn":29},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":445,"column":35,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":445,"endColumn":46},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":446,"column":35,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":446,"endColumn":46},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":451,"column":34,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":451,"endColumn":45},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":456,"column":61,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":456,"endColumn":73}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview MembersPage Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport {\r\n  Clock,\r\n  Download,\r\n  Edit,\r\n  Eye,\r\n  Filter,\r\n  Plus,\r\n  Trash2,\r\n  UserCheck,\r\n  UserPlus,\r\n  UserX,\r\n  Users,\r\n} from 'lucide-react';\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { membersService, type Member } from '../../services/membersService';\r\nimport { PageLoading } from '../LoadingSpinner';\r\nimport { PageLayout } from '../PageLayout';\r\nimport { Avatar, AvatarFallback, AvatarImage } from '../ui/avatar';\r\nimport { Badge } from '../ui/badge';\r\nimport { Button } from '../ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { DesktopActionButtons, DesktopFilters, DesktopStatsCard } from '../ui/desktop-table';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../ui/table';\r\n\r\nimport { logger } from '../../lib/logging/logger';\r\n// Status and membership type mappings for Turkish display\r\nconst statusMapping = {\r\n  active: 'Aktif',\r\n  inactive: 'Pasif',\r\n  suspended: 'Ask─▒da',\r\n} as const;\r\n\r\nconst membershipTypeMapping = {\r\n  standard: 'Standart',\r\n  premium: 'Premium',\r\n  corporate: 'Kurumsal',\r\n  student: '├û─şrenci',\r\n  senior: 'Emekli',\r\n} as const;\r\n\r\n/**\r\n * MembersPage function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function MembersPage() {\r\n  // User authentication handled by AuthContext\r\n  const [loading, setLoading] = useState(true);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState('all');\r\n  const [typeFilter, setTypeFilter] = useState('all');\r\n  const [members, setMembers] = useState<Member[]>([]);\r\n  const [totalCount, setTotalCount] = useState(0);\r\n  const [currentPage, setCurrentPage] = useState(1);\r\n  const [pageSize] = useState(10);\r\n  const [stats, setStats] = useState({\r\n    total: 0,\r\n    active: 0,\r\n    inactive: 0,\r\n    suspended: 0,\r\n  });\r\n\r\n  // Load members data\r\n  const loadMembers = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n\r\n      const filters = {\r\n        membershipStatus: statusFilter !== 'all' ? statusFilter : undefined,\r\n        membershipType: typeFilter !== 'all' ? typeFilter : undefined,\r\n        searchTerm: searchTerm.trim() ?? undefined,\r\n      };\r\n\r\n      const result = await membersService.getMembers(currentPage, pageSize, filters);\r\n\r\n      if (result.error) {\r\n        logger.error('ÔØî Error loading members:', result.error);\r\n        setMembers([]);\r\n        setTotalCount(0);\r\n        toast.error('├£yeler y├╝klenirken hata olu┼ştu');\r\n        return;\r\n      }\r\n\r\n      setMembers(result.data || []);\r\n      setTotalCount(result.count ?? 0);\r\n    } catch (error) {\r\n      logger.error('Error loading members:', error);\r\n      toast.error('├£yeler y├╝klenirken hata olu┼ştu');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [currentPage, pageSize, statusFilter, typeFilter, searchTerm]);\r\n\r\n  // Load stats\r\n  const loadStats = useCallback(async () => {\r\n    try {\r\n      const result = await membersService.getMemberStats();\r\n      if (result.data) {\r\n        setStats({\r\n          total: result.data.total,\r\n          active: result.data.active,\r\n          inactive: result.data.inactive,\r\n          suspended: result.data.suspended,\r\n        });\r\n      }\r\n    } catch (error) {\r\n      logger.error('Error loading stats:', error);\r\n    }\r\n  }, []);\r\n\r\n  // Load cities for filter\r\n\r\n  // Initial load\r\n  useEffect(() => {\r\n    loadMembers();\r\n    loadStats();\r\n  }, [loadMembers, loadStats]);\r\n\r\n  // Reload on filter changes with debounce\r\n  useEffect(() => {\r\n    const timeoutId = setTimeout(() => {\r\n      setCurrentPage(1); // Reset to first page on filter change\r\n      loadMembers();\r\n    }, 300);\r\n\r\n    return () => {\r\n      clearTimeout(timeoutId);\r\n    };\r\n  }, [searchTerm, statusFilter, typeFilter]);\r\n\r\n  const getStatusBadge = (status: string) => {\r\n    const displayStatus = statusMapping[status as keyof typeof statusMapping] || status;\r\n    const variants = {\r\n      Aktif: 'bg-green-100 text-green-800 hover:bg-green-100',\r\n      Pasif: 'bg-gray-100 text-gray-800 hover:bg-gray-100',\r\n      Ask─▒da: 'bg-yellow-100 text-yellow-800 hover:bg-yellow-100',\r\n    };\r\n\r\n    return <Badge className={variants[displayStatus]}>{displayStatus}</Badge>;\r\n  };\r\n\r\n  const getTypeBadge = (type: string) => {\r\n    const displayType = membershipTypeMapping[type as keyof typeof membershipTypeMapping] || type;\r\n    const variants = {\r\n      Standart: 'bg-blue-100 text-blue-800',\r\n      Premium: 'bg-purple-100 text-purple-800',\r\n      Kurumsal: 'bg-orange-100 text-orange-800',\r\n      ├û─şrenci: 'bg-emerald-100 text-emerald-800',\r\n      Emekli: 'bg-indigo-100 text-indigo-800',\r\n    };\r\n\r\n    return (\r\n      <Badge variant=\"secondary\" className={variants[displayType]}>\r\n        {displayType}\r\n      </Badge>\r\n    );\r\n  };\r\n\r\n  if (loading && members.length === 0) {\r\n    return <PageLoading />;\r\n  }\r\n\r\n  return (\r\n    <PageLayout\r\n      title=\"├£ye Y├Ânetimi\"\r\n      subtitle=\"Dernek ├╝yelerini g├Âr├╝nt├╝leyin ve y├Ânetin\"\r\n      actions={\r\n        <DesktopActionButtons\r\n          primaryAction={{\r\n            label: 'Yeni ├£ye Ekle',\r\n            icon: <Plus className=\"w-4 h-4\" />,\r\n            onClick: () => {},\r\n          }}\r\n          secondaryActions={[\r\n            {\r\n              label: 'D─▒┼şa Aktar',\r\n              icon: <Download className=\"w-4 h-4\" />,\r\n              onClick: () => {},\r\n              variant: 'outline',\r\n            },\r\n          ]}\r\n        />\r\n      }\r\n    >\r\n      <div className=\"p-6 space-y-6\">\r\n        {/* Desktop Stats Cards */}\r\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">\r\n          <DesktopStatsCard\r\n            title=\"Toplam ├£ye\"\r\n            value={stats.total}\r\n            subtitle=\"Kay─▒tl─▒ ├╝ye say─▒s─▒\"\r\n            icon={<Users className=\"w-4 h-4\" />}\r\n            color=\"blue\"\r\n            trend={{ value: '+%12 bu ay', positive: true }}\r\n          />\r\n\r\n          <DesktopStatsCard\r\n            title=\"Aktif ├£ye\"\r\n            value={stats.active}\r\n            subtitle=\"Aktif durumda\"\r\n            icon={<UserCheck className=\"w-4 h-4\" />}\r\n            color=\"green\"\r\n            trend={{\r\n              value: `%${Math.round((stats.active / stats.total) * 100) || 0} aktif`,\r\n              positive: true,\r\n            }}\r\n          />\r\n\r\n          <DesktopStatsCard\r\n            title=\"Pasif ├£ye\"\r\n            value={stats.inactive}\r\n            subtitle=\"Pasif durumda\"\r\n            icon={<UserX className=\"w-4 h-4\" />}\r\n            color=\"gray\"\r\n            trend={{\r\n              value: `%${Math.round((stats.inactive / stats.total) * 100) || 0} pasif`,\r\n              positive: false,\r\n            }}\r\n          />\r\n\r\n          <DesktopStatsCard\r\n            title=\"Ask─▒da\"\r\n            value={stats.suspended}\r\n            subtitle=\"Ask─▒ya al─▒nm─▒┼ş\"\r\n            icon={<Clock className=\"w-4 h-4\" />}\r\n            color=\"yellow\"\r\n            trend={{\r\n              value: stats.suspended > 0 ? 'Dikkat gerekli' : 'Temiz durum',\r\n              positive: stats.suspended === 0,\r\n            }}\r\n          />\r\n        </div>\r\n\r\n        {/* Mobile-Optimized Filters */}\r\n        <DesktopFilters\r\n          searchValue={searchTerm}\r\n          onSearchChange={setSearchTerm}\r\n          searchPlaceholder=\"Dernek ├╝yesi ara...\"\r\n        >\r\n          <Select value={statusFilter} onValueChange={setStatusFilter}>\r\n            <SelectTrigger className=\"min-h-[44px] text-base\">\r\n              <SelectValue placeholder=\"T├╝m Durumlar\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"all\">T├╝m Durumlar</SelectItem>\r\n              <SelectItem value=\"active\">Aktif</SelectItem>\r\n              <SelectItem value=\"inactive\">Pasif</SelectItem>\r\n              <SelectItem value=\"suspended\">Ask─▒da</SelectItem>\r\n            </SelectContent>\r\n          </Select>\r\n\r\n          <Select value={typeFilter} onValueChange={setTypeFilter}>\r\n            <SelectTrigger className=\"min-h-[44px] text-base\">\r\n              <SelectValue placeholder=\"T├╝m ├£yelik Tipleri\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"all\">T├╝m Tipler</SelectItem>\r\n              <SelectItem value=\"standard\">Standart</SelectItem>\r\n              <SelectItem value=\"premium\">Premium</SelectItem>\r\n              <SelectItem value=\"corporate\">Kurumsal</SelectItem>\r\n              <SelectItem value=\"student\">├û─şrenci</SelectItem>\r\n              <SelectItem value=\"senior\">Emekli</SelectItem>\r\n            </SelectContent>\r\n          </Select>\r\n\r\n          <Button variant=\"outline\" className=\"min-h-[44px] px-4 text-base\">\r\n            <Filter className=\"w-4 h-4 mr-2\" />\r\n            <span className=\"hidden sm:inline\">Geli┼şmi┼ş Filtre</span>\r\n            <span className=\"sm:hidden\">Filtre</span>\r\n          </Button>\r\n        </DesktopFilters>\r\n\r\n        {/* Mobile-Optimized Members List */}\r\n        <Card className=\"border-0 shadow-sm\">\r\n          <CardHeader className=\"pb-4\">\r\n            <CardTitle className=\"text-lg sm:text-xl\">\r\n              ├£ye Listesi ({(members || []).length} ├╝ye)\r\n            </CardTitle>\r\n          </CardHeader>\r\n\r\n          <CardContent className=\"p-0\">\r\n            {/* Mobile Card View for small screens */}\r\n            <div className=\"block sm:hidden\">\r\n              {loading ? (\r\n                <div className=\"space-y-3 p-4\">\r\n                  {Array.from({ length: 3 }).map((_, i) => (\r\n                    <Card key={i} className=\"border border-gray-200\">\r\n                      <CardContent className=\"p-4\">\r\n                        <div className=\"flex items-center gap-3 mb-3\">\r\n                          <div className=\"w-12 h-12 bg-gray-200 rounded-full animate-pulse\" />\r\n                          <div className=\"flex-1 space-y-2\">\r\n                            <div className=\"h-4 bg-gray-200 rounded w-32 animate-pulse\" />\r\n                            <div className=\"h-3 bg-gray-200 rounded w-24 animate-pulse\" />\r\n                          </div>\r\n                        </div>\r\n                        <div className=\"space-y-2\">\r\n                          <div className=\"h-4 bg-gray-200 rounded w-40 animate-pulse\" />\r\n                          <div className=\"h-4 bg-gray-200 rounded w-28 animate-pulse\" />\r\n                        </div>\r\n                      </CardContent>\r\n                    </Card>\r\n                  ))}\r\n                </div>\r\n              ) : members.length > 0 ? (\r\n                <div className=\"space-y-3 p-4\">\r\n                  {members.map((member) => (\r\n                    <Card\r\n                      key={member.id}\r\n                      className=\"border border-gray-200 hover:shadow-md transition-shadow\"\r\n                    >\r\n                      <CardContent className=\"p-4\">\r\n                        <div className=\"flex justify-between items-start mb-3\">\r\n                          <div className=\"flex items-center gap-3 flex-1\">\r\n                            <Avatar className=\"w-12 h-12\">\r\n                              <AvatarFallback className=\"bg-corporate text-white text-sm font-medium\">\r\n                                {member.name\r\n                                  .split(' ')\r\n                                  .map((n) => n[0])\r\n                                  .join('')\r\n                                  .slice(0, 2)}\r\n                              </AvatarFallback>\r\n                            </Avatar>\r\n                            <div className=\"flex-1 min-w-0\">\r\n                              <h3 className=\"font-medium text-gray-900 truncate\">{member.name}</h3>\r\n                              <p className=\"text-sm text-gray-600 truncate\">{member.email}</p>\r\n                              <p className=\"text-xs text-gray-500\">\r\n                                {member.phone ?? 'Telefon yok'}\r\n                              </p>\r\n                            </div>\r\n                          </div>\r\n                          <div className=\"text-right\">\r\n                            {getStatusBadge(member.membership_status)}\r\n                            <div className=\"mt-1\">{getTypeBadge(member.membership_type)}</div>\r\n                          </div>\r\n                        </div>\r\n\r\n                        <div className=\"flex justify-between items-center text-sm text-gray-500 mb-3\">\r\n                          <span>{member.city ?? '┼Şehir belirtilmemi┼ş'}</span>\r\n                          <span>{new Date(member.join_date).toLocaleDateString('tr-TR')}</span>\r\n                        </div>\r\n\r\n                        <div className=\"flex justify-end gap-2\">\r\n                          <Button\r\n                            variant=\"ghost\"\r\n                            size=\"sm\"\r\n                            className=\"min-h-[44px] min-w-[44px] p-2 text-blue-600 hover:text-blue-700\"\r\n                            onClick={() => {}}\r\n                            aria-label=\"G├Âr├╝nt├╝le\"\r\n                          >\r\n                            <Eye className=\"w-4 h-4\" />\r\n                          </Button>\r\n                          <Button\r\n                            variant=\"ghost\"\r\n                            size=\"sm\"\r\n                            className=\"min-h-[44px] min-w-[44px] p-2 text-red-600 hover:text-red-700\"\r\n                            onClick={() => {}}\r\n                            aria-label=\"Sil\"\r\n                          >\r\n                            <Trash2 className=\"w-4 h-4\" />\r\n                          </Button>\r\n                        </div>\r\n                      </CardContent>\r\n                    </Card>\r\n                  ))}\r\n                </div>\r\n              ) : (\r\n                <div className=\"p-6 text-center\">\r\n                  <Users className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\r\n                  <p className=\"text-gray-600 mb-2\">Hen├╝z ├╝ye kayd─▒ bulunmuyor</p>\r\n                  <p className=\"text-sm text-gray-400\">\r\n                    Yeni ├╝ye eklemek i├ğin \"Yeni ├£ye\" butonunu kullan─▒n\r\n                  </p>\r\n                </div>\r\n              )}\r\n            </div>\r\n\r\n            {/* Desktop Table View */}\r\n            <div className=\"hidden sm:block overflow-x-auto\">\r\n              <Table>\r\n                <TableHeader>\r\n                  <TableRow className=\"bg-gray-50/50\">\r\n                    <TableHead className=\"min-w-[200px] p-4\">├£ye</TableHead>\r\n                    <TableHead className=\"min-w-[180px] p-4\">E-posta</TableHead>\r\n                    <TableHead className=\"min-w-[120px] p-4\">Telefon</TableHead>\r\n                    <TableHead className=\"min-w-[120px] p-4\">├£yelik Tipi</TableHead>\r\n                    <TableHead className=\"min-w-[100px] p-4\">Durum</TableHead>\r\n                    <TableHead className=\"min-w-[120px] p-4\">Kat─▒l─▒m Tarihi</TableHead>\r\n                    <TableHead className=\"min-w-[120px] p-4 text-center\">─░┼şlemler</TableHead>\r\n                  </TableRow>\r\n                </TableHeader>\r\n                <TableBody>\r\n                  {loading ? (\r\n                    Array.from({ length: 5 }).map((_, i) => (\r\n                      <TableRow key={i}>\r\n                        <TableCell className=\"p-4\">\r\n                          <div className=\"flex items-center gap-3\">\r\n                            <div className=\"w-10 h-10 bg-gray-200 rounded-full animate-pulse\" />\r\n                            <div className=\"space-y-2\">\r\n                              <div className=\"h-4 bg-gray-200 rounded w-32 animate-pulse\" />\r\n                              <div className=\"h-3 bg-gray-200 rounded w-24 animate-pulse\" />\r\n                            </div>\r\n                          </div>\r\n                        </TableCell>\r\n                        <TableCell className=\"p-4\">\r\n                          <div className=\"h-4 bg-gray-200 rounded w-40 animate-pulse\" />\r\n                        </TableCell>\r\n                        <TableCell className=\"p-4\">\r\n                          <div className=\"h-4 bg-gray-200 rounded w-28 animate-pulse\" />\r\n                        </TableCell>\r\n                        <TableCell className=\"p-4\">\r\n                          <div className=\"h-6 bg-gray-200 rounded w-20 animate-pulse\" />\r\n                        </TableCell>\r\n                        <TableCell className=\"p-4\">\r\n                          <div className=\"h-6 bg-gray-200 rounded w-16 animate-pulse\" />\r\n                        </TableCell>\r\n                        <TableCell className=\"p-4\">\r\n                          <div className=\"h-4 bg-gray-200 rounded w-24 animate-pulse\" />\r\n                        </TableCell>\r\n                        <TableCell className=\"p-4\">\r\n                          <div className=\"flex justify-center gap-2\">\r\n                            <div className=\"w-8 h-8 bg-gray-200 rounded animate-pulse\" />\r\n                            <div className=\"w-8 h-8 bg-gray-200 rounded animate-pulse\" />\r\n                          </div>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))\r\n                  ) : (members || []).length > 0 ? (\r\n                    (members || []).map((member) => (\r\n                      <TableRow key={member.id} className=\"hover:bg-gray-50/50 transition-colors\">\r\n                        <TableCell className=\"p-4\">\r\n                          <div className=\"flex items-center gap-3\">\r\n                            <Avatar className=\"h-10 w-10\">\r\n                              <AvatarImage src={member.avatar_url ?? ''} />\r\n                              <AvatarFallback className=\"bg-blue-100 text-blue-600\">\r\n                                {(member.name ?? 'U').charAt(0)}\r\n                                {(member.name ?? '').split(' ')[1]?.charAt(0) || 'N'}\r\n                              </AvatarFallback>\r\n                            </Avatar>\r\n                            <div className=\"min-w-0 flex-1\">\r\n                              <div className=\"font-medium truncate\">\r\n                                {member.name ?? 'Bilinmeyen ├£ye'}\r\n                              </div>\r\n                            </div>\r\n                          </div>\r\n                        </TableCell>\r\n                        <TableCell className=\"p-4 text-sm\">{member.email ?? '-'}</TableCell>\r\n                        <TableCell className=\"p-4 text-sm\">{member.phone ?? '-'}</TableCell>\r\n                        <TableCell className=\"p-4\">\r\n                          {getTypeBadge(member.membership_type)}\r\n                        </TableCell>\r\n                        <TableCell className=\"p-4\">\r\n                          {getStatusBadge(member.membership_status)}\r\n                        </TableCell>\r\n                        <TableCell className=\"p-4 text-sm text-gray-500\">\r\n                          {member.join_date\r\n                            ? new Date(member.join_date).toLocaleDateString('tr-TR')\r\n                            : '-'}\r\n                        </TableCell>\r\n                        <TableCell className=\"p-4\">\r\n                          <div className=\"flex items-center justify-center gap-2\">\r\n                            <Button\r\n                              variant=\"ghost\"\r\n                              size=\"sm\"\r\n                              className=\"h-8 w-8 p-0 hover:bg-blue-50 hover:text-blue-600\"\r\n                              aria-label={`${member.name} detaylar─▒n─▒ g├Âr├╝nt├╝le`}\r\n                            >\r\n                              <Eye className=\"h-4 w-4\" />\r\n                            </Button>\r\n                            <Button\r\n                              variant=\"ghost\"\r\n                              size=\"sm\"\r\n                              className=\"h-8 w-8 p-0 hover:bg-green-50 hover:text-green-600\"\r\n                              aria-label={`${member.name} bilgilerini d├╝zenle`}\r\n                            >\r\n                              <Edit className=\"h-4 w-4\" />\r\n                            </Button>\r\n                          </div>\r\n                        </TableCell>\r\n                      </TableRow>\r\n                    ))\r\n                  ) : (\r\n                    <TableRow>\r\n                      <TableCell colSpan={7} className=\"p-8 text-center\">\r\n                        <UserPlus className=\"w-12 h-12 mx-auto mb-4 text-gray-300\" />\r\n                        <p className=\"text-gray-600 mb-2\">\r\n                            {(searchTerm || statusFilter !== 'all' || typeFilter !== 'all')\r\n                              ? 'Arama kriterlerinize uygun ├╝ye bulunamad─▒.'\r\n                              : 'Hen├╝z hi├ğ ├╝ye kayd─▒ yok.'}\r\n                        </p>\r\n                        <Button className=\"gap-2\">\r\n                          <Plus className=\"h-4 w-4\" />\r\n                          ─░lk ├£yeyi Ekle\r\n                        </Button>\r\n                      </TableCell>\r\n                    </TableRow>\r\n                  )}\r\n                </TableBody>\r\n              </Table>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Desktop Pagination */}\r\n        {totalCount > pageSize && (\r\n          <Card className=\"border-0 shadow-sm\">\r\n            <CardContent className=\"p-4\">\r\n              <div className=\"flex items-center justify-between gap-4\">\r\n                <div className=\"text-sm text-gray-500\">\r\n                  {totalCount} kay─▒ttan {(currentPage - 1) * pageSize + 1}-\r\n                  {Math.min(currentPage * pageSize, totalCount)} aras─▒ g├Âsteriliyor\r\n                </div>\r\n                <div className=\"flex items-center gap-2\">\r\n                  <Button\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    onClick={() => {\r\n                      setCurrentPage((prev) => Math.max(1, prev - 1));\r\n                    }}\r\n                      disabled={currentPage === 1 || loading}\r\n                    className=\"px-4\"\r\n                  >\r\n                    ├ûnceki\r\n                  </Button>\r\n                  <span className=\"px-3 py-2 text-sm border rounded flex items-center bg-gray-50\">\r\n                    {currentPage} / {Math.ceil(totalCount / pageSize)}\r\n                  </span>\r\n                  <Button\r\n                    variant=\"outline\"\r\n                    size=\"sm\"\r\n                    onClick={() => {\r\n                      setCurrentPage((prev) => prev + 1);\r\n                    }}\r\n                    disabled={currentPage >= Math.ceil(totalCount / pageSize) || loading}\r\n                    className=\"px-4\"\r\n                  >\r\n                    Sonraki\r\n                  </Button>\r\n                </div>\r\n              </div>\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n      </div>\r\n    </PageLayout>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\MembershipFeesPage.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isMobile' is assigned a value but never used.","line":39,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":17},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'isMobile' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":39,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":39,"endColumn":17},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":106,"column":12,"nodeType":"MemberExpression","endLine":106,"endColumn":27}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview MembershipFeesPage Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { AlertTriangle, CheckCircle, CreditCard, Plus, Search } from 'lucide-react';\r\nimport { motion } from 'motion/react';\r\nimport { useState } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { useIsMobile } from '../../hooks/useTouchDevice';\r\nimport { MobileInfoCard, ResponsiveCardGrid } from '../ResponsiveCard';\r\nimport { Badge } from '../ui/badge';\r\nimport { Button } from '../ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Input } from '../ui/input';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\n\r\ninterface Member {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  phone: string;\r\n  membershipType: 'regular' | 'premium' | 'student';\r\n  feeAmount: number;\r\n  lastPayment: string;\r\n  status: 'paid' | 'overdue' | 'pending';\r\n  monthsOwed: number;\r\n}\r\n\r\n/**\r\n * MembershipFeesPage function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function MembershipFeesPage() {\r\n  const isMobile = useIsMobile();\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [statusFilter, setStatusFilter] = useState('all');\r\n\r\n  const members: Member[] = [\r\n    {\r\n      id: 1,\r\n      name: 'Ahmet Y─▒lmaz',\r\n      email: 'ahmet@email.com',\r\n      phone: '0532 123 4567',\r\n      membershipType: 'regular',\r\n      feeAmount: 50,\r\n      lastPayment: '2024-10-01',\r\n      status: 'paid',\r\n      monthsOwed: 0,\r\n    },\r\n    {\r\n      id: 2,\r\n      name: 'Ay┼şe Kaya',\r\n      email: 'ayse@email.com',\r\n      phone: '0533 987 6543',\r\n      membershipType: 'premium',\r\n      feeAmount: 100,\r\n      lastPayment: '2024-08-15',\r\n      status: 'overdue',\r\n      monthsOwed: 2,\r\n    },\r\n    {\r\n      id: 3,\r\n      name: 'Mehmet Demir',\r\n      email: 'mehmet@email.com',\r\n      phone: '0534 555 1234',\r\n      membershipType: 'student',\r\n      feeAmount: 25,\r\n      lastPayment: '2024-09-30',\r\n      status: 'paid',\r\n      monthsOwed: 0,\r\n    },\r\n  ];\r\n\r\n  const stats = {\r\n    totalMembers: members.length,\r\n    paidMembers: members.filter((m) => m.status === 'paid').length,\r\n    overdueMembers: members.filter((m) => m.status === 'overdue').length,\r\n    totalRevenue: members\r\n      .filter((m) => m.status === 'paid')\r\n      .reduce((sum, m) => sum + m.feeAmount, 0),\r\n  };\r\n\r\n  const getStatusBadge = (status: Member['status']) => {\r\n    const configs = {\r\n      paid: {\r\n        label: '├ûdedi',\r\n        variant: 'default' as const,\r\n        icon: <CheckCircle className=\"w-3 h-3\" />,\r\n      },\r\n      overdue: {\r\n        label: 'Gecikmi┼ş',\r\n        variant: 'destructive' as const,\r\n        icon: <AlertTriangle className=\"w-3 h-3\" />,\r\n      },\r\n      pending: {\r\n        label: 'Beklemede',\r\n        variant: 'secondary' as const,\r\n        icon: <AlertTriangle className=\"w-3 h-3\" />,\r\n      },\r\n    };\r\n    return configs[status];\r\n  };\r\n\r\n  const handleNewPayment = () => {\r\n    toast.success('Yeni ├Âdeme kay─▒t formu a├ğ─▒l─▒yor...');\r\n  };\r\n\r\n  const handleSendReminder = (memberId: number) => {\r\n    toast.success(`Hat─▒rlatma mesaj─▒ g├Ânderiliyor: ${memberId}`);\r\n  };\r\n\r\n  return (\r\n    <div className=\"p-3 sm:p-6 lg:p-8 space-y-6 bg-slate-50/50 min-h-full safe-area\">\r\n      <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between gap-4\">\r\n        <div className=\"space-y-1 sm:space-y-2\">\r\n          <h1 className=\"text-2xl sm:text-3xl font-bold text-slate-800 flex items-center gap-3\">\r\n            <div className=\"w-8 h-8 sm:w-10 sm:h-10 bg-gradient-to-br from-green-600 to-emerald-700 rounded-xl flex items-center justify-center\">\r\n              <CreditCard className=\"w-5 h-5 sm:w-6 sm:h-6 text-white\" />\r\n            </div>\r\n            Aidat Takibi\r\n          </h1>\r\n          <p className=\"text-sm sm:text-base text-slate-600\">\r\n            ├£ye aidatlar─▒n─▒ takip edin ve y├Ânetin\r\n          </p>\r\n        </div>\r\n        <Button onClick={handleNewPayment} size=\"sm\">\r\n          <Plus className=\"w-4 h-4 mr-2\" />\r\n          Yeni ├ûdeme\r\n        </Button>\r\n      </div>\r\n\r\n      <ResponsiveCardGrid cols={{ default: 2, sm: 4 }} gap=\"sm\">\r\n        <MobileInfoCard\r\n          icon={<CreditCard className=\"w-5 h-5\" />}\r\n          title=\"Toplam ├£ye\"\r\n          value={stats.totalMembers.toString()}\r\n          color=\"text-blue-600\"\r\n        />\r\n        <MobileInfoCard\r\n          icon={<CheckCircle className=\"w-5 h-5\" />}\r\n          title=\"├ûdeyen\"\r\n          value={stats.paidMembers.toString()}\r\n          color=\"text-green-600\"\r\n        />\r\n        <MobileInfoCard\r\n          icon={<AlertTriangle className=\"w-5 h-5\" />}\r\n          title=\"Geciken\"\r\n          value={stats.overdueMembers.toString()}\r\n          color=\"text-red-600\"\r\n        />\r\n        <MobileInfoCard\r\n          icon={<CreditCard className=\"w-5 h-5\" />}\r\n          title=\"Toplam Gelir\"\r\n          value={`Ôé║${stats.totalRevenue.toLocaleString()}`}\r\n          color=\"text-green-600\"\r\n        />\r\n      </ResponsiveCardGrid>\r\n\r\n      <Card>\r\n        <CardContent className=\"p-4 sm:p-6\">\r\n          <div className=\"grid grid-cols-1 sm:grid-cols-3 gap-4\">\r\n            <div className=\"sm:col-span-2\">\r\n              <div className=\"relative\">\r\n                <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 w-4 h-4 text-slate-400\" />\r\n                <Input\r\n                  placeholder=\"├£ye ara...\"\r\n                  value={searchQuery}\r\n                  onChange={(e) => {\r\n                    setSearchQuery(e.target.value);\r\n                  }}\r\n                  className=\"pl-10\"\r\n                />\r\n              </div>\r\n            </div>\r\n            <Select value={statusFilter} onValueChange={setStatusFilter}>\r\n              <SelectTrigger>\r\n                <SelectValue placeholder=\"Durum Filtresi\" />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"all\">T├╝m├╝</SelectItem>\r\n                <SelectItem value=\"paid\">├ûdedi</SelectItem>\r\n                <SelectItem value=\"overdue\">Gecikmi┼ş</SelectItem>\r\n                <SelectItem value=\"pending\">Beklemede</SelectItem>\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle>├£ye Listesi</CardTitle>\r\n        </CardHeader>\r\n        <CardContent className=\"p-0 sm:p-6 sm:pt-0\">\r\n          <div className=\"space-y-3 p-4 sm:p-0\">\r\n            {members.map((member, index) => {\r\n              const statusConfig = getStatusBadge(member.status);\r\n              return (\r\n                <motion.div\r\n                  key={member.id}\r\n                  initial={{ opacity: 0, y: 20 }}\r\n                  animate={{ opacity: 1, y: 0 }}\r\n                  transition={{ delay: index * 0.1 }}\r\n                  className=\"flex items-center justify-between p-4 border border-slate-200 rounded-lg hover:bg-slate-50 transition-colors\"\r\n                >\r\n                  <div>\r\n                    <div className=\"font-medium text-slate-900\">{member.name}</div>\r\n                    <div className=\"text-sm text-slate-600\">\r\n                      {member.membershipType === 'regular'\r\n                        ? 'Normal ├£ye'\r\n                        : member.membershipType === 'premium'\r\n                          ? 'Premium ├£ye'\r\n                          : '├û─şrenci ├£ye'}{' '}\r\n                      ÔÇó Ôé║{member.feeAmount}/ay\r\n                    </div>\r\n                    {member.monthsOwed > 0 && (\r\n                      <div className=\"text-xs text-red-600 mt-1\">\r\n                        {member.monthsOwed} ay borcu var\r\n                      </div>\r\n                    )}\r\n                  </div>\r\n                  <div className=\"flex items-center gap-2\">\r\n                    <Badge variant={statusConfig.variant}>\r\n                      {statusConfig.icon}\r\n                      <span className=\"ml-1\">{statusConfig.label}</span>\r\n                    </Badge>\r\n                    {member.status === 'overdue' && (\r\n                      <Button\r\n                        size=\"sm\"\r\n                        variant=\"outline\"\r\n                        onClick={() => {\r\n                          handleSendReminder(member.id);\r\n                        }}\r\n                      >\r\n                        Hat─▒rlat\r\n                      </Button>\r\n                    )}\r\n                  </div>\r\n                </motion.div>\r\n              );\r\n            })}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\NewMemberPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\ProfilePage.tsx","messages":[{"ruleId":"no-void","severity":2,"message":"Expected 'undefined' and instead saw 'void'.","line":284,"column":21,"nodeType":"UnaryExpression","messageId":"noVoid","endLine":284,"endColumn":45},{"ruleId":"no-void","severity":2,"message":"Expected 'undefined' and instead saw 'void'.","line":544,"column":23,"nodeType":"UnaryExpression","messageId":"noVoid","endLine":544,"endColumn":53},{"ruleId":"no-void","severity":2,"message":"Expected 'undefined' and instead saw 'void'.","line":699,"column":23,"nodeType":"UnaryExpression","messageId":"noVoid","endLine":699,"endColumn":47}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview ProfilePage Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport {\r\n  Bell,\r\n  Calendar,\r\n  Camera,\r\n  Edit,\r\n  Eye,\r\n  Loader2,\r\n  Lock,\r\n  Mail,\r\n  Phone,\r\n  Save,\r\n  Shield,\r\n  User,\r\n  UserCheck,\r\n} from 'lucide-react';\r\nimport { useEffect, useState } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { useSupabaseAuth } from '../../contexts/SupabaseAuthContext';\r\nimport { PageLayout } from '../PageLayout';\r\nimport { Avatar, AvatarFallback, AvatarImage } from '../ui/avatar';\r\nimport { Badge } from '../ui/badge';\r\nimport { Button } from '../ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { DesktopActionButtons } from '../ui/desktop-table';\r\nimport { Input } from '../ui/input';\r\nimport { Label } from '../ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\nimport { Separator } from '../ui/separator';\r\nimport { Switch } from '../ui/switch';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';\r\nimport { Textarea } from '../ui/textarea';\r\n\r\ninterface ProfileData {\r\n  firstName: string;\r\n  lastName: string;\r\n  email: string;\r\n  phone: string;\r\n  title?: string;\r\n  bio?: string;\r\n  profileImage?: string;\r\n  avatar?: string;\r\n  department?: string;\r\n  location?: string;\r\n  joinDate?: string;\r\n  showEmail: boolean;\r\n  showPhone: boolean;\r\n  allowContact: boolean;\r\n}\r\n\r\ninterface ValidationErrors {\r\n  firstName?: string;\r\n  lastName?: string;\r\n  email?: string;\r\n  phone?: string;\r\n}\r\n\r\n/**\r\n * ProfilePage function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function ProfilePage() {\r\n  const { user, isAuthenticated } = useSupabaseAuth();\r\n  const [editMode, setEditMode] = useState(false);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [errors, setErrors] = useState<ValidationErrors>({});\r\n  const [profileData, setProfileData] = useState<ProfileData>({\r\n    firstName: '',\r\n    lastName: '',\r\n    email: '',\r\n    phone: '',\r\n    title: '',\r\n    department: '',\r\n    location: '',\r\n    joinDate: '',\r\n    bio: '',\r\n    avatar: '',\r\n    showEmail: false,\r\n    showPhone: false,\r\n    allowContact: true,\r\n  });\r\n\r\n  // Helper function to safely parse name\r\n  const parseName = (name: string): { firstName: string; lastName: string } => {\r\n    const fullName = name.trim();\r\n    if (!fullName) {\r\n      return { firstName: '', lastName: '' };\r\n    }\r\n\r\n    const parts = fullName.split(' ');\r\n    return {\r\n      firstName: parts[0] ?? '',\r\n      lastName: parts.slice(1).join(' '),\r\n    };\r\n  };\r\n\r\n  // Load user data from Supabase\r\n  useEffect(() => {\r\n    if (user && isAuthenticated) {\r\n      const userMetadata = user.user_metadata;\r\n      const nameSource = typeof userMetadata.name === 'string' ? userMetadata.name : undefined;\r\n      const emailUsername = user.email?.split('@')[0];\r\n      const displayName = nameSource ?? emailUsername ?? '';\r\n\r\n      const { firstName, lastName } = parseName(displayName);\r\n\r\n      setProfileData({\r\n        firstName,\r\n        lastName,\r\n        email: user.email ?? '',\r\n        phone: (typeof userMetadata.phone === 'string' ? userMetadata.phone : '') || '',\r\n        title:\r\n          typeof userMetadata.title === 'string' && userMetadata.title\r\n            ? userMetadata.title\r\n            : 'Kullan─▒c─▒',\r\n        department:\r\n          typeof userMetadata.department === 'string' && userMetadata.department\r\n            ? userMetadata.department\r\n            : 'Genel',\r\n        location:\r\n          typeof userMetadata.location === 'string' && userMetadata.location\r\n            ? userMetadata.location\r\n            : '',\r\n        joinDate: user.created_at ? new Date(user.created_at).toLocaleDateString('tr-TR') : '',\r\n        bio: typeof userMetadata.bio === 'string' && userMetadata.bio ? userMetadata.bio : '',\r\n        avatar:\r\n          typeof userMetadata.avatar_url === 'string' && userMetadata.avatar_url\r\n            ? userMetadata.avatar_url\r\n            : '',\r\n        showEmail: false,\r\n        showPhone: false,\r\n        allowContact: true,\r\n      });\r\n    }\r\n  }, [user, isAuthenticated]);\r\n\r\n  const [notificationSettings, setNotificationSettings] = useState({\r\n    emailNotifications: true,\r\n    pushNotifications: true,\r\n    smsNotifications: false,\r\n    weeklyReports: true,\r\n    systemAlerts: true,\r\n    newDonations: true,\r\n    newMembers: false,\r\n    systemUpdates: true,\r\n  });\r\n\r\n  const [privacySettings, setPrivacySettings] = useState({\r\n    profileVisibility: 'internal',\r\n    showEmail: false,\r\n    showPhone: false,\r\n    allowContact: true,\r\n  });\r\n\r\n  // Validation functions\r\n  const validateEmail = (email: string) => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email);\r\n  };\r\n\r\n  const validatePhone = (phone: string) => {\r\n    const phoneRegex = /^\\+?[1-9]\\d{1,14}$/;\r\n    return phoneRegex.test(phone.replace(/\\s/g, ''));\r\n  };\r\n\r\n  const validateForm = () => {\r\n    const newErrors: ValidationErrors = {};\r\n\r\n    if (!profileData.firstName.trim()) {\r\n      newErrors.firstName = 'Ad gereklidir';\r\n    }\r\n\r\n    if (!profileData.lastName.trim()) {\r\n      newErrors.lastName = 'Soyad gereklidir';\r\n    }\r\n\r\n    if (!validateEmail(profileData.email)) {\r\n      newErrors.email = 'Ge├ğerli bir e-posta adresi giriniz';\r\n    }\r\n\r\n    if (!validatePhone(profileData.phone)) {\r\n      newErrors.phone = 'Ge├ğerli bir telefon numaras─▒ giriniz';\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return Object.keys(newErrors).length === 0;\r\n  };\r\n\r\n  const handleSaveProfile = async () => {\r\n    if (!validateForm()) {\r\n      toast.error('L├╝tfen form hatalar─▒n─▒ d├╝zeltin');\r\n      return;\r\n    }\r\n\r\n    setIsLoading(true);\r\n    try {\r\n      // Simulate API call\r\n      await new Promise((resolve) => setTimeout(resolve, 1500));\r\n\r\n      // Here you would make actual API call\r\n      // const response = await fetch('/api/profile', {\r\n      //   method: 'PUT',\r\n      //   headers: { 'Content-Type': 'application/json' },\r\n      //   body: JSON.stringify(profileData)\r\n      // });\r\n\r\n      setEditMode(false);\r\n      toast.success('Profil bilgileri ba┼şar─▒yla g├╝ncellendi', {\r\n        duration: 3000,\r\n      });\r\n    } catch {\r\n      toast.error('Profil g├╝ncellenirken bir hata olu┼ştu');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSaveNotifications = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      // Simulate API call\r\n      await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n      // Here you would make actual API call\r\n      // const response = await fetch('/api/notifications', {\r\n      //   method: 'PUT',\r\n      //   headers: { 'Content-Type': 'application/json' },\r\n      //   body: JSON.stringify(notificationSettings)\r\n      // });\r\n\r\n      toast.success('Bildirim ayarlar─▒ kaydedildi', {\r\n        duration: 2000,\r\n      });\r\n    } catch {\r\n      toast.error('Bildirim ayarlar─▒ g├╝ncellenirken bir hata olu┼ştu');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const handleSavePrivacy = async () => {\r\n    setIsLoading(true);\r\n    try {\r\n      // Simulate API call\r\n      await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n      // Here you would make actual API call\r\n      // const response = await fetch('/api/privacy', {\r\n      //   method: 'PUT',\r\n      //   headers: { 'Content-Type': 'application/json' },\r\n      //   body: JSON.stringify(privacySettings)\r\n      // });\r\n\r\n      toast.success('Gizlilik ayarlar─▒ g├╝ncellendi', {\r\n        duration: 2000,\r\n      });\r\n    } catch {\r\n      toast.error('Gizlilik ayarlar─▒ g├╝ncellenirken bir hata olu┼ştu');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <PageLayout\r\n      title=\"Profil Ayarlar─▒\"\r\n      subtitle=\"Hesap bilgilerinizi ve tercihlerinizi y├Ânetin\"\r\n      actions={\r\n        <DesktopActionButtons\r\n          primaryAction={\r\n            editMode\r\n              ? {\r\n                  label: 'Kaydet',\r\n                  icon: <Save className=\"w-4 h-4\" />,\r\n                  onClick: () => {\r\n                    void handleSaveProfile();\r\n                  },\r\n                }\r\n              : {\r\n                  label: 'D├╝zenle',\r\n                  icon: <Edit className=\"w-4 h-4\" />,\r\n                  onClick: () => {\r\n                    setEditMode(true);\r\n                  },\r\n                }\r\n          }\r\n          secondaryActions={\r\n            editMode\r\n              ? [\r\n                  {\r\n                    label: '─░ptal',\r\n                    onClick: () => {\r\n                      setEditMode(false);\r\n                    },\r\n                    variant: 'outline',\r\n                  },\r\n                ]\r\n              : []\r\n          }\r\n        />\r\n      }\r\n    >\r\n      <div className=\"p-6 max-w-4xl mx-auto space-y-6\">\r\n        {/* Desktop Profile Header */}\r\n        <Card className=\"border-0 shadow-md\">\r\n          <CardContent className=\"p-6\">\r\n            <div className=\"flex items-start gap-6\">\r\n              <div className=\"relative flex-shrink-0\">\r\n                <Avatar className=\"w-24 h-24\">\r\n                  <AvatarImage src={profileData.avatar} alt=\"Profile\" />\r\n                  <AvatarFallback className=\"bg-blue-600 text-white text-xl\">\r\n                    {profileData.firstName[0]}\r\n                    {profileData.lastName[0]}\r\n                  </AvatarFallback>\r\n                </Avatar>\r\n                {editMode && (\r\n                  <Button\r\n                    size=\"sm\"\r\n                    className=\"absolute -bottom-2 -right-2 rounded-full w-8 h-8 p-0\"\r\n                    onClick={() => {\r\n                      document.getElementById('avatar-input')?.click();\r\n                    }}\r\n                  >\r\n                    <Camera className=\"w-4 h-4\" />\r\n                  </Button>\r\n                )}\r\n              </div>\r\n\r\n              <div className=\"flex-1 text-center sm:text-left w-full\">\r\n                <div className=\"flex flex-col sm:flex-row sm:items-center gap-2 sm:gap-3 mb-3\">\r\n                  <h2 className=\"text-xl sm:text-2xl font-bold\">\r\n                    {profileData.firstName} {profileData.lastName}\r\n                  </h2>\r\n                  <Badge className=\"bg-green-100 text-green-800 mx-auto sm:mx-0 w-fit\">\r\n                    <UserCheck className=\"w-3 h-3 mr-1\" />\r\n                    Aktif\r\n                  </Badge>\r\n                </div>\r\n                <p className=\"text-muted-foreground mb-4 text-sm sm:text-base\">\r\n                  {profileData.title} ÔÇó {profileData.department}\r\n                </p>\r\n\r\n                {/* Mobile-First Contact Info */}\r\n                <div className=\"space-y-3 sm:space-y-0 sm:grid sm:grid-cols-1 lg:grid-cols-3 sm:gap-4 text-sm\">\r\n                  <div className=\"flex items-center justify-center sm:justify-start gap-2 p-2 sm:p-0 bg-gray-50 sm:bg-transparent rounded-lg\">\r\n                    <Mail className=\"w-4 h-4 text-blue-500 flex-shrink-0\" />\r\n                    <span className=\"truncate\">{profileData.email}</span>\r\n                  </div>\r\n                  <div className=\"flex items-center justify-center sm:justify-start gap-2 p-2 sm:p-0 bg-gray-50 sm:bg-transparent rounded-lg\">\r\n                    <Phone className=\"w-4 h-4 text-green-500 flex-shrink-0\" />\r\n                    <span>{profileData.phone}</span>\r\n                  </div>\r\n                  <div className=\"flex items-center justify-center sm:justify-start gap-2 p-2 sm:p-0 bg-gray-50 sm:bg-transparent rounded-lg\">\r\n                    <Calendar className=\"w-4 h-4 text-purple-500 flex-shrink-0\" />\r\n                    <span className=\"text-xs sm:text-sm\">\r\n                      <span className=\"sm:hidden\">Ba┼şlang─▒├ğ: </span>\r\n                      <span className=\"hidden sm:inline\">Ba┼şlang─▒├ğ: </span>\r\n                      {profileData.joinDate\r\n                        ? new Date(profileData.joinDate).toLocaleDateString('tr-TR')\r\n                        : 'Belirtilmemi┼ş'}\r\n                    </span>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            </div>\r\n          </CardContent>\r\n        </Card>\r\n\r\n        {/* Mobile-Optimized Profile Settings Tabs */}\r\n        <Tabs defaultValue=\"personal\" className=\"space-y-4 sm:space-y-6\">\r\n          <TabsList className=\"grid w-full grid-cols-1 sm:grid-cols-3 h-auto sm:h-10\">\r\n            <TabsTrigger value=\"personal\" className=\"min-h-[44px] text-sm sm:text-base\">\r\n              <User className=\"w-4 h-4 mr-2 sm:hidden\" />\r\n              Ki┼şisel Bilgiler\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"notifications\" className=\"min-h-[44px] text-sm sm:text-base\">\r\n              <Bell className=\"w-4 h-4 mr-2 sm:hidden\" />\r\n              Bildirimler\r\n            </TabsTrigger>\r\n            <TabsTrigger value=\"privacy\" className=\"min-h-[44px] text-sm sm:text-base\">\r\n              <Shield className=\"w-4 h-4 mr-2 sm:hidden\" />\r\n              Gizlilik\r\n            </TabsTrigger>\r\n          </TabsList>\r\n\r\n          {/* Mobile-Optimized Personal Information Tab */}\r\n          <TabsContent value=\"personal\" className=\"space-y-4 sm:space-y-6\">\r\n            <Card className=\"border-0 shadow-md\">\r\n              <CardHeader className=\"pb-4\">\r\n                <CardTitle className=\"flex items-center gap-2 text-lg sm:text-xl\">\r\n                  <User className=\"w-5 h-5 text-blue-600\" />\r\n                  Ki┼şisel Bilgiler\r\n                </CardTitle>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-4 sm:space-y-6\">\r\n                <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-4 sm:gap-6\">\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"firstName\">Ad</Label>\r\n                    <Input\r\n                      id=\"firstName\"\r\n                      value={profileData.firstName}\r\n                      readOnly={!editMode}\r\n                      onChange={(e) => {\r\n                        setProfileData({ ...profileData, firstName: e.target.value });\r\n                        if (errors.firstName) {\r\n                          setErrors({ ...errors, firstName: '' });\r\n                        }\r\n                      }}\r\n                      className={`min-h-[44px] text-base ${\r\n                        errors.firstName ? 'border-red-500' : ''\r\n                      }`}\r\n                      inputMode=\"text\"\r\n                    />\r\n                    {errors.firstName && <p className=\"text-sm text-red-500\">{errors.firstName}</p>}\r\n                  </div>\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"lastName\">Soyad</Label>\r\n                    <Input\r\n                      id=\"lastName\"\r\n                      value={profileData.lastName}\r\n                      readOnly={!editMode}\r\n                      onChange={(e) => {\r\n                        setProfileData({ ...profileData, lastName: e.target.value });\r\n                        if (errors.lastName) {\r\n                          setErrors({ ...errors, lastName: '' });\r\n                        }\r\n                      }}\r\n                      className={`min-h-[44px] text-base ${\r\n                        errors.lastName ? 'border-red-500' : ''\r\n                      }`}\r\n                      inputMode=\"text\"\r\n                    />\r\n                    {errors.lastName && <p className=\"text-sm text-red-500\">{errors.lastName}</p>}\r\n                  </div>\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"email\">E-posta</Label>\r\n                    <Input\r\n                      id=\"email\"\r\n                      type=\"email\"\r\n                      value={profileData.email}\r\n                      readOnly={!editMode}\r\n                      onChange={(e) => {\r\n                        setProfileData({ ...profileData, email: e.target.value });\r\n                        if (errors.email) {\r\n                          setErrors({ ...errors, email: '' });\r\n                        }\r\n                      }}\r\n                      className={`min-h-[44px] text-base ${errors.email ? 'border-red-500' : ''}`}\r\n                      inputMode=\"email\"\r\n                    />\r\n                    {errors.email && <p className=\"text-sm text-red-500\">{errors.email}</p>}\r\n                  </div>\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"phone\">Telefon</Label>\r\n                    <Input\r\n                      id=\"phone\"\r\n                      type=\"tel\"\r\n                      value={profileData.phone}\r\n                      readOnly={!editMode}\r\n                      onChange={(e) => {\r\n                        setProfileData({ ...profileData, phone: e.target.value });\r\n                        if (errors.phone) {\r\n                          setErrors({ ...errors, phone: '' });\r\n                        }\r\n                      }}\r\n                      className={`min-h-[44px] text-base ${errors.phone ? 'border-red-500' : ''}`}\r\n                      inputMode=\"tel\"\r\n                    />\r\n                    {errors.phone && <p className=\"text-sm text-red-500\">{errors.phone}</p>}\r\n                  </div>\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"title\">Unvan</Label>\r\n                    <Input\r\n                      id=\"title\"\r\n                      value={profileData.title}\r\n                      readOnly={!editMode}\r\n                      onChange={(e) => {\r\n                        setProfileData({ ...profileData, title: e.target.value });\r\n                      }}\r\n                      className=\"min-h-[44px] text-base\"\r\n                      inputMode=\"text\"\r\n                    />\r\n                  </div>\r\n                  <div className=\"space-y-2\">\r\n                    <Label htmlFor=\"department\">Departman</Label>\r\n                    <Select\r\n                      value={profileData.department}\r\n                      onValueChange={(value) => {\r\n                        setProfileData({ ...profileData, department: value });\r\n                      }}\r\n                      disabled={!editMode}\r\n                    >\r\n                      <SelectTrigger className=\"min-h-[44px] text-base\">\r\n                        <SelectValue />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"Bilgi ─░┼şlem\">Bilgi ─░┼şlem</SelectItem>\r\n                        <SelectItem value=\"Y├Ânetim\">Y├Ânetim</SelectItem>\r\n                        <SelectItem value=\"Muhasebe\">Muhasebe</SelectItem>\r\n                        <SelectItem value=\"─░nsan Kaynaklar─▒\">─░nsan Kaynaklar─▒</SelectItem>\r\n                        <SelectItem value=\"Operasyon\">Operasyon</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"space-y-2\">\r\n                  <Label htmlFor=\"bio\">Biyografi</Label>\r\n                  <Textarea\r\n                    id=\"bio\"\r\n                    value={profileData.bio}\r\n                    readOnly={!editMode}\r\n                    onChange={(e) => {\r\n                      setProfileData({ ...profileData, bio: e.target.value });\r\n                    }}\r\n                    rows={4}\r\n                    placeholder=\"Kendiniz hakk─▒nda k─▒sa bir a├ğ─▒klama yaz─▒n...\"\r\n                    className=\"min-h-[100px] text-base resize-none\"\r\n                  />\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n\r\n          {/* Notifications Tab */}\r\n          <TabsContent value=\"notifications\" className=\"space-y-6\">\r\n            <Card className=\"border-0 shadow-md\">\r\n              <CardHeader>\r\n                <div className=\"flex items-center justify-between\">\r\n                  <CardTitle className=\"flex items-center gap-2\">\r\n                    <Bell className=\"w-5 h-5 text-blue-600\" />\r\n                    Bildirim Ayarlar─▒\r\n                  </CardTitle>\r\n                  <Button\r\n                    onClick={() => {\r\n                      void handleSaveNotifications();\r\n                    }}\r\n                    size=\"sm\"\r\n                    disabled={isLoading}\r\n                  >\r\n                    {isLoading ? (\r\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\r\n                    ) : (\r\n                      <Save className=\"w-4 h-4 mr-2\" />\r\n                    )}\r\n                    {isLoading ? 'Kaydediliyor...' : 'Kaydet'}\r\n                  </Button>\r\n                </div>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-6\">\r\n                {/* General Notifications */}\r\n                <div className=\"space-y-4\">\r\n                  <h3 className=\"font-medium\">Genel Bildirimler</h3>\r\n                  <div className=\"space-y-3\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div>\r\n                        <Label htmlFor=\"email-notifications\">E-posta Bildirimleri</Label>\r\n                        <p className=\"text-sm text-muted-foreground\">\r\n                          ├ûnemli g├╝ncellemeler e-posta ile g├Ânderilsin\r\n                        </p>\r\n                      </div>\r\n                      <Switch\r\n                        id=\"email-notifications\"\r\n                        checked={notificationSettings.emailNotifications}\r\n                        onCheckedChange={(checked) => {\r\n                          setNotificationSettings({\r\n                            ...notificationSettings,\r\n                            emailNotifications: checked,\r\n                          });\r\n                        }}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div>\r\n                        <Label htmlFor=\"push-notifications\">Push Bildirimleri</Label>\r\n                        <p className=\"text-sm text-muted-foreground\">\r\n                          Taray─▒c─▒ bildirimleri aktif olsun\r\n                        </p>\r\n                      </div>\r\n                      <Switch\r\n                        id=\"push-notifications\"\r\n                        checked={notificationSettings.pushNotifications}\r\n                        onCheckedChange={(checked) => {\r\n                          setNotificationSettings({\r\n                            ...notificationSettings,\r\n                            pushNotifications: checked,\r\n                          });\r\n                        }}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div>\r\n                        <Label htmlFor=\"sms-notifications\">SMS Bildirimleri</Label>\r\n                        <p className=\"text-sm text-muted-foreground\">\r\n                          Kritik uyar─▒lar SMS ile g├Ânderilsin\r\n                        </p>\r\n                      </div>\r\n                      <Switch\r\n                        id=\"sms-notifications\"\r\n                        checked={notificationSettings.smsNotifications}\r\n                        onCheckedChange={(checked) => {\r\n                          setNotificationSettings({\r\n                            ...notificationSettings,\r\n                            smsNotifications: checked,\r\n                          });\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <Separator />\r\n\r\n                {/* System Notifications */}\r\n                <div className=\"space-y-4\">\r\n                  <h3 className=\"font-medium\">Sistem Bildirimleri</h3>\r\n                  <div className=\"space-y-3\">\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div>\r\n                        <Label htmlFor=\"system-alerts\">Sistem Uyar─▒lar─▒</Label>\r\n                        <p className=\"text-sm text-muted-foreground\">\r\n                          Sistem hatalar─▒ ve uyar─▒lar─▒\r\n                        </p>\r\n                      </div>\r\n                      <Switch\r\n                        id=\"system-alerts\"\r\n                        checked={notificationSettings.systemAlerts}\r\n                        onCheckedChange={(checked) => {\r\n                          setNotificationSettings({\r\n                            ...notificationSettings,\r\n                            systemAlerts: checked,\r\n                          });\r\n                        }}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div>\r\n                        <Label htmlFor=\"weekly-reports\">Haftal─▒k Raporlar</Label>\r\n                        <p className=\"text-sm text-muted-foreground\">Haftal─▒k aktivite ├Âzetleri</p>\r\n                      </div>\r\n                      <Switch\r\n                        id=\"weekly-reports\"\r\n                        checked={notificationSettings.weeklyReports}\r\n                        onCheckedChange={(checked) => {\r\n                          setNotificationSettings({\r\n                            ...notificationSettings,\r\n                            weeklyReports: checked,\r\n                          });\r\n                        }}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div>\r\n                        <Label htmlFor=\"new-donations\">Yeni Ba─ş─▒┼şlar</Label>\r\n                        <p className=\"text-sm text-muted-foreground\">\r\n                          Yeni ba─ş─▒┼ş geldi─şinde bildirim\r\n                        </p>\r\n                      </div>\r\n                      <Switch\r\n                        id=\"new-donations\"\r\n                        checked={notificationSettings.newDonations}\r\n                        onCheckedChange={(checked) => {\r\n                          setNotificationSettings({\r\n                            ...notificationSettings,\r\n                            newDonations: checked,\r\n                          });\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n\r\n          {/* Privacy Tab */}\r\n          <TabsContent value=\"privacy\" className=\"space-y-6\">\r\n            <Card className=\"border-0 shadow-md\">\r\n              <CardHeader>\r\n                <div className=\"flex items-center justify-between\">\r\n                  <CardTitle className=\"flex items-center gap-2\">\r\n                    <Shield className=\"w-5 h-5 text-blue-600\" />\r\n                    Gizlilik ve G├╝venlik\r\n                  </CardTitle>\r\n                  <Button\r\n                    onClick={() => {\r\n                      void handleSavePrivacy();\r\n                    }}\r\n                    size=\"sm\"\r\n                    disabled={isLoading}\r\n                  >\r\n                    {isLoading ? (\r\n                      <Loader2 className=\"w-4 h-4 mr-2 animate-spin\" />\r\n                    ) : (\r\n                      <Save className=\"w-4 h-4 mr-2\" />\r\n                    )}\r\n                    {isLoading ? 'Kaydediliyor...' : 'Kaydet'}\r\n                  </Button>\r\n                </div>\r\n              </CardHeader>\r\n              <CardContent className=\"space-y-6\">\r\n                {/* Profile Visibility */}\r\n                <div className=\"space-y-4\">\r\n                  <h3 className=\"font-medium\">Profil G├Âr├╝n├╝rl├╝─ş├╝</h3>\r\n                  <div className=\"space-y-3\">\r\n                    <div className=\"space-y-2\">\r\n                      <Label htmlFor=\"profile-visibility\">Kim profilinizi g├Ârebilir?</Label>\r\n                      <Select\r\n                        value={privacySettings.profileVisibility}\r\n                        onValueChange={(value) => {\r\n                          setPrivacySettings({ ...privacySettings, profileVisibility: value });\r\n                        }}\r\n                      >\r\n                        <SelectTrigger>\r\n                          <SelectValue />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"public\">Herkes</SelectItem>\r\n                          <SelectItem value=\"internal\">Sadece Dernek ├£yeleri</SelectItem>\r\n                          <SelectItem value=\"private\">Sadece Y├Âneticiler</SelectItem>\r\n                        </SelectContent>\r\n                      </Select>\r\n                    </div>\r\n\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div>\r\n                        <Label htmlFor=\"show-email\">E-posta Adresini G├Âster</Label>\r\n                        <p className=\"text-sm text-muted-foreground\">\r\n                          E-posta adresiniz profilde g├Âr├╝ns├╝n\r\n                        </p>\r\n                      </div>\r\n                      <Switch\r\n                        id=\"show-email\"\r\n                        checked={privacySettings.showEmail}\r\n                        onCheckedChange={(checked) => {\r\n                          setPrivacySettings({ ...privacySettings, showEmail: checked });\r\n                        }}\r\n                      />\r\n                    </div>\r\n\r\n                    <div className=\"flex items-center justify-between\">\r\n                      <div>\r\n                        <Label htmlFor=\"show-phone\">Telefon Numaras─▒n─▒ G├Âster</Label>\r\n                        <p className=\"text-sm text-muted-foreground\">\r\n                          Telefon numaran─▒z profilde g├Âr├╝ns├╝n\r\n                        </p>\r\n                      </div>\r\n                      <Switch\r\n                        id=\"show-phone\"\r\n                        checked={privacySettings.showPhone}\r\n                        onCheckedChange={(checked) => {\r\n                          setPrivacySettings({ ...privacySettings, showPhone: checked });\r\n                        }}\r\n                      />\r\n                    </div>\r\n                  </div>\r\n                </div>\r\n\r\n                <Separator />\r\n\r\n                {/* Security Section */}\r\n                <div className=\"space-y-4\">\r\n                  <h3 className=\"font-medium\">G├╝venlik</h3>\r\n                  <div className=\"space-y-3\">\r\n                    <Button\r\n                      variant=\"outline\"\r\n                      className=\"w-full justify-start\"\r\n                      onClick={() => {\r\n                        // Here you would open a password change modal/dialog\r\n                        toast.info('┼Şifre de─şi┼ştirme sayfas─▒na y├Ânlendiriliyorsunuz...');\r\n                        // Example: router.push('/change-password');\r\n                      }}\r\n                      disabled={isLoading}\r\n                    >\r\n                      <Lock className=\"w-4 h-4 mr-2\" />\r\n                      ┼Şifre De─şi┼ştir\r\n                    </Button>\r\n\r\n                    <Button\r\n                      variant=\"outline\"\r\n                      className=\"w-full justify-start\"\r\n                      onClick={() => {\r\n                        // Here you would open 2FA setup modal/dialog\r\n                        toast.info('─░ki fakt├Ârl├╝ do─şrulama ayarlar─▒ a├ğ─▒l─▒yor...');\r\n                        // Example: setShow2FAModal(true);\r\n                      }}\r\n                      disabled={isLoading}\r\n                    >\r\n                      <Shield className=\"w-4 h-4 mr-2\" />\r\n                      ─░ki Fakt├Ârl├╝ Do─şrulama\r\n                    </Button>\r\n\r\n                    <Button\r\n                      variant=\"outline\"\r\n                      className=\"w-full justify-start\"\r\n                      onClick={() => {\r\n                        // Here you would open login history modal/dialog\r\n                        toast.info('Giri┼ş ge├ğmi┼şi g├Âr├╝nt├╝leniyor...');\r\n                        // Example: setShowLoginHistoryModal(true);\r\n                      }}\r\n                      disabled={isLoading}\r\n                    >\r\n                      <Eye className=\"w-4 h-4 mr-2\" />\r\n                      Giri┼ş Ge├ğmi┼şi\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </CardContent>\r\n            </Card>\r\n          </TabsContent>\r\n        </Tabs>\r\n      </div>\r\n    </PageLayout>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\ServiceTrackingPage.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pages\\UserManagementPageReal.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":337,"column":111,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":337,"endColumn":114,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10473,10476],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10473,10476],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":350,"column":115,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":350,"endColumn":118,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11044,11047],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11044,11047],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":471,"column":70,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":471,"endColumn":72,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[15076,15078],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview UserManagementPageReal Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport {\r\n  Activity,\r\n  AlertTriangle,\r\n  Edit,\r\n  MoreVertical,\r\n  Plus,\r\n  RefreshCw,\r\n  Search,\r\n  Trash2,\r\n  UserCheck,\r\n  UserX,\r\n  Users,\r\n  X,\r\n  XCircle,\r\n} from 'lucide-react';\r\nimport { useEffect, useState } from 'react';\r\n\r\nimport { Alert, AlertDescription } from '../ui/alert';\r\nimport {\r\n  AlertDialog,\r\n  AlertDialogAction,\r\n  AlertDialogCancel,\r\n  AlertDialogContent,\r\n  AlertDialogDescription,\r\n  AlertDialogFooter,\r\n  AlertDialogHeader,\r\n  AlertDialogTitle,\r\n} from '../ui/alert-dialog';\r\nimport { Avatar, AvatarFallback, AvatarImage } from '../ui/avatar';\r\nimport { Badge } from '../ui/badge';\r\nimport { Button } from '../ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  DialogDescription,\r\n  DialogHeader,\r\n  DialogTitle,\r\n  DialogTrigger,\r\n} from '../ui/dialog';\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuLabel,\r\n  DropdownMenuSeparator,\r\n  DropdownMenuTrigger,\r\n} from '../ui/dropdown-menu';\r\nimport { Input } from '../ui/input';\r\nimport { Label } from '../ui/label';\r\nimport {\r\n  Select,\r\n  SelectContent,\r\n  SelectItem,\r\n  SelectTrigger,\r\n  SelectValue,\r\n} from '../ui/select';\r\nimport { Skeleton } from '../ui/skeleton';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../ui/table';\r\nimport { useToast } from '../../hooks/use-toast';\r\nimport { userManagementService } from '../../services/userManagementService';\r\n\r\n// Types\r\ninterface User {\r\n  id: string;\r\n  email: string;\r\n  full_name?: string;\r\n  avatar_url?: string;\r\n  role: 'admin' | 'moderator' | 'user';\r\n  status: 'active' | 'inactive' | 'suspended';\r\n  last_sign_in_at?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n  phone?: string;\r\n  organization?: string;\r\n  permissions: string[];\r\n}\r\n\r\ninterface UserStats {\r\n  total: number;\r\n  active: number;\r\n  inactive: number;\r\n  suspended: number;\r\n  new_this_month: number;\r\n}\r\n\r\ninterface UserFormData {\r\n  email: string;\r\n  full_name: string;\r\n  role: 'admin' | 'moderator' | 'user';\r\n  status: 'active' | 'inactive' | 'suspended';\r\n  phone?: string;\r\n  organization?: string;\r\n  permissions: string[];\r\n}\r\n\r\n// User Management Components\r\nconst UserStatsCards = ({ stats }: { stats: UserStats }) => (\r\n  <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\r\n    <Card>\r\n      <CardContent className=\"p-4\">\r\n        <div className=\"flex items-center gap-3\">\r\n          <div className=\"p-2 bg-blue-100 rounded-lg\">\r\n            <Users className=\"h-5 w-5 text-blue-600\" />\r\n          </div>\r\n          <div>\r\n            <p className=\"text-sm text-gray-600\">Toplam</p>\r\n            <p className=\"text-xl font-bold\">{stats.total}</p>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n\r\n    <Card>\r\n      <CardContent className=\"p-4\">\r\n        <div className=\"flex items-center gap-3\">\r\n          <div className=\"p-2 bg-green-100 rounded-lg\">\r\n            <UserCheck className=\"h-5 w-5 text-green-600\" />\r\n          </div>\r\n          <div>\r\n            <p className=\"text-sm text-gray-600\">Aktif</p>\r\n            <p className=\"text-xl font-bold\">{stats.active}</p>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n\r\n    <Card>\r\n      <CardContent className=\"p-4\">\r\n        <div className=\"flex items-center gap-3\">\r\n          <div className=\"p-2 bg-gray-100 rounded-lg\">\r\n            <UserX className=\"h-5 w-5 text-gray-600\" />\r\n          </div>\r\n          <div>\r\n            <p className=\"text-sm text-gray-600\">Pasif</p>\r\n            <p className=\"text-xl font-bold\">{stats.inactive}</p>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n\r\n    <Card>\r\n      <CardContent className=\"p-4\">\r\n        <div className=\"flex items-center gap-3\">\r\n          <div className=\"p-2 bg-red-100 rounded-lg\">\r\n            <XCircle className=\"h-5 w-5 text-red-600\" />\r\n          </div>\r\n          <div>\r\n            <p className=\"text-sm text-gray-600\">Ask─▒ya Al─▒nm─▒┼ş</p>\r\n            <p className=\"text-xl font-bold\">{stats.suspended}</p>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n\r\n    <Card>\r\n      <CardContent className=\"p-4\">\r\n        <div className=\"flex items-center gap-3\">\r\n          <div className=\"p-2 bg-purple-100 rounded-lg\">\r\n            <Activity className=\"h-5 w-5 text-purple-600\" />\r\n          </div>\r\n          <div>\r\n            <p className=\"text-sm text-gray-600\">Bu Ay Yeni</p>\r\n            <p className=\"text-xl font-bold\">{stats.new_this_month}</p>\r\n          </div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  </div>\r\n);\r\n\r\nconst UserTable = ({ \r\n  users, \r\n  onEdit, \r\n  onDelete, \r\n  onToggleStatus \r\n}: { \r\n  users: User[];\r\n  onEdit: (user: User) => void;\r\n  onDelete: (userId: string) => void;\r\n  onToggleStatus: (userId: string, status: string) => void;\r\n}) => (\r\n  <Card>\r\n    <CardHeader>\r\n      <CardTitle>Kullan─▒c─▒ Listesi</CardTitle>\r\n    </CardHeader>\r\n    <CardContent>\r\n      <Table>\r\n        <TableHeader>\r\n          <TableRow>\r\n            <TableHead>Kullan─▒c─▒</TableHead>\r\n            <TableHead>Rol</TableHead>\r\n            <TableHead>Durum</TableHead>\r\n            <TableHead>Son Giri┼ş</TableHead>\r\n            <TableHead className=\"text-right\">─░┼şlemler</TableHead>\r\n          </TableRow>\r\n        </TableHeader>\r\n        <TableBody>\r\n          {users.map((user) => (\r\n            <TableRow key={user.id}>\r\n              <TableCell>\r\n                <div className=\"flex items-center gap-3\">\r\n                  <Avatar className=\"h-8 w-8\">\r\n                    <AvatarImage src={user.avatar_url} />\r\n                    <AvatarFallback>\r\n                      {user.full_name?.charAt(0) ?? user.email.charAt(0).toUpperCase()}\r\n                    </AvatarFallback>\r\n                  </Avatar>\r\n                  <div>\r\n                    <p className=\"font-medium\">{user.full_name ?? '─░simsiz'}</p>\r\n                    <p className=\"text-sm text-gray-500\">{user.email}</p>\r\n                  </div>\r\n                </div>\r\n              </TableCell>\r\n              <TableCell>\r\n                <Badge variant={user.role === 'admin' ? 'destructive' : 'secondary'}>\r\n                  {user.role === 'admin' ? 'Y├Ânetici' : \r\n                   user.role === 'moderator' ? 'Moderat├Âr' : 'Kullan─▒c─▒'}\r\n                </Badge>\r\n              </TableCell>\r\n              <TableCell>\r\n                <Badge variant={user.status === 'active' ? 'default' : 'secondary'}>\r\n                  {user.status === 'active' ? 'Aktif' : \r\n                   user.status === 'inactive' ? 'Pasif' : 'Ask─▒ya Al─▒nm─▒┼ş'}\r\n                </Badge>\r\n              </TableCell>\r\n              <TableCell>\r\n                {user.last_sign_in_at ? new Date(user.last_sign_in_at).toLocaleDateString('tr-TR') : 'Hi├ğ giri┼ş yapmam─▒┼ş'}\r\n              </TableCell>\r\n              <TableCell className=\"text-right\">\r\n                <DropdownMenu>\r\n                  <DropdownMenuTrigger asChild>\r\n                    <Button variant=\"ghost\" size=\"sm\">\r\n                      <MoreVertical className=\"h-4 w-4\" />\r\n                    </Button>\r\n                  </DropdownMenuTrigger>\r\n                  <DropdownMenuContent align=\"end\">\r\n                    <DropdownMenuLabel>─░┼şlemler</DropdownMenuLabel>\r\n                    <DropdownMenuItem onClick={() => { onEdit(user); }}>\r\n                      <Edit className=\"mr-2 h-4 w-4\" />\r\n                      D├╝zenle\r\n                    </DropdownMenuItem>\r\n                    <DropdownMenuItem \r\n                      onClick={() => { onToggleStatus(user.id, user.status === 'active' ? 'inactive' : 'active'); }}\r\n                    >\r\n                      {user.status === 'active' ? (\r\n                        <>\r\n                          <UserX className=\"mr-2 h-4 w-4\" />\r\n                          Pasifle┼ştir\r\n                        </>\r\n                      ) : (\r\n                        <>\r\n                          <UserCheck className=\"mr-2 h-4 w-4\" />\r\n                          Aktifle┼ştir\r\n                        </>\r\n                      )}\r\n                    </DropdownMenuItem>\r\n                    <DropdownMenuSeparator />\r\n                    <DropdownMenuItem \r\n                      onClick={() => { onDelete(user.id); }}\r\n                      className=\"text-red-600\"\r\n                    >\r\n                      <Trash2 className=\"mr-2 h-4 w-4\" />\r\n                      Sil\r\n                    </DropdownMenuItem>\r\n                  </DropdownMenuContent>\r\n                </DropdownMenu>\r\n              </TableCell>\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </CardContent>\r\n  </Card>\r\n);\r\n\r\nconst UserForm = ({ \r\n  user, \r\n  onSubmit, \r\n  onCancel, \r\n  isLoading \r\n}: { \r\n  user?: User;\r\n  onSubmit: (data: UserFormData) => void;\r\n  onCancel: () => void;\r\n  isLoading: boolean;\r\n}) => {\r\n  const [formData, setFormData] = useState<UserFormData>({\r\n    email: user?.email ?? '',\r\n    full_name: user?.full_name ?? '',\r\n    role: user?.role ?? 'user',\r\n    status: user?.status ?? 'active',\r\n    phone: user?.phone ?? '',\r\n    organization: user?.organization ?? '',\r\n    permissions: user?.permissions ?? [],\r\n  });\r\n\r\n  const handleSubmit = (e: React.FormEvent) => {\r\n    e.preventDefault();\r\n    onSubmit(formData);\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className=\"space-y-4\">\r\n      <div className=\"grid grid-cols-2 gap-4\">\r\n        <div>\r\n          <Label htmlFor=\"email\">E-posta *</Label>\r\n          <Input\r\n            id=\"email\"\r\n            type=\"email\"\r\n            value={formData.email}\r\n            onChange={(e) => { setFormData({ ...formData, email: e.target.value }); }}\r\n            required\r\n          />\r\n        </div>\r\n        <div>\r\n          <Label htmlFor=\"full_name\">Ad Soyad *</Label>\r\n          <Input\r\n            id=\"full_name\"\r\n            value={formData.full_name}\r\n            onChange={(e) => { setFormData({ ...formData, full_name: e.target.value }); }}\r\n            required\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-2 gap-4\">\r\n        <div>\r\n          <Label htmlFor=\"role\">Rol</Label>\r\n          <Select value={formData.role} onValueChange={(value) => { setFormData({ ...formData, role: value as any }); }}>\r\n            <SelectTrigger>\r\n              <SelectValue />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"user\">Kullan─▒c─▒</SelectItem>\r\n              <SelectItem value=\"moderator\">Moderat├Âr</SelectItem>\r\n              <SelectItem value=\"admin\">Y├Ânetici</SelectItem>\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n        <div>\r\n          <Label htmlFor=\"status\">Durum</Label>\r\n          <Select value={formData.status} onValueChange={(value) => { setFormData({ ...formData, status: value as any }); }}>\r\n            <SelectTrigger>\r\n              <SelectValue />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              <SelectItem value=\"active\">Aktif</SelectItem>\r\n              <SelectItem value=\"inactive\">Pasif</SelectItem>\r\n              <SelectItem value=\"suspended\">Ask─▒ya Al─▒nm─▒┼ş</SelectItem>\r\n            </SelectContent>\r\n          </Select>\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"grid grid-cols-2 gap-4\">\r\n        <div>\r\n          <Label htmlFor=\"phone\">Telefon</Label>\r\n          <Input\r\n            id=\"phone\"\r\n            value={formData.phone}\r\n            onChange={(e) => { setFormData({ ...formData, phone: e.target.value }); }}\r\n          />\r\n        </div>\r\n        <div>\r\n          <Label htmlFor=\"organization\">Kurum</Label>\r\n          <Input\r\n            id=\"organization\"\r\n            value={formData.organization}\r\n            onChange={(e) => { setFormData({ ...formData, organization: e.target.value }); }}\r\n          />\r\n        </div>\r\n      </div>\r\n\r\n      <div className=\"flex justify-end gap-2\">\r\n        <Button type=\"button\" variant=\"outline\" onClick={onCancel}>\r\n          ─░ptal\r\n        </Button>\r\n        <Button type=\"submit\" disabled={isLoading}>\r\n          {isLoading ? 'Kaydediliyor...' : user ? 'G├╝ncelle' : 'Olu┼ştur'}\r\n        </Button>\r\n      </div>\r\n    </form>\r\n  );\r\n};\r\n\r\n// Main Component\r\nexport function UserManagementPageReal() {\r\n  const [users, setUsers] = useState<User[]>([]);\r\n  const [stats, setStats] = useState<UserStats>({\r\n    total: 0,\r\n    active: 0,\r\n    inactive: 0,\r\n    suspended: 0,\r\n    new_this_month: 0,\r\n  });\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [isDialogOpen, setIsDialogOpen] = useState(false);\r\n  const [editingUser, setEditingUser] = useState<User | undefined>();\r\n  const [deleteUserId, setDeleteUserId] = useState<string | null>(null);\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n\r\n  const { toast } = useToast();\r\n\r\n  // Load users\r\n  const loadUsers = async () => {\r\n    try {\r\n      setIsLoading(true);\r\n      const response = await userManagementService.getUsers();\r\n      setUsers(response.users);\r\n      setStats(response.stats);\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Kullan─▒c─▒lar y├╝klenirken hata olu┼ştu');\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Handle user creation/update\r\n  const handleUserSubmit = async (data: UserFormData) => {\r\n    try {\r\n      if (editingUser) {\r\n        await userManagementService.updateUser(editingUser.id, data);\r\n        toast({ title: 'Kullan─▒c─▒ g├╝ncellendi' });\r\n      } else {\r\n        await userManagementService.createUser(data);\r\n        toast({ title: 'Kullan─▒c─▒ olu┼şturuldu' });\r\n      }\r\n      setIsDialogOpen(false);\r\n      setEditingUser(undefined);\r\n      await loadUsers();\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Kullan─▒c─▒ kaydedilirken hata olu┼ştu');\r\n    }\r\n  };\r\n\r\n  // Handle user deletion\r\n  const handleDeleteUser = async (userId: string) => {\r\n    try {\r\n      await userManagementService.deleteUser(userId);\r\n      toast({ title: 'Kullan─▒c─▒ silindi' });\r\n      setDeleteUserId(null);\r\n      await loadUsers();\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Kullan─▒c─▒ silinirken hata olu┼ştu');\r\n    }\r\n  };\r\n\r\n  // Handle status toggle\r\n  const handleToggleStatus = async (userId: string, newStatus: string) => {\r\n    try {\r\n      await userManagementService.updateUserStatus(userId, newStatus);\r\n      toast({ title: 'Kullan─▒c─▒ durumu g├╝ncellendi' });\r\n      await loadUsers();\r\n    } catch (err) {\r\n      setError(err instanceof Error ? err.message : 'Durum g├╝ncellenirken hata olu┼ştu');\r\n    }\r\n  };\r\n\r\n  // Filter users based on search term\r\n  const filteredUsers = users.filter(user =>\r\n    user.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n    user.full_name?.toLowerCase().includes(searchTerm.toLowerCase()) ||\r\n    user.organization?.toLowerCase().includes(searchTerm.toLowerCase())\r\n  );\r\n\r\n  useEffect(() => {\r\n    loadUsers();\r\n  }, []);\r\n\r\n  if (isLoading) {\r\n    return (\r\n      <div className=\"space-y-6\">\r\n        <div className=\"grid grid-cols-2 md:grid-cols-5 gap-4\">\r\n          {Array.from({ length: 5 }).map((_, i) => (\r\n            <Card key={i}>\r\n              <CardContent className=\"p-4\">\r\n                <Skeleton className=\"h-16 w-full\" />\r\n              </CardContent>\r\n            </Card>\r\n          ))}\r\n        </div>\r\n        <Card>\r\n          <CardHeader>\r\n            <Skeleton className=\"h-6 w-32\" />\r\n          </CardHeader>\r\n          <CardContent>\r\n            <Skeleton className=\"h-64 w-full\" />\r\n          </CardContent>\r\n        </Card>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"space-y-6\">\r\n      {/* Header */}\r\n      <div className=\"flex items-center justify-between\">\r\n        <div>\r\n          <h1 className=\"text-2xl font-bold\">Kullan─▒c─▒ Y├Ânetimi</h1>\r\n          <p className=\"text-gray-600\">Sistem kullan─▒c─▒lar─▒n─▒ y├Ânetin</p>\r\n        </div>\r\n        <div className=\"flex items-center gap-2\">\r\n          <Button variant=\"outline\" onClick={loadUsers}>\r\n            <RefreshCw className=\"h-4 w-4 mr-2\" />\r\n            Yenile\r\n          </Button>\r\n          <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>\r\n            <DialogTrigger asChild>\r\n              <Button onClick={() => { setEditingUser(undefined); }}>\r\n                <Plus className=\"h-4 w-4 mr-2\" />\r\n                Yeni Kullan─▒c─▒\r\n              </Button>\r\n            </DialogTrigger>\r\n            <DialogContent className=\"max-w-2xl\">\r\n              <DialogHeader>\r\n                <DialogTitle>\r\n                  {editingUser ? 'Kullan─▒c─▒ D├╝zenle' : 'Yeni Kullan─▒c─▒'}\r\n                </DialogTitle>\r\n                <DialogDescription>\r\n                  {editingUser ? 'Kullan─▒c─▒ bilgilerini g├╝ncelleyin' : 'Yeni kullan─▒c─▒ olu┼şturun'}\r\n                </DialogDescription>\r\n              </DialogHeader>\r\n              <UserForm\r\n                user={editingUser}\r\n                onSubmit={handleUserSubmit}\r\n                onCancel={() => { setIsDialogOpen(false); }}\r\n                isLoading={false}\r\n              />\r\n            </DialogContent>\r\n          </Dialog>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Error Display */}\r\n      {error && (\r\n        <Alert variant=\"destructive\">\r\n          <AlertTriangle className=\"h-4 w-4\" />\r\n          <AlertDescription className=\"flex items-center justify-between\">\r\n            {error}\r\n            <Button variant=\"ghost\" size=\"sm\" onClick={() => { setError(null); }}>\r\n              <X className=\"h-4 w-4\" />\r\n            </Button>\r\n          </AlertDescription>\r\n        </Alert>\r\n      )}\r\n\r\n      {/* Stats Cards */}\r\n      <UserStatsCards stats={stats} />\r\n\r\n      {/* Search and Filters */}\r\n      <Card>\r\n        <CardContent className=\"p-4\">\r\n          <div className=\"flex items-center gap-4\">\r\n            <div className=\"relative flex-1\">\r\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400\" />\r\n              <Input\r\n                placeholder=\"Kullan─▒c─▒ ara...\"\r\n                value={searchTerm}\r\n                onChange={(e) => { setSearchTerm(e.target.value); }}\r\n                className=\"pl-10\"\r\n              />\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* User Table */}\r\n      <UserTable\r\n        users={filteredUsers}\r\n        onEdit={(user) => {\r\n          setEditingUser(user);\r\n          setIsDialogOpen(true);\r\n        }}\r\n        onDelete={setDeleteUserId}\r\n        onToggleStatus={handleToggleStatus}\r\n      />\r\n\r\n      {/* Delete Confirmation Dialog */}\r\n      <AlertDialog open={!!deleteUserId} onOpenChange={() => { setDeleteUserId(null); }}>\r\n        <AlertDialogContent>\r\n          <AlertDialogHeader>\r\n            <AlertDialogTitle>Kullan─▒c─▒y─▒ Sil</AlertDialogTitle>\r\n            <AlertDialogDescription>\r\n              Bu kullan─▒c─▒y─▒ silmek istedi─şinizden emin misiniz? Bu i┼şlem geri al─▒namaz.\r\n            </AlertDialogDescription>\r\n          </AlertDialogHeader>\r\n          <AlertDialogFooter>\r\n            <AlertDialogCancel>─░ptal</AlertDialogCancel>\r\n            <AlertDialogAction\r\n              onClick={() => deleteUserId && handleDeleteUser(deleteUserId)}\r\n              className=\"bg-red-600 hover:bg-red-700\"\r\n            >\r\n              Sil\r\n            </AlertDialogAction>\r\n          </AlertDialogFooter>\r\n        </AlertDialogContent>\r\n      </AlertDialog>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\pwa\\OfflineIndicator.tsx","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":43,"column":44,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":43,"endColumn":61},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":43,"column":53,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":43,"endColumn":55,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[1249,1251],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1422,1425],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1422,1425],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1511,1514],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1511,1514],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":81,"column":9,"nodeType":"UnaryExpression","messageId":"constantShortCircuit","endLine":81,"endColumn":24},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":81,"column":9,"nodeType":"UnaryExpression","messageId":"neverNullish","endLine":81,"endColumn":24},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'response' is assigned a value but never used.","line":99,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":99,"endColumn":21},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'response' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":99,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":99,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":108,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":108,"endColumn":19},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":108,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":108,"endColumn":19},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":276,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":276,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9988,9990],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":314,"column":44,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":314,"endColumn":61},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":314,"column":53,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":314,"endColumn":55,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[11321,11323],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":335,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":335,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11871,11874],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11871,11874],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview OfflineIndicator Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport { motion, AnimatePresence } from 'motion/react';\r\nimport { WifiOff, Wifi, RefreshCw, AlertCircle, CheckCircle } from 'lucide-react';\r\nimport { Button } from '../ui/button';\r\nimport { Card } from '../ui/card';\r\nimport { Badge } from '../ui/badge';\r\n// Basit network monitoring - PWA kald─▒r─▒ld─▒\r\n\r\n// Environment detection\r\nconst isInFigma =\r\n  typeof window !== 'undefined' &&\r\n  (window.location.hostname.includes('figma.site') ||\r\n    window.location.hostname.includes('figma.com') ||\r\n    window.parent !== window);\r\n\r\n// ­şîÉ Offline Indicator Component\r\n// Elegant network status indicator with reconnection capabilities\r\n\r\ninterface OfflineIndicatorProps {\r\n  className?: string;\r\n  position?: 'top' | 'bottom';\r\n  showDetails?: boolean;\r\n}\r\n\r\n/**\r\n * OfflineIndicator function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function OfflineIndicator({\r\n  className = '',\r\n  position = 'top',\r\n  showDetails = false,\r\n}: OfflineIndicatorProps) {\r\n  const [isOnline, setIsOnline] = useState(navigator?.onLine ?? true);\r\n\r\n  // Network bilgilerini g├╝ncelleyelim - PWA kald─▒r─▒ld─▒\r\n  const networkInfo = {\r\n    isOnline,\r\n    effectiveType: isInFigma ? 'wifi' : (navigator as any)?.connection?.effectiveType,\r\n    connectionType: isInFigma ? 'wifi' : (navigator as any)?.connection?.type,\r\n  };\r\n  const [showReconnecting, setShowReconnecting] = useState(false);\r\n  const [lastOnlineTime, setLastOnlineTime] = useState<Date | null>(null);\r\n  const [reconnectAttempts, setReconnectAttempts] = useState(0);\r\n\r\n  // Track network status changes\r\n  useEffect(() => {\r\n    const handleOnline = () => {\r\n      setIsOnline(true);\r\n    };\r\n    const handleOffline = () => {\r\n      setIsOnline(false);\r\n    };\r\n\r\n    window.addEventListener('online', handleOnline);\r\n    window.addEventListener('offline', handleOffline);\r\n\r\n    if (networkInfo.isOnline) {\r\n      setLastOnlineTime(new Date());\r\n      setReconnectAttempts(0);\r\n      setShowReconnecting(false);\r\n    }\r\n\r\n    return () => {\r\n      window.removeEventListener('online', handleOnline);\r\n      window.removeEventListener('offline', handleOffline);\r\n    };\r\n  }, [networkInfo.isOnline]);\r\n\r\n  // Format time since last online\r\n  const getTimeSinceOnline = () => {\r\n    if (!lastOnlineTime ?? networkInfo.isOnline) return null;\r\n\r\n    const now = new Date();\r\n    const diff = Math.floor((now.getTime() - lastOnlineTime.getTime()) / 1000);\r\n\r\n    if (diff < 60) return `${diff} saniye ├Ânce`;\r\n    if (diff < 3600) return `${Math.floor(diff / 60)} dakika ├Ânce`;\r\n    return `${Math.floor(diff / 3600)} saat ├Ânce`;\r\n  };\r\n\r\n  // Handle reconnection attempt\r\n  const handleReconnect = async () => {\r\n    setShowReconnecting(true);\r\n    setReconnectAttempts((prev) => prev + 1);\r\n\r\n    // Simulate reconnection attempt\r\n    try {\r\n      // Try to fetch a small resource to test connectivity\r\n      const response = await fetch('/manifest.json', {\r\n        cache: 'no-cache',\r\n        mode: 'no-cors',\r\n      });\r\n\r\n      // If we get here, connection might be restored\r\n      setTimeout(() => {\r\n        setShowReconnecting(false);\r\n      }, 1000);\r\n    } catch (error) {\r\n      // Still offline\r\n      setTimeout(() => {\r\n        setShowReconnecting(false);\r\n      }, 2000);\r\n    }\r\n  };\r\n\r\n  // Get connection quality indicator\r\n  const getConnectionQuality = () => {\r\n    if (!networkInfo.isOnline) return null;\r\n\r\n    const effectiveType = networkInfo.effectiveType?.toLowerCase();\r\n\r\n    switch (effectiveType) {\r\n      case 'slow-2g':\r\n      case '2g':\r\n        return { label: 'Yava┼ş', color: 'bg-red-500', strength: 1 };\r\n      case '3g':\r\n        return { label: 'Orta', color: 'bg-amber-500', strength: 2 };\r\n      case '4g':\r\n        return { label: 'H─▒zl─▒', color: 'bg-emerald-500', strength: 3 };\r\n      case '5g':\r\n        return { label: '├çok H─▒zl─▒', color: 'bg-blue-500', strength: 4 };\r\n      default:\r\n        return { label: '─░yi', color: 'bg-emerald-500', strength: 3 };\r\n    }\r\n  };\r\n\r\n  const connectionQuality = getConnectionQuality();\r\n  const timeSinceOnline = getTimeSinceOnline();\r\n\r\n  // Don't show if online and not showing details\r\n  if (networkInfo.isOnline && !showDetails) return null;\r\n\r\n  return (\r\n    <AnimatePresence>\r\n      <motion.div\r\n        initial={{ opacity: 0, y: position === 'top' ? -50 : 50 }}\r\n        animate={{ opacity: 1, y: 0 }}\r\n        exit={{ opacity: 0, y: position === 'top' ? -50 : 50 }}\r\n        transition={{ type: 'spring', stiffness: 300, damping: 25 }}\r\n        className={`\r\n          fixed ${position === 'top' ? 'top-4' : 'bottom-4'} \r\n          left-1/2 transform -translate-x-1/2 z-50 ${className}\r\n        `}\r\n      >\r\n        <Card\r\n          className={`\r\n          ${\r\n            networkInfo.isOnline\r\n              ? 'bg-emerald-50 border-emerald-200 dark:bg-emerald-950 dark:border-emerald-800'\r\n              : 'bg-red-50 border-red-200 dark:bg-red-950 dark:border-red-800'\r\n          } \r\n          shadow-lg backdrop-blur-sm border-2\r\n        `}\r\n        >\r\n          <div className=\"px-4 py-3\">\r\n            <div className=\"flex items-center gap-3\">\r\n              {/* Status Icon */}\r\n              <div\r\n                className={`\r\n                p-2 rounded-full ${\r\n                  networkInfo.isOnline\r\n                    ? 'bg-emerald-100 text-emerald-600 dark:bg-emerald-900 dark:text-emerald-400'\r\n                    : 'bg-red-100 text-red-600 dark:bg-red-900 dark:text-red-400'\r\n                }\r\n              `}\r\n              >\r\n                {showReconnecting ? (\r\n                  <RefreshCw className=\"w-4 h-4 animate-spin\" />\r\n                ) : networkInfo.isOnline ? (\r\n                  <CheckCircle className=\"w-4 h-4\" />\r\n                ) : (\r\n                  <WifiOff className=\"w-4 h-4\" />\r\n                )}\r\n              </div>\r\n\r\n              {/* Status Info */}\r\n              <div className=\"flex-1\">\r\n                <div className=\"flex items-center gap-2\">\r\n                  <span\r\n                    className={`\r\n                    font-medium text-sm ${\r\n                      networkInfo.isOnline\r\n                        ? 'text-emerald-700 dark:text-emerald-300'\r\n                        : 'text-red-700 dark:text-red-300'\r\n                    }\r\n                  `}\r\n                  >\r\n                    {showReconnecting\r\n                      ? 'Yeniden ba─şlan─▒yor...'\r\n                      : networkInfo.isOnline\r\n                        ? 'Ba─şlant─▒ Aktif'\r\n                        : '├çevrimd─▒┼ş─▒ Mod'}\r\n                  </span>\r\n\r\n                  {networkInfo.isOnline && connectionQuality && (\r\n                    <Badge\r\n                      variant=\"secondary\"\r\n                      className={`\r\n                        ${connectionQuality.color} text-white text-xs px-2 py-0.5\r\n                      `}\r\n                    >\r\n                      {connectionQuality.label}\r\n                    </Badge>\r\n                  )}\r\n                </div>\r\n\r\n                {/* Additional Info */}\r\n                <div className=\"text-xs text-muted-foreground mt-1\">\r\n                  {networkInfo.isOnline ? (\r\n                    <div className=\"flex items-center gap-4\">\r\n                      <span className=\"flex items-center gap-1\">\r\n                        <div className=\"w-1.5 h-1.5 bg-green-500 rounded-full\" />\r\n                        Temiz Frontend\r\n                      </span>\r\n                      {networkInfo.connectionType && networkInfo.connectionType !== 'unknown' && (\r\n                        <span>Ba─şlant─▒: {networkInfo.connectionType.toUpperCase()}</span>\r\n                      )}\r\n                    </div>\r\n                  ) : (\r\n                    <div className=\"flex items-center gap-4\">\r\n                      {timeSinceOnline && <span>Son ba─şlant─▒: {timeSinceOnline}</span>}\r\n                      <span className=\"flex items-center gap-1\">\r\n                        <div className=\"w-1.5 h-1.5 bg-amber-500 rounded-full\" />\r\n                        ├çevrimd─▒┼ş─▒ mod\r\n                      </span>\r\n                    </div>\r\n                  )}\r\n                </div>\r\n              </div>\r\n\r\n              {/* Reconnect Button */}\r\n              {!networkInfo.isOnline && (\r\n                <Button\r\n                  size=\"sm\"\r\n                  variant=\"outline\"\r\n                  onClick={handleReconnect}\r\n                  disabled={showReconnecting}\r\n                  className=\"h-8 px-3 border-red-200 text-red-600 hover:bg-red-50 dark:border-red-800 dark:text-red-400 dark:hover:bg-red-950\"\r\n                >\r\n                  {showReconnecting ? (\r\n                    <RefreshCw className=\"w-3 h-3 animate-spin\" />\r\n                  ) : (\r\n                    <Wifi className=\"w-3 h-3\" />\r\n                  )}\r\n                </Button>\r\n              )}\r\n            </div>\r\n\r\n            {/* Connection Quality Bars */}\r\n            {networkInfo.isOnline && connectionQuality && showDetails && (\r\n              <div className=\"flex items-center gap-1 mt-3 pt-3 border-t border-emerald-200 dark:border-emerald-800\">\r\n                <span className=\"text-xs text-muted-foreground mr-2\">Sinyal:</span>\r\n                {[1, 2, 3, 4].map((bar) => (\r\n                  <div\r\n                    key={bar}\r\n                    className={`\r\n                      w-1 h-3 rounded-sm ${\r\n                        bar <= connectionQuality.strength\r\n                          ? connectionQuality.color\r\n                          : 'bg-gray-200 dark:bg-gray-700'\r\n                      }\r\n                    `}\r\n                  />\r\n                ))}\r\n                <span className=\"text-xs text-muted-foreground ml-2\">\r\n                  {networkInfo.effectiveType?.toUpperCase() || 'UNKNOWN'}\r\n                </span>\r\n              </div>\r\n            )}\r\n\r\n            {/* Offline Features Notice */}\r\n            {!networkInfo.isOnline && (\r\n              <div className=\"mt-3 pt-3 border-t border-red-200 dark:border-red-800\">\r\n                <div className=\"flex items-start gap-2\">\r\n                  <AlertCircle className=\"w-4 h-4 text-amber-500 mt-0.5 flex-shrink-0\" />\r\n                  <div>\r\n                    <p className=\"text-xs text-muted-foreground\">\r\n                      ├çevrimd─▒┼ş─▒ modda ├ğal─▒┼ş─▒yorsunuz. Veriler yerel olarak saklanmaktad─▒r.\r\n                    </p>\r\n                    {reconnectAttempts > 0 && (\r\n                      <p className=\"text-xs text-muted-foreground mt-1\">\r\n                        Yeniden ba─şlant─▒ denemesi: {reconnectAttempts}\r\n                      </p>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </Card>\r\n      </motion.div>\r\n    </AnimatePresence>\r\n  );\r\n}\r\n\r\n// ­şöı Compact Network Status Badge\r\n/**\r\n * NetworkStatusBadge function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function NetworkStatusBadge({ className = '' }: { className?: string }) {\r\n  const [isOnline, setIsOnline] = useState(navigator?.onLine ?? true);\r\n\r\n  useEffect(() => {\r\n    const handleOnline = () => {\r\n      setIsOnline(true);\r\n    };\r\n    const handleOffline = () => {\r\n      setIsOnline(false);\r\n    };\r\n\r\n    window.addEventListener('online', handleOnline);\r\n    window.addEventListener('offline', handleOffline);\r\n\r\n    return () => {\r\n      window.removeEventListener('online', handleOnline);\r\n      window.removeEventListener('offline', handleOffline);\r\n    };\r\n  }, []);\r\n\r\n  const networkInfo = {\r\n    isOnline,\r\n    effectiveType: isInFigma ? 'wifi' : (navigator as any)?.connection?.effectiveType,\r\n  };\r\n\r\n  return (\r\n    <div className={`flex items-center gap-1 ${className}`}>\r\n      <div\r\n        className={`\r\n        w-2 h-2 rounded-full ${networkInfo.isOnline ? 'bg-emerald-500' : 'bg-red-500'}\r\n      `}\r\n      />\r\n      <span className=\"text-xs text-muted-foreground\">\r\n        {networkInfo.isOnline ? 'Online' : 'Offline'}\r\n      </span>\r\n      {networkInfo.isOnline && networkInfo.effectiveType && (\r\n        <span className=\"text-xs text-muted-foreground\">\r\n          ({networkInfo.effectiveType.toUpperCase()})\r\n        </span>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\search\\AdvancedSearch.tsx","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, the types have no overlap.","line":110,"column":9,"nodeType":"BinaryExpression","messageId":"noOverlapBooleanExpression","endLine":110,"endColumn":23},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, the types have no overlap.","line":111,"column":9,"nodeType":"BinaryExpression","messageId":"noOverlapBooleanExpression","endLine":111,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":116,"column":57,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":60,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3157,3160],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3157,3160],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":130,"column":14,"nodeType":"MemberExpression","endLine":130,"endColumn":35},{"ruleId":"@typescript-eslint/switch-exhaustiveness-check","severity":2,"message":"Switch is not exhaustive. Cases not matched: \"text\"","line":152,"column":13,"nodeType":"MemberExpression","messageId":"switchIsNotExhaustive","endLine":152,"endColumn":24,"suggestions":[{"messageId":"addMissingCases","fix":{"range":[7665,7665],"text":"case \"text\": { throw new Error('Not implemented yet: \"text\" case') }\n      "},"desc":"Add branches for missing cases."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":156,"column":27,"nodeType":"Identifier","messageId":"neverNullish","endLine":156,"endColumn":32},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":162,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":162,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4288,4290],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":207,"column":27,"nodeType":"Identifier","messageId":"neverNullish","endLine":207,"endColumn":32},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":223,"column":58,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":223,"endColumn":60,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[6548,6550],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is `never`.","line":225,"column":79,"nodeType":"Identifier","messageId":"never","endLine":225,"endColumn":84},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":231,"column":58,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":231,"endColumn":60,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[6965,6967],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is `never`.","line":233,"column":79,"nodeType":"Identifier","messageId":"never","endLine":233,"endColumn":84},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":245,"column":27,"nodeType":"Identifier","messageId":"neverNullish","endLine":245,"endColumn":32},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":258,"column":27,"nodeType":"Identifier","messageId":"neverNullish","endLine":258,"endColumn":32},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":262,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":262,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7940,7942],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is `never`.","line":394,"column":55,"nodeType":"Identifier","messageId":"never","endLine":394,"endColumn":60}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview AdvancedSearch Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport {\r\n  Download,\r\n  Filter,\r\n  Grid,\r\n  List,\r\n  RefreshCw,\r\n  Search,\r\n  SortAsc,\r\n  SortDesc,\r\n  X,\r\n} from 'lucide-react';\r\nimport { AnimatePresence, motion } from 'motion/react';\r\nimport React, { useEffect, useMemo, useState } from 'react';\r\nimport { useAdvancedMobile } from '../../hooks/useAdvancedMobile';\r\nimport { useDebounce } from '../../hooks/useDebounce';\r\nimport { Badge } from '../ui/badge';\r\nimport { Button } from '../ui/button';\r\nimport { Input } from '../ui/input';\r\nimport { Popover, PopoverContent, PopoverTrigger } from '../ui/popover';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\n\r\n/**\r\n * SearchFilter Interface\r\n * \r\n * @interface SearchFilter\r\n */\r\nexport interface SearchFilter {\r\n  key: string;\r\n  label: string;\r\n  type: 'text' | 'select' | 'date' | 'dateRange' | 'multiSelect' | 'number';\r\n  options?: { value: string; label: string }[];\r\n  placeholder?: string;\r\n}\r\n\r\n/**\r\n * SortOption Interface\r\n * \r\n * @interface SortOption\r\n */\r\nexport interface SortOption {\r\n  key: string;\r\n  label: string;\r\n  direction?: 'asc' | 'desc';\r\n}\r\n\r\ninterface AdvancedSearchProps {\r\n  placeholder?: string;\r\n  filters?: SearchFilter[];\r\n  sortOptions?: SortOption[];\r\n  onSearch: (\r\n    query: string,\r\n    filters: Record<string, string | number | boolean>,\r\n    sort?: SortOption,\r\n  ) => void;\r\n  onExport?: () => void;\r\n  onRefresh?: () => void;\r\n  loading?: boolean;\r\n  resultCount?: number;\r\n  showViewToggle?: boolean;\r\n  viewMode?: 'grid' | 'list';\r\n  onViewModeChange?: (mode: 'grid' | 'list') => void;\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * AdvancedSearch function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function AdvancedSearch({\r\n  placeholder = 'Ara...',\r\n  filters = [],\r\n  sortOptions = [],\r\n  onSearch,\r\n  onExport,\r\n  onRefresh,\r\n  loading = false,\r\n  resultCount,\r\n  showViewToggle = true,\r\n  viewMode = 'list',\r\n  onViewModeChange,\r\n  className = '',\r\n}: AdvancedSearchProps) {\r\n  const [searchQuery, setSearchQuery] = useState('');\r\n  const [activeFilters, setActiveFilters] = useState<Record<string, string | number | boolean>>({});\r\n  const [isFiltersOpen, setIsFiltersOpen] = useState(false);\r\n  const [sortBy, setSortBy] = useState<SortOption | null>(null);\r\n\r\n  const { deviceInfo, triggerHapticFeedback } = useAdvancedMobile();\r\n  const debouncedQuery = useDebounce(searchQuery, 300);\r\n\r\n  // Trigger search when query or filters change\r\n  useEffect(() => {\r\n    onSearch(debouncedQuery, activeFilters, sortBy ?? undefined);\r\n  }, [debouncedQuery, activeFilters, sortBy, onSearch]);\r\n\r\n  // Get active filter count\r\n  const activeFilterCount = useMemo(() => {\r\n    return Object.values(activeFilters).filter(\r\n      (value) =>\r\n        value !== '' &&\r\n        value !== null &&\r\n        value !== undefined &&\r\n        (Array.isArray(value) ? value.length > 0 : true),\r\n    ).length;\r\n  }, [activeFilters]);\r\n\r\n  const handleFilterChange = (filterKey: string, value: any) => {\r\n    setActiveFilters((prev) => ({\r\n      ...prev,\r\n      [filterKey]: value,\r\n    }));\r\n\r\n    if (deviceInfo.isMobile) {\r\n      triggerHapticFeedback('light');\r\n    }\r\n  };\r\n\r\n  const clearFilter = (filterKey: string) => {\r\n    setActiveFilters((prev) => {\r\n      const newFilters = { ...prev };\r\n      delete newFilters[filterKey];\r\n      return newFilters;\r\n    });\r\n\r\n    if (deviceInfo.isMobile) {\r\n      triggerHapticFeedback('light');\r\n    }\r\n  };\r\n\r\n  const clearAllFilters = () => {\r\n    setActiveFilters({});\r\n    setSearchQuery('');\r\n    setSortBy(null);\r\n\r\n    if (deviceInfo.isMobile) {\r\n      triggerHapticFeedback('medium');\r\n    }\r\n  };\r\n\r\n  const renderFilter = (filter: SearchFilter) => {\r\n    const value = activeFilters[filter.key];\r\n\r\n    switch (filter.type) {\r\n      case 'select':\r\n        return (\r\n          <Select\r\n            value={String(value ?? '')}\r\n            onValueChange={(newValue) => {\r\n              handleFilterChange(filter.key, newValue);\r\n            }}\r\n          >\r\n            <SelectTrigger className=\"w-full\">\r\n              <SelectValue placeholder={filter.placeholder || `${filter.label} se├ğin`} />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              {filter.options?.map((option) => (\r\n                <SelectItem key={option.value} value={option.value}>\r\n                  {option.label}\r\n                </SelectItem>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n        );\r\n\r\n      case 'multiSelect':\r\n        return (\r\n          <div className=\"space-y-2\">\r\n            <div className=\"text-sm font-medium text-gray-700\">{filter.label}</div>\r\n            <div className=\"grid grid-cols-2 gap-2\">\r\n              {filter.options?.map((option) => {\r\n                const isSelected = Array.isArray(value) && value.includes(option.value);\r\n                return (\r\n                  <Button\r\n                    key={option.value}\r\n                    variant={isSelected ? 'default' : 'outline'}\r\n                    size=\"sm\"\r\n                    className=\"justify-start text-left h-auto py-2 px-3\"\r\n                    onClick={() => {\r\n                      const currentValues = Array.isArray(value) ? value : [];\r\n                      const newValues = isSelected\r\n                        ? currentValues.filter((v) => v !== option.value)\r\n                        : [...currentValues, option.value];\r\n                      handleFilterChange(filter.key, newValues);\r\n                    }}\r\n                  >\r\n                    <div className=\"truncate\">{option.label}</div>\r\n                  </Button>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'date':\r\n        return (\r\n          <Input\r\n            type=\"date\"\r\n            value={String(value ?? '')}\r\n            onChange={(e) => {\r\n              handleFilterChange(filter.key, e.target.value);\r\n            }}\r\n            placeholder={filter.placeholder}\r\n            className=\"w-full\"\r\n          />\r\n        );\r\n\r\n      case 'dateRange':\r\n        return (\r\n          <div className=\"space-y-2\">\r\n            <div className=\"text-sm font-medium text-gray-700\">{filter.label}</div>\r\n            <div className=\"grid grid-cols-2 gap-2\">\r\n              <Input\r\n                type=\"date\"\r\n                value={typeof value === 'object' && value?.from ? String(value.from) : ''}\r\n                onChange={(e) => {\r\n                  handleFilterChange(filter.key, typeof value === 'object' && value ? { ...value, from: e.target.value } : { from: e.target.value, to: '' });\r\n                }}\r\n                placeholder=\"Ba┼şlang─▒├ğ\"\r\n              />\r\n              <Input\r\n                type=\"date\"\r\n                value={typeof value === 'object' && value?.to ? String(value.to) : ''}\r\n                onChange={(e) => {\r\n                  handleFilterChange(filter.key, typeof value === 'object' && value ? { ...value, to: e.target.value } : { from: '', to: e.target.value });\r\n                }}\r\n                placeholder=\"Biti┼ş\"\r\n              />\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'number':\r\n        return (\r\n          <Input\r\n            type=\"number\"\r\n            value={String(value ?? '')}\r\n            onChange={(e) => {\r\n              handleFilterChange(filter.key, e.target.value);\r\n            }}\r\n            placeholder={filter.placeholder}\r\n            className=\"w-full\"\r\n          />\r\n        );\r\n\r\n      default: // text\r\n        return (\r\n          <Input\r\n            type=\"text\"\r\n            value={String(value ?? '')}\r\n            onChange={(e) => {\r\n              handleFilterChange(filter.key, e.target.value);\r\n            }}\r\n            placeholder={filter.placeholder || `${filter.label} girin`}\r\n            className=\"w-full\"\r\n          />\r\n        );\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={`space-y-4 ${className}`}>\r\n      {/* Main Search Bar */}\r\n      <div className=\"flex gap-2\">\r\n        <div className=\"relative flex-1\">\r\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\r\n          <Input\r\n            type=\"text\"\r\n            placeholder={placeholder}\r\n            value={searchQuery}\r\n            onChange={(e) => {\r\n              setSearchQuery(e.target.value);\r\n            }}\r\n            className=\"pl-10 pr-4 h-11 text-base border-gray-300 focus:border-blue-500 focus:ring-blue-500/20\"\r\n          />\r\n          {searchQuery && (\r\n            <button\r\n              onClick={() => {\r\n                setSearchQuery('');\r\n              }}\r\n              className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-400 hover:text-gray-600\"\r\n            >\r\n              <X className=\"w-4 h-4\" />\r\n            </button>\r\n          )}\r\n        </div>\r\n\r\n        {/* Filter Toggle */}\r\n        {filters.length > 0 && (\r\n          <Popover open={isFiltersOpen} onOpenChange={setIsFiltersOpen}>\r\n            <PopoverTrigger asChild>\r\n              <Button\r\n                variant=\"outline\"\r\n                className={`h-11 px-3 border-gray-300 ${\r\n                  activeFilterCount > 0 ? 'bg-blue-50 border-blue-300' : ''\r\n                }`}\r\n              >\r\n                <Filter className=\"w-4 h-4 mr-2\" />\r\n                <span className=\"hidden sm:inline\">Filtrele</span>\r\n                {activeFilterCount > 0 && (\r\n                  <Badge variant=\"secondary\" className=\"ml-2 px-1.5 py-0.5 text-xs\">\r\n                    {activeFilterCount}\r\n                  </Badge>\r\n                )}\r\n              </Button>\r\n            </PopoverTrigger>\r\n            <PopoverContent className=\"w-80 p-0\" align=\"end\">\r\n              <div className=\"p-4 border-b\">\r\n                <div className=\"flex items-center justify-between\">\r\n                  <h4 className=\"font-semibold text-gray-900\">Filtreler</h4>\r\n                  {activeFilterCount > 0 && (\r\n                    <Button variant=\"ghost\" size=\"sm\" onClick={clearAllFilters} className=\"text-xs\">\r\n                      Temizle\r\n                    </Button>\r\n                  )}\r\n                </div>\r\n              </div>\r\n              <div className=\"p-4 max-h-96 overflow-y-auto space-y-4\">\r\n                {filters.map((filter) => (\r\n                  <div key={filter.key} className=\"space-y-2\">\r\n                    {filter.type !== 'multiSelect' && (\r\n                      <label className=\"text-sm font-medium text-gray-700\">{filter.label}</label>\r\n                    )}\r\n                    {renderFilter(filter)}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n            </PopoverContent>\r\n          </Popover>\r\n        )}\r\n\r\n        {/* Sort Options */}\r\n        {sortOptions.length > 0 && (\r\n          <Select\r\n            value={sortBy ? `${sortBy.key}-${sortBy.direction}` : ''}\r\n            onValueChange={(value) => {\r\n              if (!value) {\r\n                setSortBy(null);\r\n                return;\r\n              }\r\n              const [key, direction] = value.split('-');\r\n              const option = sortOptions.find((opt) => opt.key === key);\r\n              if (option) {\r\n                setSortBy({ ...option, direction: direction as 'asc' | 'desc' });\r\n              }\r\n            }}\r\n          >\r\n            <SelectTrigger className=\"w-32 sm:w-40 h-11\">\r\n              <SelectValue placeholder=\"S─▒rala\" />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              {sortOptions.map((option) => (\r\n                <React.Fragment key={option.key}>\r\n                  <SelectItem value={`${option.key}-asc`}>\r\n                    <span className=\"flex items-center gap-2\">\r\n                      <SortAsc className=\"w-3 h-3\" />\r\n                      {option.label} Ôåæ\r\n                    </span>\r\n                  </SelectItem>\r\n                  <SelectItem value={`${option.key}-desc`}>\r\n                    <span className=\"flex items-center gap-2\">\r\n                      <SortDesc className=\"w-3 h-3\" />\r\n                      {option.label} Ôåô\r\n                    </span>\r\n                  </SelectItem>\r\n                </React.Fragment>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n        )}\r\n      </div>\r\n\r\n      {/* Active Filters & Results Bar */}\r\n      <div className=\"flex items-center justify-between gap-4 flex-wrap\">\r\n        <div className=\"flex items-center gap-2 flex-wrap\">\r\n          <AnimatePresence>\r\n            {Object.entries(activeFilters).map(([key, value]) => {\r\n              if (!value || (Array.isArray(value) && value.length === 0)) return null;\r\n\r\n              const filter = filters.find((f) => f.key === key);\r\n              if (!filter) return null;\r\n\r\n              let displayValue = value;\r\n              if (Array.isArray(value)) {\r\n                displayValue = value.length > 1 ? `${value.length} se├ğili` : value[0];\r\n              } else if (typeof value === 'object' && value && 'from' in value && 'to' in value) {\r\n                displayValue = `${value.from} - ${value.to}`;\r\n              }\r\n\r\n              return (\r\n                <motion.div\r\n                  key={key}\r\n                  initial={{ opacity: 0, scale: 0.8 }}\r\n                  animate={{ opacity: 1, scale: 1 }}\r\n                  exit={{ opacity: 0, scale: 0.8 }}\r\n                  transition={{ duration: 0.2 }}\r\n                >\r\n                  <Badge variant=\"secondary\" className=\"gap-1 py-1 px-2\">\r\n                    <span className=\"text-xs\">\r\n                      {filter.label}: {displayValue}\r\n                    </span>\r\n                    <button\r\n                      onClick={() => {\r\n                        clearFilter(key);\r\n                      }}\r\n                      className=\"ml-1 hover:bg-gray-300 rounded-full p-0.5\"\r\n                    >\r\n                      <X className=\"w-3 h-3\" />\r\n                    </button>\r\n                  </Badge>\r\n                </motion.div>\r\n              );\r\n            })}\r\n          </AnimatePresence>\r\n\r\n          {sortBy && (\r\n            <motion.div initial={{ opacity: 0, scale: 0.8 }} animate={{ opacity: 1, scale: 1 }}>\r\n              <Badge variant=\"outline\" className=\"gap-1 py-1 px-2\">\r\n                <span className=\"text-xs\">\r\n                  {sortBy.label} {sortBy.direction === 'asc' ? 'Ôåæ' : 'Ôåô'}\r\n                </span>\r\n                <button\r\n                  onClick={() => {\r\n                    setSortBy(null);\r\n                  }}\r\n                  className=\"ml-1 hover:bg-gray-200 rounded-full p-0.5\"\r\n                >\r\n                  <X className=\"w-3 h-3\" />\r\n                </button>\r\n              </Badge>\r\n            </motion.div>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"flex items-center gap-2\">\r\n          {/* Result Count */}\r\n          {typeof resultCount === 'number' && (\r\n            <span className=\"text-sm text-gray-600\">{resultCount} sonu├ğ</span>\r\n          )}\r\n\r\n          {/* Action Buttons */}\r\n          <div className=\"flex items-center gap-1\">\r\n            {onRefresh && (\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"sm\"\r\n                onClick={onRefresh}\r\n                disabled={loading}\r\n                className=\"h-8 w-8 p-0\"\r\n              >\r\n                <RefreshCw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />\r\n              </Button>\r\n            )}\r\n\r\n            {onExport && (\r\n              <Button variant=\"ghost\" size=\"sm\" onClick={onExport} className=\"h-8 w-8 p-0\">\r\n                <Download className=\"w-4 h-4\" />\r\n              </Button>\r\n            )}\r\n\r\n            {/* View Toggle */}\r\n            {showViewToggle && onViewModeChange && (\r\n              <div className=\"flex border rounded-md\">\r\n                <Button\r\n                  variant={viewMode === 'list' ? 'default' : 'ghost'}\r\n                  size=\"sm\"\r\n                  onClick={() => {\r\n                    onViewModeChange('list');\r\n                  }}\r\n                  className=\"h-8 w-8 p-0 rounded-r-none\"\r\n                >\r\n                  <List className=\"w-4 h-4\" />\r\n                </Button>\r\n                <Button\r\n                  variant={viewMode === 'grid' ? 'default' : 'ghost'}\r\n                  size=\"sm\"\r\n                  onClick={() => {\r\n                    onViewModeChange('grid');\r\n                  }}\r\n                  className=\"h-8 w-8 p-0 rounded-l-none\"\r\n                >\r\n                  <Grid className=\"w-4 h-4\" />\r\n                </Button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AdvancedSearch;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\search\\DataTable.tsx","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'react' import is duplicated.","line":9,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":9,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1085,1088],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1085,1088],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":44,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":44,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1169,1172],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1169,1172],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1376,1379],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1376,1379],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":82,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":82,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2122,2125],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2122,2125],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'hasResults' is assigned a value but never used.","line":103,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":43},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'hasResults' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":103,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isEmpty' is assigned a value but never used.","line":103,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":52},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'isEmpty' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":103,"column":45,"nodeType":null,"messageId":"unusedVar","endLine":103,"endColumn":52},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3009,3012],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3009,3012],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'page' is defined but never used.","line":125,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":24},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'page' is defined but never used. Allowed unused args must match /^_/u.","line":125,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":24},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":155,"column":61,"nodeType":"MemberExpression","endLine":155,"endColumn":77},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'isIndeterminate' is assigned a value but never used.","line":173,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":173,"endColumn":24},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'isIndeterminate' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":173,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":173,"endColumn":24},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":251,"column":9,"nodeType":"Identifier","messageId":"neverNullish","endLine":251,"endColumn":19},{"ruleId":"@typescript-eslint/no-confusing-void-expression","severity":2,"message":"Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.","line":337,"column":55,"nodeType":"CallExpression","messageId":"invalidVoidExprArrow","endLine":337,"endColumn":76},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":446,"column":53,"nodeType":"UnaryExpression","messageId":"constantShortCircuit","endLine":446,"endColumn":65},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":446,"column":53,"nodeType":"UnaryExpression","messageId":"neverNullish","endLine":446,"endColumn":65},{"ruleId":"@typescript-eslint/no-confusing-void-expression","severity":2,"message":"Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.","line":499,"column":65,"nodeType":"CallExpression","messageId":"invalidVoidExprArrow","endLine":499,"endColumn":93}],"suppressedMessages":[],"errorCount":8,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview DataTable Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport type { ReactNode } from 'react';\r\nimport { useState, useMemo } from 'react';\r\nimport { motion, AnimatePresence } from 'motion/react';\r\nimport {\r\n  ChevronUp,\r\n  ChevronDown,\r\n  MoreHorizontal,\r\n  Filter,\r\n  Search,\r\n  RefreshCw,\r\n} from 'lucide-react';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from '../ui/table';\r\nimport { Button } from '../ui/button';\r\nimport { Checkbox } from '../ui/checkbox';\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger,\r\n} from '../ui/dropdown-menu';\r\nimport { Input } from '../ui/input';\r\nimport { Skeleton } from '../ui/skeleton';\r\nimport { useSearchContext } from './SearchProvider';\r\nimport { usePagination } from '../../hooks/usePagination';\r\nimport { useIsMobile } from '../../hooks/useTouchDevice';\r\nimport { cn } from '../ui/utils';\r\n\r\n/**\r\n * ColumnDef Interface\r\n * \r\n * @interface ColumnDef\r\n */\r\nexport interface ColumnDef<T = any> {\r\n  id: string;\r\n  header: string;\r\n  accessorKey?: string;\r\n  cell?: (value: any, row: T, index: number) => ReactNode;\r\n  sortable?: boolean;\r\n  filterable?: boolean;\r\n  width?: string;\r\n  align?: 'left' | 'center' | 'right';\r\n  className?: string;\r\n}\r\n\r\ninterface DataTableProps<T = any> {\r\n  columns: ColumnDef<T>[];\r\n  data?: T[];\r\n  loading?: boolean;\r\n  selectable?: boolean;\r\n  onRowClick?: (row: T, index: number) => void;\r\n  onRowSelect?: (selectedRows: T[]) => void;\r\n  actions?: {\r\n    label: string;\r\n    icon?: ReactNode;\r\n    onClick: (row: T, index: number) => void;\r\n    variant?: 'default' | 'destructive' | 'outline';\r\n    show?: (row: T) => boolean;\r\n  }[];\r\n  className?: string;\r\n  showPagination?: boolean;\r\n  showSearch?: boolean;\r\n  showFilters?: boolean;\r\n  rowsPerPage?: number;\r\n  emptyMessage?: string;\r\n  stickyHeader?: boolean;\r\n  compact?: boolean;\r\n}\r\n\r\n/**\r\n * DataTable function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function DataTable<T = any>({\r\n  columns,\r\n  data = [],\r\n  loading = false,\r\n  selectable = false,\r\n  onRowClick,\r\n  onRowSelect,\r\n  actions = [],\r\n  className,\r\n  showPagination = true,\r\n  showSearch = true,\r\n  showFilters = false,\r\n  rowsPerPage = 20,\r\n  emptyMessage = 'Veri bulunamad─▒',\r\n  stickyHeader = true,\r\n  compact = false,\r\n}: DataTableProps<T>) {\r\n  const isMobile = useIsMobile();\r\n  const [selectedRows, setSelectedRows] = useState<Set<number>>(new Set());\r\n  const [quickFilter, setQuickFilter] = useState('');\r\n\r\n  const { searchState, setSort, hasResults, isEmpty } = useSearchContext();\r\n\r\n  // Filter data based on quick filter\r\n  const filteredData = useMemo(() => {\r\n    if (!quickFilter.trim()) return data;\r\n\r\n    return data.filter((row) => {\r\n      return columns.some((column) => {\r\n        if (!column.filterable) return false;\r\n\r\n        const value = column.accessorKey ? (row as any)[column.accessorKey] : null;\r\n        if (value == null) return false;\r\n\r\n        return String(value).toLowerCase().includes(quickFilter.toLowerCase());\r\n      });\r\n    });\r\n  }, [data, quickFilter, columns]);\r\n\r\n  // Pagination\r\n  const pagination = usePagination({\r\n    totalItems: filteredData.length,\r\n    itemsPerPage: rowsPerPage,\r\n    onPageChange: (page) => {\r\n      setSelectedRows(new Set()); // Clear selection on page change\r\n    },\r\n  });\r\n\r\n  const paginatedData = pagination.getPageItems(filteredData);\r\n\r\n  // Handle sorting\r\n  const handleSort = (columnId: string) => {\r\n    const column = columns.find((col) => col.id === columnId);\r\n    if (!column?.sortable) return;\r\n\r\n    const newDirection =\r\n      searchState.sort.field === columnId && searchState.sort.direction === 'asc' ? 'desc' : 'asc';\r\n\r\n    setSort({ field: columnId, direction: newDirection });\r\n  };\r\n\r\n  // Handle row selection\r\n  const handleRowSelect = (index: number, checked: boolean) => {\r\n    const newSelected = new Set(selectedRows);\r\n\r\n    if (checked) {\r\n      newSelected.add(index);\r\n    } else {\r\n      newSelected.delete(index);\r\n    }\r\n\r\n    setSelectedRows(newSelected);\r\n\r\n    const selectedData = Array.from(newSelected).map((i) => paginatedData[i]);\r\n    onRowSelect?.(selectedData);\r\n  };\r\n\r\n  // Handle select all\r\n  const handleSelectAll = (checked: boolean) => {\r\n    if (checked) {\r\n      const allIndices = new Set(paginatedData.map((_, index) => index));\r\n      setSelectedRows(allIndices);\r\n      onRowSelect?.(paginatedData);\r\n    } else {\r\n      setSelectedRows(new Set());\r\n      onRowSelect?.([]);\r\n    }\r\n  };\r\n\r\n  // Check if all rows are selected\r\n  const isAllSelected = paginatedData.length > 0 && selectedRows.size === paginatedData.length;\r\n  const isIndeterminate = selectedRows.size > 0 && selectedRows.size < paginatedData.length;\r\n\r\n  // Render cell content\r\n  const renderCell = (column: ColumnDef<T>, row: T, rowIndex: number) => {\r\n    const value = column.accessorKey ? row[column.accessorKey as keyof T] : null;\r\n\r\n    if (column.cell) {\r\n      return column.cell(value, row, rowIndex);\r\n    }\r\n\r\n    if (value == null) {\r\n      return <span className=\"text-gray-400\">ÔÇö</span>;\r\n    }\r\n\r\n    return String(value);\r\n  };\r\n\r\n  // Loading skeleton\r\n  if (loading) {\r\n    return (\r\n      <div className=\"space-y-4\">\r\n        {showSearch && (\r\n          <div className=\"flex gap-2\">\r\n            <Skeleton className=\"h-10 flex-1\" />\r\n            <Skeleton className=\"h-10 w-20\" />\r\n          </div>\r\n        )}\r\n        <div className=\"border rounded-lg\">\r\n          <Table>\r\n            <TableHeader>\r\n              <TableRow>\r\n                {selectable && (\r\n                  <TableHead className=\"w-12\">\r\n                    <Skeleton className=\"h-4 w-4\" />\r\n                  </TableHead>\r\n                )}\r\n                {columns.map((column) => (\r\n                  <TableHead key={column.id}>\r\n                    <Skeleton className=\"h-4 w-full max-w-32\" />\r\n                  </TableHead>\r\n                ))}\r\n                {actions.length > 0 && (\r\n                  <TableHead className=\"w-16\">\r\n                    <Skeleton className=\"h-4 w-8\" />\r\n                  </TableHead>\r\n                )}\r\n              </TableRow>\r\n            </TableHeader>\r\n            <TableBody>\r\n              {Array.from({ length: 5 }).map((_, index) => (\r\n                <TableRow key={index}>\r\n                  {selectable && (\r\n                    <TableCell>\r\n                      <Skeleton className=\"h-4 w-4\" />\r\n                    </TableCell>\r\n                  )}\r\n                  {columns.map((column) => (\r\n                    <TableCell key={column.id}>\r\n                      <Skeleton className=\"h-4 w-full max-w-40\" />\r\n                    </TableCell>\r\n                  ))}\r\n                  {actions.length > 0 && (\r\n                    <TableCell>\r\n                      <Skeleton className=\"h-4 w-8\" />\r\n                    </TableCell>\r\n                  )}\r\n                </TableRow>\r\n              ))}\r\n            </TableBody>\r\n          </Table>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={cn('space-y-4', className)}>\r\n      {/* Search and filters */}\r\n      {(showSearch ?? showFilters) && (\r\n        <div className=\"flex flex-col sm:flex-row gap-2 sm:gap-4\">\r\n          {showSearch && (\r\n            <div className=\"relative flex-1\">\r\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\r\n              <Input\r\n                placeholder=\"Tabloda ara...\"\r\n                value={quickFilter}\r\n                onChange={(e) => {\r\n                  setQuickFilter(e.target.value);\r\n                }}\r\n                className=\"pl-9\"\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"flex gap-2\">\r\n            {showFilters && (\r\n              <Button variant=\"outline\" size=\"sm\">\r\n                <Filter className=\"w-4 h-4 mr-2\" />\r\n                Filtrele\r\n              </Button>\r\n            )}\r\n\r\n            <Button\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              onClick={() => {\r\n                pagination.resetToFirstPage();\r\n              }}\r\n            >\r\n              <RefreshCw className=\"w-4 h-4\" />\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n\r\n      {/* Selection info */}\r\n      {selectable && selectedRows.size > 0 && (\r\n        <motion.div\r\n          initial={{ opacity: 0, y: -10 }}\r\n          animate={{ opacity: 1, y: 0 }}\r\n          className=\"bg-primary/10 border border-primary/20 rounded-lg p-3 flex items-center justify-between\"\r\n        >\r\n          <span className=\"text-sm font-medium text-primary\">{selectedRows.size} ├Â─şe se├ğildi</span>\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            onClick={() => {\r\n              handleSelectAll(false);\r\n            }}\r\n            className=\"text-primary hover:text-primary/80\"\r\n          >\r\n            Se├ğimi Temizle\r\n          </Button>\r\n        </motion.div>\r\n      )}\r\n\r\n      {/* Table */}\r\n      <div className=\"border rounded-lg overflow-hidden\">\r\n        <div className=\"overflow-x-auto\">\r\n          <Table>\r\n            <TableHeader className={cn(stickyHeader && 'sticky top-0 z-10 bg-white')}>\r\n              <TableRow className=\"bg-gray-50/80\">\r\n                {selectable && (\r\n                  <TableHead className=\"w-12\">\r\n                    <Checkbox\r\n                      checked={isAllSelected}\r\n                      onCheckedChange={handleSelectAll}\r\n                      aria-label=\"T├╝m├╝n├╝ se├ğ\"\r\n                    />\r\n                  </TableHead>\r\n                )}\r\n\r\n                {columns.map((column) => (\r\n                  <TableHead\r\n                    key={column.id}\r\n                    className={cn(\r\n                      'font-semibold text-gray-700',\r\n                      column.width && `w-${column.width}`,\r\n                      column.align === 'center' && 'text-center',\r\n                      column.align === 'right' && 'text-right',\r\n                      column.sortable && 'cursor-pointer hover:bg-gray-100 transition-colors',\r\n                      column.className,\r\n                    )}\r\n                    style={{ width: column.width }}\r\n                    onClick={() => column.sortable && handleSort(column.id)}\r\n                  >\r\n                    <div className=\"flex items-center gap-1\">\r\n                      <span>{column.header}</span>\r\n                      {column.sortable && (\r\n                        <div className=\"flex flex-col\">\r\n                          <ChevronUp\r\n                            className={cn(\r\n                              'w-3 h-3 -mb-1',\r\n                              searchState.sort.field === column.id &&\r\n                                searchState.sort.direction === 'asc'\r\n                                ? 'text-primary'\r\n                                : 'text-gray-300',\r\n                            )}\r\n                          />\r\n                          <ChevronDown\r\n                            className={cn(\r\n                              'w-3 h-3',\r\n                              searchState.sort.field === column.id &&\r\n                                searchState.sort.direction === 'desc'\r\n                                ? 'text-primary'\r\n                                : 'text-gray-300',\r\n                            )}\r\n                          />\r\n                        </div>\r\n                      )}\r\n                    </div>\r\n                  </TableHead>\r\n                ))}\r\n\r\n                {actions.length > 0 && <TableHead className=\"w-16 text-center\">─░┼şlemler</TableHead>}\r\n              </TableRow>\r\n            </TableHeader>\r\n\r\n            <TableBody>\r\n              <AnimatePresence mode=\"wait\">\r\n                {paginatedData.length === 0 ? (\r\n                  <TableRow>\r\n                    <TableCell\r\n                      colSpan={columns.length + (selectable ? 1 : 0) + (actions.length > 0 ? 1 : 0)}\r\n                      className=\"text-center py-12 text-gray-500\"\r\n                    >\r\n                      <div className=\"flex flex-col items-center gap-2\">\r\n                        <Search className=\"w-8 h-8 opacity-50\" />\r\n                        <p>{emptyMessage}</p>\r\n                      </div>\r\n                    </TableCell>\r\n                  </TableRow>\r\n                ) : (\r\n                  paginatedData.map((row, index) => (\r\n                    <motion.tr\r\n                      key={index}\r\n                      initial={{ opacity: 0, y: 10 }}\r\n                      animate={{ opacity: 1, y: 0 }}\r\n                      transition={{ delay: index * 0.02 }}\r\n                      className={cn(\r\n                        'hover:bg-gray-50/80 transition-colors',\r\n                        onRowClick && 'cursor-pointer',\r\n                        selectedRows.has(index) && 'bg-primary/5 border-primary/20',\r\n                        compact ? 'h-10' : 'h-12',\r\n                      )}\r\n                      onClick={() => onRowClick?.(row, index)}\r\n                    >\r\n                      {selectable && (\r\n                        <TableCell>\r\n                          <Checkbox\r\n                            checked={selectedRows.has(index)}\r\n                            onCheckedChange={(checked) => {\r\n                              handleRowSelect(index, Boolean(checked));\r\n                            }}\r\n                            onClick={(e) => {\r\n                              e.stopPropagation();\r\n                            }}\r\n                            aria-label={`Sat─▒r ${index + 1}'i se├ğ`}\r\n                          />\r\n                        </TableCell>\r\n                      )}\r\n\r\n                      {columns.map((column) => (\r\n                        <TableCell\r\n                          key={column.id}\r\n                          className={cn(\r\n                            column.align === 'center' && 'text-center',\r\n                            column.align === 'right' && 'text-right',\r\n                            column.className,\r\n                            compact && 'py-2',\r\n                          )}\r\n                        >\r\n                          {renderCell(column, row, index)}\r\n                        </TableCell>\r\n                      ))}\r\n\r\n                      {actions.length > 0 && (\r\n                        <TableCell className=\"text-center\">\r\n                          <DropdownMenu>\r\n                            <DropdownMenuTrigger asChild>\r\n                              <Button\r\n                                variant=\"ghost\"\r\n                                size=\"sm\"\r\n                                className=\"w-8 h-8 p-0\"\r\n                                onClick={(e) => {\r\n                                  e.stopPropagation();\r\n                                }}\r\n                              >\r\n                                <MoreHorizontal className=\"w-4 h-4\" />\r\n                              </Button>\r\n                            </DropdownMenuTrigger>\r\n                            <DropdownMenuContent align=\"end\">\r\n                              {actions\r\n                                .filter((action) => !action.show ?? action.show(row))\r\n                                .map((action, actionIndex) => (\r\n                                  <DropdownMenuItem\r\n                                    key={actionIndex}\r\n                                    onClick={(e) => {\r\n                                      e.stopPropagation();\r\n                                      action.onClick(row, index);\r\n                                    }}\r\n                                    className={cn(\r\n                                      action.variant === 'destructive' &&\r\n                                        'text-red-600 focus:text-red-600',\r\n                                    )}\r\n                                  >\r\n                                    {action.icon && <span className=\"mr-2\">{action.icon}</span>}\r\n                                    {action.label}\r\n                                  </DropdownMenuItem>\r\n                                ))}\r\n                            </DropdownMenuContent>\r\n                          </DropdownMenu>\r\n                        </TableCell>\r\n                      )}\r\n                    </motion.tr>\r\n                  ))\r\n                )}\r\n              </AnimatePresence>\r\n            </TableBody>\r\n          </Table>\r\n        </div>\r\n      </div>\r\n\r\n      {/* Pagination */}\r\n      {showPagination && paginatedData.length > 0 && (\r\n        <div className=\"flex flex-col sm:flex-row items-center justify-between gap-2 text-sm\">\r\n          <div className=\"text-gray-600\">\r\n            {isMobile ? pagination.getMobilePaginationInfo() : pagination.getPaginationInfo()}\r\n          </div>\r\n\r\n          <div className=\"flex items-center gap-1\">\r\n            <Button\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              onClick={pagination.goToPreviousPage}\r\n              disabled={!pagination.hasPreviousPage}\r\n            >\r\n              ├ûnceki\r\n            </Button>\r\n\r\n            {!isMobile &&\r\n              pagination.pageNumbers.map((pageNum, index) => (\r\n                <Button\r\n                  key={index}\r\n                  variant={pageNum === pagination.currentPage ? 'default' : 'outline'}\r\n                  size=\"sm\"\r\n                  onClick={() => typeof pageNum === 'number' && pagination.goToPage(pageNum)}\r\n                  disabled={typeof pageNum === 'string'}\r\n                  className=\"w-8\"\r\n                >\r\n                  {pageNum}\r\n                </Button>\r\n              ))}\r\n\r\n            <Button\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              onClick={pagination.goToNextPage}\r\n              disabled={!pagination.hasNextPage}\r\n            >\r\n              Sonraki\r\n            </Button>\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\search\\EnhancedSearchInput.tsx","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'react' import is duplicated.","line":9,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":9,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showFilters' is assigned a value but never used.","line":44,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":14},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'showFilters' is assigned a value but never used. Allowed unused args must match /^_/u.","line":44,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":14},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":66,"column":9,"nodeType":"UnaryExpression","messageId":"constantShortCircuit","endLine":66,"endColumn":22},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":66,"column":9,"nodeType":"UnaryExpression","messageId":"neverNullish","endLine":66,"endColumn":22},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":86,"column":24,"nodeType":"BinaryExpression","messageId":"constantShortCircuit","endLine":86,"endColumn":40},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":86,"column":24,"nodeType":"BinaryExpression","messageId":"neverNullish","endLine":86,"endColumn":40},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":133,"column":31,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":133,"endColumn":57},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":133,"column":31,"nodeType":"MemberExpression","endLine":133,"endColumn":57},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":175,"column":15,"nodeType":"MemberExpression","endLine":175,"endColumn":32},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":229,"column":13,"nodeType":"MemberExpression","endLine":229,"endColumn":30},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":279,"column":30,"nodeType":"Identifier","messageId":"neverNullish","endLine":279,"endColumn":39}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview EnhancedSearchInput Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport type { KeyboardEvent } from 'react';\r\nimport { useState, useRef } from 'react';\r\nimport { motion, AnimatePresence } from 'motion/react';\r\nimport { Search, X, Filter, Clock, TrendingUp, Loader2, Command, History } from 'lucide-react';\r\nimport { Input } from '../ui/input';\r\nimport { Button } from '../ui/button';\r\nimport { Badge } from '../ui/badge';\r\n\r\n\r\nimport { useSearchContext } from './SearchProvider';\r\nimport { useIsMobile } from '../../hooks/useTouchDevice';\r\nimport useLocalStorage from '../../hooks/useLocalStorage';\r\nimport { cn } from '../ui/utils';\r\nimport { SEARCH_SUGGESTIONS } from '../../types/search';\r\n\r\ninterface EnhancedSearchInputProps {\r\n  placeholder?: string;\r\n  className?: string;\r\n  module?: keyof typeof SEARCH_SUGGESTIONS;\r\n  showFilters?: boolean;\r\n  showShortcuts?: boolean;\r\n  autoFocus?: boolean;\r\n  size?: 'sm' | 'md' | 'lg';\r\n  variant?: 'default' | 'compact' | 'full';\r\n}\r\n\r\n/**\r\n * EnhancedSearchInput function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function EnhancedSearchInput({\r\n  placeholder = 'Arama yap─▒n...',\r\n  className,\r\n  module = 'member',\r\n  showFilters = true,\r\n  showShortcuts = true,\r\n  autoFocus = false,\r\n  size = 'md',\r\n  variant = 'default',\r\n}: EnhancedSearchInputProps) {\r\n  const isMobile = useIsMobile();\r\n  const [isFocused, setIsFocused] = useState(false);\r\n  const [showSuggestions, setShowSuggestions] = useState(false);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  const { searchState, setQuery, hasActiveFilters, clearFilters, normalizeText } =\r\n    useSearchContext();\r\n\r\n  // Search history\r\n  const [searchHistory, setSearchHistory] = useLocalStorage<string[]>(\r\n    `search-history-${module}`,\r\n    [],\r\n  );\r\n\r\n  // Recent searches from localStorage\r\n  const addToHistory = (query: string) => {\r\n    if (!query.trim() ?? searchHistory.includes(query)) return;\r\n\r\n    const newHistory = [query, ...searchHistory.slice(0, 9)]; // Keep last 10\r\n    setSearchHistory(newHistory);\r\n  };\r\n\r\n  const clearHistory = () => {\r\n    setSearchHistory([]);\r\n  };\r\n\r\n  // Size variants\r\n  const sizeClasses = {\r\n    sm: 'h-8 text-sm',\r\n    md: 'h-10 text-base',\r\n    lg: 'h-12 text-lg',\r\n  };\r\n\r\n  // Handle input change\r\n  const handleInputChange = (value: string) => {\r\n    setQuery(value);\r\n    setShowSuggestions(value.length > 0 ?? searchHistory.length > 0);\r\n  };\r\n\r\n  // Handle suggestion click\r\n  const handleSuggestionClick = (suggestion: string) => {\r\n    setQuery(suggestion);\r\n    addToHistory(suggestion);\r\n    setShowSuggestions(false);\r\n    inputRef.current?.blur();\r\n  };\r\n\r\n  // Handle clear\r\n  const handleClear = () => {\r\n    setQuery('');\r\n    setShowSuggestions(false);\r\n    inputRef.current?.focus();\r\n  };\r\n\r\n  // Handle keyboard shortcuts\r\n  const handleKeyDown = (e: KeyboardEvent<HTMLInputElement>) => {\r\n    if (e.key === 'Escape') {\r\n      setShowSuggestions(false);\r\n      inputRef.current?.blur();\r\n    } else if (e.key === 'Enter') {\r\n      if (searchState.query.trim()) {\r\n        addToHistory(searchState.query);\r\n      }\r\n      setShowSuggestions(false);\r\n    }\r\n  };\r\n\r\n  // Focus management\r\n  const handleFocus = () => {\r\n    setIsFocused(true);\r\n    setShowSuggestions(true);\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    setIsFocused(false);\r\n    // Delay hiding suggestions to allow click events\r\n    setTimeout(() => {\r\n      setShowSuggestions(false);\r\n    }, 200);\r\n  };\r\n\r\n  // Get suggestions based on module and search query\r\n  const getSuggestions = () => {\r\n    const moduleSuggestions = SEARCH_SUGGESTIONS[module] || [];\r\n    const query = searchState.query.toLowerCase();\r\n\r\n    if (!query) {\r\n      return {\r\n        recent: searchHistory.slice(0, 5),\r\n        suggestions: moduleSuggestions.slice(0, 5),\r\n      };\r\n    }\r\n\r\n    const filtered = moduleSuggestions.filter((suggestion) =>\r\n      normalizeText(suggestion).includes(normalizeText(query)),\r\n    );\r\n\r\n    return {\r\n      recent: searchHistory\r\n        .filter((item) => normalizeText(item).includes(normalizeText(query)))\r\n        .slice(0, 3),\r\n      suggestions: filtered.slice(0, 5),\r\n    };\r\n  };\r\n\r\n  const { recent, suggestions } = getSuggestions();\r\n\r\n  // Compact variant for mobile\r\n  if (variant === 'compact') {\r\n    return (\r\n      <div className={cn('relative', className)}>\r\n        <div className=\"relative\">\r\n          <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 w-4 h-4 text-gray-400\" />\r\n          <Input\r\n            ref={inputRef}\r\n            value={searchState.query}\r\n            onChange={(e) => {\r\n              handleInputChange(e.target.value);\r\n            }}\r\n            onFocus={handleFocus}\r\n            onBlur={handleBlur}\r\n            onKeyDown={handleKeyDown}\r\n            placeholder={placeholder}\r\n            className={cn(\r\n              'pl-9 pr-20',\r\n              sizeClasses[size],\r\n              isFocused && 'ring-2 ring-primary/20',\r\n              className,\r\n            )}\r\n            autoFocus={autoFocus}\r\n          />\r\n\r\n          <div className=\"absolute right-2 top-1/2 transform -translate-y-1/2 flex items-center gap-1\">\r\n            {searchState.query && (\r\n              <Button\r\n                variant=\"ghost\"\r\n                size=\"sm\"\r\n                onClick={handleClear}\r\n                className=\"w-6 h-6 p-0 hover:bg-gray-100\"\r\n              >\r\n                <X className=\"w-3 h-3\" />\r\n              </Button>\r\n            )}\r\n\r\n            {hasActiveFilters && (\r\n              <Badge variant=\"secondary\" className=\"text-xs\">\r\n                {searchState.filters.length}\r\n              </Badge>\r\n            )}\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={cn('relative', className)}>\r\n      <div className=\"relative\">\r\n        {/* Search Icon */}\r\n        <Search\r\n          className={cn(\r\n            'absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400',\r\n            size === 'sm' ? 'w-4 h-4' : size === 'lg' ? 'w-6 h-6' : 'w-5 h-5',\r\n          )}\r\n        />\r\n\r\n        {/* Input */}\r\n        <Input\r\n          ref={inputRef}\r\n          value={searchState.query}\r\n          onChange={(e) => {\r\n            handleInputChange(e.target.value);\r\n          }}\r\n          onFocus={handleFocus}\r\n          onBlur={handleBlur}\r\n          onKeyDown={handleKeyDown}\r\n          placeholder={isMobile ? placeholder : `${placeholder} ${showShortcuts ? 'ÔîİK' : ''}`}\r\n          className={cn(\r\n            'pl-10 pr-24 transition-all duration-200',\r\n            sizeClasses[size],\r\n            isFocused && 'ring-2 ring-primary/20 border-primary/40',\r\n            searchState.isLoading && 'pr-28',\r\n            className,\r\n          )}\r\n          autoFocus={autoFocus}\r\n        />\r\n\r\n        {/* Right side elements */}\r\n        <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2 flex items-center gap-2\">\r\n          {/* Loading indicator */}\r\n          {searchState.isLoading && <Loader2 className=\"w-4 h-4 animate-spin text-primary\" />}\r\n\r\n          {/* Clear button */}\r\n          {searchState.query && !searchState.isLoading && (\r\n            <motion.button\r\n              initial={{ scale: 0 }}\r\n              animate={{ scale: 1 }}\r\n              exit={{ scale: 0 }}\r\n              onClick={handleClear}\r\n              className=\"w-5 h-5 rounded-full bg-gray-200 hover:bg-gray-300 flex items-center justify-center transition-colors\"\r\n            >\r\n              <X className=\"w-3 h-3 text-gray-600\" />\r\n            </motion.button>\r\n          )}\r\n\r\n          {/* Filters indicator */}\r\n          {hasActiveFilters && (\r\n            <Badge\r\n              variant=\"secondary\"\r\n              className=\"text-xs bg-primary/10 text-primary hover:bg-primary/20 cursor-pointer\"\r\n              onClick={clearFilters}\r\n            >\r\n              <Filter className=\"w-3 h-3 mr-1\" />\r\n              {searchState.filters.length}\r\n            </Badge>\r\n          )}\r\n\r\n          {/* Keyboard shortcut indicator */}\r\n          {showShortcuts && !isMobile && !isFocused && (\r\n            <div className=\"hidden sm:flex items-center gap-1 text-xs text-gray-400\">\r\n              <Command className=\"w-3 h-3\" />\r\n              <span>K</span>\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n\r\n      {/* Search suggestions dropdown */}\r\n      <AnimatePresence>\r\n        {showSuggestions && (isFocused ?? searchState.query) && (\r\n          <motion.div\r\n            initial={{ opacity: 0, y: -10 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: -10 }}\r\n            transition={{ duration: 0.2 }}\r\n            className=\"absolute top-full left-0 right-0 mt-2 bg-white rounded-lg border border-gray-200 shadow-lg z-50 max-h-80 overflow-hidden\"\r\n          >\r\n            <div className=\"p-2\">\r\n              {/* Recent searches */}\r\n              {recent.length > 0 && (\r\n                <div className=\"mb-3\">\r\n                  <div className=\"flex items-center justify-between px-2 py-1\">\r\n                    <div className=\"flex items-center gap-2 text-xs font-medium text-gray-500\">\r\n                      <History className=\"w-3 h-3\" />\r\n                      <span>Son Aramalar</span>\r\n                    </div>\r\n                    <Button\r\n                      variant=\"ghost\"\r\n                      size=\"sm\"\r\n                      onClick={clearHistory}\r\n                      className=\"text-xs h-6 px-2 text-gray-400 hover:text-gray-600\"\r\n                    >\r\n                      Temizle\r\n                    </Button>\r\n                  </div>\r\n                  <div className=\"space-y-1\">\r\n                    {recent.map((item, index) => (\r\n                      <motion.button\r\n                        key={`recent-${index}`}\r\n                        initial={{ opacity: 0, x: -10 }}\r\n                        animate={{ opacity: 1, x: 0 }}\r\n                        transition={{ delay: index * 0.05 }}\r\n                        onClick={() => {\r\n                          handleSuggestionClick(item);\r\n                        }}\r\n                        className=\"w-full text-left px-3 py-2 rounded-md hover:bg-gray-50 text-sm text-gray-700 flex items-center gap-2 transition-colors\"\r\n                      >\r\n                        <Clock className=\"w-4 h-4 text-gray-400\" />\r\n                        <span className=\"truncate\">{item}</span>\r\n                      </motion.button>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {/* Module suggestions */}\r\n              {suggestions.length > 0 && (\r\n                <div>\r\n                  <div className=\"flex items-center gap-2 px-2 py-1 text-xs font-medium text-gray-500 mb-1\">\r\n                    <TrendingUp className=\"w-3 h-3\" />\r\n                    <span>├ûnerilen Aramalar</span>\r\n                  </div>\r\n                  <div className=\"space-y-1\">\r\n                    {suggestions.map((suggestion, index) => (\r\n                      <motion.button\r\n                        key={`suggestion-${index}`}\r\n                        initial={{ opacity: 0, x: -10 }}\r\n                        animate={{ opacity: 1, x: 0 }}\r\n                        transition={{ delay: (recent.length + index) * 0.05 }}\r\n                        onClick={() => {\r\n                          handleSuggestionClick(suggestion);\r\n                        }}\r\n                        className=\"w-full text-left px-3 py-2 rounded-md hover:bg-gray-50 text-sm text-gray-700 flex items-center gap-2 transition-colors\"\r\n                      >\r\n                        <Search className=\"w-4 h-4 text-gray-400\" />\r\n                        <span className=\"truncate\">{suggestion}</span>\r\n                      </motion.button>\r\n                    ))}\r\n                  </div>\r\n                </div>\r\n              )}\r\n\r\n              {/* No suggestions */}\r\n              {recent.length === 0 && suggestions.length === 0 && searchState.query && (\r\n                <div className=\"text-center py-6 text-gray-500 text-sm\">\r\n                  <Search className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\r\n                  <p>├ûneri bulunamad─▒</p>\r\n                </div>\r\n              )}\r\n            </div>\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\search\\FilterPanel.tsx","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'../../types/search' import is duplicated.","line":35,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":35,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'collapsedSections' is assigned a value but never used.","line":62,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":27},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'collapsedSections' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":62,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":62,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":70,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":70,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2012,2015],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2012,2015],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":78,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":78,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2219,2222],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2219,2222],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":81,"column":9,"nodeType":"LogicalExpression","messageId":"constantShortCircuit","endLine":81,"endColumn":46},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":81,"column":9,"nodeType":"LogicalExpression","messageId":"neverNullish","endLine":81,"endColumn":46},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":81,"column":9,"nodeType":"BinaryExpression","messageId":"constantShortCircuit","endLine":81,"endColumn":28},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":81,"column":9,"nodeType":"BinaryExpression","messageId":"neverNullish","endLine":81,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'toggleSection' is assigned a value but never used.","line":89,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":89,"endColumn":22},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'toggleSection' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":89,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":89,"endColumn":22},{"ruleId":"@typescript-eslint/switch-exhaustiveness-check","severity":2,"message":"Switch is not exhaustive. Cases not matched: \"range\"","line":105,"column":13,"nodeType":"MemberExpression","messageId":"switchIsNotExhaustive","endLine":105,"endColumn":24,"suggestions":[{"messageId":"addMissingCases","fix":{"range":[10003,10003],"text":"case \"range\": { throw new Error('Not implemented yet: \"range\" case') }\n      "},"desc":"Add branches for missing cases."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview FilterPanel Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { useState } from 'react';\r\nimport { motion } from 'motion/react';\r\nimport {\r\n  Filter,\r\n  X,\r\n  ChevronDown,\r\n  RefreshCw,\r\n} from 'lucide-react';\r\nimport { Button } from '../ui/button';\r\nimport { Badge } from '../ui/badge';\r\nimport { Input } from '../ui/input';\r\nimport { Label } from '../ui/label';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '../ui/select';\r\nimport { Switch } from '../ui/switch';\r\nimport {\r\n  Sheet,\r\n  SheetContent,\r\n  SheetDescription,\r\n  SheetHeader,\r\n  SheetTitle,\r\n  SheetTrigger,\r\n} from '../ui/sheet';\r\nimport { Collapsible, CollapsibleContent, CollapsibleTrigger } from '../ui/collapsible';\r\nimport { useSearchContext } from './SearchProvider';\r\nimport { useIsMobile } from '../../hooks/useTouchDevice';\r\nimport { cn } from '../ui/utils';\r\nimport type { FilterConfig, FilterValue } from '../../types/search';\r\nimport { DATE_RANGE_PRESETS } from '../../types/search';\r\n\r\ninterface FilterPanelProps {\r\n  filters: FilterConfig[];\r\n  className?: string;\r\n  variant?: 'inline' | 'sidebar' | 'modal';\r\n  showActiveCount?: boolean;\r\n  collapsible?: boolean;\r\n  title?: string;\r\n}\r\n\r\n/**\r\n * FilterPanel function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function FilterPanel({\r\n  filters,\r\n  className,\r\n  variant = 'inline',\r\n  showActiveCount = true,\r\n  collapsible = false,\r\n  title = 'Filtreler',\r\n}: FilterPanelProps) {\r\n  const isMobile = useIsMobile();\r\n  const [isOpen, setIsOpen] = useState(!collapsible);\r\n  const [collapsedSections, setCollapsedSections] = useState<Set<string>>(new Set());\r\n\r\n  const { searchState, addFilter, removeFilter, clearFilters, hasActiveFilters } =\r\n    useSearchContext();\r\n\r\n  const activeFilterCount = searchState.filters.length;\r\n\r\n  // Get current filter value for a field\r\n  const getFilterValue = (field: string): any => {\r\n    const filter = searchState.filters.find((f) => f.field === field);\r\n    return filter?.value;\r\n  };\r\n\r\n  // Handle filter change\r\n  const handleFilterChange = (\r\n    field: string,\r\n    value: any,\r\n    operator: FilterValue['operator'] = 'eq',\r\n  ) => {\r\n    if (value === undefined ?? value === null ?? value === '') {\r\n      removeFilter(field);\r\n    } else {\r\n      addFilter({ field, value, operator });\r\n    }\r\n  };\r\n\r\n  // Toggle section collapse\r\n  const toggleSection = (sectionId: string) => {\r\n    setCollapsedSections((prev) => {\r\n      const newSet = new Set(prev);\r\n      if (newSet.has(sectionId)) {\r\n        newSet.delete(sectionId);\r\n      } else {\r\n        newSet.add(sectionId);\r\n      }\r\n      return newSet;\r\n    });\r\n  };\r\n\r\n  // Render filter control based on type\r\n  const renderFilterControl = (filter: FilterConfig) => {\r\n    const currentValue = getFilterValue(filter.field);\r\n\r\n    switch (filter.type) {\r\n      case 'text':\r\n        return (\r\n          <div className=\"space-y-2\">\r\n            <Label htmlFor={filter.field} className=\"text-sm font-medium\">\r\n              {filter.label}\r\n            </Label>\r\n            <Input\r\n              id={filter.field}\r\n              value={currentValue ?? ''}\r\n              onChange={(e) => {\r\n                handleFilterChange(filter.field, e.target.value, 'contains');\r\n              }}\r\n              placeholder={filter.placeholder}\r\n              className=\"h-9\"\r\n            />\r\n          </div>\r\n        );\r\n\r\n      case 'select':\r\n        return (\r\n          <div className=\"space-y-2\">\r\n            <Label className=\"text-sm font-medium\">{filter.label}</Label>\r\n            <Select\r\n              value={currentValue ?? ''}\r\n              onValueChange={(value) => {\r\n                handleFilterChange(filter.field, value);\r\n              }}\r\n            >\r\n              <SelectTrigger className=\"h-9\">\r\n                <SelectValue placeholder={filter.placeholder ?? 'Se├ğin'} />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"\">T├╝m├╝</SelectItem>\r\n                {filter.options?.map((option) => (\r\n                  <SelectItem key={String(option.value)} value={String(option.value)}>\r\n                    <div className=\"flex items-center gap-2\">\r\n                      {option.color && (\r\n                        <div className={`w-2 h-2 rounded-full bg-${option.color}-500`} />\r\n                      )}\r\n                      <span>{option.label}</span>\r\n                      {option.count !== undefined && (\r\n                        <Badge variant=\"secondary\" className=\"text-xs ml-auto\">\r\n                          {option.count}\r\n                        </Badge>\r\n                      )}\r\n                    </div>\r\n                  </SelectItem>\r\n                ))}\r\n              </SelectContent>\r\n            </Select>\r\n          </div>\r\n        );\r\n\r\n      case 'number':\r\n        return (\r\n          <div className=\"space-y-2\">\r\n            <Label className=\"text-sm font-medium\">{filter.label}</Label>\r\n            <div className=\"grid grid-cols-2 gap-2\">\r\n              <Input\r\n                type=\"number\"\r\n                placeholder=\"Min\"\r\n                min={filter.min}\r\n                max={filter.max}\r\n                className=\"h-9\"\r\n                onChange={(e) => {\r\n                  const {value} = e.target;\r\n                  const maxValue = getFilterValue(filter.field)?.[1];\r\n                  handleFilterChange(\r\n                    filter.field,\r\n                    [value ? Number(value) : undefined, maxValue],\r\n                    'between',\r\n                  );\r\n                }}\r\n              />\r\n              <Input\r\n                type=\"number\"\r\n                placeholder=\"Max\"\r\n                min={filter.min}\r\n                max={filter.max}\r\n                className=\"h-9\"\r\n                onChange={(e) => {\r\n                  const {value} = e.target;\r\n                  const minValue = getFilterValue(filter.field)?.[0];\r\n                  handleFilterChange(\r\n                    filter.field,\r\n                    [minValue, value ? Number(value) : undefined],\r\n                    'between',\r\n                  );\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'date':\r\n        return (\r\n          <div className=\"space-y-2\">\r\n            <Label className=\"text-sm font-medium\">{filter.label}</Label>\r\n            <div className=\"space-y-2\">\r\n              <Select\r\n                onValueChange={(preset) => {\r\n                  if (preset === 'custom') return;\r\n                  // Handle date preset logic here\r\n                  const today = new Date();\r\n                  let startDate: Date;\r\n                  let endDate = today;\r\n\r\n                  switch (preset) {\r\n                    case 'today':\r\n                      startDate = today;\r\n                      break;\r\n                    case 'yesterday':\r\n                      startDate = new Date(today.getTime() - 24 * 60 * 60 * 1000);\r\n                      endDate = startDate;\r\n                      break;\r\n                    case 'this_week':\r\n                      startDate = new Date(today.getTime() - today.getDay() * 24 * 60 * 60 * 1000);\r\n                      break;\r\n                    case 'last_week':\r\n                      const lastWeekStart = new Date(\r\n                        today.getTime() - (today.getDay() + 7) * 24 * 60 * 60 * 1000,\r\n                      );\r\n                      startDate = lastWeekStart;\r\n                      endDate = new Date(lastWeekStart.getTime() + 6 * 24 * 60 * 60 * 1000);\r\n                      break;\r\n                    case 'this_month':\r\n                      startDate = new Date(today.getFullYear(), today.getMonth(), 1);\r\n                      break;\r\n                    case 'last_month':\r\n                      startDate = new Date(today.getFullYear(), today.getMonth() - 1, 1);\r\n                      endDate = new Date(today.getFullYear(), today.getMonth(), 0);\r\n                      break;\r\n                    case 'this_year':\r\n                      startDate = new Date(today.getFullYear(), 0, 1);\r\n                      break;\r\n                    case 'last_7_days':\r\n                      startDate = new Date(today.getTime() - 7 * 24 * 60 * 60 * 1000);\r\n                      break;\r\n                    case 'last_30_days':\r\n                      startDate = new Date(today.getTime() - 30 * 24 * 60 * 60 * 1000);\r\n                      break;\r\n                    case 'last_90_days':\r\n                      startDate = new Date(today.getTime() - 90 * 24 * 60 * 60 * 1000);\r\n                      break;\r\n                    default:\r\n                      return;\r\n                  }\r\n\r\n                  handleFilterChange(filter.field, [startDate, endDate], 'between');\r\n                }}\r\n              >\r\n                <SelectTrigger className=\"h-9\">\r\n                  <SelectValue placeholder=\"Tarih aral─▒─ş─▒ se├ğin\" />\r\n                </SelectTrigger>\r\n                <SelectContent>\r\n                  {DATE_RANGE_PRESETS.map((preset) => (\r\n                    <SelectItem key={preset.value} value={preset.value}>\r\n                      {preset.label}\r\n                    </SelectItem>\r\n                  ))}\r\n                </SelectContent>\r\n              </Select>\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      case 'boolean':\r\n        return (\r\n          <div className=\"space-y-2\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <Label className=\"text-sm font-medium\">{filter.label}</Label>\r\n              <Switch\r\n                checked={currentValue === true}\r\n                onCheckedChange={(checked) => {\r\n                  handleFilterChange(filter.field, checked ? true : undefined);\r\n                }}\r\n              />\r\n            </div>\r\n          </div>\r\n        );\r\n\r\n      default:\r\n        return null;\r\n    }\r\n  };\r\n\r\n  // Render active filters\r\n  const renderActiveFilters = () => {\r\n    if (!hasActiveFilters) return null;\r\n\r\n    return (\r\n      <div className=\"space-y-2\">\r\n        <div className=\"flex items-center justify-between\">\r\n          <Label className=\"text-sm font-medium text-gray-700\">Aktif Filtreler</Label>\r\n          <Button\r\n            variant=\"ghost\"\r\n            size=\"sm\"\r\n            onClick={clearFilters}\r\n            className=\"h-6 px-2 text-xs text-red-600 hover:text-red-700 hover:bg-red-50\"\r\n          >\r\n            <RefreshCw className=\"w-3 h-3 mr-1\" />\r\n            Temizle\r\n          </Button>\r\n        </div>\r\n        <div className=\"flex flex-wrap gap-1\">\r\n          {searchState.filters.map((filter, index) => {\r\n            const config = filters.find((f) => f.field === filter.field);\r\n            const label = config?.label ?? filter.field;\r\n\r\n            return (\r\n              <Badge\r\n                key={`${filter.field}-${index}`}\r\n                variant=\"secondary\"\r\n                className=\"text-xs bg-primary/10 text-primary hover:bg-primary/20\"\r\n              >\r\n                <span className=\"truncate max-w-24\">\r\n                  {label}: {String(filter.value)}\r\n                </span>\r\n                <button\r\n                  onClick={() => {\r\n                    removeFilter(filter.field);\r\n                  }}\r\n                  className=\"ml-1 hover:bg-primary/20 rounded-full p-0.5\"\r\n                >\r\n                  <X className=\"w-2 h-2\" />\r\n                </button>\r\n              </Badge>\r\n            );\r\n          })}\r\n        </div>\r\n      </div>\r\n    );\r\n  };\r\n\r\n  // Filter content\r\n  const filterContent = (\r\n    <div className=\"space-y-4\">\r\n      {renderActiveFilters()}\r\n\r\n      <div className=\"space-y-4\">\r\n        {filters.map((filter) => (\r\n          <motion.div\r\n            key={filter.field}\r\n            initial={{ opacity: 0, y: 10 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            className=\"border-b border-gray-100 pb-4 last:border-b-0 last:pb-0\"\r\n          >\r\n            {renderFilterControl(filter)}\r\n          </motion.div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n\r\n  // Mobile modal variant\r\n  if (variant === 'modal' || isMobile) {\r\n    return (\r\n      <Sheet>\r\n        <SheetTrigger asChild>\r\n          <Button variant=\"outline\" size=\"sm\" className=\"gap-2\">\r\n            <Filter className=\"w-4 h-4\" />\r\n            <span className=\"hidden sm:inline\">Filtreler</span>\r\n            {showActiveCount && activeFilterCount > 0 && (\r\n              <Badge variant=\"secondary\" className=\"text-xs\">\r\n                {activeFilterCount}\r\n              </Badge>\r\n            )}\r\n          </Button>\r\n        </SheetTrigger>\r\n        <SheetContent side=\"right\" className=\"w-80 sm:w-96\">\r\n          <SheetHeader>\r\n            <SheetTitle className=\"flex items-center gap-2\">\r\n              <Filter className=\"w-5 h-5\" />\r\n              {title}\r\n            </SheetTitle>\r\n            <SheetDescription>\r\n              Arama sonu├ğlar─▒n─▒ filtrelemek i├ğin a┼şa─ş─▒daki se├ğenekleri kullan─▒n.\r\n            </SheetDescription>\r\n          </SheetHeader>\r\n          <div className=\"mt-6\">{filterContent}</div>\r\n        </SheetContent>\r\n      </Sheet>\r\n    );\r\n  }\r\n\r\n  // Inline variant\r\n  return (\r\n    <div className={cn('bg-white rounded-lg border border-gray-200', className)}>\r\n      {collapsible ? (\r\n        <Collapsible open={isOpen} onOpenChange={setIsOpen}>\r\n          <CollapsibleTrigger asChild>\r\n            <Button variant=\"ghost\" className=\"w-full justify-between p-4 h-auto\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <Filter className=\"w-4 h-4\" />\r\n                <span className=\"font-medium\">{title}</span>\r\n                {showActiveCount && activeFilterCount > 0 && (\r\n                  <Badge variant=\"secondary\" className=\"text-xs\">\r\n                    {activeFilterCount}\r\n                  </Badge>\r\n                )}\r\n              </div>\r\n              <ChevronDown className={cn('w-4 h-4 transition-transform', isOpen && 'rotate-180')} />\r\n            </Button>\r\n          </CollapsibleTrigger>\r\n          <CollapsibleContent className=\"px-4 pb-4\">{filterContent}</CollapsibleContent>\r\n        </Collapsible>\r\n      ) : (\r\n        <div className=\"p-4\">\r\n          <div className=\"flex items-center gap-2 mb-4\">\r\n            <Filter className=\"w-4 h-4\" />\r\n            <span className=\"font-medium\">{title}</span>\r\n            {showActiveCount && activeFilterCount > 0 && (\r\n              <Badge variant=\"secondary\" className=\"text-xs\">\r\n                {activeFilterCount}\r\n              </Badge>\r\n            )}\r\n          </div>\r\n          {filterContent}\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\search\\SearchProvider.tsx","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'react' import is duplicated.","line":9,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":9,"endColumn":51},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1165,1168],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1165,1168],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":80,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":80,"endColumn":33},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":95,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":95,"endColumn":31},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'moduleName' is defined but never used.","line":96,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":96,"endColumn":13},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'moduleName' is defined but never used. Allowed unused args must match /^_/u.","line":96,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":96,"endColumn":13},{"ruleId":"@typescript-eslint/consistent-type-imports","severity":2,"message":"`import()` type annotations are forbidden.","line":96,"column":21,"nodeType":"TSImportType","messageId":"noImportTypeAnnotations","endLine":96,"endColumn":68}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview SearchProvider Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport type { ReactNode } from 'react';\r\nimport { createContext, useContext } from 'react';\r\nimport { useSearch } from '../../hooks/useSearch';\r\nimport type { SearchConfig, FilterValue, SortConfig, SearchResult } from '../../types/search';\r\n\r\ninterface SearchContextType {\r\n  searchState: ReturnType<typeof useSearch>['searchState'];\r\n  setQuery: (query: string) => void;\r\n  setFilters: (filters: FilterValue[]) => void;\r\n  addFilter: (filter: FilterValue) => void;\r\n  removeFilter: (field: string) => void;\r\n  clearFilters: () => void;\r\n  setSort: (sort: SortConfig) => void;\r\n  executeSearch: () => Promise<SearchResult>;\r\n  loadMore: () => void;\r\n  reset: () => void;\r\n  hasActiveFilters: boolean;\r\n  hasResults: boolean;\r\n  isEmpty: boolean;\r\n  normalizeText: (text: string) => string;\r\n  fuzzyMatch: (query: string, target: string) => boolean;\r\n}\r\n\r\nconst SearchContext = createContext<SearchContextType | undefined>(undefined);\r\n\r\ninterface SearchProviderProps {\r\n  children: ReactNode;\r\n  config: SearchConfig;\r\n  data?: any[];\r\n  onSearch?: (\r\n    query: string,\r\n    filters: FilterValue[],\r\n    sort: SortConfig,\r\n  ) => Promise<SearchResult> | SearchResult;\r\n  initialQuery?: string;\r\n  initialFilters?: FilterValue[];\r\n  initialSort?: SortConfig;\r\n}\r\n\r\n/**\r\n * SearchProvider function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function SearchProvider({\r\n  children,\r\n  config,\r\n  data,\r\n  onSearch,\r\n  initialQuery,\r\n  initialFilters,\r\n  initialSort,\r\n}: SearchProviderProps) {\r\n  const searchMethods = useSearch({\r\n    config,\r\n    data,\r\n    onSearch,\r\n    initialQuery,\r\n    initialFilters,\r\n    initialSort,\r\n  });\r\n\r\n  return <SearchContext.Provider value={searchMethods}>{children}</SearchContext.Provider>;\r\n}\r\n\r\n/**\r\n * useSearchContext function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useSearchContext(): SearchContextType {\r\n  const context = useContext(SearchContext);\r\n  if (context === undefined) {\r\n    throw new Error('useSearchContext must be used within a SearchProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\n// Helper hook for quick search setup\r\n/**\r\n * useQuickSearch function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useQuickSearch(\r\n  moduleName: keyof import('../../types/search').SEARCH_SUGGESTIONS,\r\n) {\r\n  const { setQuery } = useSearchContext();\r\n\r\n  const quickSearch = (suggestion: string) => {\r\n    setQuery(suggestion);\r\n  };\r\n\r\n  return { quickSearch };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\search\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\sync\\BackgroundSyncManager.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":70,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":19},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":70,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":70,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":95,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":95,"endColumn":19},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":95,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":95,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":152,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":152,"endColumn":19},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":152,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":152,"endColumn":19},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":248,"column":25,"nodeType":"UnaryExpression","messageId":"constantShortCircuit","endLine":248,"endColumn":34},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":248,"column":25,"nodeType":"UnaryExpression","messageId":"neverNullish","endLine":248,"endColumn":34},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":316,"column":31,"nodeType":"UnaryExpression","messageId":"constantShortCircuit","endLine":316,"endColumn":40},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":316,"column":31,"nodeType":"UnaryExpression","messageId":"neverNullish","endLine":316,"endColumn":40},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":372,"column":31,"nodeType":"UnaryExpression","messageId":"constantShortCircuit","endLine":372,"endColumn":40},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":372,"column":31,"nodeType":"UnaryExpression","messageId":"neverNullish","endLine":372,"endColumn":40}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Background Sync Manager Component\r\n * Manages offline data synchronization and displays sync status\r\n */\r\n\r\nimport { formatDistanceToNow } from 'date-fns';\r\nimport { tr } from 'date-fns/locale';\r\nimport {\r\n  AlertCircle,\r\n  CheckCircle,\r\n  Clock,\r\n  Database,\r\n  RefreshCw,\r\n  RefreshCw as Sync,\r\n  Trash2,\r\n  Upload,\r\n  Wifi,\r\n  WifiOff,\r\n  XCircle,\r\n} from 'lucide-react';\r\nimport React, { useState } from 'react';\r\nimport { useToast } from '../../hooks/use-toast';\r\nimport { useBackgroundSync } from '../../hooks/useBackgroundSync';\r\nimport { Alert, AlertDescription } from '../ui/alert';\r\nimport { Button } from '../ui/button';\r\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from '../ui/card';\r\nimport { Progress } from '../ui/progress';\r\nimport { ScrollArea } from '../ui/scroll-area';\r\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from '../ui/tabs';\r\n\r\ninterface BackgroundSyncManagerProps {\r\n  className?: string;\r\n}\r\n\r\nconst BackgroundSyncManager: React.FC<BackgroundSyncManagerProps> = ({ className = '' }) => {\r\n  const {\r\n    isOnline,\r\n    isSyncAvailable,\r\n    isSyncInProgress,\r\n    syncStats,\r\n    pendingTasks,\r\n    failedTasks,\r\n    syncNow,\r\n    retryFailedTasks,\r\n    clearCompletedTasks,\r\n    clearAllTasks,\r\n    removeSyncTask,\r\n    addSyncTask,\r\n  } = useBackgroundSync();\r\n\r\n  const { toast } = useToast();\r\n  const [isTestingSyncTasks, setIsTestingSyncTasks] = useState(false);\r\n\r\n  const handleSyncNow = async () => {\r\n    try {\r\n      const result = await syncNow();\r\n\r\n      if (result.success) {\r\n        toast({\r\n          title: 'Senkronizasyon Tamamland─▒',\r\n          description: `${result.syncedTasks.length} g├Ârev ba┼şar─▒yla senkronize edildi.`,\r\n        });\r\n      } else {\r\n        toast({\r\n          title: 'Senkronizasyon Sorunlar─▒',\r\n          description: `${result.failedTasks.length} g├Ârev ba┼şar─▒s─▒z oldu.`,\r\n          variant: 'destructive',\r\n        });\r\n      }\r\n    } catch (error) {\r\n      toast({\r\n        title: 'Senkronizasyon Hatas─▒',\r\n        description: 'Senkronizasyon i┼şlemi ba┼şlat─▒lamad─▒.',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleRetryFailed = async () => {\r\n    try {\r\n      const result = await retryFailedTasks();\r\n\r\n      if (result.success) {\r\n        toast({\r\n          title: 'Ba┼şar─▒s─▒z G├Ârevler Yeniden Denendi',\r\n          description: `${result.syncedTasks.length} g├Ârev ba┼şar─▒yla senkronize edildi.`,\r\n        });\r\n      } else {\r\n        toast({\r\n          title: 'Yeniden Deneme Sorunlar─▒',\r\n          description: `${result.failedTasks.length} g├Ârev hala ba┼şar─▒s─▒z.`,\r\n          variant: 'destructive',\r\n        });\r\n      }\r\n    } catch (error) {\r\n      toast({\r\n        title: 'Yeniden Deneme Hatas─▒',\r\n        description: 'Ba┼şar─▒s─▒z g├Ârevler yeniden denenemedi.',\r\n        variant: 'destructive',\r\n      });\r\n    }\r\n  };\r\n\r\n  const handleClearCompleted = () => {\r\n    clearCompletedTasks();\r\n    toast({\r\n      title: 'Tamamlanan G├Ârevler Temizlendi',\r\n      description: 'Ba┼şar─▒yla senkronize edilen g├Ârevler kald─▒r─▒ld─▒.',\r\n    });\r\n  };\r\n\r\n  const handleClearAll = () => {\r\n    clearAllTasks();\r\n    toast({\r\n      title: 'T├╝m G├Ârevler Temizlendi',\r\n      description: 'Senkronizasyon kuyru─şu tamamen temizlendi.',\r\n    });\r\n  };\r\n\r\n  const handleCreateTestTasks = async () => {\r\n    setIsTestingSyncTasks(true);\r\n\r\n    try {\r\n      // Create some test sync tasks\r\n      const testTasks = [\r\n        {\r\n          entity: 'beneficiaries',\r\n          type: 'CREATE' as const,\r\n          data: { name: 'Test Beneficiary', age: 25 },\r\n        },\r\n        { entity: 'donations', type: 'UPDATE' as const, data: { id: '123', amount: 1000 } },\r\n        {\r\n          entity: 'members',\r\n          type: 'CREATE' as const,\r\n          data: { name: 'Test Member', email: 'test@example.com' },\r\n        },\r\n        {\r\n          entity: 'activities',\r\n          type: 'CREATE' as const,\r\n          data: { type: 'login', timestamp: Date.now() },\r\n        },\r\n      ];\r\n\r\n      for (const task of testTasks) {\r\n        await addSyncTask(task.entity, task.type, task.data);\r\n      }\r\n\r\n      toast({\r\n        title: 'Test G├Ârevleri Olu┼şturuldu',\r\n        description: `${testTasks.length} test g├Ârevi senkronizasyon kuyru─şuna eklendi.`,\r\n      });\r\n    } catch (error) {\r\n      toast({\r\n        title: 'Test G├Ârevleri Olu┼şturulamad─▒',\r\n        description: 'Test g├Ârevleri olu┼şturulurken hata olu┼ştu.',\r\n        variant: 'destructive',\r\n      });\r\n    } finally {\r\n      setIsTestingSyncTasks(false);\r\n    }\r\n  };\r\n\r\n  const getStatusIcon = (status: string) => {\r\n    switch (status) {\r\n      case 'completed':\r\n        return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\r\n      case 'failed':\r\n        return <XCircle className=\"w-4 h-4 text-red-500\" />;\r\n      case 'syncing':\r\n        return <RefreshCw className=\"w-4 h-4 text-blue-500 animate-spin\" />;\r\n      default:\r\n        return <Clock className=\"w-4 h-4 text-yellow-500\" />;\r\n    }\r\n  };\r\n\r\n  const getEntityIcon = (entity: string) => {\r\n    switch (entity) {\r\n      case 'beneficiaries':\r\n        return '­şæÑ';\r\n      case 'donations':\r\n        return '­şÆ░';\r\n      case 'members':\r\n        return '­şæñ';\r\n      case 'activities':\r\n        return '­şôØ';\r\n      default:\r\n        return '­şôä';\r\n    }\r\n  };\r\n\r\n  const getSyncProgress = () => {\r\n    if (syncStats.total === 0) return 0;\r\n    return ((syncStats.completed + syncStats.failed) / syncStats.total) * 100;\r\n  };\r\n\r\n  if (!isSyncAvailable) {\r\n    return (\r\n      <Card className={className}>\r\n        <CardHeader>\r\n          <CardTitle className=\"flex items-center gap-2\">\r\n            <Database className=\"w-5 h-5\" />\r\n            Arka Plan Senkronizasyonu\r\n          </CardTitle>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <Alert>\r\n            <AlertCircle className=\"w-4 h-4\" />\r\n            <AlertDescription>\r\n              Bu taray─▒c─▒ arka plan senkronizasyonunu desteklemiyor.\r\n            </AlertDescription>\r\n          </Alert>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className={className}>\r\n      <CardHeader>\r\n        <CardTitle className=\"flex items-center gap-2\">\r\n          <Database className=\"w-5 h-5\" />\r\n          Arka Plan Senkronizasyonu\r\n          {isSyncInProgress && <RefreshCw className=\"w-4 h-4 animate-spin text-blue-500\" />}\r\n        </CardTitle>\r\n        <CardDescription>Offline veri senkronizasyonu ve g├Ârev y├Ânetimi</CardDescription>\r\n      </CardHeader>\r\n\r\n      <CardContent className=\"space-y-6\">\r\n        {/* Connection Status */}\r\n        <div className=\"flex items-center justify-between p-4 bg-gray-50 dark:bg-gray-800 rounded-lg\">\r\n          <div className=\"flex items-center gap-3\">\r\n            {isOnline ? (\r\n              <Wifi className=\"w-5 h-5 text-green-500\" />\r\n            ) : (\r\n              <WifiOff className=\"w-5 h-5 text-red-500\" />\r\n            )}\r\n            <div>\r\n              <div className=\"font-medium\">{isOnline ? '├çevrimi├ği' : '├çevrimd─▒┼ş─▒'}</div>\r\n              <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                {isOnline ? 'Senkronizasyon mevcut' : 'Veriler yerel olarak kaydediliyor'}\r\n              </div>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"flex gap-2\">\r\n            <Button\r\n              onClick={handleSyncNow}\r\n              disabled={!isOnline ?? isSyncInProgress}\r\n              size=\"sm\"\r\n              className=\"gap-2\"\r\n            >\r\n              <Sync className=\"w-4 h-4\" />\r\n              ┼Şimdi Senkronize Et\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Sync Statistics */}\r\n        <div className=\"grid grid-cols-2 md:grid-cols-4 gap-4\">\r\n          <div className=\"text-center p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg\">\r\n            <div className=\"text-2xl font-bold text-blue-600 dark:text-blue-400\">\r\n              {syncStats.total}\r\n            </div>\r\n            <div className=\"text-sm text-blue-600 dark:text-blue-400\">Toplam</div>\r\n          </div>\r\n\r\n          <div className=\"text-center p-3 bg-yellow-50 dark:bg-yellow-900/20 rounded-lg\">\r\n            <div className=\"text-2xl font-bold text-yellow-600 dark:text-yellow-400\">\r\n              {syncStats.pending}\r\n            </div>\r\n            <div className=\"text-sm text-yellow-600 dark:text-yellow-400\">Bekleyen</div>\r\n          </div>\r\n\r\n          <div className=\"text-center p-3 bg-green-50 dark:bg-green-900/20 rounded-lg\">\r\n            <div className=\"text-2xl font-bold text-green-600 dark:text-green-400\">\r\n              {syncStats.completed}\r\n            </div>\r\n            <div className=\"text-sm text-green-600 dark:text-green-400\">Tamamlanan</div>\r\n          </div>\r\n\r\n          <div className=\"text-center p-3 bg-red-50 dark:bg-red-900/20 rounded-lg\">\r\n            <div className=\"text-2xl font-bold text-red-600 dark:text-red-400\">\r\n              {syncStats.failed}\r\n            </div>\r\n            <div className=\"text-sm text-red-600 dark:text-red-400\">Ba┼şar─▒s─▒z</div>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Sync Progress */}\r\n        {syncStats.total > 0 && (\r\n          <div className=\"space-y-2\">\r\n            <div className=\"flex justify-between text-sm\">\r\n              <span>Senkronizasyon ─░lerlemesi</span>\r\n              <span>{Math.round(getSyncProgress())}%</span>\r\n            </div>\r\n            <Progress value={getSyncProgress()} className=\"h-2\" />\r\n          </div>\r\n        )}\r\n\r\n        {/* Sync Tasks Tabs */}\r\n        <Tabs defaultValue=\"pending\" className=\"w-full\">\r\n          <TabsList className=\"grid w-full grid-cols-3\">\r\n            <TabsTrigger value=\"pending\">Bekleyen ({syncStats.pending})</TabsTrigger>\r\n            <TabsTrigger value=\"failed\">Ba┼şar─▒s─▒z ({syncStats.failed})</TabsTrigger>\r\n            <TabsTrigger value=\"actions\">─░┼şlemler</TabsTrigger>\r\n          </TabsList>\r\n\r\n          {/* Pending Tasks */}\r\n          <TabsContent value=\"pending\">\r\n            <div className=\"space-y-4\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <h3 className=\"font-medium\">Bekleyen G├Ârevler</h3>\r\n                {pendingTasks.length > 0 && (\r\n                  <Button\r\n                    onClick={handleSyncNow}\r\n                    disabled={!isOnline ?? isSyncInProgress}\r\n                    size=\"sm\"\r\n                    variant=\"outline\"\r\n                  >\r\n                    Hepsini Senkronize Et\r\n                  </Button>\r\n                )}\r\n              </div>\r\n\r\n              <ScrollArea className=\"h-64\">\r\n                {pendingTasks.length === 0 ? (\r\n                  <div className=\"text-center py-8 text-gray-500\">Bekleyen g├Ârev bulunmuyor</div>\r\n                ) : (\r\n                  <div className=\"space-y-2\">\r\n                    {pendingTasks.map((task) => (\r\n                      <div\r\n                        key={task.id}\r\n                        className=\"flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-800 rounded-lg\"\r\n                      >\r\n                        <div className=\"flex items-center gap-3\">\r\n                          <span className=\"text-lg\">{getEntityIcon(task.entity)}</span>\r\n                          <div>\r\n                            <div className=\"font-medium\">\r\n                              {task.entity} - {task.type}\r\n                            </div>\r\n                            <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                              {formatDistanceToNow(new Date(task.timestamp), {\r\n                                addSuffix: true,\r\n                                locale: tr,\r\n                              })}\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n\r\n                        <div className=\"flex items-center gap-2\">\r\n                          {getStatusIcon(task.status)}\r\n                          <Button onClick={() => removeSyncTask(task.id)} size=\"sm\" variant=\"ghost\">\r\n                            <Trash2 className=\"w-4 h-4\" />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </ScrollArea>\r\n            </div>\r\n          </TabsContent>\r\n\r\n          {/* Failed Tasks */}\r\n          <TabsContent value=\"failed\">\r\n            <div className=\"space-y-4\">\r\n              <div className=\"flex justify-between items-center\">\r\n                <h3 className=\"font-medium\">Ba┼şar─▒s─▒z G├Ârevler</h3>\r\n                {failedTasks.length > 0 && (\r\n                  <Button\r\n                    onClick={handleRetryFailed}\r\n                    disabled={!isOnline ?? isSyncInProgress}\r\n                    size=\"sm\"\r\n                    variant=\"outline\"\r\n                  >\r\n                    Yeniden Dene\r\n                  </Button>\r\n                )}\r\n              </div>\r\n\r\n              <ScrollArea className=\"h-64\">\r\n                {failedTasks.length === 0 ? (\r\n                  <div className=\"text-center py-8 text-gray-500\">Ba┼şar─▒s─▒z g├Ârev bulunmuyor</div>\r\n                ) : (\r\n                  <div className=\"space-y-2\">\r\n                    {failedTasks.map((task) => (\r\n                      <div\r\n                        key={task.id}\r\n                        className=\"flex items-center justify-between p-3 bg-red-50 dark:bg-red-900/20 rounded-lg\"\r\n                      >\r\n                        <div className=\"flex items-center gap-3\">\r\n                          <span className=\"text-lg\">{getEntityIcon(task.entity)}</span>\r\n                          <div>\r\n                            <div className=\"font-medium\">\r\n                              {task.entity} - {task.type}\r\n                            </div>\r\n                            <div className=\"text-sm text-gray-600 dark:text-gray-400\">\r\n                              {task.retryCount}/{task.maxRetries} deneme\r\n                            </div>\r\n                          </div>\r\n                        </div>\r\n\r\n                        <div className=\"flex items-center gap-2\">\r\n                          {getStatusIcon(task.status)}\r\n                          <Button onClick={() => removeSyncTask(task.id)} size=\"sm\" variant=\"ghost\">\r\n                            <Trash2 className=\"w-4 h-4\" />\r\n                          </Button>\r\n                        </div>\r\n                      </div>\r\n                    ))}\r\n                  </div>\r\n                )}\r\n              </ScrollArea>\r\n            </div>\r\n          </TabsContent>\r\n\r\n          {/* Actions */}\r\n          <TabsContent value=\"actions\">\r\n            <div className=\"space-y-4\">\r\n              <div className=\"grid gap-3\">\r\n                <Button\r\n                  onClick={handleCreateTestTasks}\r\n                  disabled={isTestingSyncTasks}\r\n                  className=\"gap-2\"\r\n                >\r\n                  <Upload className=\"w-4 h-4\" />\r\n                  Test G├Ârevleri Olu┼ştur\r\n                </Button>\r\n\r\n                <Button onClick={handleClearCompleted} variant=\"outline\" className=\"gap-2\">\r\n                  <CheckCircle className=\"w-4 h-4\" />\r\n                  Tamamlanan G├Ârevleri Temizle\r\n                </Button>\r\n\r\n                <Button onClick={handleClearAll} variant=\"destructive\" className=\"gap-2\">\r\n                  <Trash2 className=\"w-4 h-4\" />\r\n                  T├╝m G├Ârevleri Temizle\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </TabsContent>\r\n        </Tabs>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default BackgroundSyncManager;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\EnhancedDashboard.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\InteractiveChart.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1579,1582],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1579,1582],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":73,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":73,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2158,2161],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2158,2161],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2574,2577],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2574,2577],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":126,"column":11,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":126,"endColumn":16},{"ruleId":"@typescript-eslint/switch-exhaustiveness-check","severity":2,"message":"Switch is not exhaustive. Cases not matched: \"line\"","line":170,"column":13,"nodeType":"Identifier","messageId":"switchIsNotExhaustive","endLine":170,"endColumn":23,"suggestions":[{"messageId":"addMissingCases","fix":{"range":[7468,7468],"text":"case \"line\": { throw new Error('Not implemented yet: \"line\" case') }\n      "},"desc":"Add branches for missing cases."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":313,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":313,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10696,10699],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10696,10699],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview InteractiveChart Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport React, { useState, useMemo } from 'react';\r\nimport { motion } from 'motion/react';\r\n// Optimized selective imports from recharts\r\nimport { ResponsiveContainer } from 'recharts/lib/component/ResponsiveContainer';\r\nimport { LineChart } from 'recharts/lib/chart/LineChart';\r\nimport { Line } from 'recharts/lib/cartesian/Line';\r\nimport { AreaChart } from 'recharts/lib/chart/AreaChart';\r\nimport { Area } from 'recharts/lib/cartesian/Area';\r\nimport { BarChart } from 'recharts/lib/chart/BarChart';\r\nimport { Bar } from 'recharts/lib/cartesian/Bar';\r\nimport { XAxis } from 'recharts/lib/cartesian/XAxis';\r\nimport { YAxis } from 'recharts/lib/cartesian/YAxis';\r\nimport { CartesianGrid } from 'recharts/lib/cartesian/CartesianGrid';\r\nimport { Tooltip } from 'recharts/lib/component/Tooltip';\r\nimport { PieChart } from 'recharts/lib/chart/PieChart';\r\nimport { Pie } from 'recharts/lib/polar/Pie';\r\nimport { Cell } from 'recharts/lib/component/Cell';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './card';\r\nimport { Badge } from './badge';\r\nimport { Button } from './button';\r\nimport {\r\n  BarChart3,\r\n  LineChart as LineChartIcon,\r\n  PieChart as PieChartIcon,\r\n  TrendingUp,\r\n  Download,\r\n  Maximize2,\r\n} from 'lucide-react';\r\n\r\n/**\r\n * ChartDataPoint Interface\r\n * \r\n * @interface ChartDataPoint\r\n */\r\nexport interface ChartDataPoint {\r\n  name: string;\r\n  value: number;\r\n  category?: string;\r\n  date?: string;\r\n  [key: string]: any;\r\n}\r\n\r\ninterface InteractiveChartProps {\r\n  title: string;\r\n  description?: string;\r\n  data: ChartDataPoint[];\r\n  type?: 'line' | 'area' | 'bar' | 'pie';\r\n  height?: number;\r\n  color?: string;\r\n  showControls?: boolean;\r\n  showExport?: boolean;\r\n  className?: string;\r\n  loading?: boolean;\r\n}\r\n\r\nconst COLORS = {\r\n  primary: '#2563eb',\r\n  secondary: '#10b981',\r\n  accent: '#f59e0b',\r\n  danger: '#ef4444',\r\n  purple: '#8b5cf6',\r\n};\r\n\r\nconst PIE_COLORS = ['#2563eb', '#10b981', '#f59e0b', '#ef4444', '#8b5cf6', '#06b6d4'];\r\n\r\nconst CustomTooltip = ({ active, payload, label }: any) => {\r\n  if (active && payload?.length) {\r\n    return (\r\n      <motion.div\r\n        className=\"bg-white p-4 rounded-lg shadow-xl border border-gray-200/50 backdrop-blur-sm\"\r\n        initial={{ opacity: 0, scale: 0.8 }}\r\n        animate={{ opacity: 1, scale: 1 }}\r\n        transition={{ duration: 0.15 }}\r\n      >\r\n        <p className=\"font-semibold text-gray-900 mb-2\">{label}</p>\r\n        {payload.map((entry: any, index: number) => (\r\n          <div key={index} className=\"flex items-center gap-2\">\r\n            <div className=\"w-3 h-3 rounded-full\" style={{ backgroundColor: entry.color }} />\r\n            <span className=\"text-sm text-gray-600\">\r\n              {entry.name}: <span className=\"font-medium text-gray-900\">{entry.value}</span>\r\n            </span>\r\n          </div>\r\n        ))}\r\n      </motion.div>\r\n    );\r\n  }\r\n  return null;\r\n};\r\n\r\n/**\r\n * InteractiveChart function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function InteractiveChart({\r\n  title,\r\n  description,\r\n  data,\r\n  type = 'line',\r\n  height = 300,\r\n  color = COLORS.primary,\r\n  showControls = true,\r\n  showExport = true,\r\n  className = '',\r\n  loading = false,\r\n}: InteractiveChartProps) {\r\n  const [activeType, setActiveType] = useState(type);\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n\r\n  const chartTypes = [\r\n    { key: 'line', icon: LineChartIcon, label: '├çizgi' },\r\n    { key: 'area', icon: BarChart3, label: 'Alan' },\r\n    { key: 'bar', icon: BarChart3, label: '├çubuk' },\r\n    { key: 'pie', icon: PieChartIcon, label: 'Pasta' },\r\n  ];\r\n\r\n  const processedData = useMemo(() => {\r\n      if (!data || data.length === 0) return [];\r\n\r\n    return data.map((item) => ({\r\n      ...item,\r\n      value: typeof item.value === 'number' ? item.value : 0,\r\n    }));\r\n  }, [data]);\r\n\r\n  const renderChart = () => {\r\n    if (loading) {\r\n      return (\r\n        <div className=\"flex items-center justify-center h-full\">\r\n          <div className=\"animate-pulse space-y-4 w-full\">\r\n            <div className=\"h-4 bg-gray-200 rounded w-3/4\" />\r\n            <div className=\"space-y-2\">\r\n              {[...Array(6)].map((_, i) => (\r\n                <div\r\n                  key={i}\r\n                  className=\"h-3 bg-gray-200 rounded\"\r\n                  style={{ width: `${60 + Math.random() * 40}%` }}\r\n                 />\r\n              ))}\r\n            </div>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    if (!processedData.length) {\r\n      return (\r\n        <div className=\"flex items-center justify-center h-full text-gray-500\">\r\n          <div className=\"text-center\">\r\n            <BarChart3 className=\"w-12 h-12 mx-auto mb-3 text-gray-300\" />\r\n            <p className=\"text-sm\">G├Âr├╝nt├╝lenecek veri yok</p>\r\n          </div>\r\n        </div>\r\n      );\r\n    }\r\n\r\n    const commonProps = {\r\n      data: processedData,\r\n      margin: { top: 5, right: 30, left: 20, bottom: 5 },\r\n    };\r\n\r\n    switch (activeType) {\r\n      case 'area':\r\n        return (\r\n          <ResponsiveContainer width=\"100%\" height={height}>\r\n            <AreaChart {...commonProps}>\r\n              <defs>\r\n                <linearGradient id=\"colorGradient\" x1=\"0\" y1=\"0\" x2=\"0\" y2=\"1\">\r\n                  <stop offset=\"5%\" stopColor={color} stopOpacity={0.3} />\r\n                  <stop offset=\"95%\" stopColor={color} stopOpacity={0} />\r\n                </linearGradient>\r\n              </defs>\r\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f1f5f9\" />\r\n              <XAxis dataKey=\"name\" stroke=\"#64748b\" fontSize={12} />\r\n              <YAxis stroke=\"#64748b\" fontSize={12} />\r\n              <Tooltip content={<CustomTooltip />} />\r\n              <Area\r\n                type=\"monotone\"\r\n                dataKey=\"value\"\r\n                stroke={color}\r\n                strokeWidth={3}\r\n                fill=\"url(#colorGradient)\"\r\n              />\r\n            </AreaChart>\r\n          </ResponsiveContainer>\r\n        );\r\n\r\n      case 'bar':\r\n        return (\r\n          <ResponsiveContainer width=\"100%\" height={height}>\r\n            <BarChart {...commonProps}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f1f5f9\" />\r\n              <XAxis dataKey=\"name\" stroke=\"#64748b\" fontSize={12} />\r\n              <YAxis stroke=\"#64748b\" fontSize={12} />\r\n              <Tooltip content={<CustomTooltip />} />\r\n              <Bar dataKey=\"value\" fill={color} radius={[4, 4, 0, 0]} />\r\n            </BarChart>\r\n          </ResponsiveContainer>\r\n        );\r\n\r\n      case 'pie':\r\n        return (\r\n          <ResponsiveContainer width=\"100%\" height={height}>\r\n            <PieChart>\r\n              <Pie\r\n                data={processedData}\r\n                cx=\"50%\"\r\n                cy=\"50%\"\r\n                labelLine={false}\r\n                label={({ name, percent }) => `${name} ${(percent * 100).toFixed(0)}%`}\r\n                outerRadius={80}\r\n                fill={color}\r\n                dataKey=\"value\"\r\n              >\r\n                {processedData.map((entry, index) => (\r\n                  <Cell key={`cell-${index}`} fill={PIE_COLORS[index % PIE_COLORS.length]} />\r\n                ))}\r\n              </Pie>\r\n              <Tooltip content={<CustomTooltip />} />\r\n            </PieChart>\r\n          </ResponsiveContainer>\r\n        );\r\n\r\n      default: // line\r\n        return (\r\n          <ResponsiveContainer width=\"100%\" height={height}>\r\n            <LineChart {...commonProps}>\r\n              <CartesianGrid strokeDasharray=\"3 3\" stroke=\"#f1f5f9\" />\r\n              <XAxis dataKey=\"name\" stroke=\"#64748b\" fontSize={12} />\r\n              <YAxis stroke=\"#64748b\" fontSize={12} />\r\n              <Tooltip content={<CustomTooltip />} />\r\n              <Line\r\n                type=\"monotone\"\r\n                dataKey=\"value\"\r\n                stroke={color}\r\n                strokeWidth={3}\r\n                dot={{ fill: color, strokeWidth: 2, r: 4 }}\r\n                activeDot={{ r: 6, stroke: color, strokeWidth: 2 }}\r\n              />\r\n            </LineChart>\r\n          </ResponsiveContainer>\r\n        );\r\n    }\r\n  };\r\n\r\n  const handleExport = () => {\r\n    // Export implementation\r\n    const csvContent =\r\n      `data:text/csv;charset=utf-8,` +\r\n      `Ad,De─şer\\n${ \r\n      processedData.map((row) => `${row.name},${row.value}`).join('\\n')}`;\r\n\r\n    const encodedUri = encodeURI(csvContent);\r\n    const link = document.createElement('a');\r\n    link.setAttribute('href', encodedUri);\r\n    link.setAttribute('download', `${title.toLowerCase().replace(/\\s+/g, '_')}_data.csv`);\r\n    document.body.appendChild(link);\r\n    link.click();\r\n    document.body.removeChild(link);\r\n  };\r\n\r\n  return (\r\n    <motion.div className={`w-full ${className}`} layout transition={{ duration: 0.3 }}>\r\n      <Card className=\"shadow-lg border-0 bg-white/80 backdrop-blur-sm\">\r\n        <CardHeader className=\"pb-4\">\r\n          <div className=\"flex items-start justify-between gap-4\">\r\n            <div className=\"space-y-1\">\r\n              <CardTitle className=\"text-lg font-semibold text-gray-900 flex items-center gap-2\">\r\n                {title}\r\n                <TrendingUp className=\"w-4 h-4 text-emerald-500\" />\r\n              </CardTitle>\r\n              {description && <p className=\"text-sm text-gray-600\">{description}</p>}\r\n            </div>\r\n\r\n            <div className=\"flex items-center gap-2\">\r\n              {showExport && (\r\n                <Button variant=\"outline\" size=\"sm\" onClick={handleExport} className=\"h-8 px-3\">\r\n                  <Download className=\"w-3 h-3 mr-1\" />\r\n                  D─▒┼şa Aktar\r\n                </Button>\r\n              )}\r\n              <Button\r\n                variant=\"outline\"\r\n                size=\"sm\"\r\n                onClick={() => {\r\n                  setIsExpanded(!isExpanded);\r\n                }}\r\n                className=\"h-8 px-3\"\r\n              >\r\n                <Maximize2 className=\"w-3 h-3\" />\r\n              </Button>\r\n            </div>\r\n          </div>\r\n\r\n          {showControls && (\r\n            <div className=\"flex items-center gap-2 pt-3\">\r\n              {chartTypes.map(({ key, icon: Icon, label }) => (\r\n                <Badge\r\n                  key={key}\r\n                  variant={activeType === key ? 'default' : 'outline'}\r\n                  className={`cursor-pointer transition-all duration-200 hover:scale-105 ${\r\n                    activeType === key ? 'bg-primary text-white' : 'hover:bg-gray-50'\r\n                  }`}\r\n                  onClick={() => {\r\n                    setActiveType(key as any);\r\n                  }}\r\n                >\r\n                  <Icon className=\"w-3 h-3 mr-1\" />\r\n                  {label}\r\n                </Badge>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </CardHeader>\r\n\r\n        <CardContent className=\"pt-0\">\r\n          <motion.div\r\n            style={{ height: isExpanded ? height * 1.5 : height }}\r\n            transition={{ duration: 0.3 }}\r\n          >\r\n            {renderChart()}\r\n          </motion.div>\r\n        </CardContent>\r\n      </Card>\r\n    </motion.div>\r\n  );\r\n}\r\n\r\nexport default InteractiveChart;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\MetricCard.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":75,"column":18,"nodeType":"MemberExpression","endLine":75,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview MetricCard Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport React from 'react';\r\nimport { motion } from 'motion/react';\r\nimport { TrendingUp, TrendingDown, Activity } from 'lucide-react';\r\nimport { Card, CardContent } from './card';\r\n\r\ninterface MetricCardProps {\r\n  title: string;\r\n  value: string | number;\r\n  change?: {\r\n    value: number;\r\n    type: 'increase' | 'decrease';\r\n    period: string;\r\n  };\r\n  icon: React.ReactNode;\r\n  color: 'blue' | 'green' | 'purple' | 'orange' | 'red';\r\n  loading?: boolean;\r\n  onClick?: () => void;\r\n}\r\n\r\nconst colorClasses = {\r\n  blue: {\r\n    bg: 'bg-blue-600',\r\n    light: 'bg-blue-50',\r\n    text: 'text-blue-700',\r\n    ring: 'ring-blue-500/20',\r\n  },\r\n  green: {\r\n    bg: 'bg-emerald-600',\r\n    light: 'bg-emerald-50',\r\n    text: 'text-emerald-700',\r\n    ring: 'ring-emerald-500/20',\r\n  },\r\n  purple: {\r\n    bg: 'bg-purple-600',\r\n    light: 'bg-purple-50',\r\n    text: 'text-purple-700',\r\n    ring: 'ring-purple-500/20',\r\n  },\r\n  orange: {\r\n    bg: 'bg-orange-600',\r\n    light: 'bg-orange-50',\r\n    text: 'text-orange-700',\r\n    ring: 'ring-orange-500/20',\r\n  },\r\n  red: {\r\n    bg: 'bg-red-600',\r\n    light: 'bg-red-50',\r\n    text: 'text-red-700',\r\n    ring: 'ring-red-500/20',\r\n  },\r\n};\r\n\r\n/**\r\n * MetricCard function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function MetricCard({\r\n  title,\r\n  value,\r\n  change,\r\n  icon,\r\n  color,\r\n  loading,\r\n  onClick,\r\n}: MetricCardProps) {\r\n  const colors = colorClasses[color];\r\n\r\n  const CardWrapper = onClick ? motion.button : motion.div;\r\n\r\n  return (\r\n    <CardWrapper\r\n      className={`w-full text-left ${onClick ? `cursor-pointer focus:outline-none focus:ring-2 focus:ring-offset-2 ${  colors.ring}` : ''}`}\r\n      onClick={onClick}\r\n      whileHover={onClick ? { scale: 1.02, y: -2 } : undefined}\r\n      whileTap={onClick ? { scale: 0.98 } : undefined}\r\n      transition={{ duration: 0.15 }}\r\n    >\r\n      <Card className=\"h-full border-0 shadow-lg hover:shadow-xl transition-all duration-300 bg-white/80 backdrop-blur-sm\">\r\n        <CardContent className=\"p-6\">\r\n          {loading ? (\r\n            <div className=\"space-y-3\">\r\n              <div className=\"flex items-center justify-between\">\r\n                <div className=\"h-4 bg-gray-200 rounded w-20 animate-pulse\" />\r\n                <div className=\"w-10 h-10 bg-gray-200 rounded-lg animate-pulse\" />\r\n              </div>\r\n              <div className=\"h-8 bg-gray-200 rounded w-16 animate-pulse\" />\r\n              <div className=\"h-4 bg-gray-200 rounded w-12 animate-pulse\" />\r\n            </div>\r\n          ) : (\r\n            <div className=\"space-y-4\">\r\n              {/* Header */}\r\n              <div className=\"flex items-start justify-between\">\r\n                <div className=\"space-y-1\">\r\n                  <p className=\"text-sm font-medium text-gray-600 leading-tight\">{title}</p>\r\n                  <div className=\"flex items-baseline gap-2\">\r\n                    <motion.span\r\n                      className=\"text-2xl font-bold text-gray-900\"\r\n                      initial={{ opacity: 0, y: 20 }}\r\n                      animate={{ opacity: 1, y: 0 }}\r\n                      transition={{ delay: 0.1 }}\r\n                    >\r\n                      {value}\r\n                    </motion.span>\r\n                  </div>\r\n                </div>\r\n\r\n                <motion.div\r\n                  className={`p-3 rounded-xl ${colors.bg} shadow-lg`}\r\n                  whileHover={{ scale: 1.1 }}\r\n                  transition={{ duration: 0.15 }}\r\n                >\r\n                  <div className=\"text-white\">{icon}</div>\r\n                </motion.div>\r\n              </div>\r\n\r\n              {/* Change Indicator */}\r\n              {change && (\r\n                <motion.div\r\n                  className=\"flex items-center gap-2\"\r\n                  initial={{ opacity: 0 }}\r\n                  animate={{ opacity: 1 }}\r\n                  transition={{ delay: 0.2 }}\r\n                >\r\n                  <div\r\n                    className={`flex items-center gap-1 px-2 py-1 rounded-full ${\r\n                      change.type === 'increase'\r\n                        ? 'bg-emerald-100 text-emerald-700'\r\n                        : 'bg-red-100 text-red-700'\r\n                    }`}\r\n                  >\r\n                    {change.type === 'increase' ? (\r\n                      <TrendingUp className=\"w-3 h-3\" />\r\n                    ) : (\r\n                      <TrendingDown className=\"w-3 h-3\" />\r\n                    )}\r\n                    <span className=\"text-xs font-semibold\">{Math.abs(change.value)}%</span>\r\n                  </div>\r\n                  <span className=\"text-xs text-gray-500\">{change.period}</span>\r\n                </motion.div>\r\n              )}\r\n\r\n              {/* Activity Indicator */}\r\n              <div className=\"flex items-center gap-2 pt-2 border-t border-gray-100\">\r\n                <Activity className=\"w-3 h-3 text-gray-400\" />\r\n                <span className=\"text-xs text-gray-500\">\r\n                  G├╝ncellendi:{' '}\r\n                  {new Date().toLocaleTimeString('tr-TR', {\r\n                    hour: '2-digit',\r\n                    minute: '2-digit',\r\n                  })}\r\n                </span>\r\n              </div>\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </CardWrapper>\r\n  );\r\n}\r\n\r\nexport default MetricCard;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\__tests__\\Button.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\__tests__\\Card.test.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\__tests__\\Input.test.tsx","messages":[{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":49,"column":13,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":49,"endColumn":62}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi } from 'vitest';\r\nimport { render, screen, userEvent } from '../../../tests/utils';\r\nimport { Input } from '../Input';\r\n\r\ndescribe('Input', () => {\r\n  it('should render input element', () => {\r\n    render(<Input placeholder=\"Enter text\" />);\r\n\r\n    expect(screen.getByPlaceholderText('Enter text')).toBeInTheDocument();\r\n  });\r\n\r\n  it('should handle text input', async () => {\r\n    const user = userEvent.setup();\r\n\r\n    render(<Input placeholder=\"Enter text\" />);\r\n\r\n    const input = screen.getByPlaceholderText('Enter text');\r\n    await user.type(input, 'Hello World');\r\n\r\n    expect(input).toHaveValue('Hello World');\r\n  });\r\n\r\n  it('should handle onChange events', async () => {\r\n    const handleChange = vi.fn();\r\n    const user = userEvent.setup();\r\n\r\n    render(<Input onChange={handleChange} placeholder=\"Enter text\" />);\r\n\r\n    const input = screen.getByPlaceholderText('Enter text');\r\n    await user.type(input, 'test');\r\n\r\n    expect(handleChange).toHaveBeenCalled();\r\n  });\r\n\r\n  it('should be disabled when disabled prop is true', () => {\r\n    render(<Input disabled placeholder=\"Disabled input\" />);\r\n\r\n    const input = screen.getByPlaceholderText('Disabled input');\r\n    expect(input).toBeDisabled();\r\n  });\r\n\r\n  it('should accept different input types', () => {\r\n    const { rerender } = render(<Input type=\"text\" />);\r\n\r\n    let input = screen.getByRole('textbox');\r\n    expect(input).toHaveAttribute('type', 'text');\r\n\r\n    rerender(<Input type=\"password\" />);\r\n    input = document.querySelector('input[type=\"password\"]')!;\r\n    expect(input).toHaveAttribute('type', 'password');\r\n\r\n    rerender(<Input type=\"email\" />);\r\n    input = screen.getByRole('textbox');\r\n    expect(input).toHaveAttribute('type', 'email');\r\n\r\n    rerender(<Input type=\"number\" />);\r\n    input = screen.getByRole('spinbutton');\r\n    expect(input).toHaveAttribute('type', 'number');\r\n  });\r\n\r\n  it('should apply custom className', () => {\r\n    render(<Input className=\"custom-input\" />);\r\n\r\n    const input = screen.getByRole('textbox');\r\n    expect(input).toHaveClass('custom-input');\r\n  });\r\n\r\n  it('should forward ref correctly', () => {\r\n    const ref = { current: null };\r\n\r\n    render(<Input ref={ref} />);\r\n\r\n    expect(ref.current).toBeInstanceOf(HTMLInputElement);\r\n  });\r\n\r\n  it('should handle focus and blur events', async () => {\r\n    const handleFocus = vi.fn();\r\n    const handleBlur = vi.fn();\r\n    const user = userEvent.setup();\r\n\r\n    render(<Input onFocus={handleFocus} onBlur={handleBlur} />);\r\n\r\n    const input = screen.getByRole('textbox');\r\n\r\n    await user.click(input);\r\n    expect(handleFocus).toHaveBeenCalledTimes(1);\r\n\r\n    await user.tab();\r\n    expect(handleBlur).toHaveBeenCalledTimes(1);\r\n  });\r\n\r\n  it('should support controlled input', async () => {\r\n    const handleChange = vi.fn();\r\n    const user = userEvent.setup();\r\n\r\n    const { rerender } = render(<Input value=\"initial\" onChange={handleChange} />);\r\n\r\n    const input = screen.getByRole('textbox');\r\n    expect(input).toHaveValue('initial');\r\n\r\n    await user.clear(input);\r\n    await user.type(input, 'new value');\r\n\r\n    expect(handleChange).toHaveBeenCalled();\r\n\r\n    rerender(<Input value=\"updated\" onChange={handleChange} />);\r\n    expect(input).toHaveValue('updated');\r\n  });\r\n\r\n  it('should handle required attribute', () => {\r\n    render(<Input required />);\r\n\r\n    const input = screen.getByRole('textbox');\r\n    expect(input).toBeRequired();\r\n  });\r\n\r\n  it('should handle readonly attribute', () => {\r\n    render(<Input readOnly value=\"readonly text\" />);\r\n\r\n    const input = screen.getByRole('textbox');\r\n    expect(input).toHaveAttribute('readonly');\r\n    expect(input).toHaveValue('readonly text');\r\n  });\r\n\r\n  it('should handle maxLength attribute', async () => {\r\n    const user = userEvent.setup();\r\n\r\n    render(<Input maxLength={5} />);\r\n\r\n    const input = screen.getByRole('textbox');\r\n    await user.type(input, '123456789');\r\n\r\n    expect(input).toHaveValue('12345');\r\n  });\r\n\r\n  it('should handle keyboard navigation', async () => {\r\n    const user = userEvent.setup();\r\n\r\n    render(<Input />);\r\n\r\n    const input = screen.getByRole('textbox');\r\n\r\n    await user.click(input);\r\n    expect(input).toHaveFocus();\r\n\r\n    await user.keyboard('{Tab}');\r\n    expect(input).not.toHaveFocus();\r\n  });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\accordion.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\alert-dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\alert.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\aspect-ratio.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\avatar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\badge.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":46,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":46,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview badge Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { Slot } from '@radix-ui/react-slot';\r\nimport { cva, type VariantProps } from 'class-variance-authority';\r\nimport * as React from 'react';\r\n\r\nimport { cn } from './utils';\r\n\r\nconst badgeVariants = cva(\r\n  'inline-flex items-center justify-center rounded-md border px-2 py-0.5 text-xs font-medium w-fit whitespace-nowrap shrink-0 [&>svg]:size-3 gap-1 [&>svg]:pointer-events-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive transition-[color,box-shadow] overflow-hidden',\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: 'border-transparent bg-primary text-primary-foreground [a&]:hover:bg-primary/90',\r\n        secondary:\r\n          'border-transparent bg-secondary text-secondary-foreground [a&]:hover:bg-secondary/90',\r\n        destructive:\r\n          'border-transparent bg-destructive text-white [a&]:hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\r\n        outline: 'text-foreground [a&]:hover:bg-accent [a&]:hover:text-accent-foreground',\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: 'default',\r\n    },\r\n  },\r\n);\r\n\r\nfunction Badge({\r\n  className,\r\n  variant,\r\n  asChild = false,\r\n  ...props\r\n}: React.ComponentProps<'span'> & VariantProps<typeof badgeVariants> & { asChild?: boolean }) {\r\n  const Comp = asChild ? Slot : 'span';\r\n\r\n  return (\r\n    <Comp data-slot=\"badge\" className={cn(badgeVariants({ variant }), className)} {...props} />\r\n  );\r\n}\r\n\r\nexport { Badge, badgeVariants };\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\breadcrumb.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\button.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":62,"column":18,"nodeType":"Identifier","messageId":"namedExport","endLine":62,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview button Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { Slot } from '@radix-ui/react-slot';\r\nimport { cva, type VariantProps } from 'class-variance-authority';\r\nimport * as React from 'react';\r\n\r\nimport { cn } from './utils';\r\n\r\nconst buttonVariants = cva(\r\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium transition-all disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg:not([class*='size-'])]:size-4 shrink-0 [&_svg]:shrink-0 outline-none focus-visible:border-ring focus-visible:ring-ring/50 focus-visible:ring-[3px] aria-invalid:ring-destructive/20 dark:aria-invalid:ring-destructive/40 aria-invalid:border-destructive\",\r\n  {\r\n    variants: {\r\n      variant: {\r\n        default: 'bg-primary text-primary-foreground hover:bg-primary/90',\r\n        destructive:\r\n          'bg-destructive text-white hover:bg-destructive/90 focus-visible:ring-destructive/20 dark:focus-visible:ring-destructive/40 dark:bg-destructive/60',\r\n        outline:\r\n          'border bg-background text-foreground hover:bg-accent hover:text-accent-foreground dark:bg-input/30 dark:border-input dark:hover:bg-input/50',\r\n        secondary: 'bg-secondary text-secondary-foreground hover:bg-secondary/80',\r\n        ghost: 'hover:bg-accent hover:text-accent-foreground dark:hover:bg-accent/50',\r\n        link: 'text-primary underline-offset-4 hover:underline',\r\n      },\r\n      size: {\r\n        default: 'h-9 px-4 py-2 has-[>svg]:px-3',\r\n        sm: 'h-8 rounded-md gap-1.5 px-3 has-[>svg]:px-2.5',\r\n        lg: 'h-10 rounded-md px-6 has-[>svg]:px-4',\r\n        icon: 'size-9 rounded-md',\r\n      },\r\n    },\r\n    defaultVariants: {\r\n      variant: 'default',\r\n      size: 'default',\r\n    },\r\n  },\r\n);\r\n\r\nconst Button = React.forwardRef<\r\n  HTMLButtonElement,\r\n  React.ComponentProps<'button'> &\r\n    VariantProps<typeof buttonVariants> & {\r\n      asChild?: boolean;\r\n    }\r\n>(({ className, variant, size, asChild = false, ...props }, ref) => {\r\n  const Comp = asChild ? Slot : 'button';\r\n\r\n  return (\r\n    <Comp\r\n      data-slot=\"button\"\r\n      className={cn(buttonVariants({ variant, size, className }))}\r\n      ref={ref}\r\n      {...props}\r\n    />\r\n  );\r\n});\r\nButton.displayName = 'Button';\r\n\r\nexport { Button, buttonVariants };\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\calendar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\camera-scanner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\carousel.tsx","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":108,"column":10,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":108,"endColumn":12,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[2782,2784],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":118,"column":22,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":118,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview carousel Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\n'use client';\r\n\r\nimport * as React from 'react';\r\nimport useEmblaCarousel, { type UseEmblaCarouselType } from 'embla-carousel-react';\r\nimport { ArrowLeft, ArrowRight } from 'lucide-react';\r\n\r\nimport { cn } from './utils';\r\nimport { Button } from './button';\r\n\r\ntype CarouselApi = UseEmblaCarouselType[1];\r\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>;\r\ntype CarouselOptions = UseCarouselParameters[0];\r\ntype CarouselPlugin = UseCarouselParameters[1];\r\n\r\ninterface CarouselProps {\r\n  opts?: CarouselOptions;\r\n  plugins?: CarouselPlugin;\r\n  orientation?: 'horizontal' | 'vertical';\r\n  setApi?: (api: CarouselApi) => void;\r\n}\r\n\r\ntype CarouselContextProps = {\r\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0];\r\n  api: ReturnType<typeof useEmblaCarousel>[1];\r\n  scrollPrev: () => void;\r\n  scrollNext: () => void;\r\n  canScrollPrev: boolean;\r\n  canScrollNext: boolean;\r\n} & CarouselProps;\r\n\r\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null);\r\n\r\nfunction useCarousel() {\r\n  const context = React.useContext(CarouselContext);\r\n\r\n  if (!context) {\r\n    throw new Error('useCarousel must be used within a <Carousel />');\r\n  }\r\n\r\n  return context;\r\n}\r\n\r\nfunction Carousel({\r\n  orientation = 'horizontal',\r\n  opts,\r\n  setApi,\r\n  plugins,\r\n  className,\r\n  children,\r\n  ...props\r\n}: React.ComponentProps<'div'> & CarouselProps) {\r\n  const [carouselRef, api] = useEmblaCarousel(\r\n    {\r\n      ...opts,\r\n      axis: orientation === 'horizontal' ? 'x' : 'y',\r\n    },\r\n    plugins,\r\n  );\r\n  const [canScrollPrev, setCanScrollPrev] = React.useState(false);\r\n  const [canScrollNext, setCanScrollNext] = React.useState(false);\r\n\r\n  const onSelect = React.useCallback((api: CarouselApi) => {\r\n    if (!api) return;\r\n    setCanScrollPrev(api.canScrollPrev());\r\n    setCanScrollNext(api.canScrollNext());\r\n  }, []);\r\n\r\n  const scrollPrev = React.useCallback(() => {\r\n    api?.scrollPrev();\r\n  }, [api]);\r\n\r\n  const scrollNext = React.useCallback(() => {\r\n    api?.scrollNext();\r\n  }, [api]);\r\n\r\n  const handleKeyDown = React.useCallback(\r\n    (event: React.KeyboardEvent<HTMLDivElement>) => {\r\n      if (event.key === 'ArrowLeft') {\r\n        event.preventDefault();\r\n        scrollPrev();\r\n      } else if (event.key === 'ArrowRight') {\r\n        event.preventDefault();\r\n        scrollNext();\r\n      }\r\n    },\r\n    [scrollPrev, scrollNext],\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    if (!api || !setApi) return;\r\n    setApi(api);\r\n  }, [api, setApi]);\r\n\r\n  React.useEffect(() => {\r\n    if (!api) return;\r\n    onSelect(api);\r\n    api.on('reInit', onSelect);\r\n    api.on('select', onSelect);\r\n\r\n    return () => {\r\n      api?.off('select', onSelect);\r\n    };\r\n  }, [api, onSelect]);\r\n\r\n  return (\r\n    <CarouselContext.Provider\r\n      value={{\r\n        carouselRef,\r\n        api,\r\n        opts,\r\n        orientation: orientation || (opts?.axis === 'y' ? 'vertical' : 'horizontal'),\r\n        scrollPrev,\r\n        scrollNext,\r\n        canScrollPrev,\r\n        canScrollNext,\r\n      }}\r\n    >\r\n      <div\r\n        onKeyDownCapture={handleKeyDown}\r\n        className={cn('relative', className)}\r\n        role=\"region\"\r\n        aria-roledescription=\"carousel\"\r\n        data-slot=\"carousel\"\r\n        {...props}\r\n      >\r\n        {children}\r\n      </div>\r\n    </CarouselContext.Provider>\r\n  );\r\n}\r\n\r\nfunction CarouselContent({ className, ...props }: React.ComponentProps<'div'>) {\r\n  const { carouselRef, orientation } = useCarousel();\r\n\r\n  return (\r\n    <div ref={carouselRef} className=\"overflow-hidden\" data-slot=\"carousel-content\">\r\n      <div\r\n        className={cn('flex', orientation === 'horizontal' ? '-ml-4' : '-mt-4 flex-col', className)}\r\n        {...props}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction CarouselItem({ className, ...props }: React.ComponentProps<'div'>) {\r\n  const { orientation } = useCarousel();\r\n\r\n  return (\r\n    <div\r\n      role=\"group\"\r\n      aria-roledescription=\"slide\"\r\n      data-slot=\"carousel-item\"\r\n      className={cn(\r\n        'min-w-0 shrink-0 grow-0 basis-full',\r\n        orientation === 'horizontal' ? 'pl-4' : 'pt-4',\r\n        className,\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction CarouselPrevious({\r\n  className,\r\n  variant = 'outline',\r\n  size = 'icon',\r\n  ...props\r\n}: React.ComponentProps<typeof Button>) {\r\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel();\r\n\r\n  return (\r\n    <Button\r\n      data-slot=\"carousel-previous\"\r\n      variant={variant}\r\n      size={size}\r\n      className={cn(\r\n        'absolute size-8 rounded-full',\r\n        orientation === 'horizontal'\r\n          ? 'top-1/2 -left-12 -translate-y-1/2'\r\n          : '-top-12 left-1/2 -translate-x-1/2 rotate-90',\r\n        className,\r\n      )}\r\n      disabled={!canScrollPrev}\r\n      onClick={scrollPrev}\r\n      {...props}\r\n    >\r\n      <ArrowLeft />\r\n      <span className=\"sr-only\">Previous slide</span>\r\n    </Button>\r\n  );\r\n}\r\n\r\nfunction CarouselNext({\r\n  className,\r\n  variant = 'outline',\r\n  size = 'icon',\r\n  ...props\r\n}: React.ComponentProps<typeof Button>) {\r\n  const { orientation, scrollNext, canScrollNext } = useCarousel();\r\n\r\n  return (\r\n    <Button\r\n      data-slot=\"carousel-next\"\r\n      variant={variant}\r\n      size={size}\r\n      className={cn(\r\n        'absolute size-8 rounded-full',\r\n        orientation === 'horizontal'\r\n          ? 'top-1/2 -right-12 -translate-y-1/2'\r\n          : '-bottom-12 left-1/2 -translate-x-1/2 rotate-90',\r\n        className,\r\n      )}\r\n      disabled={!canScrollNext}\r\n      onClick={scrollNext}\r\n      {...props}\r\n    >\r\n      <ArrowRight />\r\n      <span className=\"sr-only\">Next slide</span>\r\n    </Button>\r\n  );\r\n}\r\n\r\nexport {\r\n  type CarouselApi,\r\n  Carousel,\r\n  CarouselContent,\r\n  CarouselItem,\r\n  CarouselPrevious,\r\n  CarouselNext,\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\chart.tsx","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":92,"column":78,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":92,"endColumn":80,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2934,2936],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":137,"column":36,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":137,"endColumn":38,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[3865,3867],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":137,"column":53,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":137,"endColumn":55,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[3882,3884],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":140,"column":48,"nodeType":"MemberExpression","endLine":140,"endColumn":61},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":140,"column":61,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":140,"endColumn":63,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[4055,4057],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":183,"column":33,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":183,"endColumn":35,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[5511,5513],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":318,"column":37,"nodeType":"MemberExpression","endLine":318,"endColumn":59},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":318,"column":62,"nodeType":"MemberExpression","endLine":318,"endColumn":73}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview chart Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\n'use client';\r\n\r\nimport * as React from 'react';\r\nimport * as RechartsPrimitive from 'recharts';\r\n\r\nimport { cn } from './utils';\r\n\r\n// Format: { THEME_NAME: CSS_SELECTOR }\r\nconst THEMES = { light: '', dark: '.dark' } as const;\r\n\r\nexport type ChartConfig = Record<\r\n  string,\r\n  {\r\n    label?: React.ReactNode;\r\n    icon?: React.ComponentType;\r\n  } & (\r\n    | { color?: string; theme?: never }\r\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\r\n  )\r\n>;\r\n\r\ninterface ChartContextProps {\r\n  config: ChartConfig;\r\n}\r\n\r\nconst ChartContext = React.createContext<ChartContextProps | null>(null);\r\n\r\nfunction useChart() {\r\n  const context = React.useContext(ChartContext);\r\n\r\n  if (!context) {\r\n    throw new Error('useChart must be used within a <ChartContainer />');\r\n  }\r\n\r\n  return context;\r\n}\r\n\r\nfunction ChartContainer({\r\n  id,\r\n  className,\r\n  children,\r\n  config,\r\n  ...props\r\n}: React.ComponentProps<'div'> & {\r\n  config: ChartConfig;\r\n  children: React.ComponentProps<typeof RechartsPrimitive.ResponsiveContainer>['children'];\r\n}) {\r\n  const uniqueId = React.useId();\r\n  const chartId = `chart-${id ?? uniqueId.replace(/:/g, '')}`;\r\n\r\n  return (\r\n    <ChartContext.Provider value={{ config }}>\r\n      <div\r\n        data-slot=\"chart\"\r\n        data-chart={chartId}\r\n        className={cn(\r\n          \"[&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border flex aspect-video justify-center text-xs [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-hidden [&_.recharts-sector]:outline-hidden [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-surface]:outline-hidden\",\r\n          className,\r\n        )}\r\n        {...props}\r\n      >\r\n        <ChartStyle id={chartId} config={config} />\r\n        <RechartsPrimitive.ResponsiveContainer>{children}</RechartsPrimitive.ResponsiveContainer>\r\n      </div>\r\n    </ChartContext.Provider>\r\n  );\r\n}\r\n\r\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\r\n  const colorConfig = Object.entries(config).filter(([, config]) => config.theme ?? config.color);\r\n\r\n  if (!colorConfig.length) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <style\r\n      dangerouslySetInnerHTML={{\r\n        __html: Object.entries(THEMES)\r\n          .map(\r\n            ([theme, prefix]) => `\r\n${prefix} [data-chart=${id}] {\r\n${colorConfig\r\n  .map(([key, itemConfig]) => {\r\n    const color = itemConfig.theme?.[theme as keyof typeof itemConfig.theme] || itemConfig.color;\r\n    return color ? `  --color-${key}: ${color};` : null;\r\n  })\r\n  .join('\\n')}\r\n}\r\n`,\r\n          )\r\n          .join('\\n'),\r\n      }}\r\n    />\r\n  );\r\n};\r\n\r\nconst ChartTooltip = RechartsPrimitive.Tooltip;\r\n\r\nfunction ChartTooltipContent({\r\n  active,\r\n  payload,\r\n  className,\r\n  indicator = 'dot',\r\n  hideLabel = false,\r\n  hideIndicator = false,\r\n  label,\r\n  labelFormatter,\r\n  labelClassName,\r\n  formatter,\r\n  color,\r\n  nameKey,\r\n  labelKey,\r\n}: React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\r\n  React.ComponentProps<'div'> & {\r\n    hideLabel?: boolean;\r\n    hideIndicator?: boolean;\r\n    indicator?: 'line' | 'dot' | 'dashed';\r\n    nameKey?: string;\r\n    labelKey?: string;\r\n  }) {\r\n  const { config } = useChart();\r\n\r\n  const tooltipLabel = React.useMemo(() => {\r\n    if (hideLabel || !payload?.length) {\r\n      return null;\r\n    }\r\n\r\n    const [item] = payload;\r\n    const key = `${labelKey ?? item?.dataKey ?? item?.name ?? 'value'}`;\r\n    const itemConfig = getPayloadConfigFromPayload(config, item, key);\r\n    const value =\r\n      !labelKey && typeof label === 'string' ? config[label]?.label ?? label : itemConfig?.label;\r\n\r\n    if (labelFormatter) {\r\n      return (\r\n        <div className={cn('font-medium', labelClassName)}>{labelFormatter(value, payload)}</div>\r\n      );\r\n    }\r\n\r\n    if (!value) {\r\n      return null;\r\n    }\r\n\r\n    return <div className={cn('font-medium', labelClassName)}>{value}</div>;\r\n  }, [label, labelFormatter, payload, hideLabel, labelClassName, config, labelKey]);\r\n\r\n  if (!active || !payload?.length) {\r\n    return null;\r\n  }\r\n\r\n  const nestLabel = payload.length === 1 && indicator !== 'dot';\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        'border-border/50 bg-background grid min-w-[8rem] items-start gap-1.5 rounded-lg border px-2.5 py-1.5 text-xs shadow-xl',\r\n        className,\r\n      )}\r\n    >\r\n      {!nestLabel ? tooltipLabel : null}\r\n      <div className=\"grid gap-1.5\">\r\n        {payload.map((item, index) => {\r\n          const key = `${nameKey ?? item.name ?? item.dataKey ?? 'value'}`;\r\n          const itemConfig = getPayloadConfigFromPayload(config, item, key);\r\n          const indicatorColor = color ?? item.payload.fill ?? item.color;\r\n\r\n          return (\r\n            <div\r\n              key={item.dataKey}\r\n              className={cn(\r\n                '[&>svg]:text-muted-foreground flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5',\r\n                indicator === 'dot' && 'items-center',\r\n              )}\r\n            >\r\n              {formatter && item?.value !== undefined && item.name ? (\r\n                formatter(item.value, item.name, item, index, item.payload)\r\n              ) : (\r\n                <>\r\n                  {itemConfig?.icon ? (\r\n                    <itemConfig.icon />\r\n                  ) : (\r\n                    !hideIndicator && (\r\n                      <div\r\n                        className={cn(\r\n                          'shrink-0 rounded-[2px] border-(--color-border) bg-(--color-bg)',\r\n                          {\r\n                            'h-2.5 w-2.5': indicator === 'dot',\r\n                            'w-1': indicator === 'line',\r\n                            'w-0 border-[1.5px] border-dashed bg-transparent':\r\n                              indicator === 'dashed',\r\n                            'my-0.5': nestLabel && indicator === 'dashed',\r\n                          },\r\n                        )}\r\n                        style={\r\n                          {\r\n                            '--color-bg': indicatorColor,\r\n                            '--color-border': indicatorColor,\r\n                          } as React.CSSProperties\r\n                        }\r\n                      />\r\n                    )\r\n                  )}\r\n                  <div\r\n                    className={cn(\r\n                      'flex flex-1 justify-between leading-none',\r\n                      nestLabel ? 'items-end' : 'items-center',\r\n                    )}\r\n                  >\r\n                    <div className=\"grid gap-1.5\">\r\n                      {nestLabel ? tooltipLabel : null}\r\n                      <span className=\"text-muted-foreground\">\r\n                        {itemConfig?.label ?? item.name}\r\n                      </span>\r\n                    </div>\r\n                    {item.value && (\r\n                      <span className=\"text-foreground font-mono font-medium tabular-nums\">\r\n                        {item.value.toLocaleString()}\r\n                      </span>\r\n                    )}\r\n                  </div>\r\n                </>\r\n              )}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst ChartLegend = RechartsPrimitive.Legend;\r\n\r\nfunction ChartLegendContent({\r\n  className,\r\n  hideIcon = false,\r\n  payload,\r\n  verticalAlign = 'bottom',\r\n  nameKey,\r\n}: React.ComponentProps<'div'> &\r\n  Pick<RechartsPrimitive.LegendProps, 'payload' | 'verticalAlign'> & {\r\n    hideIcon?: boolean;\r\n    nameKey?: string;\r\n  }) {\r\n  const { config } = useChart();\r\n\r\n  if (!payload?.length) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <div\r\n      className={cn(\r\n        'flex items-center justify-center gap-4',\r\n        verticalAlign === 'top' ? 'pb-3' : 'pt-3',\r\n        className,\r\n      )}\r\n    >\r\n      {payload.map((item) => {\r\n        const key = `${nameKey ?? item.dataKey ?? 'value'}`;\r\n        const itemConfig = getPayloadConfigFromPayload(config, item, key);\r\n\r\n        return (\r\n          <div\r\n            key={item.value}\r\n            className={cn(\r\n              '[&>svg]:text-muted-foreground flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3',\r\n            )}\r\n          >\r\n            {itemConfig?.icon && !hideIcon ? (\r\n              <itemConfig.icon />\r\n            ) : (\r\n              <div\r\n                className=\"h-2 w-2 shrink-0 rounded-[2px]\"\r\n                style={{\r\n                  backgroundColor: item.color,\r\n                }}\r\n              />\r\n            )}\r\n            {itemConfig?.label}\r\n          </div>\r\n        );\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Helper to extract item config from a payload.\r\nfunction getPayloadConfigFromPayload(config: ChartConfig, payload: unknown, key: string) {\r\n  if (typeof payload !== 'object' || payload === null) {\r\n    return undefined;\r\n  }\r\n\r\n  const payloadPayload =\r\n    'payload' in payload && typeof payload.payload === 'object' && payload.payload !== null\r\n      ? payload.payload\r\n      : undefined;\r\n\r\n  let configLabelKey: string = key;\r\n\r\n  if (key in payload && typeof payload[key as keyof typeof payload] === 'string') {\r\n    configLabelKey = payload[key as keyof typeof payload] as string;\r\n  } else if (\r\n    payloadPayload &&\r\n    key in payloadPayload &&\r\n    typeof payloadPayload[key as keyof typeof payloadPayload] === 'string'\r\n  ) {\r\n    configLabelKey = payloadPayload[key as keyof typeof payloadPayload] as string;\r\n  }\r\n\r\n  return configLabelKey in config ? config[configLabelKey] : config[key];\r\n}\r\n\r\nexport {\r\n  ChartContainer,\r\n  ChartTooltip,\r\n  ChartTooltipContent,\r\n  ChartLegend,\r\n  ChartLegendContent,\r\n  ChartStyle,\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\checkbox.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\collapsible.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\command.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\context-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\desktop-table.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":74,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":74,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2204,2207],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2204,2207],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":256,"column":85,"nodeType":"MemberExpression","endLine":256,"endColumn":104}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview desktop-table Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport React from 'react';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './table';\r\n\r\ninterface DesktopTableProps<T> {\r\n  data: T[];\r\n  columns: {\r\n    key: string;\r\n    label: string;\r\n    render?: (item: T) => React.ReactNode;\r\n    className?: string;\r\n  }[];\r\n  onRowClick?: (item: T) => void;\r\n  emptyState?: {\r\n    icon?: React.ReactNode;\r\n    title: string;\r\n    description?: string;\r\n    action?: React.ReactNode;\r\n  };\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * DesktopTable function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function DesktopTable<T extends { id: string | number }>({\r\n  data,\r\n  columns,\r\n  onRowClick,\r\n  emptyState,\r\n  className,\r\n}: DesktopTableProps<T>) {\r\n  if (data.length === 0 && emptyState) {\r\n    return (\r\n      <div className=\"p-8 text-center\">\r\n        {emptyState.icon && <div className=\"flex justify-center mb-4\">{emptyState.icon}</div>}\r\n        <h3 className=\"text-lg font-medium text-gray-900 mb-2\">{emptyState.title}</h3>\r\n        {emptyState.description && <p className=\"text-gray-500 mb-4\">{emptyState.description}</p>}\r\n        {emptyState.action}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className=\"overflow-x-auto\">\r\n      <Table className={className}>\r\n        <TableHeader>\r\n          <TableRow className=\"bg-gray-50/50\">\r\n            {columns.map((column) => (\r\n              <TableHead key={column.key} className={`p-4 ${column.className ?? ''}`}>\r\n                {column.label}\r\n              </TableHead>\r\n            ))}\r\n          </TableRow>\r\n        </TableHeader>\r\n        <TableBody>\r\n          {data.map((item) => (\r\n            <TableRow\r\n              key={item.id}\r\n              className=\"hover:bg-gray-50/50 transition-colors cursor-pointer\"\r\n              onClick={() => onRowClick?.(item)}\r\n            >\r\n              {columns.map((column) => (\r\n                <TableCell key={column.key} className={`p-4 ${column.className ?? ''}`}>\r\n                  {column.render ? column.render(item) : (item as any)[column.key]}\r\n                </TableCell>\r\n              ))}\r\n            </TableRow>\r\n          ))}\r\n        </TableBody>\r\n      </Table>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Desktop-optimized filter components\r\nimport { Card, CardContent } from './card';\r\nimport { Input } from './input';\r\nimport { Search } from 'lucide-react';\r\n\r\ninterface DesktopFiltersProps {\r\n  children: React.ReactNode;\r\n  searchValue?: string;\r\n  onSearchChange?: (value: string) => void;\r\n  searchPlaceholder?: string;\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * DesktopFilters function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function DesktopFilters({\r\n  children,\r\n  searchValue,\r\n  onSearchChange,\r\n  searchPlaceholder = 'Ara...',\r\n  className,\r\n}: DesktopFiltersProps) {\r\n  return (\r\n    <Card className={`border-0 shadow-sm ${className ?? ''}`}>\r\n      <CardContent className=\"p-6\">\r\n        <div className=\"space-y-4\">\r\n          {/* Search Input */}\r\n          {onSearchChange && (\r\n            <div className=\"relative\">\r\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\r\n              <Input\r\n                type=\"search\"\r\n                placeholder={searchPlaceholder}\r\n                value={searchValue ?? ''}\r\n                onChange={(e) => {\r\n                  onSearchChange(e.target.value);\r\n                }}\r\n                className=\"w-full pl-10 pr-4 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500\"\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          {/* Filter Controls */}\r\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4\">{children}</div>\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\n// Desktop-optimized action buttons\r\nimport { Button } from './button';\r\n\r\ninterface DesktopActionButtonsProps {\r\n  primaryAction?: {\r\n    label: string;\r\n    icon?: React.ReactNode;\r\n    onClick: () => void;\r\n    loading?: boolean;\r\n  };\r\n  secondaryActions?: {\r\n    label: string;\r\n    icon?: React.ReactNode;\r\n    onClick: () => void;\r\n    variant?: 'outline' | 'ghost';\r\n  }[];\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * DesktopActionButtons function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function DesktopActionButtons({\r\n  primaryAction,\r\n  secondaryActions,\r\n  className,\r\n}: DesktopActionButtonsProps) {\r\n  return (\r\n    <div className={`flex gap-3 items-center justify-end ${className ?? ''}`}>\r\n      {/* Secondary Actions */}\r\n      {secondaryActions?.map((action, index) => (\r\n        <Button\r\n          key={index}\r\n          variant={action.variant ?? 'outline'}\r\n          size=\"default\"\r\n          className=\"px-4 py-2 border-gray-300 hover:border-gray-400\"\r\n          onClick={action.onClick}\r\n        >\r\n          {action.icon && <span className=\"mr-2\">{action.icon}</span>}\r\n          {action.label}\r\n        </Button>\r\n      ))}\r\n\r\n      {/* Primary Action */}\r\n      {primaryAction && (\r\n        <Button\r\n          size=\"default\"\r\n          className=\"px-6 py-2 shadow-lg font-medium focus:outline-none focus:ring-2 focus:ring-blue-300 focus:ring-offset-2 transition-all duration-200\"\r\n          style={{\r\n            backgroundColor: '#1e3a8a',\r\n            color: '#ffffff',\r\n            border: 'none',\r\n            boxShadow: '0 4px 12px rgba(30, 58, 138, 0.4)',\r\n          }}\r\n          onClick={primaryAction.onClick}\r\n          disabled={primaryAction.loading}\r\n        >\r\n          {primaryAction.loading ? (\r\n            <div className=\"w-4 h-4 border-2 border-white border-t-transparent rounded-full animate-spin mr-2\" />\r\n          ) : (\r\n            primaryAction.icon && <span className=\"mr-2\">{primaryAction.icon}</span>\r\n          )}\r\n          {primaryAction.label}\r\n        </Button>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Desktop-optimized stats cards\r\ninterface DesktopStatsCardProps {\r\n  title: string;\r\n  value: string | number;\r\n  subtitle?: string;\r\n  icon?: React.ReactNode;\r\n  color?: 'blue' | 'green' | 'yellow' | 'red' | 'purple' | 'gray';\r\n  trend?: {\r\n    value: string;\r\n    positive?: boolean;\r\n  };\r\n}\r\n\r\n/**\r\n * DesktopStatsCard function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function DesktopStatsCard({\r\n  title,\r\n  value,\r\n  subtitle,\r\n  icon,\r\n  color = 'blue',\r\n  trend,\r\n}: DesktopStatsCardProps) {\r\n  const colorClasses = {\r\n    blue: 'bg-blue-100 text-blue-600',\r\n    green: 'bg-green-100 text-green-600',\r\n    yellow: 'bg-yellow-100 text-yellow-600',\r\n    red: 'bg-red-100 text-red-600',\r\n    purple: 'bg-purple-100 text-purple-600',\r\n    gray: 'bg-gray-100 text-gray-600',\r\n  };\r\n\r\n  return (\r\n    <Card className=\"border-0 shadow-md hover:shadow-lg transition-all duration-300\">\r\n      <CardContent className=\"p-6\">\r\n        <div className=\"flex items-center justify-between mb-3\">\r\n          <div className=\"text-3xl font-bold text-gray-900\">\r\n            {typeof value === 'number' ? value.toLocaleString() : value}\r\n          </div>\r\n          {icon && (\r\n            <div\r\n              className={`w-10 h-10 rounded-full flex items-center justify-center ${colorClasses[color]}`}\r\n            >\r\n              {icon}\r\n            </div>\r\n          )}\r\n        </div>\r\n        <p className=\"font-medium text-gray-600\">{title}</p>\r\n        <div className=\"flex items-center justify-between mt-2\">\r\n          {subtitle && <p className=\"text-sm text-gray-500\">{subtitle}</p>}\r\n          {trend && (\r\n            <p\r\n              className={`text-sm font-medium ${trend.positive ? 'text-green-600' : 'text-red-600'}`}\r\n            >\r\n              {trend.positive ? '+' : ''}\r\n              {trend.value}\r\n            </p>\r\n          )}\r\n        </div>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\dialog.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\drawer.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\dropdown-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\enhanced-form.tsx","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":159,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":159,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4338,4340],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":206,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":206,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":277,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":277,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7555,7558],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7555,7558],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":280,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":280,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7638,7641],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7638,7641],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":323,"column":22,"nodeType":"MemberExpression","endLine":323,"endColumn":49},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":326,"column":19,"nodeType":"MemberExpression","endLine":326,"endColumn":51},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":345,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":345,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8936,8939],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8936,8939],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":403,"column":9,"nodeType":"MemberExpression","endLine":403,"endColumn":26},{"ruleId":"@typescript-eslint/switch-exhaustiveness-check","severity":2,"message":"Switch is not exhaustive. Cases not matched: \"number\" | \"search\" | \"time\" | \"text\" | \"custom\" | \"email\" | \"url\" | \"multiselect\" | \"datetime\"","line":422,"column":13,"nodeType":"Identifier","messageId":"switchIsNotExhaustive","endLine":422,"endColumn":17,"suggestions":[{"messageId":"addMissingCases","fix":{"range":[17608,17608],"text":"case \"number\": { throw new Error('Not implemented yet: \"number\" case') }\n      case \"search\": { throw new Error('Not implemented yet: \"search\" case') }\n      case \"time\": { throw new Error('Not implemented yet: \"time\" case') }\n      case \"text\": { throw new Error('Not implemented yet: \"text\" case') }\n      case \"custom\": { throw new Error('Not implemented yet: \"custom\" case') }\n      case \"email\": { throw new Error('Not implemented yet: \"email\" case') }\n      case \"url\": { throw new Error('Not implemented yet: \"url\" case') }\n      case \"multiselect\": { throw new Error('Not implemented yet: \"multiselect\" case') }\n      case \"datetime\": { throw new Error('Not implemented yet: \"datetime\" case') }\n      "},"desc":"Add branches for missing cases."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":436,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":436,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11384,11386],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":437,"column":42,"nodeType":"MemberExpression","endLine":437,"endColumn":59},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":467,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":467,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12570,12572],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":492,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":492,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13489,13491],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":509,"column":19,"nodeType":"MemberExpression","endLine":509,"endColumn":36},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":778,"column":17,"nodeType":"Identifier","messageId":"neverNullish","endLine":778,"endColumn":24},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":781,"column":8,"nodeType":"Identifier","messageId":"neverNullish","endLine":781,"endColumn":15},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":795,"column":17,"nodeType":"Identifier","messageId":"neverNullish","endLine":795,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview enhanced-form Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { createContext, useContext, useState, useEffect, useMemo } from 'react';\r\nimport {\r\n  FormProvider as ReactHookFormProvider,\r\n  useFormContext,\r\n  type FieldValues,\r\n  type UseFormReturn,\r\n} from 'react-hook-form';\r\nimport { motion, AnimatePresence } from 'motion/react';\r\nimport type { z } from 'zod';\r\nimport {\r\n  AlertCircle,\r\n  CheckCircle,\r\n  Info,\r\n  Eye,\r\n  EyeOff,\r\n  Calendar,\r\n  Phone,\r\n  Save,\r\n  X,\r\n  Plus,\r\n  Minus,\r\n  Upload,\r\n  Loader2,\r\n} from 'lucide-react';\r\n\r\nimport { cn } from './utils';\r\nimport { Button } from './button';\r\nimport { Input } from './input';\r\nimport { Textarea } from './textarea';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './select';\r\nimport { Checkbox } from './checkbox';\r\nimport { RadioGroup, RadioGroupItem } from './radio-group';\r\nimport { Switch } from './switch';\r\nimport { Label } from './label';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './card';\r\nimport { Alert, AlertDescription } from './alert';\r\nimport { Popover, PopoverContent, PopoverTrigger } from './popover';\r\nimport { Calendar as CalendarComponent } from './calendar';\r\nimport { format } from 'date-fns';\r\nimport { tr } from 'date-fns/locale';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\n// Enhanced Form Context\r\ninterface EnhancedFormContextValue {\r\n  formId: string;\r\n  isSubmitting: boolean;\r\n  isDirty: boolean;\r\n  validationMode: 'onChange' | 'onBlur' | 'onSubmit';\r\n  showValidationIcons: boolean;\r\n  autoSave: boolean;\r\n  compactMode: boolean;\r\n}\r\n\r\nconst EnhancedFormContext = createContext<EnhancedFormContextValue | null>(null);\r\n\r\n// Enhanced Form Provider\r\ninterface EnhancedFormProviderProps<T extends FieldValues = FieldValues> {\r\n  form: UseFormReturn<T>;\r\n  onSubmit: (data: T) => Promise<void> | void;\r\n  children: React.ReactNode;\r\n  className?: string;\r\n  validationMode?: 'onChange' | 'onBlur' | 'onSubmit';\r\n  showValidationIcons?: boolean;\r\n  autoSave?: boolean;\r\n  autoSaveDelay?: number;\r\n  compactMode?: boolean;\r\n  title?: string;\r\n  description?: string;\r\n  actions?: React.ReactNode;\r\n}\r\n\r\n/**\r\n * EnhancedFormProvider function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function EnhancedFormProvider<T extends FieldValues = FieldValues>({\r\n  form,\r\n  onSubmit,\r\n  children,\r\n  className,\r\n  validationMode = 'onChange',\r\n  showValidationIcons = true,\r\n  autoSave = false,\r\n  autoSaveDelay = 2000,\r\n  compactMode = false,\r\n  title,\r\n  description,\r\n  actions,\r\n}: EnhancedFormProviderProps<T>) {\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [lastSaved, setLastSaved] = useState<Date | null>(null);\r\n  const formId = useMemo(() => `form-${Math.random().toString(36).substr(2, 9)}`, []);\r\n\r\n  const {\r\n    watch,\r\n    formState: { isDirty, errors },\r\n  } = form;\r\n  const watchedValues = watch();\r\n\r\n  // Auto-save functionality\r\n  useEffect(() => {\r\n    if (!autoSave || !isDirty) return;\r\n\r\n    const timer = setTimeout(async () => {\r\n      try {\r\n        const isValid = await form.trigger();\r\n        if (isValid) {\r\n          await onSubmit(form.getValues());\r\n          setLastSaved(new Date());\r\n        }\r\n      } catch (error) {\r\n        logger.error('Auto-save failed:', error);\r\n      }\r\n    }, autoSaveDelay);\r\n\r\n    return () => {\r\n      clearTimeout(timer);\r\n    };\r\n  }, [watchedValues, autoSave, autoSaveDelay, isDirty, form, onSubmit]);\r\n\r\n  const handleSubmit = async (data: T) => {\r\n    try {\r\n      setIsSubmitting(true);\r\n      await onSubmit(data);\r\n      setLastSaved(new Date());\r\n    } catch (error) {\r\n      logger.error('Form submission failed:', error);\r\n      throw error;\r\n    } finally {\r\n      setIsSubmitting(false);\r\n    }\r\n  };\r\n\r\n  const contextValue: EnhancedFormContextValue = {\r\n    formId,\r\n    isSubmitting,\r\n    isDirty,\r\n    validationMode,\r\n    showValidationIcons,\r\n    autoSave,\r\n    compactMode,\r\n  };\r\n\r\n  return (\r\n    <EnhancedFormContext.Provider value={contextValue}>\r\n      <ReactHookFormProvider {...form}>\r\n        <Card className={cn('w-full shadow-lg border-0 bg-white/80 backdrop-blur-sm', className)}>\r\n          {(title ?? description || autoSave) && (\r\n            <CardHeader className={cn('pb-4', compactMode && 'pb-2')}>\r\n              <div className=\"flex items-center justify-between\">\r\n                <div>\r\n                  {title && (\r\n                    <CardTitle className=\"text-xl font-semibold text-gray-900\">{title}</CardTitle>\r\n                  )}\r\n                  {description && <p className=\"text-sm text-gray-600 mt-1\">{description}</p>}\r\n                </div>\r\n\r\n                {autoSave && lastSaved && (\r\n                  <div className=\"flex items-center gap-2 text-sm text-gray-500\">\r\n                    <CheckCircle className=\"w-4 h-4 text-green-500\" />\r\n                    <span>Son kaydedilme: {format(lastSaved, 'HH:mm', { locale: tr })}</span>\r\n                  </div>\r\n                )}\r\n              </div>\r\n\r\n              {Object.keys(errors).length > 0 && (\r\n                <Alert className=\"border-red-200 bg-red-50\">\r\n                  <AlertCircle className=\"h-4 w-4 text-red-600\" />\r\n                  <AlertDescription className=\"text-red-700\">\r\n                    L├╝tfen formdaki hatalar─▒ d├╝zeltin.\r\n                  </AlertDescription>\r\n                </Alert>\r\n              )}\r\n            </CardHeader>\r\n          )}\r\n\r\n          <CardContent className={cn('space-y-6', compactMode && 'space-y-4')}>\r\n            <form onSubmit={form.handleSubmit(handleSubmit)} className=\"space-y-6\">\r\n              {children}\r\n\r\n              {actions && (\r\n                <div className=\"flex justify-end gap-3 pt-6 border-t border-gray-200\">\r\n                  {actions}\r\n                </div>\r\n              )}\r\n            </form>\r\n          </CardContent>\r\n        </Card>\r\n      </ReactHookFormProvider>\r\n    </EnhancedFormContext.Provider>\r\n  );\r\n}\r\n\r\n// Enhanced Form Field Hook\r\nexport const useEnhancedForm = () => {\r\n  const context = useContext(EnhancedFormContext);\r\n  if (!context) {\r\n    throw new Error('useEnhancedForm must be used within EnhancedFormProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\n// Field Types\r\nexport type FieldType =\r\n  | 'text'\r\n  | 'email'\r\n  | 'password'\r\n  | 'number'\r\n  | 'phone'\r\n  | 'url'\r\n  | 'textarea'\r\n  | 'select'\r\n  | 'multiselect'\r\n  | 'checkbox'\r\n  | 'radio'\r\n  | 'switch'\r\n  | 'date'\r\n  | 'datetime'\r\n  | 'time'\r\n  | 'file'\r\n  | 'currency'\r\n  | 'search'\r\n  | 'custom';\r\n\r\n/**\r\n * SelectOption Interface\r\n * \r\n * @interface SelectOption\r\n */\r\nexport interface SelectOption {\r\n  label: string;\r\n  value: string | number;\r\n  disabled?: boolean;\r\n  description?: string;\r\n  icon?: React.ReactNode;\r\n}\r\n\r\n/**\r\n * EnhancedFieldProps Interface\r\n * \r\n * @interface EnhancedFieldProps\r\n */\r\nexport interface EnhancedFieldProps {\r\n  name: string;\r\n  type: FieldType;\r\n  label?: string;\r\n  placeholder?: string;\r\n  description?: string;\r\n  required?: boolean;\r\n  disabled?: boolean;\r\n  readOnly?: boolean;\r\n  options?: SelectOption[];\r\n  validation?: z.ZodSchema;\r\n  className?: string;\r\n  size?: 'sm' | 'md' | 'lg';\r\n  icon?: React.ReactNode;\r\n  prefix?: string;\r\n  suffix?: string;\r\n  rows?: number;\r\n  multiple?: boolean;\r\n  accept?: string;\r\n  min?: number | string;\r\n  max?: number | string;\r\n  step?: number;\r\n  autoComplete?: string;\r\n  onChange?: (value: any) => void;\r\n  onFocus?: () => void;\r\n  onBlur?: () => void;\r\n  render?: (field: any) => React.ReactNode;\r\n}\r\n\r\n// Enhanced Form Field Component\r\n/**\r\n * EnhancedField function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function EnhancedField({\r\n  name,\r\n  type,\r\n  label,\r\n  placeholder,\r\n  description,\r\n  required = false,\r\n  disabled = false,\r\n  readOnly = false,\r\n  options = [],\r\n  className,\r\n  size = 'md',\r\n  icon,\r\n  prefix,\r\n  suffix,\r\n  rows = 3,\r\n  multiple = false,\r\n  accept,\r\n  min,\r\n  max,\r\n  step,\r\n  autoComplete,\r\n  onChange,\r\n  onFocus,\r\n  onBlur,\r\n  render,\r\n}: EnhancedFieldProps) {\r\n  const form = useFormContext();\r\n  const enhancedForm = useEnhancedForm();\r\n  const [showPassword, setShowPassword] = useState(false);\r\n  const [focused, setFocused] = useState(false);\r\n\r\n  const field = form.register(name);\r\n  const fieldState = form.formState.errors[name];\r\n  const error = fieldState?.message;\r\n  const invalid = !!error;\r\n  const isDirty = form.formState.dirtyFields[name];\r\n\r\n  const sizeClasses = {\r\n    sm: 'text-sm py-2',\r\n    md: 'text-base py-3',\r\n    lg: 'text-lg py-4',\r\n  };\r\n\r\n  const handleFocus = () => {\r\n    setFocused(true);\r\n    onFocus?.();\r\n  };\r\n\r\n  const handleBlur = () => {\r\n    setFocused(false);\r\n    onBlur?.();\r\n    field.onBlur();\r\n  };\r\n\r\n  const handleChange = (value: any) => {\r\n    field.onChange(value);\r\n    onChange?.(value);\r\n  };\r\n\r\n  const getValidationIcon = () => {\r\n    if (!enhancedForm.showValidationIcons || !isDirty) return null;\r\n\r\n    if (error) {\r\n      return <AlertCircle className=\"w-4 h-4 text-red-500\" />;\r\n    }\r\n\r\n    if (!invalid && form.getValues(name)) {\r\n      return <CheckCircle className=\"w-4 h-4 text-green-500\" />;\r\n    }\r\n\r\n    return null;\r\n  };\r\n\r\n  const fieldId = `${enhancedForm.formId}-${name}`;\r\n\r\n  // Custom render function\r\n  if (render) {\r\n    return (\r\n      <div className={cn('space-y-2', className)}>\r\n        {label && (\r\n          <Label htmlFor={fieldId} className=\"flex items-center gap-2\">\r\n            {icon}\r\n            {label}\r\n            {required && <span className=\"text-red-500\">*</span>}\r\n          </Label>\r\n        )}\r\n        {render(field)}\r\n        {description && <p className=\"text-sm text-gray-600\">{description}</p>}\r\n        {error && (\r\n          <motion.p\r\n            initial={{ opacity: 0, y: -10 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            className=\"text-sm text-red-600 flex items-center gap-1\"\r\n          >\r\n            <AlertCircle className=\"w-4 h-4\" />\r\n            {error.message}\r\n          </motion.p>\r\n        )}\r\n      </div>\r\n    );\r\n  }\r\n\r\n  // Render different field types\r\n  const renderField = () => {\r\n    const baseInputProps = {\r\n      ...field,\r\n      id: fieldId,\r\n      placeholder,\r\n      disabled,\r\n      readOnly,\r\n      className: cn(\r\n        'transition-all duration-200',\r\n        sizeClasses[size],\r\n        focused && 'ring-2 ring-blue-500 ring-offset-2',\r\n        error && 'border-red-500 focus:border-red-500',\r\n        !error && isDirty && 'border-green-500',\r\n        icon && 'pl-10',\r\n        (prefix ?? getValidationIcon()) && 'pl-8',\r\n        (suffix ?? type === 'password') && 'pr-10',\r\n      ),\r\n      onFocus: handleFocus,\r\n      onBlur: handleBlur,\r\n      onChange: (e: React.ChangeEvent<HTMLInputElement>) => {\r\n        handleChange(e.target.value);\r\n      },\r\n      autoComplete,\r\n      min,\r\n      max,\r\n      step,\r\n    };\r\n\r\n    switch (type) {\r\n      case 'textarea':\r\n        return (\r\n          <Textarea\r\n            {...baseInputProps}\r\n            rows={rows}\r\n            onChange={(e) => {\r\n              handleChange(e.target.value);\r\n            }}\r\n          />\r\n        );\r\n\r\n      case 'select':\r\n        return (\r\n          <Select value={form.getValues(name) || ''} onValueChange={handleChange} disabled={disabled}>\r\n            <SelectTrigger className={cn(sizeClasses[size], error && 'border-red-500')}>\r\n              <SelectValue placeholder={placeholder} />\r\n            </SelectTrigger>\r\n            <SelectContent>\r\n              {options.map((option) => (\r\n                <SelectItem\r\n                  key={option.value}\r\n                  value={String(option.value)}\r\n                  disabled={option.disabled}\r\n                >\r\n                  <div className=\"flex items-center gap-2\">\r\n                    {option.icon}\r\n                    <div>\r\n                      <div>{option.label}</div>\r\n                      {option.description && (\r\n                        <div className=\"text-xs text-gray-500\">{option.description}</div>\r\n                      )}\r\n                    </div>\r\n                  </div>\r\n                </SelectItem>\r\n              ))}\r\n            </SelectContent>\r\n          </Select>\r\n        );\r\n\r\n      case 'checkbox':\r\n        return (\r\n          <div className=\"flex items-center space-x-2\">\r\n            <Checkbox\r\n              id={fieldId}\r\n              checked={form.getValues(name) || false}\r\n              onCheckedChange={handleChange}\r\n              disabled={disabled}\r\n            />\r\n            {label && <Label htmlFor={fieldId}>{label}</Label>}\r\n          </div>\r\n        );\r\n\r\n      case 'radio':\r\n        return (\r\n          <RadioGroup value={form.getValues(name)} onValueChange={handleChange} disabled={disabled}>\r\n            {options.map((option) => (\r\n              <div key={option.value} className=\"flex items-center space-x-2\">\r\n                <RadioGroupItem value={String(option.value)} id={`${fieldId}-${option.value}`} />\r\n                <Label htmlFor={`${fieldId}-${option.value}`}>{option.label}</Label>\r\n              </div>\r\n            ))}\r\n          </RadioGroup>\r\n        );\r\n\r\n      case 'switch':\r\n        return (\r\n          <div className=\"flex items-center space-x-2\">\r\n            <Switch\r\n              id={fieldId}\r\n              checked={form.getValues(name) || false}\r\n              onCheckedChange={handleChange}\r\n              disabled={disabled}\r\n            />\r\n            {label && <Label htmlFor={fieldId}>{label}</Label>}\r\n          </div>\r\n        );\r\n\r\n      case 'date':\r\n        return (\r\n          <Popover>\r\n            <PopoverTrigger asChild>\r\n              <Button\r\n                variant=\"outline\"\r\n                className={cn(\r\n                  'w-full justify-start text-left font-normal',\r\n                  !form.getValues(name) && 'text-muted-foreground',\r\n                  sizeClasses[size],\r\n                  error && 'border-red-500',\r\n                )}\r\n              >\r\n                <Calendar className=\"mr-2 h-4 w-4\" />\r\n                {form.getValues(name) ? format(form.getValues(name), 'dd/MM/yyyy', { locale: tr }) : placeholder}\r\n              </Button>\r\n            </PopoverTrigger>\r\n            <PopoverContent className=\"w-auto p-0\">\r\n              <CalendarComponent\r\n                mode=\"single\"\r\n                selected={form.getValues(name)}\r\n                onSelect={handleChange}\r\n                initialFocus\r\n              />\r\n            </PopoverContent>\r\n          </Popover>\r\n        );\r\n\r\n      case 'currency':\r\n        return (\r\n          <div className=\"relative\">\r\n            <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500\">\r\n              Ôé║\r\n            </span>\r\n            <Input\r\n              {...baseInputProps}\r\n              type=\"number\"\r\n              className={cn(baseInputProps.className, 'pl-8')}\r\n              onChange={(e) => {\r\n                handleChange(parseFloat(e.target.value) || 0);\r\n              }}\r\n            />\r\n          </div>\r\n        );\r\n\r\n      case 'phone':\r\n        return (\r\n          <div className=\"relative\">\r\n            <Phone className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\r\n            <Input\r\n              {...baseInputProps}\r\n              type=\"tel\"\r\n              onChange={(e) => {\r\n                // Turkish phone number formatting\r\n                let value = e.target.value.replace(/\\D/g, '');\r\n                if (value.length > 10) value = value.slice(0, 10);\r\n                handleChange(value);\r\n              }}\r\n            />\r\n          </div>\r\n        );\r\n\r\n      case 'password':\r\n        return (\r\n          <div className=\"relative\">\r\n            <Input {...baseInputProps} type={showPassword ? 'text' : 'password'} />\r\n            <Button\r\n              type=\"button\"\r\n              variant=\"ghost\"\r\n              size=\"sm\"\r\n              className=\"absolute right-2 top-1/2 transform -translate-y-1/2 h-8 w-8 p-0\"\r\n              onClick={() => {\r\n                setShowPassword(!showPassword);\r\n              }}\r\n            >\r\n              {showPassword ? <EyeOff className=\"w-4 h-4\" /> : <Eye className=\"w-4 h-4\" />}\r\n            </Button>\r\n          </div>\r\n        );\r\n\r\n      case 'file':\r\n        return (\r\n          <div className=\"space-y-2\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <Button\r\n                type=\"button\"\r\n                variant=\"outline\"\r\n                className=\"gap-2\"\r\n                onClick={() => document.getElementById(fieldId)?.click()}\r\n              >\r\n                <Upload className=\"w-4 h-4\" />\r\n                Dosya Se├ğ\r\n              </Button>\r\n              {form.getValues(name) && (\r\n                <span className=\"text-sm text-gray-600\">\r\n                  {Array.isArray(form.getValues(name)) ? `${form.getValues(name).length} dosya` : form.getValues(name).name}\r\n                </span>\r\n              )}\r\n            </div>\r\n            <input\r\n              id={fieldId}\r\n              type=\"file\"\r\n              className=\"hidden\"\r\n              multiple={multiple}\r\n              accept={accept}\r\n              onChange={(e) => {\r\n                const {files} = e.target;\r\n                if (files) {\r\n                  handleChange(multiple ? Array.from(files) : files[0]);\r\n                }\r\n              }}\r\n            />\r\n          </div>\r\n        );\r\n\r\n      default:\r\n        return <Input {...baseInputProps} type={type} />;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <motion.div\r\n      initial={{ opacity: 0, y: 10 }}\r\n      animate={{ opacity: 1, y: 0 }}\r\n      className={cn('space-y-2', className)}\r\n    >\r\n      {label && type !== 'checkbox' && type !== 'switch' && (\r\n        <Label htmlFor={fieldId} className=\"flex items-center gap-2 font-medium\">\r\n          {icon}\r\n          {label}\r\n          {required && <span className=\"text-red-500\">*</span>}\r\n        </Label>\r\n      )}\r\n\r\n      <div className=\"relative\">\r\n        {prefix && (\r\n          <span className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-500 text-sm\">\r\n            {prefix}\r\n          </span>\r\n        )}\r\n\r\n        {renderField()}\r\n\r\n        {suffix && (\r\n          <span className=\"absolute right-3 top-1/2 transform -translate-y-1/2 text-gray-500 text-sm\">\r\n            {suffix}\r\n          </span>\r\n        )}\r\n\r\n        {getValidationIcon() && (\r\n          <div className=\"absolute right-3 top-1/2 transform -translate-y-1/2\">\r\n            {getValidationIcon()}\r\n          </div>\r\n        )}\r\n      </div>\r\n\r\n      {description && !error && (\r\n        <p className=\"text-sm text-gray-600 flex items-center gap-1\">\r\n          <Info className=\"w-3 h-3\" />\r\n          {description}\r\n        </p>\r\n      )}\r\n\r\n      <AnimatePresence>\r\n        {error && (\r\n          <motion.p\r\n            initial={{ opacity: 0, y: -10 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            exit={{ opacity: 0, y: -10 }}\r\n            className=\"text-sm text-red-600 flex items-center gap-1\"\r\n          >\r\n            <AlertCircle className=\"w-4 h-4\" />\r\n            {error.message}\r\n          </motion.p>\r\n        )}\r\n      </AnimatePresence>\r\n    </motion.div>\r\n  );\r\n}\r\n\r\n// Form Section Component\r\ninterface FormSectionProps {\r\n  title?: string;\r\n  description?: string;\r\n  children: React.ReactNode;\r\n  collapsible?: boolean;\r\n  defaultCollapsed?: boolean;\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * FormSection function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function FormSection({\r\n  title,\r\n  description,\r\n  children,\r\n  collapsible = false,\r\n  defaultCollapsed = false,\r\n  className,\r\n}: FormSectionProps) {\r\n  const [collapsed, setCollapsed] = useState(defaultCollapsed);\r\n\r\n  return (\r\n    <div className={cn('space-y-4', className)}>\r\n      {title && (\r\n        <div className=\"flex items-center justify-between\">\r\n          <div>\r\n            <h3 className=\"text-lg font-medium text-gray-900\">{title}</h3>\r\n            {description && <p className=\"text-sm text-gray-600\">{description}</p>}\r\n          </div>\r\n          {collapsible && (\r\n            <Button\r\n              type=\"button\"\r\n              variant=\"ghost\"\r\n              size=\"sm\"\r\n              onClick={() => {\r\n                setCollapsed(!collapsed);\r\n              }}\r\n            >\r\n              {collapsed ? <Plus className=\"w-4 h-4\" /> : <Minus className=\"w-4 h-4\" />}\r\n            </Button>\r\n          )}\r\n        </div>\r\n      )}\r\n\r\n      <AnimatePresence>\r\n        {!collapsed && (\r\n          <motion.div\r\n            initial={collapsible ? { height: 0, opacity: 0 } : false}\r\n            animate={{ height: 'auto', opacity: 1 }}\r\n            exit={{ height: 0, opacity: 0 }}\r\n            className=\"space-y-4\"\r\n          >\r\n            {children}\r\n          </motion.div>\r\n        )}\r\n      </AnimatePresence>\r\n    </div>\r\n  );\r\n}\r\n\r\n// Form Actions\r\ninterface FormActionsProps {\r\n  loading?: boolean;\r\n  submitLabel?: string;\r\n  cancelLabel?: string;\r\n  onCancel?: () => void;\r\n  showCancel?: boolean;\r\n  variant?: 'default' | 'split' | 'right';\r\n  additionalActions?: React.ReactNode;\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * FormActions function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function FormActions({\r\n  loading = false,\r\n  submitLabel = 'Kaydet',\r\n  cancelLabel = '─░ptal',\r\n  onCancel,\r\n  showCancel = true,\r\n  variant = 'right',\r\n  additionalActions,\r\n  className,\r\n}: FormActionsProps) {\r\n  const enhancedForm = useEnhancedForm();\r\n\r\n  const submitButton = (\r\n    <Button\r\n      type=\"submit\"\r\n      disabled={loading ?? enhancedForm.isSubmitting}\r\n      className=\"gap-2 min-w-24\"\r\n    >\r\n      {loading ?? enhancedForm.isSubmitting ? (\r\n        <Loader2 className=\"w-4 h-4 animate-spin\" />\r\n      ) : (\r\n        <Save className=\"w-4 h-4\" />\r\n      )}\r\n      {submitLabel}\r\n    </Button>\r\n  );\r\n\r\n  const cancelButton = showCancel && (\r\n    <Button\r\n      type=\"button\"\r\n      variant=\"outline\"\r\n      onClick={onCancel}\r\n      disabled={loading ?? enhancedForm.isSubmitting}\r\n    >\r\n      <X className=\"w-4 h-4 mr-2\" />\r\n      {cancelLabel}\r\n    </Button>\r\n  );\r\n\r\n  if (variant === 'split') {\r\n    return (\r\n      <div className={cn('flex justify-between items-center', className)}>\r\n        <div className=\"flex gap-2\">{additionalActions}</div>\r\n        <div className=\"flex gap-2\">\r\n          {cancelButton}\r\n          {submitButton}\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div className={cn('flex justify-end items-center gap-2', className)}>\r\n      {additionalActions}\r\n      {cancelButton}\r\n      {submitButton}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Export all components with unique names\r\nexport {\r\n  EnhancedFormProvider as FormProvider,\r\n  EnhancedField as Field,\r\n  FormSection as EnhancedFormSection,\r\n  FormActions as EnhancedFormActions,\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\enhanced-table.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":159,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":159,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4076,4079],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4076,4079],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":187,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":187,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4557,4560],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4557,4560],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":220,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":220,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5556,5559],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5556,5559],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":249,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6183,6186],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6183,6186],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":249,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6190,6193],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6190,6193],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'showFooter' is assigned a value but never used.","line":281,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":281,"endColumn":13},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'showFooter' is assigned a value but never used. Allowed unused args must match /^_/u.","line":281,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":281,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":287,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":287,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7093,7096],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7093,7096],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'columnWidths' is assigned a value but never used.","line":293,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":293,"endColumn":22},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'columnWidths' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":293,"column":10,"nodeType":null,"messageId":"unusedVar","endLine":293,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'setColumnWidths' is assigned a value but never used.","line":293,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":293,"endColumn":39},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'setColumnWidths' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":293,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":293,"endColumn":39},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":297,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":297,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7655,7658],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7655,7658],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":331,"column":30,"nodeType":"MemberExpression","endLine":331,"endColumn":38},{"ruleId":"@typescript-eslint/switch-exhaustiveness-check","severity":2,"message":"Switch is not exhaustive. Cases not matched: undefined | \"text\" | \"custom\" | \"email\" | \"phone\"","line":333,"column":21,"nodeType":"MemberExpression","messageId":"switchIsNotExhaustive","endLine":333,"endColumn":32,"suggestions":[{"messageId":"addMissingCases","fix":{"range":[9786,9786],"text":"case undefined: { throw new Error('Not implemented yet: undefined case') }\n              case \"text\": { throw new Error('Not implemented yet: \"text\" case') }\n              case \"custom\": { throw new Error('Not implemented yet: \"custom\" case') }\n              case \"email\": { throw new Error('Not implemented yet: \"email\" case') }\n              case \"phone\": { throw new Error('Not implemented yet: \"phone\" case') }\n              "},"desc":"Add branches for missing cases."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":445,"column":70,"nodeType":"MemberExpression","endLine":445,"endColumn":90},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":460,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":460,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13046,13049],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13046,13049],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":464,"column":21,"nodeType":"MemberExpression","endLine":464,"endColumn":44},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":474,"column":88,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":474,"endColumn":91,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13466,13469],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13466,13469],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":486,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":486,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13787,13790],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13787,13790],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/switch-exhaustiveness-check","severity":2,"message":"Switch is not exhaustive. Cases not matched: undefined | \"number\" | \"text\" | \"custom\"","line":495,"column":15,"nodeType":"MemberExpression","messageId":"switchIsNotExhaustive","endLine":495,"endColumn":26,"suggestions":[{"messageId":"addMissingCases","fix":{"range":[15092,15092],"text":"case undefined: { throw new Error('Not implemented yet: undefined case') }\n        case \"number\": { throw new Error('Not implemented yet: \"number\" case') }\n        case \"text\": { throw new Error('Not implemented yet: \"text\" case') }\n        case \"custom\": { throw new Error('Not implemented yet: \"custom\" case') }\n        "},"desc":"Add branches for missing cases."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":596,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":596,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17279,17282],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17279,17282],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":597,"column":74,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":597,"endColumn":76,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[17389,17391],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'value' is defined but never used.","line":733,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":733,"endColumn":36},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'value' is defined but never used. Allowed unused args must match /^_/u.","line":733,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":733,"endColumn":36},{"ruleId":"@typescript-eslint/no-empty-function","severity":1,"message":"Unexpected empty arrow function.","line":733,"column":79,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":733,"endColumn":81,"suggestions":[{"messageId":"suggestComment","data":{"name":"arrow function"},"fix":{"range":[22111,22111],"text":" /* empty */ "},"desc":"Add comment inside empty arrow function."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":867,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":867,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[27404,27406],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":894,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":894,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[28679,28681],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":977,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":977,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[31652,31654],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":1007,"column":56,"nodeType":"MemberExpression","endLine":1007,"endColumn":79},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":1026,"column":31,"nodeType":"MemberExpression","endLine":1026,"endColumn":54},{"ruleId":"@typescript-eslint/no-confusing-void-expression","severity":2,"message":"Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.","line":1040,"column":63,"nodeType":"CallExpression","messageId":"invalidVoidExprArrow","endLine":1040,"endColumn":95},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":1048,"column":47,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":1048,"endColumn":49,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[35063,35065],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":1063,"column":67,"nodeType":"MemberExpression","endLine":1063,"endColumn":90},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":1088,"column":49,"nodeType":"MemberExpression","endLine":1088,"endColumn":72},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":1106,"column":33,"nodeType":"MemberExpression","endLine":1106,"endColumn":56},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":1117,"column":66,"nodeType":"MemberExpression","endLine":1117,"endColumn":89},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":1176,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":1176,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[41379,41381],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":31,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview enhanced-table Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\n'use client';\r\n\r\nimport React, { useState, useEffect, useMemo, useCallback, useRef } from 'react';\r\nimport { motion, AnimatePresence } from 'motion/react';\r\nimport {\r\n  Search,\r\n  Filter,\r\n  MoreVertical,\r\n  Edit,\r\n  Download,\r\n  RefreshCw,\r\n  CheckSquare,\r\n  ArrowUpDown,\r\n  Plus,\r\n  Settings,\r\n  X,\r\n  Calendar,\r\n  Phone,\r\n  Mail,\r\n  Hash,\r\n  DollarSign,\r\n  Zap,\r\n  Save,\r\n  ChevronLeft,\r\n  ChevronRight,\r\n  ChevronsLeft,\r\n  ChevronsRight,\r\n  Columns,\r\n  SortAsc,\r\n  SortDesc,\r\n  RotateCcw,\r\n  FileText,\r\n  BarChart3,\r\n  AlertCircle,\r\n} from 'lucide-react';\r\n\r\nimport { Button } from './button';\r\nimport { Input } from './input';\r\nimport { Card, CardContent, CardHeader, CardTitle } from './card';\r\nimport { Badge } from './badge';\r\nimport { Checkbox } from './checkbox';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from './select';\r\nimport { Popover, PopoverContent, PopoverTrigger } from './popover';\r\nimport {\r\n  DropdownMenu,\r\n  DropdownMenuContent,\r\n  DropdownMenuItem,\r\n  DropdownMenuTrigger,\r\n} from './dropdown-menu';\r\nimport { Table, TableBody, TableCell, TableHead, TableHeader, TableRow } from './table';\r\nimport { Switch } from './switch';\r\nimport { Label } from './label';\r\nimport { Textarea } from './textarea';\r\nimport { cn } from './utils';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\n// Enhanced Table Types - Improved with TypeScript best practices\r\nexport type TableColumnType =\r\n  | 'text'\r\n  | 'number'\r\n  | 'date'\r\n  | 'badge'\r\n  | 'currency'\r\n  | 'phone'\r\n  | 'email'\r\n  | 'boolean'\r\n  | 'custom';\r\n\r\nexport type TableAlignment = 'left' | 'center' | 'right';\r\nexport type TableAggregation = 'sum' | 'avg' | 'count' | 'min' | 'max';\r\n\r\n/**\r\n * TableColumn Interface\r\n * \r\n * @interface TableColumn\r\n */\r\nexport interface TableColumn<T = Record<string, unknown>> {\r\n  readonly key: keyof T;\r\n  readonly label: string;\r\n  readonly type?: TableColumnType;\r\n  readonly sortable?: boolean;\r\n  readonly filterable?: boolean;\r\n  readonly editable?: boolean;\r\n  readonly width?: string;\r\n  readonly minWidth?: string;\r\n  readonly maxWidth?: string;\r\n  readonly align?: TableAlignment;\r\n  readonly render?: (value: T[keyof T], row: T, index: number) => React.ReactNode;\r\n  readonly format?: (value: T[keyof T]) => string;\r\n  readonly className?: string;\r\n  readonly headerClassName?: string;\r\n  readonly sticky?: boolean;\r\n  readonly resizable?: boolean;\r\n  readonly aggregation?: TableAggregation;\r\n}\r\n\r\nexport type TableActionVariant = 'default' | 'destructive' | 'outline' | 'ghost';\r\n\r\n/**\r\n * TableAction Interface\r\n * \r\n * @interface TableAction\r\n */\r\nexport interface TableAction<T = Record<string, unknown>> {\r\n  readonly label: string;\r\n  readonly icon?: React.ReactNode;\r\n  readonly onClick: (row: T, index: number) => void | Promise<void>;\r\n  readonly variant?: TableActionVariant;\r\n  readonly permission?: string;\r\n  readonly condition?: (row: T) => boolean;\r\n  readonly loading?: boolean;\r\n}\r\n\r\nexport type BulkActionVariant = 'default' | 'destructive' | 'outline';\r\n\r\n/**\r\n * BulkActionConfirmation Interface\r\n * \r\n * @interface BulkActionConfirmation\r\n */\r\n/**\r\n * BulkAction Interface\r\n * \r\n * @interface BulkAction\r\n */\r\nexport interface BulkActionConfirmation {\r\n  readonly title: string;\r\n  readonly description: string;\r\n}\r\n\r\nexport interface BulkAction<T = Record<string, unknown>> {\r\n  readonly label: string;\r\n  readonly icon?: React.ReactNode;\r\n  readonly onClick: (\r\n    selectedRows: readonly T[],\r\n    selectedIndices: readonly number[],\r\n  ) => Promise<void> | void;\r\n  readonly variant?: BulkActionVariant;\r\n  readonly permission?: string;\r\n  readonly confirmation?: BulkActionConfirmation;\r\n}\r\n\r\n/**\r\n * TableFilter Interface\r\n * \r\n * @interface TableFilter\r\n */\r\nexport interface TableFilter {\r\n  key: string;\r\n  label: string;\r\n  type: 'text' | 'select' | 'date' | 'daterange' | 'number' | 'numberrange' | 'boolean';\r\n  options?: { label: string; value: any }[];\r\n  placeholder?: string;\r\n  multiple?: boolean;\r\n}\r\n\r\n/**\r\n * SortConfig Interface\r\n * \r\n * @interface SortConfig\r\n */\r\nexport interface SortConfig {\r\n  key: string;\r\n  direction: 'asc' | 'desc';\r\n}\r\n\r\n/**\r\n * PaginationConfig Interface\r\n * \r\n * @interface PaginationConfig\r\n */\r\nexport interface PaginationConfig {\r\n  page: number;\r\n  pageSize: number;\r\n  total: number;\r\n  showSizeChanger?: boolean;\r\n  pageSizeOptions?: number[];\r\n}\r\n\r\ninterface EnhancedTableProps<T = any> {\r\n  data: T[];\r\n  columns: TableColumn<T>[];\r\n  title?: string;\r\n  description?: string;\r\n  searchable?: boolean;\r\n  sortable?: boolean;\r\n  filterable?: boolean;\r\n  selectable?: boolean;\r\n  editable?: boolean;\r\n  exportable?: boolean;\r\n  actions?: TableAction<T>[];\r\n  bulkActions?: BulkAction<T>[];\r\n  filters?: TableFilter[];\r\n  pagination?: PaginationConfig;\r\n  loading?: boolean;\r\n  refreshing?: boolean;\r\n  error?: string;\r\n  emptyState?: {\r\n    title: string;\r\n    description: string;\r\n    icon?: React.ReactNode;\r\n    action?: {\r\n      label: string;\r\n      onClick: () => void;\r\n    };\r\n  };\r\n  onRowClick?: (row: T, index: number) => void;\r\n  onRowEdit?: (row: T, index: number, changes: Partial<T>) => Promise<void> | void;\r\n  onRefresh?: () => void;\r\n  onExport?: (data: T[], format: 'csv' | 'xlsx' | 'pdf') => void;\r\n  onPaginationChange?: (page: number, pageSize: number) => void;\r\n  onSortChange?: (sort: SortConfig | null) => void;\r\n  onFilterChange?: (filters: Record<string, any>) => void;\r\n  className?: string;\r\n  tableClassName?: string;\r\n  density?: 'compact' | 'normal' | 'comfortable';\r\n  striped?: boolean;\r\n  bordered?: boolean;\r\n  hoverable?: boolean;\r\n  showFooter?: boolean;\r\n}\r\n\r\nconst columnTypeIcons = {\r\n  text: FileText,\r\n  number: Hash,\r\n  date: Calendar,\r\n  badge: Zap,\r\n  currency: DollarSign,\r\n  phone: Phone,\r\n  email: Mail,\r\n  boolean: CheckSquare,\r\n  custom: Settings,\r\n};\r\n\r\n// Enhanced Table Component\r\n/**\r\n * EnhancedTable function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function EnhancedTable<T extends Record<string, any> = any>({\r\n  data,\r\n  columns,\r\n  title,\r\n  description,\r\n  searchable = true,\r\n  sortable = true,\r\n  filterable = true,\r\n  selectable = false,\r\n  editable = false,\r\n  exportable = false,\r\n  actions = [],\r\n  bulkActions = [],\r\n  filters = [],\r\n  pagination,\r\n  loading = false,\r\n  refreshing = false,\r\n  error,\r\n  emptyState,\r\n  onRowClick,\r\n  onRowEdit,\r\n  onRefresh,\r\n  onExport,\r\n  onPaginationChange,\r\n  onSortChange,\r\n  onFilterChange,\r\n  className,\r\n  tableClassName,\r\n  density = 'normal',\r\n  striped = true,\r\n  bordered = false,\r\n  hoverable = true,\r\n  showFooter = false,\r\n}: EnhancedTableProps<T>) {\r\n  // State Management\r\n  const [searchTerm, setSearchTerm] = useState('');\r\n  const [sortConfig, setSortConfig] = useState<SortConfig | null>(null);\r\n  const [selectedRows, setSelectedRows] = useState<Set<number>>(new Set());\r\n  const [activeFilters, setActiveFilters] = useState<Record<string, any>>({});\r\n  const [showFilters, setShowFilters] = useState(false);\r\n  const [showColumnSettings, setShowColumnSettings] = useState(false);\r\n  const [columnVisibility, setColumnVisibility] = useState<Record<string, boolean>>(\r\n    columns.reduce((acc, col) => ({ ...acc, [col.key as string]: true }), {}),\r\n  );\r\n  const [columnWidths, setColumnWidths] = useState<Record<string, number>>({});\r\n  const [editingCell, setEditingCell] = useState<{ rowIndex: number; columnKey: string } | null>(\r\n    null,\r\n  );\r\n  const [editingValue, setEditingValue] = useState<any>('');\r\n  const [bulkActionLoading, setBulkActionLoading] = useState<string | null>(null);\r\n\r\n  const tableRef = useRef<HTMLDivElement>(null);\r\n\r\n  // Density styles\r\n  const densityClasses = {\r\n    compact: 'py-1 px-2 text-sm',\r\n    normal: 'py-3 px-4',\r\n    comfortable: 'py-4 px-6 text-base',\r\n  };\r\n\r\n  // Data Processing\r\n  const processedData = useMemo(() => {\r\n    let filtered = [...data];\r\n\r\n    // Search filter\r\n    if (searchTerm.trim()) {\r\n      const term = searchTerm.toLowerCase().trim();\r\n      filtered = filtered.filter((row) =>\r\n        columns.some((col) => {\r\n          const value = row[col.key as string];\r\n          if (value == null) return false;\r\n          return String(value).toLowerCase().includes(term);\r\n        }),\r\n      );\r\n    }\r\n\r\n    // Advanced filters\r\n    Object.entries(activeFilters).forEach(([key, value]) => {\r\n      if (value != null && value !== '') {\r\n        const column = columns.find((col) => col.key === key);\r\n        if (column) {\r\n          filtered = filtered.filter((row) => {\r\n            const rowValue = row[key];\r\n\r\n            switch (column.type) {\r\n              case 'date':\r\n                if (Array.isArray(value)) {\r\n                  const [start, end] = value;\r\n                  const date = new Date(rowValue);\r\n                  return date >= new Date(start) && date <= new Date(end);\r\n                }\r\n                return new Date(rowValue).toDateString() === new Date(value).toDateString();\r\n              case 'number':\r\n              case 'currency':\r\n                if (Array.isArray(value)) {\r\n                  const [min, max] = value;\r\n                  const num = Number(rowValue);\r\n                  return num >= min && num <= max;\r\n                }\r\n                return Number(rowValue) === Number(value);\r\n              case 'boolean':\r\n                return Boolean(rowValue) === Boolean(value);\r\n              case 'badge':\r\n                return Array.isArray(value)\r\n                  ? value.includes(String(rowValue))\r\n                  : String(rowValue).toLowerCase() === String(value).toLowerCase();\r\n              default:\r\n                return String(rowValue).toLowerCase().includes(String(value).toLowerCase());\r\n            }\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    // Sorting\r\n    if (sortConfig) {\r\n      filtered.sort((a, b) => {\r\n        const aValue = a[sortConfig.key];\r\n        const bValue = b[sortConfig.key];\r\n\r\n        if (aValue === bValue) return 0;\r\n\r\n        const column = columns.find((col) => col.key === sortConfig.key);\r\n\r\n        if (column?.type === 'number' || column?.type === 'currency') {\r\n          const comparison = Number(aValue ?? 0) - Number(bValue ?? 0);\r\n          return sortConfig.direction === 'asc' ? comparison : -comparison;\r\n        }\r\n\r\n        if (column?.type === 'date') {\r\n          const comparison = new Date(aValue ?? 0).getTime() - new Date(bValue ?? 0).getTime();\r\n          return sortConfig.direction === 'asc' ? comparison : -comparison;\r\n        }\r\n\r\n        const comparison = String(aValue ?? '').localeCompare(String(bValue ?? ''), 'tr-TR');\r\n        return sortConfig.direction === 'asc' ? comparison : -comparison;\r\n      });\r\n    }\r\n\r\n    return filtered;\r\n  }, [data, searchTerm, activeFilters, sortConfig, columns]);\r\n\r\n  // Pagination\r\n  const paginatedData = useMemo(() => {\r\n    if (!pagination) return processedData;\r\n\r\n    const start = (pagination.page - 1) * pagination.pageSize;\r\n    const end = start + pagination.pageSize;\r\n    return processedData.slice(start, end);\r\n  }, [processedData, pagination]);\r\n\r\n  // Event Handlers\r\n  const handleSort = useCallback(\r\n    (columnKey: string) => {\r\n      if (!sortable) return;\r\n\r\n      const newSortConfig: SortConfig | null = (() => {\r\n        if (sortConfig?.key === columnKey) {\r\n          return sortConfig.direction === 'asc' ? { key: columnKey, direction: 'desc' } : null;\r\n        }\r\n        return { key: columnKey, direction: 'asc' };\r\n      })();\r\n\r\n      setSortConfig(newSortConfig);\r\n      onSortChange?.(newSortConfig);\r\n    },\r\n    [sortable, sortConfig, onSortChange],\r\n  );\r\n\r\n  const handleSelectRow = useCallback((index: number, checked: boolean) => {\r\n    setSelectedRows((prev) => {\r\n      const newSet = new Set(prev);\r\n      if (checked) {\r\n        newSet.add(index);\r\n      } else {\r\n        newSet.delete(index);\r\n      }\r\n      return newSet;\r\n    });\r\n  }, []);\r\n\r\n  const handleSelectAll = useCallback(\r\n    (checked: boolean) => {\r\n      if (checked) {\r\n        setSelectedRows(new Set(paginatedData.map((_, index) => index)));\r\n      } else {\r\n        setSelectedRows(new Set());\r\n      }\r\n    },\r\n    [paginatedData],\r\n  );\r\n\r\n  const handleBulkAction = useCallback(\r\n    async (action: BulkAction<T>) => {\r\n      try {\r\n        setBulkActionLoading(action.label);\r\n        const selectedData = Array.from(selectedRows).map((index) => paginatedData[index]);\r\n        const selectedIndices = Array.from(selectedRows);\r\n\r\n        await action.onClick(selectedData, selectedIndices);\r\n        setSelectedRows(new Set());\r\n      } catch (error) {\r\n        logger.error('Bulk action failed:', error);\r\n      } finally {\r\n        setBulkActionLoading(null);\r\n      }\r\n    },\r\n    [selectedRows, paginatedData],\r\n  );\r\n\r\n  const handleCellEdit = useCallback(\r\n    async (rowIndex: number, columnKey: string, value: any) => {\r\n      if (!onRowEdit) return;\r\n\r\n      try {\r\n        const row = paginatedData[rowIndex];\r\n        await onRowEdit(row, rowIndex, { [columnKey]: value });\r\n        setEditingCell(null);\r\n      } catch (error) {\r\n        logger.error('Cell edit failed:', error);\r\n      }\r\n    },\r\n    [paginatedData, onRowEdit],\r\n  );\r\n\r\n  const startEditing = useCallback((rowIndex: number, columnKey: string, currentValue: any) => {\r\n    setEditingCell({ rowIndex, columnKey });\r\n    setEditingValue(currentValue);\r\n  }, []);\r\n\r\n  const cancelEditing = useCallback(() => {\r\n    setEditingCell(null);\r\n    setEditingValue('');\r\n  }, []);\r\n\r\n  // Cell Value Formatting\r\n  const formatCellValue = useCallback(\r\n    (column: TableColumn<T>, value: any, row: T, index: number) => {\r\n      if (column.render) {\r\n        return column.render(value, row, index);\r\n      }\r\n\r\n      if (column.format) {\r\n        return column.format(value);\r\n      }\r\n\r\n      switch (column.type) {\r\n        case 'currency':\r\n          return `Ôé║${Number(value ?? 0).toLocaleString('tr-TR', { minimumFractionDigits: 2 })}`;\r\n        case 'date':\r\n          return value ? new Date(value).toLocaleDateString('tr-TR') : '-';\r\n        case 'phone':\r\n          return value ? value.replace(/(\\d{3})(\\d{3})(\\d{4})/, '($1) $2-$3') : '-';\r\n        case 'email':\r\n          return value ? (\r\n            <a href={`mailto:${value}`} className=\"text-blue-600 hover:underline\">\r\n              {value}\r\n            </a>\r\n          ) : (\r\n            '-'\r\n          );\r\n        case 'boolean':\r\n          return value ? (\r\n            <Badge variant=\"default\" className=\"text-xs\">\r\n              Evet\r\n            </Badge>\r\n          ) : (\r\n            <Badge variant=\"secondary\" className=\"text-xs\">\r\n              Hay─▒r\r\n            </Badge>\r\n          );\r\n        case 'badge':\r\n          const badgeVariant = getBadgeVariant(value);\r\n          return (\r\n            <Badge variant={badgeVariant} className=\"text-xs\">\r\n              {value}\r\n            </Badge>\r\n          );\r\n        default:\r\n          return value ?? '-';\r\n      }\r\n    },\r\n    [],\r\n  );\r\n\r\n  const getBadgeVariant = (value: string): 'default' | 'destructive' | 'outline' | 'secondary' => {\r\n    const lowerValue = String(value).toLowerCase();\r\n    if (\r\n      lowerValue.includes('aktif') ||\r\n      lowerValue.includes('onayland─▒') ||\r\n      lowerValue.includes('ba┼şar─▒l─▒')\r\n    )\r\n      return 'default';\r\n    if (lowerValue.includes('bekleyen') || lowerValue.includes('pending')) return 'secondary';\r\n    if (\r\n      lowerValue.includes('reddedildi') ||\r\n      lowerValue.includes('iptal') ||\r\n      lowerValue.includes('hata')\r\n    )\r\n      return 'destructive';\r\n    return 'outline';\r\n  };\r\n\r\n  // Export functionality\r\n  const handleExport = useCallback(\r\n    (format: 'csv' | 'xlsx' | 'pdf') => {\r\n      if (onExport) {\r\n        onExport(processedData, format);\r\n      } else {\r\n        // Default CSV export\r\n        if (format === 'csv') {\r\n          const headers = columns\r\n            .filter((col) => columnVisibility[col.key as string])\r\n            .map((col) => col.label);\r\n          const csvContent = [\r\n            headers.join(','),\r\n            ...processedData.map((row) =>\r\n              columns\r\n                .filter((col) => columnVisibility[col.key as string])\r\n                .map((col) => {\r\n                  const value = row[col.key as string];\r\n                  return `\"${String(value ?? '').replace(/\"/g, '\"\"')}\"`;\r\n                })\r\n                .join(','),\r\n            ),\r\n          ].join('\\n');\r\n\r\n          const blob = new Blob([csvContent], { type: 'text/csv' });\r\n          const url = URL.createObjectURL(blob);\r\n          const a = document.createElement('a');\r\n          a.href = url;\r\n          a.download = `${title ?? 'data'}.csv`;\r\n          a.click();\r\n          URL.revokeObjectURL(url);\r\n        }\r\n      }\r\n    },\r\n    [processedData, columns, columnVisibility, title, onExport],\r\n  );\r\n\r\n  // Filter change handler\r\n  useEffect(() => {\r\n    onFilterChange?.(activeFilters);\r\n  }, [activeFilters, onFilterChange]);\r\n\r\n  // Render cell content with editing support\r\n  const renderCell = useCallback(\r\n    (column: TableColumn<T>, value: any, row: T, rowIndex: number) => {\r\n      const isEditing = editingCell?.rowIndex === rowIndex && editingCell?.columnKey === column.key;\r\n\r\n      if (isEditing && column.editable) {\r\n        return (\r\n          <div className=\"flex items-center gap-1\">\r\n            {column.type === 'boolean' ? (\r\n              <Switch checked={editingValue} onCheckedChange={setEditingValue} autoFocus />\r\n            ) : column.type === 'textarea' ? (\r\n              <Textarea\r\n                value={editingValue}\r\n                onChange={(e) => {\r\n                  setEditingValue(e.target.value);\r\n                }}\r\n                className=\"min-h-[60px]\"\r\n                autoFocus\r\n              />\r\n            ) : (\r\n              <Input\r\n                type={column.type === 'number' || column.type === 'currency' ? 'number' : 'text'}\r\n                value={editingValue}\r\n                onChange={(e) => {\r\n                  setEditingValue(e.target.value);\r\n                }}\r\n                className=\"w-full\"\r\n                autoFocus\r\n                onKeyDown={(e) => {\r\n                  if (e.key === 'Enter') {\r\n                    handleCellEdit(rowIndex, column.key as string, editingValue);\r\n                  } else if (e.key === 'Escape') {\r\n                    cancelEditing();\r\n                  }\r\n                }}\r\n              />\r\n            )}\r\n            <div className=\"flex gap-1\">\r\n              <Button\r\n                size=\"sm\"\r\n                variant=\"ghost\"\r\n                className=\"h-6 w-6 p-0\"\r\n                onClick={() => handleCellEdit(rowIndex, column.key as string, editingValue)}\r\n              >\r\n                <Save className=\"w-3 h-3\" />\r\n              </Button>\r\n              <Button size=\"sm\" variant=\"ghost\" className=\"h-6 w-6 p-0\" onClick={cancelEditing}>\r\n                <X className=\"w-3 h-3\" />\r\n              </Button>\r\n            </div>\r\n          </div>\r\n        );\r\n      }\r\n\r\n      return (\r\n        <div\r\n          className={cn(\r\n            'flex items-center gap-2',\r\n            column.editable && editable && 'cursor-pointer hover:bg-gray-50 rounded px-1',\r\n          )}\r\n          onClick={() => {\r\n            if (column.editable && editable) {\r\n              startEditing(rowIndex, column.key as string, value);\r\n            }\r\n          }}\r\n        >\r\n          {formatCellValue(column, value, row, rowIndex)}\r\n          {column.editable && editable && (\r\n            <Edit className=\"w-3 h-3 text-gray-400 opacity-0 group-hover:opacity-100\" />\r\n          )}\r\n        </div>\r\n      );\r\n    },\r\n    [\r\n      editingCell,\r\n      editingValue,\r\n      editable,\r\n      formatCellValue,\r\n      handleCellEdit,\r\n      cancelEditing,\r\n      startEditing,\r\n    ],\r\n  );\r\n\r\n  if (loading) {\r\n    return (\r\n      <Card className={cn('w-full shadow-lg border-0 bg-white/80 backdrop-blur-sm', className)}>\r\n        <CardHeader>\r\n          <div className=\"animate-pulse space-y-3\">\r\n            <div className=\"h-6 bg-gray-200 rounded w-1/4\" />\r\n            <div className=\"h-4 bg-gray-200 rounded w-1/2\" />\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          <div className=\"animate-pulse space-y-4\">\r\n            {[...Array(5)].map((_, i) => (\r\n              <div key={i} className=\"h-12 bg-gray-200 rounded\" />\r\n            ))}\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  if (error) {\r\n    return (\r\n      <Card className={cn('w-full shadow-lg border-0 bg-white/80 backdrop-blur-sm', className)}>\r\n        <CardContent className=\"p-8 text-center\">\r\n          <div className=\"text-red-500 mb-4\">\r\n            <AlertCircle className=\"w-12 h-12 mx-auto mb-2\" />\r\n            <h3 className=\"text-lg font-medium\">Veri Y├╝klenemiyor</h3>\r\n            <p className=\"text-sm text-gray-600\">{error}</p>\r\n          </div>\r\n          {onRefresh && (\r\n            <Button onClick={onRefresh} variant=\"outline\">\r\n              <RefreshCw className=\"w-4 h-4 mr-2\" />\r\n              Tekrar Dene\r\n            </Button>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Card className={cn('w-full shadow-lg border-0 bg-white/80 backdrop-blur-sm', className)}>\r\n      <CardHeader className=\"pb-4\">\r\n        <div className=\"flex flex-col lg:flex-row lg:items-center lg:justify-between gap-4\">\r\n          <div>\r\n            {title && (\r\n              <CardTitle className=\"text-xl font-semibold text-gray-900\">{title}</CardTitle>\r\n            )}\r\n            {description && <p className=\"text-sm text-gray-600 mt-1\">{description}</p>}\r\n          </div>\r\n\r\n          <div className=\"flex items-center gap-2 flex-wrap\">\r\n            {/* Density Control */}\r\n            <Select\r\n              value={density}\r\n              onValueChange={(value: 'compact' | 'normal' | 'comfortable') => {}}\r\n            >\r\n              <SelectTrigger className=\"w-32\">\r\n                <SelectValue />\r\n              </SelectTrigger>\r\n              <SelectContent>\r\n                <SelectItem value=\"compact\">S─▒k─▒┼ş─▒k</SelectItem>\r\n                <SelectItem value=\"normal\">Normal</SelectItem>\r\n                <SelectItem value=\"comfortable\">Rahat</SelectItem>\r\n              </SelectContent>\r\n            </Select>\r\n\r\n            {/* Column Settings */}\r\n            <Popover open={showColumnSettings} onOpenChange={setShowColumnSettings}>\r\n              <PopoverTrigger asChild>\r\n                <Button variant=\"outline\" size=\"sm\">\r\n                  <Columns className=\"w-4 h-4\" />\r\n                </Button>\r\n              </PopoverTrigger>\r\n              <PopoverContent className=\"w-64\">\r\n                <div className=\"space-y-2\">\r\n                  <h4 className=\"font-medium text-sm\">S├╝tun G├Âr├╝n├╝rl├╝─ş├╝</h4>\r\n                  {columns.map((column) => (\r\n                    <div key={column.key as string} className=\"flex items-center space-x-2\">\r\n                      <Checkbox\r\n                        id={column.key as string}\r\n                        checked={columnVisibility[column.key as string]}\r\n                        onCheckedChange={(checked) => {\r\n                          setColumnVisibility((prev) => ({\r\n                            ...prev,\r\n                            [column.key as string]: checked as boolean,\r\n                          }));\r\n                        }}\r\n                      />\r\n                      <Label htmlFor={column.key as string} className=\"text-sm\">\r\n                        {column.label}\r\n                      </Label>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </PopoverContent>\r\n            </Popover>\r\n\r\n            {/* Export */}\r\n            {exportable && (\r\n              <DropdownMenu>\r\n                <DropdownMenuTrigger asChild>\r\n                  <Button variant=\"outline\" size=\"sm\">\r\n                    <Download className=\"w-4 h-4\" />\r\n                  </Button>\r\n                </DropdownMenuTrigger>\r\n                <DropdownMenuContent>\r\n                  <DropdownMenuItem\r\n                    onClick={() => {\r\n                      handleExport('csv');\r\n                    }}\r\n                  >\r\n                    <FileText className=\"w-4 h-4 mr-2\" />\r\n                    CSV olarak ─░ndir\r\n                  </DropdownMenuItem>\r\n                  <DropdownMenuItem\r\n                    onClick={() => {\r\n                      handleExport('xlsx');\r\n                    }}\r\n                  >\r\n                    <BarChart3 className=\"w-4 h-4 mr-2\" />\r\n                    Excel olarak ─░ndir\r\n                  </DropdownMenuItem>\r\n                </DropdownMenuContent>\r\n              </DropdownMenu>\r\n            )}\r\n\r\n            {/* Refresh */}\r\n            {onRefresh && (\r\n              <Button variant=\"outline\" size=\"sm\" onClick={onRefresh} disabled={refreshing}>\r\n                <RefreshCw className={cn('w-4 h-4', refreshing && 'animate-spin')} />\r\n              </Button>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Search and Filters */}\r\n        <div className=\"flex flex-col lg:flex-row gap-3 mt-4\">\r\n          {searchable && (\r\n            <div className=\"relative flex-1\">\r\n              <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\r\n              <Input\r\n                placeholder=\"Tabloda ara...\"\r\n                value={searchTerm}\r\n                onChange={(e) => {\r\n                  setSearchTerm(e.target.value);\r\n                }}\r\n                className=\"pl-10\"\r\n              />\r\n            </div>\r\n          )}\r\n\r\n          {filterable && filters.length > 0 && (\r\n            <Button\r\n              variant=\"outline\"\r\n              size=\"sm\"\r\n              onClick={() => {\r\n                setShowFilters(!showFilters);\r\n              }}\r\n              className=\"gap-2\"\r\n            >\r\n              <Filter className=\"w-4 h-4\" />\r\n              Filtreler\r\n              {Object.values(activeFilters).some((v) => v != null && v !== '') && (\r\n                <Badge variant=\"destructive\" className=\"ml-1 px-1 py-0 text-xs\">\r\n                  {Object.values(activeFilters).filter((v) => v != null && v !== '').length}\r\n                </Badge>\r\n              )}\r\n            </Button>\r\n          )}\r\n        </div>\r\n\r\n        {/* Filter Panel */}\r\n        <AnimatePresence>\r\n          {showFilters && (\r\n            <motion.div\r\n              initial={{ height: 0, opacity: 0 }}\r\n              animate={{ height: 'auto', opacity: 1 }}\r\n              exit={{ height: 0, opacity: 0 }}\r\n              className=\"border-t border-gray-200 pt-4 mt-4\"\r\n            >\r\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-3\">\r\n                {filters.map((filter) => (\r\n                  <div key={filter.key}>\r\n                    <Label className=\"block text-sm font-medium text-gray-700 mb-1\">\r\n                      {filter.label}\r\n                    </Label>\r\n                    {filter.type === 'select' ? (\r\n                      <Select\r\n                        value={activeFilters[filter.key] || ''}\r\n                        onValueChange={(value) => {\r\n                          setActiveFilters((prev) => ({ ...prev, [filter.key]: value }));\r\n                        }}\r\n                      >\r\n                        <SelectTrigger>\r\n                          <SelectValue placeholder={filter.placeholder} />\r\n                        </SelectTrigger>\r\n                        <SelectContent>\r\n                          <SelectItem value=\"\">T├╝m├╝</SelectItem>\r\n                          {filter.options?.map((option) => (\r\n                            <SelectItem key={option.value} value={String(option.value)}>\r\n                              {option.label}\r\n                            </SelectItem>\r\n                          ))}\r\n                        </SelectContent>\r\n                      </Select>\r\n                    ) : (\r\n                      <Input\r\n                        type={\r\n                          filter.type === 'date'\r\n                            ? 'date'\r\n                            : filter.type === 'number'\r\n                              ? 'number'\r\n                              : 'text'\r\n                        }\r\n                        placeholder={filter.placeholder}\r\n                        value={activeFilters[filter.key] || ''}\r\n                        onChange={(e) => {\r\n                          setActiveFilters((prev) => ({ ...prev, [filter.key]: e.target.value }));\r\n                        }}\r\n                      />\r\n                    )}\r\n                  </div>\r\n                ))}\r\n              </div>\r\n\r\n              <div className=\"flex justify-end gap-2 mt-4\">\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={() => {\r\n                    setActiveFilters({});\r\n                  }}\r\n                >\r\n                  <RotateCcw className=\"w-4 h-4 mr-1\" />\r\n                  Temizle\r\n                </Button>\r\n                <Button\r\n                  variant=\"outline\"\r\n                  size=\"sm\"\r\n                  onClick={() => {\r\n                    setShowFilters(false);\r\n                  }}\r\n                >\r\n                  Kapat\r\n                </Button>\r\n              </div>\r\n            </motion.div>\r\n          )}\r\n        </AnimatePresence>\r\n\r\n        {/* Bulk Actions */}\r\n        {selectable && selectedRows.size > 0 && bulkActions.length > 0 && (\r\n          <motion.div\r\n            initial={{ opacity: 0, y: -10 }}\r\n            animate={{ opacity: 1, y: 0 }}\r\n            className=\"bg-blue-50 border border-blue-200 rounded-lg p-3 mt-4\"\r\n          >\r\n            <div className=\"flex items-center justify-between\">\r\n              <span className=\"text-sm font-medium text-blue-900\">\r\n                {selectedRows.size} ├Â─şe se├ğildi\r\n              </span>\r\n              <div className=\"flex items-center gap-2\">\r\n                {bulkActions.map((action, idx) => (\r\n                  <Button\r\n                    key={idx}\r\n                    variant={action.variant ?? 'outline'}\r\n                    size=\"sm\"\r\n                    onClick={() => handleBulkAction(action)}\r\n                    disabled={bulkActionLoading === action.label}\r\n                    className=\"gap-2\"\r\n                  >\r\n                    {bulkActionLoading === action.label ? (\r\n                      <RefreshCw className=\"w-4 h-4 animate-spin\" />\r\n                    ) : (\r\n                      action.icon\r\n                    )}\r\n                    {action.label}\r\n                  </Button>\r\n                ))}\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  onClick={() => {\r\n                    setSelectedRows(new Set());\r\n                  }}\r\n                >\r\n                  <X className=\"w-4 h-4\" />\r\n                </Button>\r\n              </div>\r\n            </div>\r\n          </motion.div>\r\n        )}\r\n      </CardHeader>\r\n\r\n      <CardContent className=\"px-0 pb-0\">\r\n        {processedData.length === 0 ? (\r\n          <div className=\"text-center py-12\">\r\n            <div className=\"mx-auto w-24 h-24 bg-gray-100 rounded-full flex items-center justify-center mb-4\">\r\n              {emptyState?.icon || <Search className=\"w-8 h-8 text-gray-400\" />}\r\n            </div>\r\n            <h3 className=\"text-lg font-medium text-gray-900 mb-2\">\r\n              {emptyState?.title ?? 'Veri bulunamad─▒'}\r\n            </h3>\r\n            <p className=\"text-gray-600 mb-4\">\r\n              {emptyState?.description ?? 'Arad─▒─ş─▒n─▒z kriterlere uygun veri bulunamad─▒.'}\r\n            </p>\r\n            {emptyState?.action && (\r\n              <Button onClick={emptyState.action.onClick} className=\"gap-2\">\r\n                <Plus className=\"w-4 h-4\" />\r\n                {emptyState.action.label}\r\n              </Button>\r\n            )}\r\n          </div>\r\n        ) : (\r\n          <div className=\"space-y-4\">\r\n            {/* Table */}\r\n            <div className=\"overflow-x-auto\" ref={tableRef}>\r\n              <Table\r\n                className={cn(\r\n                  'min-w-full',\r\n                  striped && 'table-striped',\r\n                  bordered && 'border',\r\n                  tableClassName,\r\n                )}\r\n              >\r\n                <TableHeader>\r\n                  <TableRow className=\"bg-gray-50 hover:bg-gray-50\">\r\n                    {selectable && (\r\n                      <TableHead className={cn('w-12', densityClasses[density])}>\r\n                        <Checkbox\r\n                          checked={\r\n                            paginatedData.length > 0 && selectedRows.size === paginatedData.length\r\n                          }\r\n                          onCheckedChange={handleSelectAll}\r\n                        />\r\n                      </TableHead>\r\n                    )}\r\n                    {columns\r\n                      .filter((col) => columnVisibility[col.key as string])\r\n                      .map((column) => {\r\n                        const Icon = columnTypeIcons[column.type ?? 'text'];\r\n                        const isSorted = sortConfig?.key === column.key;\r\n\r\n                        return (\r\n                          <TableHead\r\n                            key={column.key as string}\r\n                            className={cn(\r\n                              densityClasses[density],\r\n                              'font-medium text-gray-700 uppercase tracking-wider text-xs',\r\n                              column.sortable &&\r\n                                sortable &&\r\n                                'cursor-pointer hover:bg-gray-100 select-none',\r\n                              column.align === 'center' && 'text-center',\r\n                              column.align === 'right' && 'text-right',\r\n                              column.headerClassName,\r\n                            )}\r\n                            style={{\r\n                              width: column.width,\r\n                              minWidth: column.minWidth,\r\n                              maxWidth: column.maxWidth,\r\n                            }}\r\n                            onClick={() => column.sortable && handleSort(column.key as string)}\r\n                          >\r\n                            <div className=\"flex items-center gap-2\">\r\n                              <Icon className=\"w-4 h-4\" />\r\n                              <span>{column.label}</span>\r\n                              {column.sortable && sortable && (\r\n                                <div className=\"flex flex-col\">\r\n                                  {isSorted ? (\r\n                                    sortConfig?.direction === 'asc' ? (\r\n                                      <SortAsc className=\"w-3 h-3\" />\r\n                                    ) : (\r\n                                      <SortDesc className=\"w-3 h-3\" />\r\n                                    )\r\n                                  ) : (\r\n                                    <ArrowUpDown className=\"w-3 h-3 text-gray-400\" />\r\n                                  )}\r\n                                </div>\r\n                              )}\r\n                            </div>\r\n                          </TableHead>\r\n                        );\r\n                      })}\r\n                    {actions.length > 0 && (\r\n                      <TableHead className={cn('w-16 text-right', densityClasses[density])}>\r\n                        <span className=\"sr-only\">─░┼şlemler</span>\r\n                      </TableHead>\r\n                    )}\r\n                  </TableRow>\r\n                </TableHeader>\r\n                <TableBody>\r\n                  <AnimatePresence>\r\n                    {paginatedData.map((row, index) => (\r\n                      <motion.tr\r\n                        key={row.id ?? index}\r\n                        component={TableRow}\r\n                        initial={{ opacity: 0, y: 20 }}\r\n                        animate={{ opacity: 1, y: 0 }}\r\n                        exit={{ opacity: 0, y: -20 }}\r\n                        transition={{ delay: index * 0.02 }}\r\n                        className={cn(\r\n                          'group transition-colors',\r\n                          hoverable && 'hover:bg-gray-50',\r\n                          onRowClick && 'cursor-pointer',\r\n                          selectedRows.has(index) && 'bg-blue-50',\r\n                        )}\r\n                        onClick={() => onRowClick?.(row, index)}\r\n                      >\r\n                        {selectable && (\r\n                          <TableCell className={densityClasses[density]}>\r\n                            <Checkbox\r\n                              checked={selectedRows.has(index)}\r\n                              onCheckedChange={(checked) => {\r\n                                handleSelectRow(index, checked as boolean);\r\n                              }}\r\n                              onClick={(e) => {\r\n                                e.stopPropagation();\r\n                              }}\r\n                            />\r\n                          </TableCell>\r\n                        )}\r\n                        {columns\r\n                          .filter((col) => columnVisibility[col.key as string])\r\n                          .map((column) => (\r\n                            <TableCell\r\n                              key={column.key as string}\r\n                              className={cn(\r\n                                densityClasses[density],\r\n                                'text-gray-900',\r\n                                column.align === 'center' && 'text-center',\r\n                                column.align === 'right' && 'text-right',\r\n                                column.className,\r\n                              )}\r\n                            >\r\n                              {renderCell(column, row[column.key as string], row, index)}\r\n                            </TableCell>\r\n                          ))}\r\n                        {actions.length > 0 && (\r\n                          <TableCell className={cn('text-right', densityClasses[density])}>\r\n                            <DropdownMenu>\r\n                              <DropdownMenuTrigger asChild>\r\n                                <Button\r\n                                  variant=\"ghost\"\r\n                                  size=\"sm\"\r\n                                  className=\"h-8 w-8 p-0 opacity-0 group-hover:opacity-100\"\r\n                                  onClick={(e) => {\r\n                                    e.stopPropagation();\r\n                                  }}\r\n                                >\r\n                                  <MoreVertical className=\"w-4 h-4\" />\r\n                                </Button>\r\n                              </DropdownMenuTrigger>\r\n                              <DropdownMenuContent align=\"end\">\r\n                                {actions.map((action, idx) => (\r\n                                  <DropdownMenuItem\r\n                                    key={idx}\r\n                                    onClick={() => action.onClick(row, index)}\r\n                                    className=\"flex items-center gap-2\"\r\n                                    disabled={action.condition && !action.condition(row)}\r\n                                  >\r\n                                    {action.icon}\r\n                                    {action.label}\r\n                                  </DropdownMenuItem>\r\n                                ))}\r\n                              </DropdownMenuContent>\r\n                            </DropdownMenu>\r\n                          </TableCell>\r\n                        )}\r\n                      </motion.tr>\r\n                    ))}\r\n                  </AnimatePresence>\r\n                </TableBody>\r\n              </Table>\r\n            </div>\r\n\r\n            {/* Pagination */}\r\n            {pagination && (\r\n              <div className=\"flex items-center justify-between px-6 py-4 border-t border-gray-200\">\r\n                <div className=\"flex items-center gap-2 text-sm text-gray-600\">\r\n                  <span>\r\n                    Toplam {pagination.total} kay─▒ttan{' '}\r\n                    {(pagination.page - 1) * pagination.pageSize + 1}-\r\n                    {Math.min(pagination.page * pagination.pageSize, pagination.total)} aras─▒\r\n                    g├Âsteriliyor\r\n                  </span>\r\n                </div>\r\n\r\n                <div className=\"flex items-center gap-2\">\r\n                  {pagination.showSizeChanger && (\r\n                    <Select\r\n                      value={String(pagination.pageSize)}\r\n                      onValueChange={(value) => onPaginationChange?.(1, Number(value))}\r\n                    >\r\n                      <SelectTrigger className=\"w-20\">\r\n                        <SelectValue />\r\n                      </SelectTrigger>\r\n                      <SelectContent>\r\n                        {(pagination.pageSizeOptions || [10, 25, 50, 100]).map((size) => (\r\n                          <SelectItem key={size} value={String(size)}>\r\n                            {size}\r\n                          </SelectItem>\r\n                        ))}\r\n                      </SelectContent>\r\n                    </Select>\r\n                  )}\r\n\r\n                  <div className=\"flex items-center gap-1\">\r\n                    <Button\r\n                      variant=\"outline\"\r\n                      size=\"sm\"\r\n                      onClick={() => onPaginationChange?.(1, pagination.pageSize)}\r\n                      disabled={pagination.page === 1}\r\n                    >\r\n                      <ChevronsLeft className=\"w-4 h-4\" />\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"outline\"\r\n                      size=\"sm\"\r\n                      onClick={() => onPaginationChange?.(pagination.page - 1, pagination.pageSize)}\r\n                      disabled={pagination.page === 1}\r\n                    >\r\n                      <ChevronLeft className=\"w-4 h-4\" />\r\n                    </Button>\r\n                    <span className=\"px-3 py-1 text-sm\">\r\n                      {pagination.page} / {Math.ceil(pagination.total / pagination.pageSize)}\r\n                    </span>\r\n                    <Button\r\n                      variant=\"outline\"\r\n                      size=\"sm\"\r\n                      onClick={() => onPaginationChange?.(pagination.page + 1, pagination.pageSize)}\r\n                      disabled={\r\n                        pagination.page >= Math.ceil(pagination.total / pagination.pageSize)\r\n                      }\r\n                    >\r\n                      <ChevronRight className=\"w-4 h-4\" />\r\n                    </Button>\r\n                    <Button\r\n                      variant=\"outline\"\r\n                      size=\"sm\"\r\n                      onClick={() =>\r\n                        onPaginationChange?.(\r\n                          Math.ceil(pagination.total / pagination.pageSize),\r\n                          pagination.pageSize,\r\n                        )\r\n                      }\r\n                      disabled={\r\n                        pagination.page >= Math.ceil(pagination.total / pagination.pageSize)\r\n                      }\r\n                    >\r\n                      <ChevronsRight className=\"w-4 h-4\" />\r\n                    </Button>\r\n                  </div>\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        )}\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n}\r\n\r\n// Export component with unique name to avoid conflicts\r\nexport { EnhancedTable as EnhancedDataTable };\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\form.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":147,"column":3,"nodeType":"Identifier","messageId":"namedExport","endLine":147,"endColumn":15}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview form Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\n'use client';\r\n\r\nimport * as React from 'react';\r\nimport type * as LabelPrimitive from '@radix-ui/react-label';\r\nimport { Slot } from '@radix-ui/react-slot';\r\nimport {\r\n  Controller,\r\n  FormProvider,\r\n  useFormContext,\r\n  type ControllerProps,\r\n  type FieldPath,\r\n  type FieldValues,\r\n} from 'react-hook-form';\r\n\r\nimport { cn } from './utils';\r\nimport { Label } from './label';\r\nimport { FormFieldContext, FormItemContext } from '../../contexts/FormContexts';\r\nimport { useFormField } from '../../hooks/use-form-field';\r\n\r\nconst Form = FormProvider;\r\n\r\ninterface FormFieldContextValue<\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\r\n> {\r\n  name: TName;\r\n}\r\n\r\nconst FormFieldContext = React.createContext<FormFieldContextValue>({} as FormFieldContextValue);\r\n\r\nconst FormField = <\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\r\n>({\r\n  ...props\r\n}: ControllerProps<TFieldValues, TName>) => {\r\n  return (\r\n    <FormFieldContext.Provider value={{ name: props.name }}>\r\n      <Controller {...props} />\r\n    </FormFieldContext.Provider>\r\n  );\r\n};\r\n\r\nconst useFormField = () => {\r\n  const fieldContext = React.useContext(FormFieldContext);\r\n  const itemContext = React.useContext(FormItemContext);\r\n  const { getFieldState } = useFormContext();\r\n  const fieldState = getFieldState(fieldContext.name);\r\n\r\n  const { id } = itemContext;\r\n\r\n  return {\r\n    id,\r\n    name: fieldContext.name,\r\n    formItemId: `${id}-form-item`,\r\n    formDescriptionId: `${id}-form-item-description`,\r\n    formMessageId: `${id}-form-item-message`,\r\n    ...fieldState,\r\n  };\r\n};\r\n\r\ninterface FormItemContextValue {\r\n  id: string;\r\n}\r\n\r\nconst FormItemContext = React.createContext<FormItemContextValue>({} as FormItemContextValue);\r\n\r\nfunction FormItem({ className, ...props }: React.ComponentProps<'div'>) {\r\n  const id = React.useId();\r\n\r\n  return (\r\n    <FormItemContext.Provider value={{ id }}>\r\n      <div data-slot=\"form-item\" className={cn('grid gap-2', className)} {...props} />\r\n    </FormItemContext.Provider>\r\n  );\r\n}\r\n\r\nfunction FormLabel({ className, ...props }: React.ComponentProps<typeof LabelPrimitive.Root>) {\r\n  const { error, formItemId } = useFormField();\r\n\r\n  return (\r\n    <Label\r\n      data-slot=\"form-label\"\r\n      data-error={!!error}\r\n      className={cn('data-[error=true]:text-destructive', className)}\r\n      htmlFor={formItemId}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction FormControl({ ...props }: React.ComponentProps<typeof Slot>) {\r\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField();\r\n\r\n  return (\r\n    <Slot\r\n      data-slot=\"form-control\"\r\n      id={formItemId}\r\n      aria-describedby={!error ? `${formDescriptionId}` : `${formDescriptionId} ${formMessageId}`}\r\n      aria-invalid={!!error}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction FormDescription({ className, ...props }: React.ComponentProps<'p'>) {\r\n  const { formDescriptionId } = useFormField();\r\n\r\n  return (\r\n    <p\r\n      data-slot=\"form-description\"\r\n      id={formDescriptionId}\r\n      className={cn('text-muted-foreground text-sm', className)}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction FormMessage({ className, ...props }: React.ComponentProps<'p'>) {\r\n  const { error, formMessageId } = useFormField();\r\n  const body = error ? String(error.message ?? '') : props.children;\r\n\r\n  if (!body) {\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <p\r\n      data-slot=\"form-message\"\r\n      id={formMessageId}\r\n      className={cn('text-destructive text-sm', className)}\r\n      {...props}\r\n    >\r\n      {body}\r\n    </p>\r\n  );\r\n}\r\n\r\nexport {\r\n  useFormField,\r\n  Form,\r\n  FormItem,\r\n  FormLabel,\r\n  FormControl,\r\n  FormDescription,\r\n  FormMessage,\r\n  FormField,\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\hover-card.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\input-otp.tsx","messages":[],"suppressedMessages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":52,"column":14,"nodeType":"MemberExpression","endLine":52,"endColumn":44,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":52,"column":35,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":52,"endColumn":37,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[1289,1291],"text":""},"desc":"Remove unnecessary optional chain"}],"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":54,"column":42,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":54,"endColumn":46,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\input.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\label.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\menubar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\mobile-responsive-table.tsx","messages":[],"suppressedMessages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":257,"column":95,"nodeType":"MemberExpression","endLine":257,"endColumn":114,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\navigation-menu.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\pagination.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\popover.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\progress.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\radio-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\resizable.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\scroll-area.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\select.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\separator.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\sheet.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\sidebar.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\skeleton.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\slider.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\sonner.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\switch.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\table.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\tabs.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\textarea.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\toggle-group.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\toggle.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\tooltip.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\use-mobile.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ui\\visually-hidden.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\utils\\EnvironmentUtils.tsx","messages":[{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":11,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":11,"endColumn":27},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":12,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":12,"endColumn":26},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":13,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":13,"endColumn":20},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":50,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":50,"endColumn":34},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":63,"column":14,"nodeType":"Identifier","messageId":"namedExport","endLine":63,"endColumn":32},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":76,"column":27,"nodeType":"BinaryExpression","messageId":"constantShortCircuit","endLine":76,"endColumn":84},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":76,"column":27,"nodeType":"BinaryExpression","messageId":"neverNullish","endLine":76,"endColumn":84},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2106,2109],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2106,2109],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview EnvironmentUtils Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport React from 'react';\r\n\r\n// Environment detection utilities\r\nexport const isDevelopment = import.meta.env.DEV;\r\nexport const isProduction = import.meta.env.PROD;\r\nexport const isTest = import.meta.env.MODE === 'test';\r\n\r\n// Development-only component wrapper\r\ninterface DevOnlyProps {\r\n  children: React.ReactNode;\r\n  fallback?: React.ReactNode;\r\n}\r\n\r\nexport const DevOnly = ({ children, fallback = null }: DevOnlyProps) => {\r\n  if (!isDevelopment) {\r\n    return <>{fallback}</>;\r\n  }\r\n  return <>{children}</>;\r\n};\r\n\r\n// Production-only component wrapper\r\nexport const ProdOnly = ({ children, fallback = null }: DevOnlyProps) => {\r\n  if (!isProduction) {\r\n    return <>{fallback}</>;\r\n  }\r\n  return <>{children}</>;\r\n};\r\n\r\n// Conditional component loading\r\nexport const ConditionalComponent = ({\r\n  condition,\r\n  children,\r\n  fallback = null,\r\n}: {\r\n  condition: boolean;\r\n  children: React.ReactNode;\r\n  fallback?: React.ReactNode;\r\n}) => {\r\n  return condition ? <>{children}</> : <>{fallback}</>;\r\n};\r\n\r\n// Environment-specific configuration\r\nexport const getEnvironmentConfig = () => ({\r\n  isDevelopment,\r\n  isProduction,\r\n  isTest,\r\n  showDebugInfo: isDevelopment,\r\n  enableAnalytics: isProduction,\r\n  enableErrorReporting: isProduction,\r\n  apiUrl: import.meta.env.VITE_API_URL ?? 'http://localhost:3000',\r\n  supabaseUrl: import.meta.env.VITE_SUPABASE_URL,\r\n  supabaseKey: import.meta.env.VITE_SUPABASE_ANON_KEY,\r\n});\r\n\r\n// Bundle size optimization - tree shaking helper\r\nexport const removeInProduction = (component: React.ComponentType) => {\r\n  if (isProduction) {\r\n    return () => null;\r\n  }\r\n  return component;\r\n};\r\n\r\n// Development tools\r\nexport const DevTools = removeInProduction(() => (\r\n  <div className=\"fixed bottom-4 right-4 z-50 bg-black/80 text-white p-2 rounded text-xs\">\r\n    <div>Mode: {import.meta.env.MODE}</div>\r\n    <div>Bundle: {isProduction ? 'Optimized' : 'Development'}</div>\r\n    <div>\r\n      Memory: {Math.round((performance as any).memory?.usedJSHeapSize / 1024 / 1024 ?? 0)}MB\r\n    </div>\r\n  </div>\r\n));\r\n\r\n// Performance warning for large components\r\nexport const LargeComponentWarning = ({ componentName }: { componentName: string }) => {\r\n  if (!isDevelopment) return null;\r\n\r\n  return (\r\n    <div className=\"bg-yellow-100 border border-yellow-400 text-yellow-700 px-4 py-3 rounded mb-4\">\r\n      <strong>Performance Warning:</strong> {componentName} is a large component. Consider lazy\r\n      loading or code splitting.\r\n    </div>\r\n  );\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\utils\\__tests__\\error-report.test.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-function","severity":1,"message":"Unexpected empty arrow function.","line":43,"column":72,"nodeType":"ArrowFunctionExpression","messageId":"unexpected","endLine":43,"endColumn":74,"suggestions":[{"messageId":"suggestComment","data":{"name":"arrow function"},"fix":{"range":[1293,1293],"text":" /* empty */ "},"desc":"Add comment inside empty arrow function."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, expect, it, vi } from 'vitest';\r\nimport { createErrorReport, getEnvironmentInfo } from '@/components/utils/error-report';\r\n\r\ndescribe('getEnvironmentInfo', () => {\r\n  it('returns environment information from the provided source', () => {\r\n    const environment = getEnvironmentInfo({\r\n      navigator: { userAgent: 'CustomAgent/1.0' },\r\n      location: { href: 'https://example.com/path' },\r\n      storage: {\r\n        getItem: vi.fn().mockReturnValue('user-123'),\r\n      },\r\n    });\r\n\r\n    expect(environment).toEqual({\r\n      userAgent: 'CustomAgent/1.0',\r\n      url: 'https://example.com/path',\r\n      userId: 'user-123',\r\n    });\r\n  });\r\n\r\n  it('falls back to safe defaults when environment data is missing or invalid', () => {\r\n    const environment = getEnvironmentInfo({\r\n      navigator: {},\r\n      location: { href: '   ' },\r\n      storage: {\r\n        getItem: () => null,\r\n      },\r\n    });\r\n\r\n    expect(environment).toEqual({\r\n      userAgent: 'unknown',\r\n      url: 'unknown',\r\n      userId: 'anonymous',\r\n    });\r\n  });\r\n\r\n  it('gracefully handles storage access errors', () => {\r\n    const storage = {\r\n      getItem: () => {\r\n        throw new Error('access denied');\r\n      },\r\n    };\r\n    const warnSpy = vi.spyOn(console, 'warn').mockImplementation(() => {});\r\n\r\n    const environment = getEnvironmentInfo({ storage });\r\n\r\n    expect(environment.userId).toBe('anonymous');\r\n    expect(warnSpy).toHaveBeenCalledWith(\r\n      '[EnhancedErrorBoundary] Unable to access user_id from storage:',\r\n      expect.any(Error),\r\n    );\r\n\r\n    warnSpy.mockRestore();\r\n  });\r\n});\r\n\r\ndescribe('createErrorReport', () => {\r\n  it('creates a report with the provided error and environment data', () => {\r\n    const error = new Error('Boom!');\r\n    const dateFactory = () => new Date('2024-01-02T03:04:05.000Z');\r\n\r\n    const report = createErrorReport({\r\n      errorId: 'ERR_TEST',\r\n      error,\r\n      errorInfo: { componentStack: 'in Component' },\r\n      environmentSource: {\r\n        navigator: { userAgent: 'QA/1.0' },\r\n        location: { href: 'https://example.com/dashboard' },\r\n        storage: {\r\n          getItem: vi.fn().mockReturnValue('user-999'),\r\n        },\r\n        dateFactory,\r\n      },\r\n    });\r\n\r\n    expect(report).toEqual({\r\n      errorId: 'ERR_TEST',\r\n      message: 'Boom!',\r\n      stack: error.stack,\r\n      componentStack: 'in Component',\r\n      timestamp: '2024-01-02T03:04:05.000Z',\r\n      environment: {\r\n        userAgent: 'QA/1.0',\r\n        url: 'https://example.com/dashboard',\r\n        userId: 'user-999',\r\n      },\r\n    });\r\n  });\r\n\r\n  it('uses safe defaults when environment data is unavailable', () => {\r\n    const report = createErrorReport({\r\n      error: new Error('Test'),\r\n      errorInfo: { componentStack: '' },\r\n    });\r\n\r\n    expect(report.environment.userAgent).toBeTruthy();\r\n    expect(report.environment.url).toBeTruthy();\r\n    expect(report.environment.userId).toBeTruthy();\r\n    expect(typeof report.timestamp).toBe('string');\r\n  });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\utils\\error-report.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ux\\ContextualTooltipSystem.tsx","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":388,"column":12,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":388,"endColumn":32},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":388,"column":12,"nodeType":"MemberExpression","endLine":388,"endColumn":32}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview ContextualTooltipSystem Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport React, { useState, useEffect, useRef } from 'react';\r\nimport { HelpCircle, Info, Lightbulb, Zap, X, ChevronRight } from 'lucide-react';\r\nimport { Button } from '../ui/button';\r\nimport { cn } from '../ui/utils';\r\n\r\nimport { logger } from '../../lib/logging/logger';\r\ninterface TooltipContent {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  tips?: string[];\r\n  shortcuts?: {\r\n    key: string;\r\n    description: string;\r\n  }[];\r\n  relatedActions?: {\r\n    label: string;\r\n    action: () => void;\r\n  }[];\r\n  learnMoreUrl?: string;\r\n}\r\n\r\ninterface SmartTooltipProps {\r\n  children: React.ReactNode;\r\n  content: TooltipContent;\r\n  position?: 'top' | 'bottom' | 'left' | 'right';\r\n  triggerOn?: 'hover' | 'click' | 'focus';\r\n  delay?: number;\r\n  disabled?: boolean;\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * SmartTooltip function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function SmartTooltip({\r\n  children,\r\n  content,\r\n  position = 'top',\r\n  triggerOn = 'hover',\r\n  delay = 500,\r\n  disabled = false,\r\n  className,\r\n}: SmartTooltipProps) {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n  const [isExpanded, setIsExpanded] = useState(false);\r\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n  const tooltipRef = useRef<HTMLDivElement>(null);\r\n  const triggerRef = useRef<HTMLDivElement>(null);\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (timeoutRef.current) {\r\n        clearTimeout(timeoutRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const showTooltip = () => {\r\n    if (disabled) return;\r\n\r\n    if (timeoutRef.current) {\r\n      clearTimeout(timeoutRef.current);\r\n    }\r\n\r\n    timeoutRef.current = setTimeout(() => {\r\n      setIsVisible(true);\r\n    }, delay);\r\n  };\r\n\r\n  const hideTooltip = () => {\r\n    if (timeoutRef.current) {\r\n      clearTimeout(timeoutRef.current);\r\n    }\r\n    setIsVisible(false);\r\n    setIsExpanded(false);\r\n  };\r\n\r\n  const toggleTooltip = () => {\r\n    if (disabled) return;\r\n    setIsVisible(!isVisible);\r\n  };\r\n\r\n  const getPositionClasses = () => {\r\n    const base = 'absolute z-50 ';\r\n\r\n    switch (position) {\r\n      case 'top':\r\n        return `${base  }bottom-full left-1/2 transform -translate-x-1/2 mb-2`;\r\n      case 'bottom':\r\n        return `${base  }top-full left-1/2 transform -translate-x-1/2 mt-2`;\r\n      case 'left':\r\n        return `${base  }right-full top-1/2 transform -translate-y-1/2 mr-2`;\r\n      case 'right':\r\n        return `${base  }left-full top-1/2 transform -translate-y-1/2 ml-2`;\r\n      default:\r\n        return `${base  }bottom-full left-1/2 transform -translate-x-1/2 mb-2`;\r\n    }\r\n  };\r\n\r\n  const getArrowClasses = () => {\r\n    const base = 'absolute w-2 h-2 bg-popover border rotate-45 ';\r\n\r\n    switch (position) {\r\n      case 'top':\r\n        return (\r\n          `${base \r\n          }top-full left-1/2 transform -translate-x-1/2 -translate-y-1/2 border-t-0 border-l-0`\r\n        );\r\n      case 'bottom':\r\n        return (\r\n          `${base \r\n          }bottom-full left-1/2 transform -translate-x-1/2 translate-y-1/2 border-b-0 border-r-0`\r\n        );\r\n      case 'left':\r\n        return (\r\n          `${base \r\n          }left-full top-1/2 transform -translate-x-1/2 -translate-y-1/2 border-l-0 border-b-0`\r\n        );\r\n      case 'right':\r\n        return (\r\n          `${base \r\n          }right-full top-1/2 transform translate-x-1/2 -translate-y-1/2 border-r-0 border-t-0`\r\n        );\r\n      default:\r\n        return (\r\n          `${base \r\n          }top-full left-1/2 transform -translate-x-1/2 -translate-y-1/2 border-t-0 border-l-0`\r\n        );\r\n    }\r\n  };\r\n\r\n  const triggerProps = {\r\n    ...(triggerOn === 'hover' && {\r\n      onMouseEnter: showTooltip,\r\n      onMouseLeave: hideTooltip,\r\n    }),\r\n    ...(triggerOn === 'click' && {\r\n      onClick: toggleTooltip,\r\n    }),\r\n    ...(triggerOn === 'focus' && {\r\n      onFocus: showTooltip,\r\n      onBlur: hideTooltip,\r\n    }),\r\n  };\r\n\r\n  return (\r\n    <div ref={triggerRef} className={cn('relative inline-block', className)}>\r\n      <div {...triggerProps}>{children}</div>\r\n\r\n      {isVisible && (\r\n        <div\r\n          ref={tooltipRef}\r\n          className={cn(\r\n            getPositionClasses(),\r\n            'w-80 max-w-sm bg-popover border border-border rounded-lg shadow-lg overflow-hidden',\r\n            'animate-in fade-in-0 zoom-in-95 duration-200',\r\n          )}\r\n          onMouseEnter={() => {\r\n            if (timeoutRef.current) {\r\n              clearTimeout(timeoutRef.current);\r\n            }\r\n          }}\r\n          onMouseLeave={hideTooltip}\r\n        >\r\n          <div className={getArrowClasses()} />\r\n\r\n          {/* Header */}\r\n          <div className=\"flex items-center justify-between p-3 border-b border-border\">\r\n            <div className=\"flex items-center gap-2\">\r\n              <Info className=\"w-4 h-4 text-primary\" />\r\n              <h4 className=\"font-medium text-sm\">{content.title}</h4>\r\n            </div>\r\n            <div className=\"flex items-center gap-1\">\r\n              {content.tips && content.tips.length > 0 && (\r\n                <Button\r\n                  variant=\"ghost\"\r\n                  size=\"sm\"\r\n                  onClick={() => {\r\n                    setIsExpanded(!isExpanded);\r\n                  }}\r\n                  className=\"h-6 w-6 p-0\"\r\n                >\r\n                  <ChevronRight\r\n                    className={cn('w-3 h-3 transition-transform', isExpanded && 'rotate-90')}\r\n                  />\r\n                </Button>\r\n              )}\r\n              <Button variant=\"ghost\" size=\"sm\" onClick={hideTooltip} className=\"h-6 w-6 p-0\">\r\n                <X className=\"w-3 h-3\" />\r\n              </Button>\r\n            </div>\r\n          </div>\r\n\r\n          {/* Content */}\r\n          <div className=\"p-3 space-y-3\">\r\n            <p className=\"text-sm text-muted-foreground leading-relaxed\">{content.description}</p>\r\n\r\n            {/* Shortcuts */}\r\n            {content.shortcuts && content.shortcuts.length > 0 && (\r\n              <div className=\"space-y-2\">\r\n                <div className=\"flex items-center gap-1\">\r\n                  <Zap className=\"w-3 h-3 text-amber-500\" />\r\n                  <span className=\"text-xs font-medium\">K─▒sayollar</span>\r\n                </div>\r\n                <div className=\"space-y-1\">\r\n                  {content.shortcuts.map((shortcut, index) => (\r\n                    <div key={index} className=\"flex items-center justify-between text-xs\">\r\n                      <span className=\"text-muted-foreground\">{shortcut.description}</span>\r\n                      <kbd className=\"px-1.5 py-0.5 bg-muted border border-border rounded text-xs font-mono\">\r\n                        {shortcut.key}\r\n                      </kbd>\r\n                    </div>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n\r\n            {/* Tips (Expanded) */}\r\n            {content.tips && content.tips.length > 0 && isExpanded && (\r\n              <div className=\"space-y-2 pt-2 border-t border-border\">\r\n                <div className=\"flex items-center gap-1\">\r\n                  <Lightbulb className=\"w-3 h-3 text-yellow-500\" />\r\n                  <span className=\"text-xs font-medium\">─░pu├ğlar─▒</span>\r\n                </div>\r\n                <ul className=\"space-y-1 text-xs text-muted-foreground\">\r\n                  {content.tips.map((tip, index) => (\r\n                    <li key={index} className=\"flex items-start gap-2\">\r\n                      <span className=\"w-1 h-1 bg-primary rounded-full flex-shrink-0 mt-1.5\" />\r\n                      <span className=\"leading-relaxed\">{tip}</span>\r\n                    </li>\r\n                  ))}\r\n                </ul>\r\n              </div>\r\n            )}\r\n\r\n            {/* Related Actions */}\r\n            {content.relatedActions && content.relatedActions.length > 0 && (\r\n              <div className=\"space-y-2 pt-2 border-t border-border\">\r\n                <span className=\"text-xs font-medium\">H─▒zl─▒ ─░┼şlemler</span>\r\n                <div className=\"flex flex-wrap gap-1\">\r\n                  {content.relatedActions.map((action, index) => (\r\n                    <Button\r\n                      key={index}\r\n                      variant=\"outline\"\r\n                      size=\"sm\"\r\n                      onClick={() => {\r\n                        action.action();\r\n                        hideTooltip();\r\n                      }}\r\n                      className=\"h-7 px-2 text-xs\"\r\n                    >\r\n                      {action.label}\r\n                    </Button>\r\n                  ))}\r\n                </div>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\n// Contextual Help System\r\ninterface ContextualHelpProps {\r\n  context: 'dashboard' | 'beneficiaries' | 'donations' | 'members' | 'finance' | 'general';\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * ContextualHelp function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function ContextualHelp({ context, className }: ContextualHelpProps) {\r\n  const getContextualContent = (): TooltipContent => {\r\n    const baseContent = {\r\n      dashboard: {\r\n        id: 'help-dashboard',\r\n        title: 'Ana Dashboard Yard─▒m─▒',\r\n        description:\r\n          'Dernek faaliyetlerinizin genel durumunu buradan takip edebilirsiniz. Kartlar ├╝zerinde detayl─▒ bilgi almak i├ğin ├╝zerlerine t─▒klay─▒n.',\r\n        tips: [\r\n          'Grafikleri t─▒klayarak detaylar─▒n─▒ g├Âr├╝nt├╝leyebilirsiniz',\r\n          'Son aktiviteler b├Âl├╝m├╝nden h─▒zl─▒ca i┼şlemlerinizi takip edin',\r\n          '├ûnemli metrikler i├ğin bildirimleri etkinle┼ştirin',\r\n        ],\r\n        shortcuts: [],\r\n        relatedActions: [\r\n          {\r\n            label: 'Rapor Olu┼ştur',\r\n            action: () => {\r\n              logger.info('Create report');\r\n            },\r\n          },\r\n          {\r\n            label: 'Ayarlar─▒ A├ğ',\r\n            action: () => {\r\n              logger.info('Open settings');\r\n            },\r\n          },\r\n        ],\r\n      },\r\n      beneficiaries: {\r\n        id: 'help-beneficiaries',\r\n        title: '─░htiya├ğ Sahipleri Y├Ânetimi',\r\n        description:\r\n          'Yard─▒m talebinde bulunan ki┼şileri kaydedin, ba┼şvurular─▒n─▒ takip edin ve yard─▒m s├╝re├ğlerini y├Ânetin.',\r\n        tips: [\r\n          'Filtreleme ├Âzelli─şini kullanarak h─▒zl─▒ca ki┼şi bulun',\r\n          \"Toplu i┼şlemler i├ğin checkbox'lar─▒ kullan─▒n\",\r\n          'Detay sayfas─▒nda t├╝m ba┼şvuru ge├ğmi┼şini g├Ârebilirsiniz',\r\n        ],\r\n        shortcuts: [],\r\n        relatedActions: [\r\n          {\r\n            label: 'Yeni Ba┼şvuru',\r\n            action: () => {\r\n              logger.info('New application');\r\n            },\r\n          },\r\n          {\r\n            label: 'Rapor Al',\r\n            action: () => {\r\n              logger.info('Export report');\r\n            },\r\n          },\r\n        ],\r\n      },\r\n      donations: {\r\n        id: 'help-donations',\r\n        title: 'Ba─ş─▒┼ş Y├Ânetimi',\r\n        description:\r\n          'Gelen ba─ş─▒┼şlar─▒ kaydedin, takip edin ve raporlay─▒n. Ba─ş─▒┼ş├ğ─▒ bilgilerini g├╝venli ┼şekilde saklay─▒n.',\r\n        tips: [\r\n          'D├╝zenli ba─ş─▒┼ş├ğ─▒lar─▒ favorilere ekleyin',\r\n          'Makbuz numaralar─▒n─▒ takip etmeyi unutmay─▒n',\r\n          'Ayl─▒k ba─ş─▒┼ş raporlar─▒n─▒ d├╝zenli olu┼şturun',\r\n        ],\r\n        shortcuts: [],\r\n      },\r\n      members: {\r\n        id: 'help-members',\r\n        title: '├£ye Y├Ânetimi',\r\n        description:\r\n          'Dernek ├╝yelerini kaydedin, aidat takiplerini yap─▒n ve ├╝yelik i┼şlemlerini y├Ânetin.',\r\n        tips: [\r\n          '├£ye kategorilerini kullanarak organizasyon sa─şlay─▒n',\r\n          'Aidat hat─▒rlatmalar─▒n─▒ otomatikle┼ştirin',\r\n          '├£ye haklar─▒n─▒ ve sorumluluklar─▒n─▒ belirleyin',\r\n        ],\r\n        shortcuts: [],\r\n      },\r\n      finance: {\r\n        id: 'help-finance',\r\n        title: 'Mali ─░┼şler',\r\n        description:\r\n          'Dernek gelir-giderlerini takip edin, b├╝t├ğe planlamas─▒ yap─▒n ve mali raporlar olu┼şturun.',\r\n        tips: [\r\n          'T├╝m giderleri kategorilere ay─▒r─▒n',\r\n          'Ayl─▒k mali raporlar─▒ d├╝zenli haz─▒rlay─▒n',\r\n          'B├╝t├ğe limitlerini belirlemeyi unutmay─▒n',\r\n        ],\r\n        shortcuts: [],\r\n      },\r\n      general: {\r\n        id: 'help-general',\r\n        title: 'Sistem',\r\n        description: 'Dernek y├Ânetim sistemi.',\r\n        tips: [],\r\n        shortcuts: [],\r\n      },\r\n    };\r\n\r\n    return baseContent[context] ?? baseContent.general;\r\n  };\r\n\r\n  return (\r\n    <SmartTooltip\r\n      content={getContextualContent()}\r\n      position=\"bottom\"\r\n      triggerOn=\"click\"\r\n      className={className}\r\n    >\r\n      <Button\r\n        variant=\"ghost\"\r\n        size=\"sm\"\r\n        className=\"h-8 w-8 p-0 text-muted-foreground hover:text-foreground\"\r\n      >\r\n        <HelpCircle className=\"h-4 w-4\" />\r\n        <span className=\"sr-only\">Yard─▒m</span>\r\n      </Button>\r\n    </SmartTooltip>\r\n  );\r\n}\r\n\r\nexport default SmartTooltip;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ux\\PersonalizedQuickActions.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":42,"column":17,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":42,"endColumn":20,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1068,1071],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1068,1071],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":47,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":47,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1168,1171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1168,1171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":48,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":48,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1218,1221],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1218,1221],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'currentContext' is defined but never used.","line":61,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":17},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'currentContext' is defined but never used. Allowed unused args must match /^_/u.","line":61,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":61,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":66,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":66,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1695,1698],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1695,1698],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":83,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":83,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2294,2297],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2294,2297],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":95,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":95,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2714,2716],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":100,"column":19,"nodeType":"MemberExpression","endLine":100,"endColumn":34},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has a missing dependency: 'trackAction'. Either include it or remove the dependency array.","line":262,"column":5,"nodeType":"ArrayExpression","endLine":262,"endColumn":55,"suggestions":[{"desc":"Update the dependencies array to be: [userPreferences.usage, trackAction, onQuickAction, onNavigate]","fix":{"range":[8022,8072],"text":"[userPreferences.usage, trackAction, onQuickAction, onNavigate]"}}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":280,"column":33,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":280,"endColumn":57},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":280,"column":33,"nodeType":"MemberExpression","endLine":280,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'getCategoryLabel' is assigned a value but never used.","line":339,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":339,"endColumn":25},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'getCategoryLabel' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":339,"column":9,"nodeType":null,"messageId":"unusedVar","endLine":339,"endColumn":25}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview PersonalizedQuickActions Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport React, { useState, useEffect, useMemo } from 'react';\r\nimport {\r\n  Plus,\r\n  Star,\r\n  Clock,\r\n  TrendingUp,\r\n  Users,\r\n  Heart,\r\n  DollarSign,\r\n  Calendar,\r\n  FileText,\r\n  Settings,\r\n  Zap,\r\n} from 'lucide-react';\r\nimport { Button } from '../ui/button';\r\nimport { Card, CardContent, CardHeader, CardTitle } from '../ui/card';\r\nimport { Badge } from '../ui/badge';\r\nimport { Dialog, DialogContent, DialogHeader, DialogTitle, DialogDescription } from '../ui/dialog';\r\nimport { cn } from '../ui/utils';\r\n\r\nimport { logger } from '../../lib/logging/logger';\r\ninterface QuickAction {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  icon: React.ReactNode;\r\n  category: 'frequent' | 'recent' | 'suggested' | 'favorite';\r\n  priority: number;\r\n  usage_count: number;\r\n  last_used?: Date;\r\n  estimated_time?: string;\r\n  onExecute: () => void;\r\n  shortcuts?: string;\r\n  requiresContext?: boolean;\r\n  contextData?: any;\r\n}\r\n\r\ninterface PersonalizedQuickActionsProps {\r\n  currentModule?: string;\r\n  currentContext?: any;\r\n  onQuickAction?: (actionId: string, data?: any) => void;\r\n  onNavigate?: (module: string, page?: string) => void;\r\n  className?: string;\r\n}\r\n\r\n/**\r\n * PersonalizedQuickActions function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function PersonalizedQuickActions({\r\n  currentModule = 'genel',\r\n  currentContext,\r\n  onQuickAction,\r\n  onNavigate,\r\n  className,\r\n}: PersonalizedQuickActionsProps) {\r\n  const [userPreferences, setUserPreferences] = useState<Record<string, any>>({});\r\n  const [selectedAction, setSelectedAction] = useState<QuickAction | null>(null);\r\n  const [showActionDialog, setShowActionDialog] = useState(false);\r\n\r\n  // Load user preferences from localStorage\r\n  useEffect(() => {\r\n    try {\r\n      const saved = localStorage.getItem('quick-actions-preferences');\r\n      if (saved) {\r\n        setUserPreferences(JSON.parse(saved));\r\n      }\r\n    } catch (error) {\r\n      logger.warn('Error loading quick actions preferences:', error);\r\n    }\r\n  }, []);\r\n\r\n  // Save preferences when they change\r\n  const updatePreferences = (updates: Record<string, any>) => {\r\n    const newPrefs = { ...userPreferences, ...updates };\r\n    setUserPreferences(newPrefs);\r\n    try {\r\n      localStorage.setItem('quick-actions-preferences', JSON.stringify(newPrefs));\r\n    } catch (error) {\r\n      logger.warn('Error saving quick actions preferences:', error);\r\n    }\r\n  };\r\n\r\n  // Track action usage\r\n  const trackAction = (actionId: string) => {\r\n    const usage = userPreferences.usage || {};\r\n    updatePreferences({\r\n      usage: {\r\n        ...usage,\r\n        [actionId]: {\r\n          count: (usage[actionId]?.count ?? 0) + 1,\r\n          lastUsed: new Date().toISOString(),\r\n        },\r\n      },\r\n    });\r\n  };\r\n\r\n  // Define all available actions\r\n  const allActions: QuickAction[] = useMemo(\r\n    () => [\r\n      // Beneficiary Actions\r\n      {\r\n        id: 'new-beneficiary',\r\n        title: 'Yeni ─░htiya├ğ Sahibi',\r\n        description: 'H─▒zl─▒ ba┼şvuru kayd─▒ olu┼ştur',\r\n        icon: <Users className=\"w-4 h-4\" />,\r\n        category: 'frequent',\r\n        priority: 10,\r\n        usage_count: userPreferences.usage?.['new-beneficiary']?.count ?? 0,\r\n        last_used: userPreferences.usage?.['new-beneficiary']?.lastUsed\r\n          ? new Date(userPreferences.usage['new-beneficiary'].lastUsed)\r\n          : undefined,\r\n        estimated_time: '3-5 dk',\r\n        shortcuts: 'Ôîİ+N',\r\n        onExecute: () => {\r\n          trackAction('new-beneficiary');\r\n          onQuickAction?.('new-beneficiary');\r\n        },\r\n      },\r\n      {\r\n        id: 'approve-applications',\r\n        title: 'Ba┼şvuru Onaylar─▒',\r\n        description: 'Bekleyen ba┼şvurular─▒ incele',\r\n        icon: <FileText className=\"w-4 h-4\" />,\r\n        category: 'recent',\r\n        priority: 9,\r\n        usage_count: userPreferences.usage?.['approve-applications']?.count ?? 0,\r\n        onExecute: () => {\r\n          trackAction('approve-applications');\r\n          onNavigate?.('yardim', '/yardim/basvurular');\r\n        },\r\n      },\r\n\r\n      // Donation Actions\r\n      {\r\n        id: 'record-donation',\r\n        title: 'Ba─ş─▒┼ş Kayd─▒',\r\n        description: 'Yeni ba─ş─▒┼ş giri┼şi yap',\r\n        icon: <Heart className=\"w-4 h-4\" />,\r\n        category: 'frequent',\r\n        priority: 9,\r\n        usage_count: userPreferences.usage?.['record-donation']?.count ?? 0,\r\n        estimated_time: '2-3 dk',\r\n        shortcuts: 'Ôîİ+D',\r\n        onExecute: () => {\r\n          trackAction('record-donation');\r\n          onQuickAction?.('record-donation');\r\n        },\r\n      },\r\n      {\r\n        id: 'donation-receipt',\r\n        title: 'Makbuz Olu┼ştur',\r\n        description: 'Ba─ş─▒┼ş makbuzu haz─▒rla',\r\n        icon: <FileText className=\"w-4 h-4\" />,\r\n        category: 'frequent',\r\n        priority: 8,\r\n        usage_count: userPreferences.usage?.['donation-receipt']?.count ?? 0,\r\n        onExecute: () => {\r\n          trackAction('donation-receipt');\r\n          logger.info('Generate receipt');\r\n        },\r\n      },\r\n\r\n      // Member Actions\r\n      {\r\n        id: 'new-member',\r\n        title: '├£ye Kayd─▒',\r\n        description: 'Yeni dernek ├╝yesi ekle',\r\n        icon: <Users className=\"w-4 h-4\" />,\r\n        category: 'frequent',\r\n        priority: 8,\r\n        usage_count: userPreferences.usage?.['new-member']?.count ?? 0,\r\n        estimated_time: '5-7 dk',\r\n        onExecute: () => {\r\n          trackAction('new-member');\r\n          onNavigate?.('uye', '/uye/yeni');\r\n        },\r\n      },\r\n      {\r\n        id: 'member-dues',\r\n        title: 'Aidat Takibi',\r\n        description: '├£ye aidatlar─▒n─▒ kontrol et',\r\n        icon: <DollarSign className=\"w-4 h-4\" />,\r\n        category: 'suggested',\r\n        priority: 7,\r\n        usage_count: userPreferences.usage?.['member-dues']?.count ?? 0,\r\n        onExecute: () => {\r\n          trackAction('member-dues');\r\n          onNavigate?.('uye', '/uye/aidat');\r\n        },\r\n      },\r\n\r\n      // Financial Actions\r\n      {\r\n        id: 'expense-entry',\r\n        title: 'Gider Giri┼şi',\r\n        description: 'Yeni gider kayd─▒ olu┼ştur',\r\n        icon: <DollarSign className=\"w-4 h-4\" />,\r\n        category: 'frequent',\r\n        priority: 7,\r\n        usage_count: userPreferences.usage?.['expense-entry']?.count ?? 0,\r\n        estimated_time: '2-4 dk',\r\n        onExecute: () => {\r\n          trackAction('expense-entry');\r\n          onQuickAction?.('expense-entry');\r\n        },\r\n      },\r\n      {\r\n        id: 'financial-report',\r\n        title: 'Mali Rapor',\r\n        description: 'Ayl─▒k gelir-gider raporu',\r\n        icon: <TrendingUp className=\"w-4 h-4\" />,\r\n        category: 'suggested',\r\n        priority: 6,\r\n        usage_count: userPreferences.usage?.['financial-report']?.count ?? 0,\r\n        onExecute: () => {\r\n          trackAction('financial-report');\r\n          onNavigate?.('fon', '/fon/raporlar');\r\n        },\r\n      },\r\n\r\n      // Event Actions\r\n      {\r\n        id: 'new-event',\r\n        title: 'Etkinlik Planlama',\r\n        description: 'Yeni etkinlik olu┼ştur',\r\n        icon: <Calendar className=\"w-4 h-4\" />,\r\n        category: 'recent',\r\n        priority: 6,\r\n        usage_count: userPreferences.usage?.['new-event']?.count ?? 0,\r\n        estimated_time: '10-15 dk',\r\n        onExecute: () => {\r\n          trackAction('new-event');\r\n          onNavigate?.('is', '/is/etkinlikler');\r\n        },\r\n      },\r\n\r\n      // System Actions\r\n      {\r\n        id: 'backup-data',\r\n        title: 'Veri Yede─şi',\r\n        description: 'Sistem verilerini yedekle',\r\n        icon: <Settings className=\"w-4 h-4\" />,\r\n        category: 'suggested',\r\n        priority: 5,\r\n        usage_count: userPreferences.usage?.['backup-data']?.count ?? 0,\r\n        onExecute: () => {\r\n          trackAction('backup-data');\r\n          logger.info('Start backup process');\r\n        },\r\n      },\r\n    ],\r\n    [userPreferences.usage, onQuickAction, onNavigate],\r\n  );\r\n\r\n  // Filter and sort actions based on context and usage\r\n  const personalizedActions = useMemo(() => {\r\n    let filtered = [...allActions];\r\n\r\n    // Context-based filtering\r\n    if (currentModule !== 'genel') {\r\n      filtered = filtered.filter((action) => {\r\n        const moduleMap: Record<string, string[]> = {\r\n          yardim: ['new-beneficiary', 'approve-applications'],\r\n          bagis: ['record-donation', 'donation-receipt'],\r\n          uye: ['new-member', 'member-dues'],\r\n          fon: ['expense-entry', 'financial-report'],\r\n          is: ['new-event'],\r\n        };\r\n\r\n        const relevantActions = moduleMap[currentModule] || [];\r\n        return relevantActions.includes(action.id) || action.category === 'favorite';\r\n      });\r\n    }\r\n\r\n    // Sort by usage and priority\r\n    filtered.sort((a, b) => {\r\n      const aUsage = userPreferences.usage?.[a.id]?.count ?? 0;\r\n      const bUsage = userPreferences.usage?.[b.id]?.count ?? 0;\r\n\r\n      // Recently used items get priority\r\n      if (aUsage > 0 && bUsage > 0) {\r\n        const aLastUsed = new Date(userPreferences.usage[a.id]?.lastUsed ?? 0);\r\n        const bLastUsed = new Date(userPreferences.usage[b.id]?.lastUsed ?? 0);\r\n\r\n        if (Math.abs(aLastUsed.getTime() - bLastUsed.getTime()) < 24 * 60 * 60 * 1000) {\r\n          return bUsage - aUsage; // Sort by usage if recently used\r\n        }\r\n\r\n        return bLastUsed.getTime() - aLastUsed.getTime(); // Sort by recency\r\n      }\r\n\r\n      // Fall back to priority and usage\r\n      return b.priority + bUsage * 0.1 - (a.priority + aUsage * 0.1);\r\n    });\r\n\r\n    return filtered.slice(0, 6); // Show top 6 actions\r\n  }, [allActions, currentModule, userPreferences]);\r\n\r\n  const getCategoryIcon = (category: QuickAction['category']) => {\r\n    switch (category) {\r\n      case 'frequent':\r\n        return <Zap className=\"w-3 h-3\" />;\r\n      case 'recent':\r\n        return <Clock className=\"w-3 h-3\" />;\r\n      case 'suggested':\r\n        return <TrendingUp className=\"w-3 h-3\" />;\r\n      case 'favorite':\r\n        return <Star className=\"w-3 h-3\" />;\r\n      default:\r\n        return <Plus className=\"w-3 h-3\" />;\r\n    }\r\n  };\r\n\r\n  const getCategoryColor = (category: QuickAction['category']) => {\r\n    switch (category) {\r\n      case 'frequent':\r\n        return 'text-amber-600 bg-amber-50 border-amber-200';\r\n      case 'recent':\r\n        return 'text-blue-600 bg-blue-50 border-blue-200';\r\n      case 'suggested':\r\n        return 'text-emerald-600 bg-emerald-50 border-emerald-200';\r\n      case 'favorite':\r\n        return 'text-pink-600 bg-pink-50 border-pink-200';\r\n      default:\r\n        return 'text-gray-600 bg-gray-50 border-gray-200';\r\n    }\r\n  };\r\n\r\n  const getCategoryLabel = (category: QuickAction['category']) => {\r\n    switch (category) {\r\n      case 'frequent':\r\n        return 'S─▒k Kullan─▒lan';\r\n      case 'recent':\r\n        return 'Son Kullan─▒lan';\r\n      case 'suggested':\r\n        return '├ûnerilen';\r\n      case 'favorite':\r\n        return 'Favoriler';\r\n      default:\r\n        return 'Di─şer';\r\n    }\r\n  };\r\n\r\n  const handleActionClick = (action: QuickAction) => {\r\n    if (action.requiresContext) {\r\n      setSelectedAction(action);\r\n      setShowActionDialog(true);\r\n    } else {\r\n      action.onExecute();\r\n    }\r\n  };\r\n\r\n  const executeAction = () => {\r\n    if (selectedAction) {\r\n      selectedAction.onExecute();\r\n      setShowActionDialog(false);\r\n      setSelectedAction(null);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Card className={cn('h-full', className)}>\r\n        <CardHeader className=\"pb-3\">\r\n          <div className=\"flex items-center justify-between\">\r\n            <CardTitle className=\"text-base\">H─▒zl─▒ ─░┼şlemler</CardTitle>\r\n            <Badge variant=\"outline\" className=\"text-xs\">\r\n              Ki┼şiselle┼ştirilmi┼ş\r\n            </Badge>\r\n          </div>\r\n        </CardHeader>\r\n        <CardContent className=\"p-3 pt-0\">\r\n          <div className=\"grid grid-cols-2 sm:grid-cols-3 gap-2\">\r\n            {personalizedActions.map((action) => (\r\n              <Button\r\n                key={action.id}\r\n                variant=\"outline\"\r\n                className={cn(\r\n                  'h-auto p-3 flex flex-col items-start gap-2 hover:bg-accent/50',\r\n                  'transition-all duration-200 group',\r\n                )}\r\n                onClick={() => {\r\n                  handleActionClick(action);\r\n                }}\r\n              >\r\n                <div className=\"w-full flex items-center justify-between\">\r\n                  <div className=\"w-8 h-8 rounded-md bg-muted/50 flex items-center justify-center group-hover:bg-muted transition-colors\">\r\n                    {action.icon}\r\n                  </div>\r\n                  <div className=\"flex items-center gap-1\">\r\n                    <div\r\n                      className={cn(\r\n                        'px-1.5 py-0.5 rounded-md border text-xs flex items-center gap-1',\r\n                        getCategoryColor(action.category),\r\n                      )}\r\n                    >\r\n                      {getCategoryIcon(action.category)}\r\n                    </div>\r\n                    {action.usage_count > 0 && (\r\n                      <Badge variant=\"secondary\" className=\"text-xs h-4 px-1\">\r\n                        {action.usage_count}\r\n                      </Badge>\r\n                    )}\r\n                  </div>\r\n                </div>\r\n\r\n                <div className=\"w-full text-left\">\r\n                  <h4 className=\"font-medium text-sm mb-1 line-clamp-1\">{action.title}</h4>\r\n                  <p className=\"text-xs text-muted-foreground line-clamp-2 leading-relaxed\">\r\n                    {action.description}\r\n                  </p>\r\n                </div>\r\n\r\n                <div className=\"w-full flex items-center justify-between text-xs text-muted-foreground mt-1\">\r\n                  {action.estimated_time && <span>{action.estimated_time}</span>}\r\n                  {action.shortcuts && (\r\n                    <kbd className=\"px-1 py-0.5 bg-muted border border-border rounded text-xs font-mono\">\r\n                      {action.shortcuts}\r\n                    </kbd>\r\n                  )}\r\n                </div>\r\n              </Button>\r\n            ))}\r\n          </div>\r\n\r\n          {personalizedActions.length === 0 && (\r\n            <div className=\"text-center py-8 text-muted-foreground\">\r\n              <Plus className=\"w-8 h-8 mx-auto mb-2 opacity-50\" />\r\n              <p className=\"text-sm\">Bu mod├╝l i├ğin hen├╝z h─▒zl─▒ i┼şlem bulunamad─▒</p>\r\n              <p className=\"text-xs mt-1\">Sistem kullan─▒m─▒n─▒za g├Âre ├Âneriler geli┼şecek</p>\r\n            </div>\r\n          )}\r\n\r\n          <div className=\"mt-3 pt-3 border-t border-border\">\r\n            <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\r\n              <span>{currentModule !== 'genel' && `${currentModule} mod├╝l├╝`}</span>\r\n              <span>Son g├╝ncelleme: Az ├Ânce</span>\r\n            </div>\r\n          </div>\r\n        </CardContent>\r\n      </Card>\r\n\r\n      {/* Action Confirmation Dialog */}\r\n      <Dialog open={showActionDialog} onOpenChange={setShowActionDialog}>\r\n        <DialogContent>\r\n          <DialogHeader>\r\n            <DialogTitle className=\"flex items-center gap-2\">\r\n              {selectedAction?.icon}\r\n              {selectedAction?.title}\r\n            </DialogTitle>\r\n            <DialogDescription>{selectedAction?.description}</DialogDescription>\r\n          </DialogHeader>\r\n\r\n          <div className=\"space-y-4\">\r\n            <div className=\"flex items-center justify-between\">\r\n              <span className=\"text-sm text-muted-foreground\">Tahmini s├╝re:</span>\r\n              <Badge variant=\"outline\">{selectedAction?.estimated_time ?? '1-2 dk'}</Badge>\r\n            </div>\r\n\r\n            <div className=\"flex justify-end gap-2\">\r\n              <Button\r\n                variant=\"outline\"\r\n                onClick={() => {\r\n                  setShowActionDialog(false);\r\n                }}\r\n              >\r\n                ─░ptal\r\n              </Button>\r\n              <Button onClick={executeAction}>Ba┼şlat</Button>\r\n            </div>\r\n          </div>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default PersonalizedQuickActions;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ux\\SmartCommandPalette.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":297,"column":15,"nodeType":"MemberExpression","endLine":297,"endColumn":46},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":298,"column":13,"nodeType":"MemberExpression","endLine":298,"endColumn":44}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview SmartCommandPalette Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport React, { useState, useEffect, useMemo, useRef } from 'react';\r\nimport {\r\n  Search,\r\n  Zap,\r\n  Users,\r\n  Heart,\r\n  DollarSign,\r\n  Settings,\r\n  HelpCircle,\r\n  BookOpen,\r\n  Shield,\r\n  Calendar,\r\n  UserPlus,\r\n  BarChart3,\r\n} from 'lucide-react';\r\nimport { Dialog, DialogContent, DialogTitle, DialogDescription } from '../ui/dialog';\r\nimport { Badge } from '../ui/badge';\r\nimport { cn } from '../ui/utils';\r\n\r\nimport { logger } from '../../lib/logging/logger';\r\ninterface CommandItem {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  category: 'navigation' | 'action' | 'search' | 'help';\r\n  icon: React.ReactNode;\r\n  shortcut?: string;\r\n  onExecute: () => void;\r\n  keywords: string[];\r\n  priority: number;\r\n}\r\n\r\ninterface SmartCommandPaletteProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onNavigate?: (module: string, page?: string) => void;\r\n  onQuickAction?: (actionId: string) => void;\r\n  currentModule?: string;\r\n}\r\n\r\n/**\r\n * SmartCommandPalette function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function SmartCommandPalette({\r\n  isOpen,\r\n  onClose,\r\n  onNavigate,\r\n  onQuickAction,\r\n  currentModule = 'genel',\r\n}: SmartCommandPaletteProps) {\r\n  const [query, setQuery] = useState('');\r\n  const [selectedIndex, setSelectedIndex] = useState(0);\r\n  const inputRef = useRef<HTMLInputElement>(null);\r\n\r\n  // Comprehensive command database\r\n  const commands: CommandItem[] = useMemo(\r\n    () => [\r\n      // Navigation Commands\r\n      {\r\n        id: 'nav-dashboard',\r\n        title: 'Ana Dashboard',\r\n        description: 'Sistem genel durumu ve istatistikler',\r\n        category: 'navigation',\r\n        icon: <Zap className=\"w-4 h-4\" />,\r\n        onExecute: () => onNavigate?.('genel'),\r\n        keywords: ['dashboard', 'ana', 'genel', 'istatistik', '├Âzet'],\r\n        priority: 10,\r\n      },\r\n      {\r\n        id: 'nav-reporting',\r\n        title: 'Raporlama & Analitik',\r\n        description: 'Kapsaml─▒ raporlama ve analitik merkezi',\r\n        category: 'navigation',\r\n        icon: <BarChart3 className=\"w-4 h-4\" />,\r\n        onExecute: () => onNavigate?.('raporlama'),\r\n        keywords: ['rapor', 'analitik', 'veri', 'grafik', 'istatistik', 'dashboard'],\r\n        priority: 9.5,\r\n      },\r\n      {\r\n        id: 'nav-beneficiaries',\r\n        title: '─░htiya├ğ Sahipleri',\r\n        description: 'Yard─▒m alan ki┼şileri y├Ânet',\r\n        category: 'navigation',\r\n        icon: <Users className=\"w-4 h-4\" />,\r\n        onExecute: () => onNavigate?.('yardim', '/yardim/ihtiyac-sahipleri'),\r\n        keywords: ['ihtiya├ğ', 'yard─▒m', 'sahipleri', 'beneficiary', 'ki┼şiler'],\r\n        priority: 9,\r\n      },\r\n      {\r\n        id: 'nav-donations',\r\n        title: 'Ba─ş─▒┼şlar',\r\n        description: 'Gelen ba─ş─▒┼şlar─▒ takip et',\r\n        category: 'navigation',\r\n        icon: <Heart className=\"w-4 h-4\" />,\r\n        onExecute: () => onNavigate?.('bagis', '/bagis/liste'),\r\n        keywords: ['ba─ş─▒┼ş', 'donation', 'yard─▒m', 'gelir'],\r\n        priority: 9,\r\n      },\r\n      {\r\n        id: 'nav-members',\r\n        title: '├£ye Y├Ânetimi',\r\n        description: 'Dernek ├╝yelerini y├Ânet',\r\n        category: 'navigation',\r\n        icon: <Users className=\"w-4 h-4\" />,\r\n        onExecute: () => onNavigate?.('uye', '/uye/liste'),\r\n        keywords: ['├╝ye', 'member', 'ki┼şiler', 'y├Ânetim'],\r\n        priority: 8,\r\n      },\r\n      {\r\n        id: 'nav-finance',\r\n        title: 'Mali ─░┼şler',\r\n        description: 'Gelir-gider ve raporlar',\r\n        category: 'navigation',\r\n        icon: <DollarSign className=\"w-4 h-4\" />,\r\n        onExecute: () => onNavigate?.('fon', '/fon/gelir-gider'),\r\n        keywords: ['mali', 'para', 'gelir', 'gider', 'finans', 'muhasebe'],\r\n        priority: 8,\r\n      },\r\n      {\r\n        id: 'nav-legal',\r\n        title: 'Hukuki Yard─▒m',\r\n        description: 'Hukuki destek ve takip',\r\n        category: 'navigation',\r\n        icon: <Shield className=\"w-4 h-4\" />,\r\n        onExecute: () => onNavigate?.('hukuki', '/hukuki/danismanlik'),\r\n        keywords: ['hukuk', 'avukat', 'dava', 'legal', 'yard─▒m'],\r\n        priority: 7,\r\n      },\r\n      {\r\n        id: 'nav-events',\r\n        title: 'Etkinlikler',\r\n        description: 'Dernek etkinlikleri ve toplant─▒lar',\r\n        category: 'navigation',\r\n        icon: <Calendar className=\"w-4 h-4\" />,\r\n        onExecute: () => onNavigate?.('is', '/is/etkinlikler'),\r\n        keywords: ['etkinlik', 'event', 'toplant─▒', 'meeting', 'program'],\r\n        priority: 7,\r\n      },\r\n\r\n      // Quick Actions\r\n      {\r\n        id: 'action-new-beneficiary',\r\n        title: 'Yeni ─░htiya├ğ Sahibi Ekle',\r\n        description: 'H─▒zl─▒ yard─▒m ba┼şvurusu kayd─▒',\r\n        category: 'action',\r\n        icon: <UserPlus className=\"w-4 h-4\" />,\r\n        shortcut: 'Ôîİ+N',\r\n        onExecute: () => onQuickAction?.('new-beneficiary'),\r\n        keywords: ['yeni', 'ekle', 'ihtiya├ğ', 'ba┼şvuru', 'kay─▒t'],\r\n        priority: 9,\r\n      },\r\n      {\r\n        id: 'action-new-donation',\r\n        title: 'Ba─ş─▒┼ş Kayd─▒',\r\n        description: 'Yeni ba─ş─▒┼ş giri┼şi yap',\r\n        category: 'action',\r\n        icon: <Heart className=\"w-4 h-4\" />,\r\n        shortcut: 'Ôîİ+D',\r\n        onExecute: () => onQuickAction?.('new-donation'),\r\n        keywords: ['ba─ş─▒┼ş', 'kay─▒t', 'yeni', 'giri┼ş'],\r\n        priority: 8,\r\n      },\r\n      {\r\n        id: 'action-new-member',\r\n        title: '├£ye Kayd─▒',\r\n        description: 'Yeni dernek ├╝yesi kaydet',\r\n        category: 'action',\r\n        icon: <UserPlus className=\"w-4 h-4\" />,\r\n        onExecute: () => onQuickAction?.('new-member'),\r\n        keywords: ['├╝ye', 'kay─▒t', 'yeni', 'member'],\r\n        priority: 8,\r\n      },\r\n\r\n      // Help Commands\r\n      {\r\n        id: 'help-getting-started',\r\n        title: 'Ba┼şlang─▒├ğ Rehberi',\r\n        description: 'Sistemi kullanmaya ba┼şla',\r\n        category: 'help',\r\n        icon: <BookOpen className=\"w-4 h-4\" />,\r\n        onExecute: () => {\r\n          logger.info('Help: Getting Started');\r\n        },\r\n        keywords: ['yard─▒m', 'rehber', 'ba┼şlang─▒├ğ', 'nas─▒l', 'guide'],\r\n        priority: 6,\r\n      },\r\n      {\r\n        id: 'help-shortcuts',\r\n        title: 'Klavye K─▒sayollar─▒',\r\n        description: 'H─▒zl─▒ ├ğal─▒┼şma i├ğin k─▒sayollar',\r\n        category: 'help',\r\n        icon: <HelpCircle className=\"w-4 h-4\" />,\r\n        shortcut: 'Ôîİ+?',\r\n        onExecute: () => {\r\n          logger.info('Help: Shortcuts');\r\n        },\r\n        keywords: ['klavye', 'k─▒sayol', 'shortcut', 'h─▒zl─▒'],\r\n        priority: 5,\r\n      },\r\n\r\n      // Settings\r\n      {\r\n        id: 'settings-system',\r\n        title: 'Sistem Ayarlar─▒',\r\n        description: 'Genel sistem yap─▒land─▒rmas─▒',\r\n        category: 'action',\r\n        icon: <Settings className=\"w-4 h-4\" />,\r\n        onExecute: () => onNavigate?.('settings'),\r\n        keywords: ['ayar', 'setting', 'yap─▒land─▒rma', 'config'],\r\n        priority: 6,\r\n      },\r\n    ],\r\n    [onNavigate, onQuickAction],\r\n  );\r\n\r\n  // Fuzzy search implementation\r\n  const filteredCommands = useMemo(() => {\r\n    if (!query) {\r\n      return commands.sort((a, b) => b.priority - a.priority).slice(0, 10);\r\n    }\r\n\r\n    const queryLower = query.toLowerCase();\r\n    const scored = commands\r\n      .map((command) => {\r\n        let score = 0;\r\n\r\n        // Title exact match gets highest score\r\n        if (command.title.toLowerCase().includes(queryLower)) {\r\n          score += 10;\r\n        }\r\n\r\n        // Description match\r\n        if (command.description.toLowerCase().includes(queryLower)) {\r\n          score += 5;\r\n        }\r\n\r\n        // Keyword matches\r\n        const keywordMatches = command.keywords.filter((keyword) =>\r\n          keyword.toLowerCase().includes(queryLower),\r\n        ).length;\r\n        score += keywordMatches * 3;\r\n\r\n        // Fuzzy matching for typos\r\n        const fuzzyMatches = command.keywords.some((keyword) => {\r\n          const keyword_lower = keyword.toLowerCase();\r\n          if (queryLower.length <= 2) return keyword_lower.startsWith(queryLower);\r\n\r\n          // Simple fuzzy matching\r\n          let matches = 0;\r\n          for (const char of queryLower) {\r\n            if (keyword_lower.includes(char)) matches++;\r\n          }\r\n          return matches >= queryLower.length * 0.6;\r\n        });\r\n\r\n        if (fuzzyMatches) score += 2;\r\n\r\n        // Priority bonus\r\n        score += command.priority;\r\n\r\n        return { command, score };\r\n      })\r\n      .filter(({ score }) => score > 0)\r\n      .sort((a, b) => b.score - a.score)\r\n      .slice(0, 8)\r\n      .map(({ command }) => command);\r\n\r\n    return scored;\r\n  }, [query, commands]);\r\n\r\n  // Keyboard navigation\r\n  useEffect(() => {\r\n    if (!isOpen) return;\r\n\r\n    const handleKeyDown = (e: KeyboardEvent) => {\r\n      switch (e.key) {\r\n        case 'ArrowDown':\r\n          e.preventDefault();\r\n          setSelectedIndex((prev) => (prev < filteredCommands.length - 1 ? prev + 1 : 0));\r\n          break;\r\n        case 'ArrowUp':\r\n          e.preventDefault();\r\n          setSelectedIndex((prev) => (prev > 0 ? prev - 1 : filteredCommands.length - 1));\r\n          break;\r\n        case 'Enter':\r\n          e.preventDefault();\r\n          if (filteredCommands[selectedIndex]) {\r\n            filteredCommands[selectedIndex].onExecute();\r\n            onClose();\r\n          }\r\n          break;\r\n        case 'Escape':\r\n          onClose();\r\n          break;\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      document.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [isOpen, filteredCommands, selectedIndex, onClose]);\r\n\r\n  // Reset state when opened\r\n  useEffect(() => {\r\n    if (isOpen) {\r\n      setQuery('');\r\n      setSelectedIndex(0);\r\n      setTimeout(() => inputRef.current?.focus(), 100);\r\n    }\r\n  }, [isOpen]);\r\n\r\n  // Auto-select first item when query changes\r\n  useEffect(() => {\r\n    setSelectedIndex(0);\r\n  }, [query]);\r\n\r\n  const getCategoryColor = (category: CommandItem['category']) => {\r\n    switch (category) {\r\n      case 'navigation':\r\n        return 'bg-blue-500';\r\n      case 'action':\r\n        return 'bg-emerald-500';\r\n      case 'search':\r\n        return 'bg-amber-500';\r\n      case 'help':\r\n        return 'bg-purple-500';\r\n      default:\r\n        return 'bg-gray-500';\r\n    }\r\n  };\r\n\r\n  const getCategoryLabel = (category: CommandItem['category']) => {\r\n    switch (category) {\r\n      case 'navigation':\r\n        return 'Sayfa';\r\n      case 'action':\r\n        return '─░┼şlem';\r\n      case 'search':\r\n        return 'Arama';\r\n      case 'help':\r\n        return 'Yard─▒m';\r\n      default:\r\n        return 'Di─şer';\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={onClose}>\r\n      <DialogContent className=\"sm:max-w-2xl p-0 gap-0 overflow-hidden\">\r\n        <DialogTitle className=\"sr-only\">Ak─▒ll─▒ Komut Paleti</DialogTitle>\r\n        <DialogDescription className=\"sr-only\">\r\n          Sistem genelinde h─▒zl─▒ arama ve komut ├ğal─▒┼şt─▒rma. Sayfalar aras─▒ ge├ği┼ş, h─▒zl─▒ i┼şlemler ve\r\n          yard─▒m i├ğin kullanabilirsiniz.\r\n        </DialogDescription>\r\n        <div className=\"border-b border-border p-4\">\r\n          <div className=\"flex items-center gap-3\">\r\n            <Search className=\"w-5 h-5 text-muted-foreground\" />\r\n            <input\r\n              ref={inputRef}\r\n              type=\"text\"\r\n              placeholder=\"Ne yapmak istiyorsunuz? (Komut ara...)\"\r\n              value={query}\r\n              onChange={(e) => {\r\n                setQuery(e.target.value);\r\n              }}\r\n              className=\"flex-1 text-base bg-transparent border-none outline-none placeholder:text-muted-foreground\"\r\n            />\r\n            <Badge variant=\"secondary\" className=\"text-xs\">\r\n              {filteredCommands.length} sonu├ğ\r\n            </Badge>\r\n          </div>\r\n        </div>\r\n\r\n        <div className=\"max-h-96 overflow-y-auto\">\r\n          {filteredCommands.length === 0 ? (\r\n            <div className=\"p-8 text-center\">\r\n              <Search className=\"w-12 h-12 text-muted-foreground/50 mx-auto mb-4\" />\r\n              <p className=\"text-muted-foreground mb-2\">\r\n                {query ? 'Sonu├ğ bulunamad─▒' : 'Komut aramaya ba┼şlay─▒n'}\r\n              </p>\r\n              <p className=\"text-sm text-muted-foreground\">\r\n                Sayfa, i┼şlem veya ayar arayabilirsiniz\r\n              </p>\r\n            </div>\r\n          ) : (\r\n            <div className=\"p-2\">\r\n              {filteredCommands.map((command, index) => (\r\n                <button\r\n                  key={command.id}\r\n                  onClick={() => {\r\n                    command.onExecute();\r\n                    onClose();\r\n                  }}\r\n                  className={cn(\r\n                    'w-full flex items-center gap-3 p-3 rounded-lg text-left transition-colors',\r\n                    'hover:bg-accent hover:text-accent-foreground',\r\n                    index === selectedIndex && 'bg-accent text-accent-foreground',\r\n                  )}\r\n                >\r\n                  <div className=\"flex-shrink-0 w-8 h-8 rounded-md bg-muted/50 flex items-center justify-center\">\r\n                    {command.icon}\r\n                  </div>\r\n\r\n                  <div className=\"flex-1 min-w-0\">\r\n                    <div className=\"flex items-center gap-2 mb-1\">\r\n                      <h4 className=\"font-medium text-sm truncate\">{command.title}</h4>\r\n                      <div\r\n                        className={cn(\r\n                          'w-1.5 h-1.5 rounded-full flex-shrink-0',\r\n                          getCategoryColor(command.category),\r\n                        )}\r\n                      />\r\n                      <span className=\"text-xs text-muted-foreground hidden sm:inline\">\r\n                        {getCategoryLabel(command.category)}\r\n                      </span>\r\n                    </div>\r\n                    <p className=\"text-xs text-muted-foreground truncate\">{command.description}</p>\r\n                  </div>\r\n\r\n                  {command.shortcut && (\r\n                    <Badge\r\n                      variant=\"outline\"\r\n                      className=\"text-xs font-mono ml-2 hidden sm:inline-flex\"\r\n                    >\r\n                      {command.shortcut}\r\n                    </Badge>\r\n                  )}\r\n                </button>\r\n              ))}\r\n            </div>\r\n          )}\r\n        </div>\r\n\r\n        <div className=\"border-t border-border p-3 bg-muted/30\">\r\n          <div className=\"flex items-center justify-between text-xs text-muted-foreground\">\r\n            <div className=\"flex items-center gap-4\">\r\n              <span className=\"flex items-center gap-1\">\r\n                <kbd className=\"px-1.5 py-0.5 bg-background border border-border rounded text-xs\">\r\n                  ÔåæÔåô\r\n                </kbd>\r\n                Gezin\r\n              </span>\r\n              <span className=\"flex items-center gap-1\">\r\n                <kbd className=\"px-1.5 py-0.5 bg-background border border-border rounded text-xs\">\r\n                  ÔÅÄ\r\n                </kbd>\r\n                Se├ğ\r\n              </span>\r\n              <span className=\"flex items-center gap-1\">\r\n                <kbd className=\"px-1.5 py-0.5 bg-background border border-border rounded text-xs\">\r\n                  Esc\r\n                </kbd>\r\n                Kapat\r\n              </span>\r\n            </div>\r\n            <div className=\"hidden sm:block\">\r\n              <span className=\"text-xs\">\r\n                {currentModule !== 'genel' && `${currentModule} mod├╝l├╝nde`}\r\n              </span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport default SmartCommandPalette;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ux\\UserOnboardingFlow.tsx","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":390,"column":17,"nodeType":"MemberExpression","endLine":390,"endColumn":41},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":403,"column":18,"nodeType":"MemberExpression","endLine":403,"endColumn":36},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":404,"column":13,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":404,"endColumn":15,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[15459,15461],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":458,"column":27,"nodeType":"MemberExpression","endLine":458,"endColumn":45}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview UserOnboardingFlow Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport React, { useState, useEffect } from 'react';\r\nimport {\r\n  ChevronLeft,\r\n  ChevronRight,\r\n  X,\r\n  Play,\r\n  CheckCircle,\r\n  Star,\r\n  Zap,\r\n  Users,\r\n  Heart,\r\n  Target,\r\n} from 'lucide-react';\r\nimport { Button } from '../ui/button';\r\nimport { Badge } from '../ui/badge';\r\nimport { Progress } from '../ui/progress';\r\nimport { Dialog, DialogContent, DialogTitle, DialogDescription } from '../ui/dialog';\r\nimport { cn } from '../ui/utils';\r\n\r\nimport { logger } from '../../lib/logging/logger';\r\ninterface OnboardingStep {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  content: React.ReactNode;\r\n  targetElement?: string;\r\n  action?: {\r\n    label: string;\r\n    onClick: () => void;\r\n  };\r\n  tips?: string[];\r\n  videoUrl?: string;\r\n  estimatedTime?: string;\r\n}\r\n\r\ninterface UserOnboardingFlowProps {\r\n  isOpen: boolean;\r\n  onClose: () => void;\r\n  onComplete: () => void;\r\n  userRole?: 'admin' | 'moderator' | 'user';\r\n  variant?: 'welcome' | 'feature' | 'update';\r\n  className?: string;\r\n}\r\n\r\nconst onboardingSteps: Record<string, OnboardingStep[]> = {\r\n  welcome: [\r\n    {\r\n      id: 'welcome',\r\n      title: 'Dernek Y├Ânetim Sistemine Ho┼ş Geldiniz! ­şÄë',\r\n      description: 'Size sistemimizin temel ├Âzelliklerini tan─▒taca─ş─▒z.',\r\n      estimatedTime: '5-7 dakika',\r\n      content: (\r\n        <div className=\"space-y-6 text-center\">\r\n          <div className=\"w-20 h-20 mx-auto bg-gradient-to-br from-primary/20 to-primary/5 rounded-full flex items-center justify-center mb-6\">\r\n            <Star className=\"w-10 h-10 text-primary\" />\r\n          </div>\r\n\r\n          <div className=\"space-y-4\">\r\n            <h3 className=\"text-xl font-semibold\">Modern Dernek Y├Ânetimi</h3>\r\n            <p className=\"text-muted-foreground leading-relaxed\">\r\n              Derne─şinizin t├╝m i┼şlemlerini tek yerden y├Ânetin. ─░htiya├ğ sahiplerinden ba─ş─▒┼şlara, ├╝ye\r\n              takibinden mali i┼şlere kadar her ┼şey elinizin alt─▒nda.\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-2 gap-4 text-sm\">\r\n            <div className=\"flex items-center gap-2 text-left\">\r\n              <CheckCircle className=\"w-4 h-4 text-green-500\" />\r\n              <span>Mobil Uyumlu</span>\r\n            </div>\r\n            <div className=\"flex items-center gap-2 text-left\">\r\n              <CheckCircle className=\"w-4 h-4 text-green-500\" />\r\n              <span>G├╝venli & H─▒zl─▒</span>\r\n            </div>\r\n            <div className=\"flex items-center gap-2 text-left\">\r\n              <CheckCircle className=\"w-4 h-4 text-green-500\" />\r\n              <span>Kolay Kullan─▒m</span>\r\n            </div>\r\n            <div className=\"flex items-center gap-2 text-left\">\r\n              <CheckCircle className=\"w-4 h-4 text-green-500\" />\r\n              <span>Kapsaml─▒ Raporlama</span>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ),\r\n    },\r\n    {\r\n      id: 'dashboard',\r\n      title: 'Ana Dashboard - Kontrol Merkezi',\r\n      description: 'T├╝m ├Ânemli bilgilere h─▒zl─▒ca eri┼şin.',\r\n      targetElement: '[data-onboarding=\"dashboard\"]',\r\n      content: (\r\n        <div className=\"space-y-4\">\r\n          <div className=\"flex items-center gap-3 mb-4\">\r\n            <div className=\"w-10 h-10 bg-blue-100 rounded-lg flex items-center justify-center\">\r\n              <Target className=\"w-5 h-5 text-blue-600\" />\r\n            </div>\r\n            <div>\r\n              <h3 className=\"font-semibold\">Dashboard ├ûzellikleri</h3>\r\n              <p className=\"text-sm text-muted-foreground\">─░htiyac─▒n─▒z olan her ┼şey</p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"space-y-3\">\r\n            <div className=\"flex items-start gap-3\">\r\n              <div className=\"w-6 h-6 bg-emerald-100 rounded flex items-center justify-center flex-shrink-0 mt-0.5\">\r\n                <div className=\"w-2 h-2 bg-emerald-600 rounded-full\" />\r\n              </div>\r\n              <div>\r\n                <h4 className=\"text-sm font-medium\">─░statistik Kartlar─▒</h4>\r\n                <p className=\"text-xs text-muted-foreground\">\r\n                  Aktif yard─▒mlar, toplam ba─ş─▒┼şlar, ├╝ye say─▒s─▒ gibi ├Ânemli metrikleri g├Âr├╝n\r\n                </p>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"flex items-start gap-3\">\r\n              <div className=\"w-6 h-6 bg-blue-100 rounded flex items-center justify-center flex-shrink-0 mt-0.5\">\r\n                <div className=\"w-2 h-2 bg-blue-600 rounded-full\" />\r\n              </div>\r\n              <div>\r\n                <h4 className=\"text-sm font-medium\">Son Aktiviteler</h4>\r\n                <p className=\"text-xs text-muted-foreground\">\r\n                  Yeni ba┼şvurular, onaylar ve g├╝ncellemeleri takip edin\r\n                </p>\r\n              </div>\r\n            </div>\r\n\r\n            <div className=\"flex items-start gap-3\">\r\n              <div className=\"w-6 h-6 bg-purple-100 rounded flex items-center justify-center flex-shrink-0 mt-0.5\">\r\n                <div className=\"w-2 h-2 bg-purple-600 rounded-full\" />\r\n              </div>\r\n              <div>\r\n                <h4 className=\"text-sm font-medium\">H─▒zl─▒ ─░┼şlemler</h4>\r\n                <p className=\"text-xs text-muted-foreground\">\r\n                  S─▒k kulland─▒─ş─▒n─▒z i┼şlemlere tek t─▒kla eri┼şin\r\n                </p>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ),\r\n      tips: [\r\n        'Kartlar─▒n ├╝zerine t─▒klayarak detayl─▒ g├Âr├╝n├╝me ge├ğebilirsiniz',\r\n        'Grafikler interaktiftir - ├╝zerlerinde gezinerek detaylar─▒ g├Âr├╝n',\r\n        'Dashboard d├╝zenini ki┼şiselle┼ştirebilirsiniz',\r\n      ],\r\n    },\r\n    {\r\n      id: 'navigation',\r\n      title: 'Kolay Navigasyon',\r\n      description: 'Sol men├╝ ile t├╝m mod├╝llere eri┼şin.',\r\n      targetElement: '[data-onboarding=\"sidebar\"]',\r\n      content: (\r\n        <div className=\"space-y-4\">\r\n          <div className=\"flex items-center gap-3 mb-4\">\r\n            <div className=\"w-10 h-10 bg-orange-100 rounded-lg flex items-center justify-center\">\r\n              <Zap className=\"w-5 h-5 text-orange-600\" />\r\n            </div>\r\n            <div>\r\n              <h3 className=\"font-semibold\">11 Ana Mod├╝l</h3>\r\n              <p className=\"text-sm text-muted-foreground\">Her ihtiyac─▒n─▒z i├ğin</p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"grid grid-cols-2 gap-3 text-xs\">\r\n            <div className=\"space-y-2\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <Users className=\"w-3 h-3 text-blue-600\" />\r\n                <span>Yard─▒m Y├Ânetimi</span>\r\n              </div>\r\n              <div className=\"flex items-center gap-2\">\r\n                <Heart className=\"w-3 h-3 text-red-600\" />\r\n                <span>Ba─ş─▒┼ş Takibi</span>\r\n              </div>\r\n              <div className=\"flex items-center gap-2\">\r\n                <Users className=\"w-3 h-3 text-green-600\" />\r\n                <span>├£ye Y├Ânetimi</span>\r\n              </div>\r\n            </div>\r\n            <div className=\"space-y-2\">\r\n              <div className=\"flex items-center gap-2\">\r\n                <Target className=\"w-3 h-3 text-purple-600\" />\r\n                <span>Mali ─░┼şler</span>\r\n              </div>\r\n              <div className=\"flex items-center gap-2\">\r\n                <Star className=\"w-3 h-3 text-yellow-600\" />\r\n                <span>Hukuki Yard─▒m</span>\r\n              </div>\r\n              <div className=\"flex items-center gap-2\">\r\n                <Zap className=\"w-3 h-3 text-indigo-600\" />\r\n                <span>+6 Mod├╝l Daha</span>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ),\r\n      tips: [\r\n        'Her mod├╝l kendi alt sayfalar─▒na sahiptir',\r\n        'Mobilde alt men├╝ kullan─▒n',\r\n        'Favori sayfalar─▒n─▒z─▒ i┼şaretleyebilirsiniz',\r\n      ],\r\n    },\r\n    {\r\n      id: 'search',\r\n      title: 'Ak─▒ll─▒ Arama Sistemi',\r\n      description: 'ÔîİK ile her ┼şeyi h─▒zl─▒ca bulun.',\r\n      targetElement: '[data-onboarding=\"search\"]',\r\n      content: (\r\n        <div className=\"space-y-4\">\r\n          <div className=\"flex items-center gap-3 mb-4\">\r\n            <div className=\"w-10 h-10 bg-green-100 rounded-lg flex items-center justify-center\">\r\n              <Zap className=\"w-5 h-5 text-green-600\" />\r\n            </div>\r\n            <div>\r\n              <h3 className=\"font-semibold\">G├╝├ğl├╝ Arama</h3>\r\n              <p className=\"text-sm text-muted-foreground\">─░stedi─şinizi hemen bulun</p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"space-y-3\">\r\n            <div className=\"p-3 bg-muted/30 rounded-lg\">\r\n              <div className=\"flex items-center gap-2 mb-2\">\r\n                <kbd className=\"px-2 py-1 bg-background border rounded text-xs\">ÔîİK</kbd>\r\n                <span className=\"text-sm\">Komut paletini a├ğar</span>\r\n              </div>\r\n              <p className=\"text-xs text-muted-foreground\">\r\n                Sayfalar, kay─▒tlar ve i┼şlemler aras─▒nda arama yapabilirsiniz\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"grid grid-cols-2 gap-2 text-xs\">\r\n              <div className=\"text-center p-2 bg-blue-50 rounded\">\r\n                <div className=\"font-medium text-blue-900\">Sayfalar</div>\r\n                <div className=\"text-blue-600\">Mod├╝ller ve alt sayfalar</div>\r\n              </div>\r\n              <div className=\"text-center p-2 bg-green-50 rounded\">\r\n                <div className=\"font-medium text-green-900\">Kay─▒tlar</div>\r\n                <div className=\"text-green-600\">Ki┼şiler, ba─ş─▒┼şlar vb.</div>\r\n              </div>\r\n              <div className=\"text-center p-2 bg-orange-50 rounded\">\r\n                <div className=\"font-medium text-orange-900\">─░┼şlemler</div>\r\n                <div className=\"text-orange-600\">H─▒zl─▒ eylemler</div>\r\n              </div>\r\n              <div className=\"text-center p-2 bg-purple-50 rounded\">\r\n                <div className=\"font-medium text-purple-900\">Yard─▒m</div>\r\n                <div className=\"text-purple-600\">Rehberler ve ipu├ğlar─▒</div>\r\n              </div>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ),\r\n      action: {\r\n        label: 'Aramay─▒ Dene',\r\n        onClick: () => {\r\n          // Trigger search palette\r\n          const event = new KeyboardEvent('keydown', {\r\n            key: 'k',\r\n            metaKey: true,\r\n            bubbles: true,\r\n          });\r\n          document.dispatchEvent(event);\r\n        },\r\n      },\r\n      tips: [\r\n        'Arama yaz─▒rken ├Âneriler otomatik gelir',\r\n        'Ge├ğmi┼ş aramalar─▒n─▒z hat─▒rlan─▒r',\r\n        'Filtreler ile sonu├ğlar─▒ daraltabilirsiniz',\r\n      ],\r\n    },\r\n    {\r\n      id: 'mobile',\r\n      title: 'Mobil Deneyim',\r\n      description: 'Telefon ve tablette m├╝kemmel ├ğal─▒┼ş─▒r.',\r\n      content: (\r\n        <div className=\"space-y-4\">\r\n          <div className=\"flex items-center gap-3 mb-4\">\r\n            <div className=\"w-10 h-10 bg-indigo-100 rounded-lg flex items-center justify-center\">\r\n              <Users className=\"w-5 h-5 text-indigo-600\" />\r\n            </div>\r\n            <div>\r\n              <h3 className=\"font-semibold\">Her Cihazda M├╝kemmel</h3>\r\n              <p className=\"text-sm text-muted-foreground\">Responsive tasar─▒m</p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"space-y-3\">\r\n            <div className=\"p-3 bg-gradient-to-r from-blue-50 to-indigo-50 rounded-lg\">\r\n              <h4 className=\"text-sm font-medium text-blue-900 mb-1\">Dokunmatik Optimize</h4>\r\n              <p className=\"text-xs text-blue-700\">\r\n                Minimum 44px dokunma alanlar─▒, gesture deste─şi\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"p-3 bg-gradient-to-r from-green-50 to-emerald-50 rounded-lg\">\r\n              <h4 className=\"text-sm font-medium text-green-900 mb-1\">H─▒zl─▒ Y├╝kleme</h4>\r\n              <p className=\"text-xs text-green-700\">Optimize edilmi┼ş performans, PWA deste─şi</p>\r\n            </div>\r\n\r\n            <div className=\"p-3 bg-gradient-to-r from-orange-50 to-amber-50 rounded-lg\">\r\n              <h4 className=\"text-sm font-medium text-orange-900 mb-1\">Offline ├çal─▒┼şma</h4>\r\n              <p className=\"text-xs text-orange-700\">\r\n                ─░nternet ba─şlant─▒s─▒ olmadan da kullanabilirsiniz\r\n              </p>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      ),\r\n      tips: [\r\n        'Alt navigasyon mobilde aktif',\r\n        'Pull-to-refresh ile sayfa yenileme',\r\n        'Ana ekranda k─▒sayol ekleyebilirsiniz',\r\n      ],\r\n    },\r\n    {\r\n      id: 'complete',\r\n      title: 'Haz─▒rs─▒n─▒z! ­şÜÇ',\r\n      description: 'Art─▒k sistemi kullanmaya ba┼şlayabilirsiniz.',\r\n      content: (\r\n        <div className=\"space-y-6 text-center\">\r\n          <div className=\"w-16 h-16 mx-auto bg-gradient-to-br from-green-400 to-green-600 rounded-full flex items-center justify-center\">\r\n            <CheckCircle className=\"w-8 h-8 text-white\" />\r\n          </div>\r\n\r\n          <div className=\"space-y-4\">\r\n            <h3 className=\"text-xl font-semibold text-green-900\">Tebrikler!</h3>\r\n            <p className=\"text-muted-foreground leading-relaxed\">\r\n              Dernek y├Ânetim sistemimizin temel ├Âzelliklerini ├Â─şrendiniz. Art─▒k derne─şinizi daha\r\n              verimli y├Ânetebilirsiniz.\r\n            </p>\r\n          </div>\r\n\r\n          <div className=\"space-y-3\">\r\n            <div className=\"p-3 bg-blue-50 rounded-lg text-left\">\r\n              <div className=\"flex items-center gap-2 mb-1\">\r\n                <Star className=\"w-4 h-4 text-blue-600\" />\r\n                <span className=\"font-medium text-blue-900\">─░lk ─░pucu</span>\r\n              </div>\r\n              <p className=\"text-sm text-blue-700\">\r\n                ÔîİK tu┼şlar─▒ ile komut paletini a├ğ─▒p istedi─şinizi h─▒zl─▒ca bulabilirsiniz\r\n              </p>\r\n            </div>\r\n\r\n            <div className=\"p-3 bg-emerald-50 rounded-lg text-left\">\r\n              <div className=\"flex items-center gap-2 mb-1\">\r\n                <Heart className=\"w-4 h-4 text-emerald-600\" />\r\n                <span className=\"font-medium text-emerald-900\">Yard─▒m</span>\r\n              </div>\r\n              <p className=\"text-sm text-emerald-700\">\r\n                Sa─ş ├╝st k├Â┼şedeki (?) simgesi ile her zaman yard─▒m alabilirsiniz\r\n              </p>\r\n            </div>\r\n          </div>\r\n\r\n          <div className=\"pt-4\">\r\n            <Badge variant=\"secondary\" className=\"text-sm\">\r\n              Kurulum tamamland─▒ Ô£ô\r\n            </Badge>\r\n          </div>\r\n        </div>\r\n      ),\r\n    },\r\n  ],\r\n};\r\n\r\n/**\r\n * UserOnboardingFlow function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function UserOnboardingFlow({\r\n  isOpen,\r\n  onClose,\r\n  onComplete,\r\n  userRole = 'user',\r\n  variant = 'welcome',\r\n  className,\r\n}: UserOnboardingFlowProps) {\r\n  const [currentStep, setCurrentStep] = useState(0);\r\n  const [completedSteps, setCompletedSteps] = useState<Set<number>>(new Set());\r\n\r\n  const steps = onboardingSteps[variant] ?? onboardingSteps.welcome;\r\n  const totalSteps = steps.length;\r\n  const progress = ((currentStep + 1) / totalSteps) * 100;\r\n\r\n  // Mark step as completed when viewed\r\n  useEffect(() => {\r\n    setCompletedSteps((prev) => new Set([...prev, currentStep]));\r\n  }, [currentStep]);\r\n\r\n  // Auto advance timer for certain steps\r\n  useEffect(() => {\r\n    if (!isOpen) return;\r\n\r\n    const step = steps[currentStep];\r\n    if (step?.id === 'welcome') {\r\n      // Auto advance welcome step after 5 seconds unless user interacts\r\n      const timer = setTimeout(() => {\r\n        if (currentStep === 0) {\r\n          setCurrentStep(1);\r\n        }\r\n      }, 5000);\r\n\r\n      return () => {\r\n        clearTimeout(timer);\r\n      };\r\n    }\r\n  }, [currentStep, isOpen, steps]);\r\n\r\n  const handleNext = () => {\r\n    if (currentStep < totalSteps - 1) {\r\n      setCurrentStep(currentStep + 1);\r\n    } else {\r\n      handleComplete();\r\n    }\r\n  };\r\n\r\n  const handlePrevious = () => {\r\n    if (currentStep > 0) {\r\n      setCurrentStep(currentStep - 1);\r\n    }\r\n  };\r\n\r\n  const handleComplete = () => {\r\n    // Mark onboarding as completed in localStorage\r\n    try {\r\n      localStorage.setItem(\r\n        'onboarding-completed',\r\n        JSON.stringify({\r\n          variant,\r\n          completedAt: new Date().toISOString(),\r\n          userRole,\r\n          version: '1.0',\r\n        }),\r\n      );\r\n    } catch (error) {\r\n      logger.warn('Error saving onboarding completion:', error);\r\n    }\r\n\r\n    onComplete();\r\n    onClose();\r\n  };\r\n\r\n  const handleSkip = () => {\r\n    onClose();\r\n  };\r\n\r\n  if (!isOpen) return null;\r\n\r\n  const currentStepData = steps[currentStep];\r\n  const isLastStep = currentStep === totalSteps - 1;\r\n  const isFirstStep = currentStep === 0;\r\n\r\n  return (\r\n    <Dialog open={isOpen} onOpenChange={onClose}>\r\n      <DialogContent className={cn('sm:max-w-lg p-0 gap-0', className)}>\r\n        <DialogTitle className=\"sr-only\">Kullan─▒c─▒ Ho┼şgeldin Turu</DialogTitle>\r\n        <DialogDescription className=\"sr-only\">\r\n          Sistem ├Âzelliklerini tan─▒tan interaktif rehber. {totalSteps} ad─▒mda temel ├Âzellikleri\r\n          ├Â─şrenin.\r\n        </DialogDescription>\r\n\r\n        {/* Header */}\r\n        <div className=\"flex items-center justify-between p-4 border-b\">\r\n          <div className=\"flex items-center gap-3\">\r\n            <div className=\"flex items-center gap-1\">\r\n              {Array.from({ length: totalSteps }, (_, index) => (\r\n                <div\r\n                  key={index}\r\n                  className={cn(\r\n                    'w-2 h-2 rounded-full transition-colors',\r\n                    index <= currentStep ? 'bg-primary' : 'bg-muted',\r\n                  )}\r\n                />\r\n              ))}\r\n            </div>\r\n            <span className=\"text-sm text-muted-foreground\">\r\n              {currentStep + 1} / {totalSteps}\r\n            </span>\r\n          </div>\r\n\r\n          <div className=\"flex items-center gap-2\">\r\n            <Button\r\n              variant=\"ghost\"\r\n              size=\"sm\"\r\n              onClick={handleSkip}\r\n              className=\"text-muted-foreground\"\r\n            >\r\n              Ge├ğ\r\n            </Button>\r\n            <Button variant=\"ghost\" size=\"sm\" onClick={onClose} className=\"h-8 w-8 p-0\">\r\n              <X className=\"w-4 h-4\" />\r\n            </Button>\r\n          </div>\r\n        </div>\r\n\r\n        {/* Progress Bar */}\r\n        <div className=\"px-4\">\r\n          <Progress value={progress} className=\"h-1\" />\r\n        </div>\r\n\r\n        {/* Content */}\r\n        <div className=\"p-6\">\r\n          <div className=\"space-y-4\">\r\n            {/* Step Header */}\r\n            <div className=\"text-center space-y-2\">\r\n              <h2 className=\"text-lg font-semibold leading-tight\">{currentStepData.title}</h2>\r\n              <p className=\"text-sm text-muted-foreground\">{currentStepData.description}</p>\r\n              {currentStepData.estimatedTime && (\r\n                <Badge variant=\"outline\" className=\"text-xs\">\r\n                  {currentStepData.estimatedTime}\r\n                </Badge>\r\n              )}\r\n            </div>\r\n\r\n            {/* Step Content */}\r\n            <div className=\"py-4\">{currentStepData.content}</div>\r\n\r\n            {/* Action Button */}\r\n            {currentStepData.action && (\r\n              <div className=\"flex justify-center\">\r\n                <Button\r\n                  variant=\"outline\"\r\n                  onClick={currentStepData.action.onClick}\r\n                  className=\"gap-2\"\r\n                >\r\n                  <Play className=\"w-4 h-4\" />\r\n                  {currentStepData.action.label}\r\n                </Button>\r\n              </div>\r\n            )}\r\n          </div>\r\n        </div>\r\n\r\n        {/* Footer */}\r\n        <div className=\"flex items-center justify-between p-4 border-t bg-muted/20\">\r\n          <Button variant=\"ghost\" onClick={handlePrevious} disabled={isFirstStep} className=\"gap-2\">\r\n            <ChevronLeft className=\"w-4 h-4\" />\r\n            Geri\r\n          </Button>\r\n\r\n          <div className=\"text-center\">\r\n            <div className=\"text-xs text-muted-foreground\">\r\n              {completedSteps.size} / {totalSteps} tamamland─▒\r\n            </div>\r\n          </div>\r\n\r\n          <Button onClick={handleNext} className=\"gap-2\">\r\n            {isLastStep ? 'Ba┼şla' : '─░leri'}\r\n            {!isLastStep && <ChevronRight className=\"w-4 h-4\" />}\r\n          </Button>\r\n        </div>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n}\r\n\r\nexport default UserOnboardingFlow;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ux\\hooks\\useCommandPalette.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":55,"column":21,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":55,"endColumn":30}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview useCommandPalette Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\n\r\ninterface UseCommandPaletteOptions {\r\n  shortcut?: string;\r\n  onOpen?: () => void;\r\n  onClose?: () => void;\r\n  disabled?: boolean;\r\n}\r\n\r\n/**\r\n * useCommandPalette function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useCommandPalette({\r\n  shortcut = 'cmd+k',\r\n  onOpen,\r\n  onClose,\r\n  disabled = false,\r\n}: UseCommandPaletteOptions = {}) {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const open = useCallback(() => {\r\n    if (disabled) return;\r\n    setIsOpen(true);\r\n    onOpen?.();\r\n  }, [disabled, onOpen]);\r\n\r\n  const close = useCallback(() => {\r\n    setIsOpen(false);\r\n    onClose?.();\r\n  }, [onClose]);\r\n\r\n  const toggle = useCallback(() => {\r\n    if (isOpen) {\r\n      close();\r\n    } else {\r\n      open();\r\n    }\r\n  }, [isOpen, open, close]);\r\n\r\n  // Keyboard shortcut handler\r\n  useEffect(() => {\r\n    if (disabled) return;\r\n\r\n    const handleKeyDown = (e: KeyboardEvent) => {\r\n      const isCmd = e.metaKey ?? e.ctrlKey;\r\n      const key = e.key.toLowerCase();\r\n\r\n      // Parse shortcut (e.g., \"cmd+k\", \"ctrl+/\")\r\n      const parts = shortcut.toLowerCase().split('+');\r\n      const hasModifier = parts.some((part) => ['cmd', 'ctrl', 'meta'].includes(part));\r\n      const targetKey = parts[parts.length - 1];\r\n\r\n      if (hasModifier && isCmd && key === targetKey) {\r\n        e.preventDefault();\r\n        toggle();\r\n      } else if (!hasModifier && key === targetKey && !e.ctrlKey && !e.metaKey && !e.altKey) {\r\n        // For shortcuts without modifiers, check if not in input\r\n        const target = e.target as HTMLElement;\r\n        const isInInput =\r\n          target.tagName === 'INPUT' ||\r\n          target.tagName === 'TEXTAREA' ||\r\n          target.contentEditable === 'true';\r\n\r\n        if (!isInInput) {\r\n          e.preventDefault();\r\n          toggle();\r\n        }\r\n      }\r\n    };\r\n\r\n    document.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      document.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [shortcut, toggle, disabled]);\r\n\r\n  return {\r\n    isOpen,\r\n    open,\r\n    close,\r\n    toggle,\r\n  };\r\n}\r\n\r\nexport default useCommandPalette;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ux\\hooks\\useOnboarding.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\components\\ux\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\contexts\\AuthContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_credentials' is defined but never used.","line":93,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":93,"endColumn":36},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":203,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":203,"endColumn":24}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview AuthContext Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { createContext, useContext, useEffect, useState, type ReactNode } from 'react';\r\nimport { toast } from 'sonner';\r\nimport type { AuthContextType, AuthState, LoginCredentials, Permission , UserRole } from '../types/auth';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\n// Authentication will be handled by Supabase Auth\r\n// Removed mock users and credentials - using real authentication\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\n/**\r\n * AuthProvider function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function AuthProvider({ children }: AuthProviderProps) {\r\n  const [authState, setAuthState] = useState<AuthState>({\r\n    user: null,\r\n    isAuthenticated: false,\r\n    isLoading: true,\r\n    error: null,\r\n  });\r\n\r\n  // Frontend-only auth initialization\r\n  useEffect(() => {\r\n    let mounted = true;\r\n\r\n    const initializeAuth = async () => {\r\n      try {\r\n        // Check localStorage for persisted session\r\n        const storedUser = localStorage.getItem('auth_user');\r\n        const storedSession = localStorage.getItem('auth_session');\r\n\r\n        if (storedUser && storedSession) {\r\n          const user = JSON.parse(storedUser);\r\n          const sessionData = JSON.parse(storedSession);\r\n\r\n          // Check if session is still valid (24 hours)\r\n          const sessionAge = Date.now() - sessionData.timestamp;\r\n          const maxAge = 24 * 60 * 60 * 1000; // 24 hours\r\n\r\n          if (sessionAge < maxAge && mounted) {\r\n            setAuthState({\r\n              user,\r\n              isAuthenticated: true,\r\n              isLoading: false,\r\n              error: null,\r\n            });\r\n            return;\r\n          } \r\n            // Session expired, clear storage\r\n            localStorage.removeItem('auth_user');\r\n            localStorage.removeItem('auth_session');\r\n          \r\n        }\r\n\r\n        if (mounted) {\r\n          setAuthState((prev) => ({ ...prev, isLoading: false }));\r\n        }\r\n      } catch (error) {\r\n        logger.error('Auth initialization error:', error);\r\n        if (mounted) {\r\n          localStorage.removeItem('auth_user');\r\n          localStorage.removeItem('auth_session');\r\n          setAuthState((prev) => ({\r\n            ...prev,\r\n            isLoading: false,\r\n            error: 'Kimlik do─şrulama ba┼şlat─▒lamad─▒',\r\n          }));\r\n        }\r\n      }\r\n    };\r\n\r\n    initializeAuth();\r\n\r\n    return () => {\r\n      mounted = false;\r\n    };\r\n  }, []);\r\n\r\n  const login = async (_credentials: LoginCredentials): Promise<void> => {\r\n    setAuthState((prev) => ({ ...prev, isLoading: true, error: null }));\r\n\r\n    try {\r\n      // Simulate network delay\r\n      await new Promise((resolve) => setTimeout(resolve, 800));\r\n\r\n      // TODO: Implement Supabase Auth login\r\n      // This should be replaced with actual Supabase authentication\r\n      throw new Error('Authentication not implemented - please use Supabase Auth');\r\n    } catch (error) {\r\n      const errorMessage = error instanceof Error ? error.message : 'Giri┼ş yap─▒lamad─▒';\r\n\r\n      setAuthState((prev) => ({\r\n        ...prev,\r\n        isLoading: false,\r\n        error: errorMessage,\r\n      }));\r\n\r\n      toast.error(errorMessage, {\r\n        duration: 4000,\r\n      });\r\n\r\n      throw new Error(errorMessage);\r\n    }\r\n  };\r\n\r\n  const logout = async (): Promise<void> => {\r\n    try {\r\n      // Clear localStorage\r\n      localStorage.removeItem('auth_user');\r\n      localStorage.removeItem('auth_session');\r\n\r\n      setAuthState({\r\n        user: null,\r\n        isAuthenticated: false,\r\n        isLoading: false,\r\n        error: null,\r\n      });\r\n\r\n      toast.success('Ba┼şar─▒yla ├ğ─▒k─▒┼ş yapt─▒n─▒z', {\r\n        duration: 2000,\r\n      });\r\n    } catch (error) {\r\n      logger.error('Logout error:', error);\r\n      toast.error('├ç─▒k─▒┼ş yap─▒l─▒rken hata olu┼ştu', {\r\n        duration: 3000,\r\n      });\r\n    }\r\n  };\r\n\r\n  const checkPermission = (permission: Permission): boolean => {\r\n    if (!authState.user || !authState.isAuthenticated) {\r\n      return false;\r\n    }\r\n\r\n    return authState.user.permissions.includes(permission);\r\n  };\r\n\r\n  const hasRole = (role: UserRole): boolean => {\r\n    if (!authState.user || !authState.isAuthenticated) {\r\n      return false;\r\n    }\r\n\r\n    return authState.user.role === role;\r\n  };\r\n\r\n  const refreshUser = async (): Promise<void> => {\r\n    if (!authState.isAuthenticated || !authState.user) {\r\n      return;\r\n    }\r\n\r\n    try {\r\n      // In a real app, this would fetch updated user data from the server\r\n      // TODO: Implement Supabase Auth refresh\r\n      const storedUser = localStorage.getItem('auth_user');\r\n      if (storedUser) {\r\n        const user = JSON.parse(storedUser);\r\n        setAuthState((prev) => ({ ...prev, user }));\r\n      }\r\n    } catch (error) {\r\n      logger.error('User refresh error:', error);\r\n      // TODO: Handle Supabase Auth refresh failure\r\n      await logout();\r\n    }\r\n  };\r\n\r\n  const clearError = (): void => {\r\n    setAuthState((prev) => ({ ...prev, error: null }));\r\n  };\r\n\r\n  const contextValue: AuthContextType = {\r\n    ...authState,\r\n    login,\r\n    logout,\r\n    checkPermission,\r\n    hasRole,\r\n    refreshUser,\r\n    clearError,\r\n  };\r\n\r\n  return <AuthContext.Provider value={contextValue}>{children}</AuthContext.Provider>;\r\n}\r\n\r\n/**\r\n * useAuth function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useAuth(): AuthContextType {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\contexts\\FormContexts.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\contexts\\NotificationContext.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":35,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":35,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1109,1112],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1109,1112],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has unnecessary dependencies: 'notify' and 'store'. Either exclude them or remove the dependency array. Outer scope values like 'notify' aren't valid dependencies because mutating them doesn't re-render the component.","line":87,"column":6,"nodeType":"ArrayExpression","endLine":87,"endColumn":39,"suggestions":[{"desc":"Update the dependencies array to be: [isRealTimeActive]","fix":{"range":[3048,3081],"text":"[isRealTimeActive]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has unnecessary dependencies: 'notify' and 'store'. Either exclude them or remove the dependency array. Outer scope values like 'notify' aren't valid dependencies because mutating them doesn't re-render the component.","line":161,"column":5,"nodeType":"ArrayExpression","endLine":161,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[5446,5461],"text":"[]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has unnecessary dependencies: 'notify' and 'store'. Either exclude them or remove the dependency array. Outer scope values like 'notify' aren't valid dependencies because mutating them doesn't re-render the component.","line":265,"column":5,"nodeType":"ArrayExpression","endLine":265,"endColumn":20,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[9446,9461],"text":"[]"}}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":298,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":298,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview NotificationContext Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport React, { createContext, useCallback, useContext, useEffect, useState } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { notificationService, notify } from '../services/notificationService';\r\nimport { useNotificationStore } from '../stores/notificationStore';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\ninterface NotificationContextType {\r\n  // Store integration\r\n  store: ReturnType<typeof useNotificationStore>;\r\n\r\n  // Quick notification methods\r\n  notify: typeof notify;\r\n\r\n  // Real-time methods\r\n  startRealTimeUpdates: () => void;\r\n  stopRealTimeUpdates: () => void;\r\n  isRealTimeActive: boolean;\r\n\r\n  // System integration methods\r\n  triggerSystemNotification: (\r\n    type: 'donation' | 'member' | 'aid' | 'system' | 'event',\r\n  ) => Promise<void>;\r\n  simulateWorkflow: (\r\n    workflowType: 'donation-process' | 'aid-application' | 'member-registration',\r\n  ) => Promise<void>;\r\n\r\n  // Statistics\r\n  getNotificationStats: () => Promise<any>;\r\n}\r\n\r\nconst NotificationContext = createContext<NotificationContextType | undefined>(undefined);\r\n\r\n/**\r\n * NotificationProvider function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function NotificationProvider({ children }: { children: React.ReactNode }) {\r\n  const store = useNotificationStore();\r\n  const [isRealTimeActive, setIsRealTimeActive] = useState(false);\r\n  const [realTimeInterval, setRealTimeInterval] = useState<NodeJS.Timeout | null>(null);\r\n\r\n  // Simulate real-time notifications\r\n  const startRealTimeUpdates = useCallback(() => {\r\n    if (isRealTimeActive) return;\r\n\r\n    setIsRealTimeActive(true);\r\n\r\n    const interval = setInterval(async () => {\r\n      // Simulate random system notifications\r\n      const randomNotifications = [\r\n        () => notify.newDonation('Anonim Ba─ş─▒┼ş├ğ─▒', Math.floor(Math.random() * 1000) + 50, 'TL'),\r\n        () => notify.newMember(`├£ye${Math.floor(Math.random() * 1000)}`),\r\n        () => notify.backup(Math.random() > 0.1, new Date().toLocaleString('tr-TR')),\r\n        () => notify.payment('Aidatlar', Math.floor(Math.random() * 500) + 100, 'Banka Transferi'),\r\n        () =>\r\n          notificationService.createNotification({\r\n            title: 'Sistem G├╝ncelleme',\r\n            message: 'Sistem ba┼şar─▒yla g├╝ncellendi.',\r\n            type: 'success',\r\n            category: 'system',\r\n            priority: 'low',\r\n          }),\r\n      ];\r\n\r\n      try {\r\n        const randomNotification =\r\n          randomNotifications[Math.floor(Math.random() * randomNotifications.length)];\r\n        await randomNotification();\r\n\r\n        logger.info('Real-time notification created');\r\n      } catch (error) {\r\n        logger.error('Error creating real-time notification:', error);\r\n      }\r\n    }, 10000); // Every 10 seconds\r\n\r\n    setRealTimeInterval(interval);\r\n    toast.success('Ger├ğek zamanl─▒ bildirimler aktifle┼ştirildi');\r\n  }, [isRealTimeActive, store, notify]);\r\n\r\n  const stopRealTimeUpdates = useCallback(() => {\r\n    if (!isRealTimeActive) return;\r\n\r\n    if (realTimeInterval) {\r\n      clearInterval(realTimeInterval);\r\n      setRealTimeInterval(null);\r\n    }\r\n\r\n    setIsRealTimeActive(false);\r\n    toast.info('Ger├ğek zamanl─▒ bildirimler durduruldu');\r\n  }, [isRealTimeActive, realTimeInterval]);\r\n\r\n  // Cleanup on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      if (realTimeInterval) {\r\n        clearInterval(realTimeInterval);\r\n      }\r\n    };\r\n  }, [realTimeInterval]);\r\n\r\n  // System integration examples\r\n  const triggerSystemNotification = useCallback(\r\n    async (type: 'donation' | 'member' | 'aid' | 'system' | 'event') => {\r\n      try {\r\n        switch (type) {\r\n          case 'donation':\r\n            await notify.newDonation('Test Ba─ş─▒┼ş├ğ─▒', 500, 'TL');\r\n            await notify.payment('Ba─ş─▒┼ş', 500, 'Kredi Kart─▒');\r\n            break;\r\n\r\n          case 'member':\r\n            await notify.newMember('Yeni Test ├£yesi');\r\n            await notificationService.createNotification({\r\n              title: '├£yelik Onay─▒',\r\n              message: 'Yeni ├╝ye ba┼şvurusu y├Ânetici onay─▒ bekliyor.',\r\n              type: 'warning',\r\n              category: 'member',\r\n              priority: 'medium',\r\n            });\r\n            break;\r\n\r\n          case 'aid':\r\n            await notify.aidApplication('Test Ba┼şvuru Sahibi', 'G─▒da Paketi');\r\n            await notificationService.createNotification({\r\n              title: 'Yard─▒m De─şerlendirmesi',\r\n              message: 'Yard─▒m ba┼şvurusu saha ekibi taraf─▒ndan de─şerlendirildi.',\r\n              type: 'info',\r\n              category: 'aid',\r\n              priority: 'medium',\r\n            });\r\n            break;\r\n\r\n          case 'system':\r\n            await notify.backup(true, new Date().toLocaleString('tr-TR'));\r\n            await notify.systemMaintenance('23:00', '01:00');\r\n            break;\r\n\r\n          case 'event':\r\n            await notify.event('├ûrnek Etkinlik', 'Yar─▒n', '15:00');\r\n            break;\r\n\r\n          default:\r\n            throw new Error('Ge├ğersiz bildirim tipi');\r\n        }\r\n\r\n        toast.success('Sistem bildirimleri olu┼şturuldu');\r\n      } catch (error) {\r\n        logger.error('Error triggering system notification:', error);\r\n        toast.error('Sistem bildirimi olu┼şturulurken hata olu┼ştu');\r\n      }\r\n    },\r\n    [store, notify],\r\n  );\r\n\r\n  // Simulate complex workflows\r\n  const simulateWorkflow = useCallback(\r\n    async (workflowType: 'donation-process' | 'aid-application' | 'member-registration') => {\r\n      try {\r\n        switch (workflowType) {\r\n          case 'donation-process':\r\n            toast.info('Ba─ş─▒┼ş s├╝reci sim├╝lasyonu ba┼şlat─▒l─▒yor...');\r\n\r\n            // Step 1: Donation received\r\n            await notify.newDonation('Ahmet Kaya', 750, 'TL');\r\n            await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n            // Step 2: Payment processing\r\n            await notify.payment('Ba─ş─▒┼ş', 750, 'Banka Transferi');\r\n            await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n            // Step 3: Thank you notification\r\n            await notificationService.createNotification({\r\n              title: 'Te┼şekk├╝r Mesaj─▒ G├Ânderildi',\r\n              message: \"Ahmet Kaya'ya te┼şekk├╝r mesaj─▒ otomatik olarak g├Ânderildi.\",\r\n              type: 'success',\r\n              category: 'donation',\r\n              priority: 'low',\r\n            });\r\n\r\n            break;\r\n\r\n          case 'aid-application':\r\n            toast.info('Yard─▒m ba┼şvuru s├╝reci sim├╝lasyonu ba┼şlat─▒l─▒yor...');\r\n\r\n            // Step 1: Application received\r\n            await notify.aidApplication('Fatma Y─▒lmaz', 'K─▒rtasiye Yard─▒m─▒');\r\n            await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n            // Step 2: Evaluation\r\n            await notificationService.createNotification({\r\n              title: 'Ba┼şvuru De─şerlendirmesi',\r\n              message: \"Fatma Y─▒lmaz'─▒n ba┼şvurusu sosyal hizmet uzman─▒ taraf─▒ndan inceleniyor.\",\r\n              type: 'info',\r\n              category: 'aid',\r\n              priority: 'medium',\r\n            });\r\n            await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n            // Step 3: Approval\r\n            await notify.approval('Yard─▒m Ba┼şvurusu', 'K─▒rtasiye Yard─▒m─▒', 'Sosyal Hizmet Uzman─▒');\r\n            await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n            // Step 4: Distribution\r\n            await notificationService.createNotification({\r\n              title: 'Yard─▒m Da─ş─▒t─▒ld─▒',\r\n              message: \"Fatma Y─▒lmaz'a k─▒rtasiye yard─▒m─▒ ba┼şar─▒yla teslim edildi.\",\r\n              type: 'success',\r\n              category: 'aid',\r\n              priority: 'low',\r\n            });\r\n\r\n            break;\r\n\r\n          case 'member-registration':\r\n            toast.info('├£ye kay─▒t s├╝reci sim├╝lasyonu ba┼şlat─▒l─▒yor...');\r\n\r\n            // Step 1: New member\r\n            await notify.newMember('Zeynep Kaya');\r\n            await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n            // Step 2: Document verification\r\n            await notificationService.createNotification({\r\n              title: 'Belge Kontrol├╝',\r\n              message: \"Zeynep Kaya'n─▒n ├╝yelik belgeleri kontrol ediliyor.\",\r\n              type: 'info',\r\n              category: 'member',\r\n              priority: 'medium',\r\n            });\r\n            await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n            // Step 3: Approval needed\r\n            await notify.approval('├£yelik Ba┼şvurusu', 'Zeynep Kaya', '├£yelik Komisyonu');\r\n            await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n            // Step 4: Welcome message\r\n            await notificationService.createNotification({\r\n              title: 'Ho┼ş Geldin Mesaj─▒',\r\n              message: \"Zeynep Kaya'ya ho┼ş geldin mesaj─▒ ve ├╝yelik k─▒lavuzu g├Ânderildi.\",\r\n              type: 'success',\r\n              category: 'member',\r\n              priority: 'low',\r\n            });\r\n\r\n            break;\r\n\r\n          default:\r\n            throw new Error('Ge├ğersiz i┼ş ak─▒┼ş─▒ tipi');\r\n        }\r\n\r\n        toast.success('─░┼ş ak─▒┼ş─▒ sim├╝lasyonu tamamland─▒');\r\n      } catch (error) {\r\n        logger.error('Error simulating workflow:', error);\r\n        toast.error('─░┼ş ak─▒┼ş─▒ sim├╝lasyonu s─▒ras─▒nda hata olu┼ştu');\r\n      }\r\n    },\r\n    [store, notify],\r\n  );\r\n\r\n  // Get notification statistics\r\n  const getNotificationStats = useCallback(async () => {\r\n    try {\r\n      return await notificationService.getNotificationStats();\r\n    } catch (error) {\r\n      logger.error('Error getting notification stats:', error);\r\n      return null;\r\n    }\r\n  }, []);\r\n\r\n  const value: NotificationContextType = {\r\n    store,\r\n    notify,\r\n    startRealTimeUpdates,\r\n    stopRealTimeUpdates,\r\n    isRealTimeActive,\r\n    triggerSystemNotification,\r\n    simulateWorkflow,\r\n    getNotificationStats,\r\n  };\r\n\r\n  return <NotificationContext.Provider value={value}>{children}</NotificationContext.Provider>;\r\n}\r\n\r\n/**\r\n * useNotifications function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useNotifications() {\r\n  const context = useContext(NotificationContext);\r\n  if (context === undefined) {\r\n    throw new Error('useNotifications must be used within a NotificationProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\nexport default NotificationProvider;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\contexts\\SidebarContext.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\contexts\\SupabaseAuthContext.tsx","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'react' import is duplicated.","line":10,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":10,"endColumn":72},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":87,"column":61,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":87,"endColumn":63,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[2690,2692],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/switch-exhaustiveness-check","severity":2,"message":"Switch is not exhaustive. Cases not matched: \"INITIAL_SESSION\" | \"PASSWORD_RECOVERY\" | \"MFA_CHALLENGE_VERIFIED\"","line":95,"column":17,"nodeType":"Identifier","messageId":"switchIsNotExhaustive","endLine":95,"endColumn":22,"suggestions":[{"messageId":"addMissingCases","fix":{"range":[3350,3350],"text":"\n          case \"INITIAL_SESSION\": { throw new Error('Not implemented yet: \"INITIAL_SESSION\" case') }\n          case \"PASSWORD_RECOVERY\": { throw new Error('Not implemented yet: \"PASSWORD_RECOVERY\" case') }\n          case \"MFA_CHALLENGE_VERIFIED\": { throw new Error('Not implemented yet: \"MFA_CHALLENGE_VERIFIED\" case') }"},"desc":"Add branches for missing cases."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":98,"column":57,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":98,"endColumn":59,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[3021,3023],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":179,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":179,"endColumn":19},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'data' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":179,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":179,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":189,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":189,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5742,5745],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5742,5745],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":229,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":229,"endColumn":19},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'data' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":229,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":229,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":244,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":244,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7292,7295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7292,7295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":289,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":289,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8443,8446],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8443,8446],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":322,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":322,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9403,9406],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9403,9406],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-refresh/only-export-components","severity":1,"message":"Fast refresh only works when a file only exports components. Use a new file to share constants or functions between components.","line":360,"column":17,"nodeType":"Identifier","messageId":"namedExport","endLine":360,"endColumn":32}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview SupabaseAuthContext Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport type { Session, User } from '@supabase/supabase-js';\r\nimport type { ReactNode } from 'react';\r\nimport { createContext, useContext, useEffect, useState } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { isSupabaseConfigured, supabase } from '../lib/supabase';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\n// Supabase Auth Context Types\r\ninterface SupabaseAuthContextType {\r\n  user: User | null;\r\n  session: Session | null;\r\n  isAuthenticated: boolean;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  signIn: (email: string, password: string) => Promise<void>;\r\n  signUp: (email: string, password: string, name: string) => Promise<void>;\r\n  signOut: () => Promise<void>;\r\n  resetPassword: (email: string) => Promise<void>;\r\n  clearError: () => void;\r\n}\r\n\r\nconst SupabaseAuthContext = createContext<SupabaseAuthContextType | undefined>(undefined);\r\n\r\ninterface SupabaseAuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\n/**\r\n * SupabaseAuthProvider function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function SupabaseAuthProvider({ children }: SupabaseAuthProviderProps) {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [session, setSession] = useState<Session | null>(null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const isAuthenticated = !!user && !!session;\r\n\r\n  // Initialize auth state\r\n  useEffect(() => {\r\n    let mounted = true;\r\n\r\n    const initializeAuth = async () => {\r\n      try {\r\n        // Get initial session\r\n        const {\r\n          data: { session },\r\n          error,\r\n        } = await supabase.auth.getSession();\r\n\r\n        if (error) {\r\n          logger.error('Error getting session:', error);\r\n          setError(error.message);\r\n        } else if (mounted) {\r\n          setSession(session);\r\n          setUser(session?.user ?? null);\r\n        }\r\n      } catch (error) {\r\n        logger.error('Auth initialization error:', error);\r\n        if (mounted) {\r\n          setError('Kimlik do─şrulama ba┼şlat─▒lamad─▒');\r\n        }\r\n      } finally {\r\n        if (mounted) {\r\n          // Set loading to false immediately without delay\r\n          setTimeout(() => {\r\n            setIsLoading(false);\r\n          }, 10);\r\n        }\r\n      }\r\n    };\r\n\r\n    // Listen for auth state changes\r\n    const {\r\n      data: { subscription },\r\n    } = supabase.auth.onAuthStateChange(async (event, session) => {\r\n      logger.info('Auth state change:', event, session?.user?.email);\r\n\r\n      if (mounted) {\r\n        setSession(session);\r\n        setUser(session?.user ?? null);\r\n        setIsLoading(false);\r\n\r\n        // Handle auth events\r\n        switch (event) {\r\n          case 'SIGNED_IN':\r\n            // Removed welcome toast notification\r\n            logger.info('User signed in:', session?.user?.email);\r\n            break;\r\n          case 'SIGNED_OUT':\r\n            toast.success('Ba┼şar─▒yla ├ğ─▒k─▒┼ş yapt─▒n─▒z');\r\n            break;\r\n          case 'TOKEN_REFRESHED':\r\n            logger.info('Token refreshed');\r\n            break;\r\n          case 'USER_UPDATED':\r\n            logger.info('User updated');\r\n            break;\r\n        }\r\n      }\r\n    });\r\n\r\n    initializeAuth();\r\n\r\n    return () => {\r\n      mounted = false;\r\n      subscription.unsubscribe();\r\n    };\r\n  }, []);\r\n\r\n  // Sign in with email and password\r\n  const signIn = async (email: string, password: string): Promise<void> => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    // Check if Supabase is properly configured\r\n    if (!isSupabaseConfigured()) {\r\n      // Mock authentication for development\r\n      logger.info('Using mock authentication - Supabase not configured');\r\n\r\n      // Simulate a delay\r\n      await new Promise((resolve) => setTimeout(resolve, 1000));\r\n\r\n      // Mock successful login with demo credentials\r\n      if (email === 'demo@example.com' && password === 'demo123') {\r\n        const mockUser = {\r\n          id: 'mock-user-id',\r\n          email,\r\n          user_metadata: { name: 'Demo User' },\r\n          app_metadata: {},\r\n          created_at: new Date().toISOString(),\r\n          updated_at: new Date().toISOString(),\r\n          aud: 'authenticated',\r\n          role: 'authenticated',\r\n          email_confirmed_at: new Date().toISOString(),\r\n          phone_confirmed_at: undefined,\r\n          confirmation_sent_at: undefined,\r\n          recovery_sent_at: undefined,\r\n          email_change_sent_at: undefined,\r\n          new_email: undefined,\r\n          invited_at: undefined,\r\n          action_link: undefined,\r\n          phone: undefined,\r\n          last_sign_in_at: new Date().toISOString(),\r\n        } as User;\r\n\r\n        setUser(mockUser);\r\n        setSession({\r\n          access_token: 'mock-access-token',\r\n          refresh_token: 'mock-refresh-token',\r\n          expires_in: 3600,\r\n          expires_at: Math.floor(Date.now() / 1000) + 3600,\r\n          token_type: 'bearer',\r\n          user: mockUser,\r\n        } as Session);\r\n\r\n        setIsLoading(false);\r\n        toast.success('Demo modunda giri┼ş yap─▒ld─▒');\r\n        return;\r\n      } \r\n        setError('Demo i├ğin: demo@example.com / demo123 kullan─▒n');\r\n        setIsLoading(false);\r\n        toast.error('Demo i├ğin: demo@example.com / demo123 kullan─▒n');\r\n        return;\r\n      \r\n    }\r\n\r\n    try {\r\n      const { data, error } = await supabase.auth.signInWithPassword({\r\n        email,\r\n        password,\r\n      });\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      // Success is handled by onAuthStateChange\r\n    } catch (error: any) {\r\n      let errorMessage = 'Giri┼ş yap─▒lamad─▒';\r\n\r\n      switch (error.message) {\r\n        case 'Invalid login credentials':\r\n          errorMessage = 'Ge├ğersiz email veya ┼şifre';\r\n          break;\r\n        case 'Email not confirmed':\r\n          errorMessage = 'Email adresinizi do─şrulay─▒n';\r\n          break;\r\n        case 'Too many requests':\r\n          errorMessage = '├çok fazla deneme. L├╝tfen bekleyin';\r\n          break;\r\n        default:\r\n          errorMessage = error.message ?? 'Giri┼ş yap─▒lamad─▒';\r\n      }\r\n\r\n      setError(errorMessage);\r\n      toast.error(errorMessage, { duration: 4000 });\r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Sign up with email and password\r\n  const signUp = async (email: string, password: string, name: string): Promise<void> => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    // Check if we're in mock mode\r\n    if (!isSupabaseConfigured()) {\r\n      // Mock sign up\r\n      setError('Demo modunda kay─▒t yap─▒lamaz. Giri┼ş i├ğin demo@example.com / demo123 kullan─▒n.');\r\n      setIsLoading(false);\r\n      toast.error('Demo modunda kay─▒t yap─▒lamaz');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const { data, error } = await supabase.auth.signUp({\r\n        email,\r\n        password,\r\n        options: {\r\n          data: {\r\n            name,\r\n          },\r\n        },\r\n      });\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      toast.success('Kay─▒t ba┼şar─▒l─▒! Email adresinizi kontrol edin.', { duration: 5000 });\r\n    } catch (error: any) {\r\n      let errorMessage = 'Kay─▒t olunamad─▒';\r\n\r\n      switch (error.message) {\r\n        case 'User already registered':\r\n          errorMessage = 'Bu email adresi zaten kay─▒tl─▒';\r\n          break;\r\n        case 'Password should be at least 6 characters':\r\n          errorMessage = '┼Şifre en az 6 karakter olmal─▒';\r\n          break;\r\n        default:\r\n          errorMessage = error.message ?? 'Kay─▒t olunamad─▒';\r\n      }\r\n\r\n      setError(errorMessage);\r\n      toast.error(errorMessage, { duration: 4000 });\r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Sign out\r\n  const signOut = async (): Promise<void> => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    // Check if we're in mock mode\r\n    if (!isSupabaseConfigured()) {\r\n      // Mock sign out\r\n      setUser(null);\r\n      setSession(null);\r\n      setIsLoading(false);\r\n      toast.success('├ç─▒k─▒┼ş yap─▒ld─▒');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const { error } = await supabase.auth.signOut();\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      // Success is handled by onAuthStateChange\r\n    } catch (error: any) {\r\n      const errorMessage = error.message ?? '├ç─▒k─▒┼ş yap─▒l─▒rken hata olu┼ştu';\r\n      setError(errorMessage);\r\n      toast.error(errorMessage, { duration: 3000 });\r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // Reset password\r\n  const resetPassword = async (email: string): Promise<void> => {\r\n    setIsLoading(true);\r\n    setError(null);\r\n\r\n    // Check if we're in mock mode\r\n    if (!isSupabaseConfigured()) {\r\n      // Mock password reset\r\n      setIsLoading(false);\r\n      toast.success('Demo modunda ┼şifre s─▒f─▒rlama yap─▒lamaz');\r\n      return;\r\n    }\r\n\r\n    try {\r\n      const { error } = await supabase.auth.resetPasswordForEmail(email, {\r\n        redirectTo: `${window.location.origin}/reset-password`,\r\n      });\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      toast.success('┼Şifre s─▒f─▒rlama ba─şlant─▒s─▒ email adresinize g├Ânderildi', { duration: 5000 });\r\n    } catch (error: any) {\r\n      const errorMessage = error.message ?? '┼Şifre s─▒f─▒rlama ba┼şar─▒s─▒z';\r\n      setError(errorMessage);\r\n      toast.error(errorMessage, { duration: 4000 });\r\n      throw new Error(errorMessage);\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  const clearError = (): void => {\r\n    setError(null);\r\n  };\r\n\r\n  const contextValue: SupabaseAuthContextType = {\r\n    user,\r\n    session,\r\n    isAuthenticated,\r\n    isLoading,\r\n    error,\r\n    signIn,\r\n    signUp,\r\n    signOut,\r\n    resetPassword,\r\n    clearError,\r\n  };\r\n\r\n  return (\r\n    <SupabaseAuthContext.Provider value={contextValue}>{children}</SupabaseAuthContext.Provider>\r\n  );\r\n}\r\n\r\n/**\r\n * useSupabaseAuth function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useSupabaseAuth(): SupabaseAuthContextType {\r\n  const context = useContext(SupabaseAuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useSupabaseAuth must be used within a SupabaseAuthProvider');\r\n  }\r\n  return context;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\__tests__\\useSupabaseConnection.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\use-form-field.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\use-sidebar.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\use-toast.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\useAdvancedMobile.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":61,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":61,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2110,2113],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2110,2113],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":61,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":61,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2096,2170],"text":"((navigator as any).connection ??\r\n        (navigator as any).mozConnection)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":62,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":62,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2152,2155],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2152,2155],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":62,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":62,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2171,2173],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":63,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":63,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2197,2200],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2197,2200],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3049,3052],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3049,3052],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":195,"column":28,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":195,"endColumn":51},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":214,"column":34,"nodeType":"Identifier","messageId":"neverNullish","endLine":214,"endColumn":47},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":230,"column":27,"nodeType":"MemberExpression","endLine":230,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":251,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":251,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8514,8517],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8514,8517],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":293,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":293,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9742,9745],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9742,9745],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":293,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":293,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9771,9773],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":293,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":293,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9785,9788],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9785,9788],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":300,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":300,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10020,10023],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10020,10023],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":306,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":306,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10203,10206],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10203,10206],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":327,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":327,"endColumn":19},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":327,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":327,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":379,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":379,"endColumn":21},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":379,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":379,"endColumn":21},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":397,"column":21,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":397,"endColumn":44}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview useAdvancedMobile Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { usePerformanceOptimization } from './usePerformanceOptimization';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\n/**\r\n * Advanced mobile optimization hook for the NGO management system\r\n * Handles touch interactions, device capabilities, and mobile-specific optimizations\r\n */\r\n/**\r\n * useAdvancedMobile function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useAdvancedMobile() {\r\n  const [deviceInfo, setDeviceInfo] = useState({\r\n    isMobile: false,\r\n    isTablet: false,\r\n    isIOS: false,\r\n    isAndroid: false,\r\n    hasNotch: false,\r\n    isLandscape: false,\r\n    networkType: 'unknown' as string,\r\n    batteryLevel: 1,\r\n    isLowBattery: false,\r\n  });\r\n\r\n  const { shouldReduceAnimations } = usePerformanceOptimization();\r\n  const touchStartRef = useRef<{ x: number; y: number; time: number } | null>(null);\r\n  const [touchGesture, setTouchGesture] = useState<\r\n    'none' | 'swipe-left' | 'swipe-right' | 'swipe-up' | 'swipe-down'\r\n  >('none');\r\n\r\n  // Device detection and capabilities\r\n  useEffect(() => {\r\n    const updateDeviceInfo = () => {\r\n      const {userAgent} = navigator;\r\n      const isMobile = /iPhone|iPad|iPod|Android|webOS|BlackBerry|IEMobile|Opera Mini/i.test(\r\n        userAgent,\r\n      );\r\n      const isTablet = /iPad|Android(?=.*Mobile)/i.test(userAgent) && window.innerWidth > 768;\r\n      const isIOS = /iPhone|iPad|iPod/i.test(userAgent);\r\n      const isAndroid = /Android/i.test(userAgent);\r\n      const hasNotch =\r\n        isIOS &&\r\n        (screen.height === 812 || // iPhone X/XS\r\n          screen.height === 896 || // iPhone XR/XS Max\r\n          screen.height === 844 || // iPhone 12/12 Pro\r\n          screen.height === 926); // iPhone 12 Pro Max\r\n      const isLandscape = window.innerWidth > window.innerHeight;\r\n\r\n      // Network information\r\n      const connection =\r\n        (navigator as any).connection ||\r\n        (navigator as any).mozConnection ||\r\n        (navigator as any).webkitConnection;\r\n      const networkType = connection?.effectiveType ?? 'unknown';\r\n\r\n      setDeviceInfo((prev) => ({\r\n        ...prev,\r\n        isMobile,\r\n        isTablet,\r\n        isIOS,\r\n        isAndroid,\r\n        hasNotch,\r\n        isLandscape,\r\n        networkType,\r\n      }));\r\n    };\r\n\r\n    updateDeviceInfo();\r\n    window.addEventListener('resize', updateDeviceInfo);\r\n    window.addEventListener('orientationchange', updateDeviceInfo);\r\n\r\n    return () => {\r\n      window.removeEventListener('resize', updateDeviceInfo);\r\n      window.removeEventListener('orientationchange', updateDeviceInfo);\r\n    };\r\n  }, []);\r\n\r\n  // Battery monitoring for mobile optimization\r\n  useEffect(() => {\r\n    const updateBatteryInfo = async () => {\r\n      if ('getBattery' in navigator) {\r\n        try {\r\n          const battery = await (navigator as any).getBattery();\r\n          const batteryLevel = battery.level;\r\n          const isLowBattery = batteryLevel < 0.2;\r\n\r\n          setDeviceInfo((prev) => ({\r\n            ...prev,\r\n            batteryLevel,\r\n            isLowBattery,\r\n          }));\r\n\r\n          // Listen for battery changes\r\n          battery.addEventListener('levelchange', () => {\r\n            setDeviceInfo((prev) => ({\r\n              ...prev,\r\n              batteryLevel: battery.level,\r\n              isLowBattery: battery.level < 0.2,\r\n            }));\r\n          });\r\n        } catch (error) {\r\n          logger.warn('Battery API not available:', error);\r\n        }\r\n      }\r\n    };\r\n\r\n    updateBatteryInfo();\r\n  }, []);\r\n\r\n  // Enhanced touch gesture detection\r\n  const handleTouchStart = useCallback((e: TouchEvent) => {\r\n    if (e.touches.length === 1) {\r\n      const touch = e.touches[0];\r\n      touchStartRef.current = {\r\n        x: touch.clientX,\r\n        y: touch.clientY,\r\n        time: Date.now(),\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  const handleTouchEnd = useCallback((e: TouchEvent) => {\r\n    if (touchStartRef.current && e.changedTouches.length === 1) {\r\n      const touch = e.changedTouches[0];\r\n      const deltaX = touch.clientX - touchStartRef.current.x;\r\n      const deltaY = touch.clientY - touchStartRef.current.y;\r\n      const deltaTime = Date.now() - touchStartRef.current.time;\r\n\r\n      // Minimum swipe distance and maximum time for gesture recognition\r\n      const minDistance = 50;\r\n      const maxTime = 300;\r\n\r\n      if (deltaTime < maxTime) {\r\n        if (Math.abs(deltaX) > Math.abs(deltaY) && Math.abs(deltaX) > minDistance) {\r\n          setTouchGesture(deltaX > 0 ? 'swipe-right' : 'swipe-left');\r\n        } else if (Math.abs(deltaY) > Math.abs(deltaX) && Math.abs(deltaY) > minDistance) {\r\n          setTouchGesture(deltaY > 0 ? 'swipe-down' : 'swipe-up');\r\n        }\r\n      }\r\n\r\n      touchStartRef.current = null;\r\n\r\n      // Reset gesture after a short delay\r\n      setTimeout(() => {\r\n        setTouchGesture('none');\r\n      }, 100);\r\n    }\r\n  }, []);\r\n\r\n  // Touch event listeners\r\n  useEffect(() => {\r\n    if (deviceInfo.isMobile) {\r\n      document.addEventListener('touchstart', handleTouchStart, { passive: true });\r\n      document.addEventListener('touchend', handleTouchEnd, { passive: true });\r\n\r\n      return () => {\r\n        document.removeEventListener('touchstart', handleTouchStart);\r\n        document.removeEventListener('touchend', handleTouchEnd);\r\n      };\r\n    }\r\n  }, [deviceInfo.isMobile, handleTouchStart, handleTouchEnd]);\r\n\r\n  // Viewport height fix for mobile browsers\r\n  useEffect(() => {\r\n    if (deviceInfo.isMobile) {\r\n      const setVH = () => {\r\n        const vh = window.innerHeight * 0.01;\r\n        document.documentElement.style.setProperty('--vh', `${vh}px`);\r\n      };\r\n\r\n      setVH();\r\n      window.addEventListener('resize', setVH);\r\n      window.addEventListener('orientationchange', setVH);\r\n\r\n      return () => {\r\n        window.removeEventListener('resize', setVH);\r\n        window.removeEventListener('orientationchange', setVH);\r\n      };\r\n    }\r\n  }, [deviceInfo.isMobile]);\r\n\r\n  // Performance optimizations based on device capabilities\r\n  const getOptimizedSettings = useCallback(() => {\r\n    const isSlowNetwork = deviceInfo.networkType === 'slow-2g' || deviceInfo.networkType === '2g';\r\n    const isLowPowerMode = deviceInfo.isLowBattery ?? shouldReduceAnimations;\r\n\r\n    return {\r\n      // Animation settings\r\n      enableAnimations: !isLowPowerMode && !isSlowNetwork,\r\n      animationDuration: isLowPowerMode ? 0.1 : isSlowNetwork ? 0.2 : 0.3,\r\n\r\n      // Image settings\r\n      imageQuality: isSlowNetwork ? 'low' : deviceInfo.isTablet ? 'high' : 'medium',\r\n      enableLazyLoading: true,\r\n      preloadCount: isSlowNetwork ? 1 : 3,\r\n\r\n      // Performance settings\r\n      enableVirtualization: deviceInfo.isMobile,\r\n      batchUpdateDelay: isLowPowerMode ? 300 : 100,\r\n      maxConcurrentRequests: isSlowNetwork ? 2 : 6,\r\n\r\n      // UI settings\r\n      enableHapticFeedback: deviceInfo.isMobile && 'vibrate' in navigator,\r\n      showPerformanceIndicators: isSlowNetwork ?? isLowPowerMode,\r\n      enableAdvancedFeatures: !isLowPowerMode && !isSlowNetwork,\r\n    };\r\n  }, [deviceInfo, shouldReduceAnimations]);\r\n\r\n  // Haptic feedback helper\r\n  const triggerHapticFeedback = useCallback(\r\n    (type: 'light' | 'medium' | 'heavy' | 'success' | 'error' = 'light') => {\r\n      if ('vibrate' in navigator && deviceInfo.isMobile) {\r\n        const patterns = {\r\n          light: [10],\r\n          medium: [20],\r\n          heavy: [30],\r\n          success: [10, 10, 10],\r\n          error: [50, 30, 50],\r\n        };\r\n        navigator.vibrate(patterns[type]);\r\n      }\r\n    },\r\n    [deviceInfo.isMobile],\r\n  );\r\n\r\n  // Safe area helpers\r\n  const getSafeAreaInsets = useCallback(() => {\r\n    const computedStyle = getComputedStyle(document.documentElement);\r\n    return {\r\n      top: computedStyle.getPropertyValue('env(safe-area-inset-top)') || '0px',\r\n      bottom: computedStyle.getPropertyValue('env(safe-area-inset-bottom)') || '0px',\r\n      left: computedStyle.getPropertyValue('env(safe-area-inset-left)') || '0px',\r\n      right: computedStyle.getPropertyValue('env(safe-area-inset-right)') || '0px',\r\n    };\r\n  }, []);\r\n\r\n  // PWA-specific features\r\n  const installPWA = useCallback(async () => {\r\n    if ('getInstalledRelatedApps' in navigator) {\r\n      try {\r\n        const relatedApps = await (navigator as any).getInstalledRelatedApps();\r\n        return relatedApps.length > 0;\r\n      } catch (error) {\r\n        logger.warn('PWA detection failed:', error);\r\n        return false;\r\n      }\r\n    }\r\n    return false;\r\n  }, []);\r\n\r\n  // Enhanced camera and media access\r\n  const requestCameraAccess = useCallback(\r\n    async (constraints?: MediaStreamConstraints) => {\r\n      if (!('mediaDevices' in navigator)) {\r\n        throw new Error('Camera not supported');\r\n      }\r\n\r\n      try {\r\n        const stream = await navigator.mediaDevices.getUserMedia({\r\n          video: { facingMode: 'environment' },\r\n          audio: false,\r\n          ...constraints,\r\n        });\r\n\r\n        triggerHapticFeedback('light');\r\n        return stream;\r\n      } catch (error) {\r\n        triggerHapticFeedback('error');\r\n        throw error;\r\n      }\r\n    },\r\n    [triggerHapticFeedback],\r\n  );\r\n\r\n  // Voice input simulation\r\n  const requestVoiceInput = useCallback(async (): Promise<string> => {\r\n    if (!('webkitSpeechRecognition' in window) && !('SpeechRecognition' in window)) {\r\n      throw new Error('Speech recognition not supported');\r\n    }\r\n\r\n    return new Promise((resolve, reject) => {\r\n      const SpeechRecognition =\r\n        (window as any).webkitSpeechRecognition || (window as any).SpeechRecognition;\r\n      const recognition = new SpeechRecognition();\r\n\r\n      recognition.lang = 'tr-TR';\r\n      recognition.continuous = false;\r\n      recognition.interimResults = false;\r\n\r\n      recognition.onresult = (event: any) => {\r\n        const {transcript} = event.results[0][0];\r\n        triggerHapticFeedback('success');\r\n        resolve(transcript);\r\n      };\r\n\r\n      recognition.onerror = (event: any) => {\r\n        triggerHapticFeedback('error');\r\n        reject(new Error(event.error));\r\n      };\r\n\r\n      recognition.start();\r\n      triggerHapticFeedback('light');\r\n    });\r\n  }, [triggerHapticFeedback]);\r\n\r\n  // Biometric authentication simulation\r\n  const requestBiometricAuth = useCallback(async (): Promise<boolean> => {\r\n    if (!('credentials' in navigator)) {\r\n      throw new Error('WebAuthn not supported');\r\n    }\r\n\r\n    try {\r\n      // Simulate biometric authentication\r\n      await new Promise((resolve) => setTimeout(resolve, 1000));\r\n      triggerHapticFeedback('success');\r\n      return true;\r\n    } catch (error) {\r\n      triggerHapticFeedback('error');\r\n      return false;\r\n    }\r\n  }, [triggerHapticFeedback]);\r\n\r\n  // Enhanced file sharing\r\n  const shareFile = useCallback(\r\n    async (file: File, title?: string, text?: string) => {\r\n      if ('share' in navigator && 'canShare' in navigator) {\r\n        const shareData = {\r\n          files: [file],\r\n          title: title ?? 'Dernek Sistemi - Dosya Payla┼ş─▒m─▒',\r\n          text: text ?? 'Dernek sistemi ├╝zerinden payla┼ş─▒lan dosya',\r\n        };\r\n\r\n        if (navigator.canShare(shareData)) {\r\n          try {\r\n            await navigator.share(shareData);\r\n            triggerHapticFeedback('success');\r\n            return true;\r\n          } catch (error) {\r\n            if ((error as Error).name !== 'AbortError') {\r\n              triggerHapticFeedback('error');\r\n            }\r\n            return false;\r\n          }\r\n        }\r\n      }\r\n      return false;\r\n    },\r\n    [triggerHapticFeedback],\r\n  );\r\n\r\n  // Enhanced clipboard operations\r\n  const copyToClipboard = useCallback(\r\n    async (text: string): Promise<boolean> => {\r\n      try {\r\n        if ('clipboard' in navigator) {\r\n          await navigator.clipboard.writeText(text);\r\n        } else {\r\n          // Fallback for older browsers\r\n          const textArea = document.createElement('textarea');\r\n          textArea.value = text;\r\n          document.body.appendChild(textArea);\r\n          textArea.select();\r\n          document.execCommand('copy');\r\n          document.body.removeChild(textArea);\r\n        }\r\n\r\n        triggerHapticFeedback('success');\r\n        return true;\r\n      } catch (error) {\r\n        triggerHapticFeedback('error');\r\n        return false;\r\n      }\r\n    },\r\n    [triggerHapticFeedback],\r\n  );\r\n\r\n  return {\r\n    deviceInfo,\r\n    touchGesture,\r\n    optimizedSettings: getOptimizedSettings(),\r\n    triggerHapticFeedback,\r\n    getSafeAreaInsets,\r\n\r\n    // Device capability checks\r\n    isMobile: deviceInfo.isMobile,\r\n    isTablet: deviceInfo.isTablet,\r\n    isLowPowerMode: deviceInfo.isLowBattery ?? shouldReduceAnimations,\r\n    isSlowNetwork: deviceInfo.networkType === 'slow-2g' || deviceInfo.networkType === '2g',\r\n\r\n    // Utility functions\r\n    shouldShowMobileUI: deviceInfo.isMobile && !deviceInfo.isTablet,\r\n    shouldUseNativeScroll: deviceInfo.isMobile,\r\n    shouldPreventZoom: deviceInfo.isMobile,\r\n\r\n    // Enhanced mobile features\r\n    installPWA,\r\n    requestCameraAccess,\r\n    requestVoiceInput,\r\n    requestBiometricAuth,\r\n    shareFile,\r\n    copyToClipboard,\r\n  };\r\n}\r\n\r\n/**\r\n * Enhanced mobile form optimization hook\r\n */\r\n/**\r\n * useMobileFormOptimization function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useMobileFormOptimization() {\r\n  const { deviceInfo, optimizedSettings, triggerHapticFeedback } = useAdvancedMobile();\r\n  const [keyboardHeight, setKeyboardHeight] = useState(0);\r\n  const [isKeyboardOpen, setIsKeyboardOpen] = useState(false);\r\n\r\n  // Virtual keyboard detection\r\n  useEffect(() => {\r\n    if (!deviceInfo.isMobile) return;\r\n\r\n    const initialViewportHeight = window.visualViewport?.height ?? window.innerHeight;\r\n\r\n    const handleViewportChange = () => {\r\n      const currentHeight = window.visualViewport?.height ?? window.innerHeight;\r\n      const heightDiff = initialViewportHeight - currentHeight;\r\n\r\n      setKeyboardHeight(Math.max(0, heightDiff));\r\n      setIsKeyboardOpen(heightDiff > 150); // Keyboard is likely open if height diff > 150px\r\n    };\r\n\r\n    if (window.visualViewport) {\r\n      window.visualViewport.addEventListener('resize', handleViewportChange);\r\n      return () => window.visualViewport?.removeEventListener('resize', handleViewportChange);\r\n    } \r\n      window.addEventListener('resize', handleViewportChange);\r\n      return () => {\r\n        window.removeEventListener('resize', handleViewportChange);\r\n      };\r\n    \r\n  }, [deviceInfo.isMobile]);\r\n\r\n  // Input focus optimization\r\n  const optimizeInputFocus = useCallback(\r\n    (element: HTMLInputElement | HTMLTextAreaElement) => {\r\n      if (!deviceInfo.isMobile) return;\r\n\r\n      // Prevent zoom on iOS\r\n      if (deviceInfo.isIOS) {\r\n        const originalFontSize = element.style.fontSize;\r\n        element.style.fontSize = '16px';\r\n\r\n        // Restore original font size after blur\r\n        const handleBlur = () => {\r\n          element.style.fontSize = originalFontSize;\r\n          element.removeEventListener('blur', handleBlur);\r\n        };\r\n        element.addEventListener('blur', handleBlur);\r\n      }\r\n\r\n      // Scroll into view with keyboard compensation\r\n      if (isKeyboardOpen) {\r\n        setTimeout(() => {\r\n          element.scrollIntoView({\r\n            behavior: 'smooth',\r\n            block: 'center',\r\n            inline: 'nearest',\r\n          });\r\n        }, 100);\r\n      }\r\n\r\n      // Haptic feedback\r\n      triggerHapticFeedback('light');\r\n    },\r\n    [deviceInfo.isMobile, deviceInfo.isIOS, isKeyboardOpen, triggerHapticFeedback],\r\n  );\r\n\r\n  return {\r\n    keyboardHeight,\r\n    isKeyboardOpen,\r\n    optimizeInputFocus,\r\n    shouldAdjustForKeyboard: deviceInfo.isMobile && isKeyboardOpen,\r\n    keyboardCompensationStyle: isKeyboardOpen\r\n      ? {\r\n          paddingBottom: `${keyboardHeight}px`,\r\n          transition: optimizedSettings.enableAnimations\r\n            ? `padding-bottom ${optimizedSettings.animationDuration}s ease-out`\r\n            : 'none',\r\n        }\r\n      : {},\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\useBackgroundSync.ts","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'../services/backgroundSyncService' import is duplicated.","line":8,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":8,"endColumn":75},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[807,810],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[807,810],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":90,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":90,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2747,2750],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2747,2750],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Background Sync Hook\r\n * React hook for managing offline data synchronization\r\n */\r\n\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport type { SyncOptions, SyncResult, SyncTask } from '../services/backgroundSyncService';\r\nimport { backgroundSyncService } from '../services/backgroundSyncService';\r\n\r\n/**\r\n * UseBackgroundSyncReturn Interface\r\n * \r\n * @interface UseBackgroundSyncReturn\r\n */\r\nexport interface UseBackgroundSyncReturn {\r\n  isOnline: boolean;\r\n  isSyncAvailable: boolean;\r\n  isSyncInProgress: boolean;\r\n  syncStats: {\r\n    total: number;\r\n    pending: number;\r\n    completed: number;\r\n    failed: number;\r\n    syncing: number;\r\n  };\r\n  pendingTasks: SyncTask[];\r\n  failedTasks: SyncTask[];\r\n  addSyncTask: (\r\n    entity: string,\r\n    type: SyncTask['type'],\r\n    data: any,\r\n    options?: SyncOptions,\r\n  ) => Promise<string>;\r\n  syncNow: () => Promise<SyncResult>;\r\n  retryFailedTasks: () => Promise<SyncResult>;\r\n  clearCompletedTasks: () => void;\r\n  clearAllTasks: () => void;\r\n  removeSyncTask: (taskId: string) => boolean;\r\n}\r\n\r\nexport const useBackgroundSync = (): UseBackgroundSyncReturn => {\r\n  const [isOnline, setIsOnline] = useState(navigator.onLine);\r\n  const [isSyncInProgress, setIsSyncInProgress] = useState(false);\r\n  const [syncStats, setSyncStats] = useState(backgroundSyncService.getSyncStats());\r\n  const [pendingTasks, setPendingTasks] = useState<SyncTask[]>([]);\r\n  const [failedTasks, setFailedTasks] = useState<SyncTask[]>([]);\r\n\r\n  // Update sync stats and tasks\r\n  const updateSyncState = useCallback(() => {\r\n    setSyncStats(backgroundSyncService.getSyncStats());\r\n    setPendingTasks(backgroundSyncService.getPendingSyncTasks());\r\n    setFailedTasks(backgroundSyncService.getFailedSyncTasks());\r\n    setIsSyncInProgress(backgroundSyncService.isSyncInProgress());\r\n  }, []);\r\n\r\n  // Initialize and set up event listeners\r\n  useEffect(() => {\r\n    // Initial state update\r\n    updateSyncState();\r\n\r\n    // Online/offline event listeners\r\n    const handleOnline = () => {\r\n      setIsOnline(true);\r\n      updateSyncState();\r\n    };\r\n\r\n    const handleOffline = () => {\r\n      setIsOnline(false);\r\n      updateSyncState();\r\n    };\r\n\r\n    window.addEventListener('online', handleOnline);\r\n    window.addEventListener('offline', handleOffline);\r\n\r\n    // Periodic sync state update\r\n    const interval = setInterval(updateSyncState, 1000);\r\n\r\n    return () => {\r\n      window.removeEventListener('online', handleOnline);\r\n      window.removeEventListener('offline', handleOffline);\r\n      clearInterval(interval);\r\n    };\r\n  }, [updateSyncState]);\r\n\r\n  // Add sync task\r\n  const addSyncTask = useCallback(\r\n    async (\r\n      entity: string,\r\n      type: SyncTask['type'],\r\n      data: any,\r\n      options?: SyncOptions,\r\n    ): Promise<string> => {\r\n      const taskId = await backgroundSyncService.addSyncTask(entity, type, data, options);\r\n      updateSyncState();\r\n      return taskId;\r\n    },\r\n    [updateSyncState],\r\n  );\r\n\r\n  // Manual sync\r\n  const syncNow = useCallback(async (): Promise<SyncResult> => {\r\n    const result = await backgroundSyncService.syncPendingTasks();\r\n    updateSyncState();\r\n    return result;\r\n  }, [updateSyncState]);\r\n\r\n  // Retry failed tasks\r\n  const retryFailedTasks = useCallback(async (): Promise<SyncResult> => {\r\n    const result = await backgroundSyncService.retryFailedTasks();\r\n    updateSyncState();\r\n    return result;\r\n  }, [updateSyncState]);\r\n\r\n  // Clear completed tasks\r\n  const clearCompletedTasks = useCallback(() => {\r\n    backgroundSyncService.clearCompletedTasks();\r\n    updateSyncState();\r\n  }, [updateSyncState]);\r\n\r\n  // Clear all tasks\r\n  const clearAllTasks = useCallback(() => {\r\n    backgroundSyncService.clearAllTasks();\r\n    updateSyncState();\r\n  }, [updateSyncState]);\r\n\r\n  // Remove specific sync task\r\n  const removeSyncTask = useCallback(\r\n    (taskId: string): boolean => {\r\n      const result = backgroundSyncService.removeSyncTask(taskId);\r\n      updateSyncState();\r\n      return result;\r\n    },\r\n    [updateSyncState],\r\n  );\r\n\r\n  return {\r\n    isOnline,\r\n    isSyncAvailable: backgroundSyncService.isSyncAvailable(),\r\n    isSyncInProgress,\r\n    syncStats,\r\n    pendingTasks,\r\n    failedTasks,\r\n    addSyncTask,\r\n    syncNow,\r\n    retryFailedTasks,\r\n    clearCompletedTasks,\r\n    clearAllTasks,\r\n    removeSyncTask,\r\n  };\r\n};\r\n\r\nexport default useBackgroundSync;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\useBeneficiaries.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'realtime' is assigned a value but never used.","line":43,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":13},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'realtime' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":43,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":43,"endColumn":13},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":51,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":51,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1505,1508],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1505,1508],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":63,"column":31,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":63,"endColumn":44},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":81,"column":13,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":81,"endColumn":25},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":1,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":81,"column":13,"nodeType":null,"messageId":"preferOptionalChain","endLine":81,"endColumn":60,"suggestions":[{"fix":{"range":[2323,2370],"text":"b.need_types?.includes(needType)"},"messageId":"optionalChainSuggest","desc":"Change to an optional chain."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":87,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":87,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2488,2490],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":112,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":112,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3313,3315],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":137,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":137,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4147,4149],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":162,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":162,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4985,4987],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":185,"column":35,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":185,"endColumn":49},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":189,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":189,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5943,5945],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":215,"column":39,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":215,"endColumn":53},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":220,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":220,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6940,6942],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":246,"column":39,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":246,"endColumn":53},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":251,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":251,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7963,7965],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":280,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":280,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8870,8872],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":304,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":304,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9622,9624],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview useBeneficiaries Hook - ─░htiya├ğ sahipleri y├Ânetimi\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { beneficiariesService } from '../services/beneficiariesService';\r\nimport type { Beneficiary, BeneficiaryInsert, BeneficiaryUpdate } from '../types/beneficiary';\r\n\r\n/**\r\n * useBeneficiaries hook'u i├ğin se├ğenekler\r\n */\r\ninterface UseBeneficiariesOptions {\r\n  /** Silinmi┼ş kay─▒tlar─▒ dahil et */\r\n  includeDeleted?: boolean;\r\n  /** Durum filtresi */\r\n  status?: 'active' | 'completed' | 'suspended';\r\n  /** ┼Şehir filtresi */\r\n  city?: string;\r\n  /** ─░htiya├ğ t├╝r├╝ filtresi */\r\n  needType?: string;\r\n  /** Realtime g├╝ncellemeleri aktif et */\r\n  realtime?: boolean;\r\n  /** Otomatik veri y├╝kleme */\r\n  autoFetch?: boolean;\r\n}\r\n\r\n/**\r\n * useBeneficiaries hook'u - ─░htiya├ğ sahipleri y├Ânetimi\r\n * \r\n * @param options - Hook se├ğenekleri\r\n * @returns ─░htiya├ğ sahipleri y├Ânetim fonksiyonlar─▒ ve durumlar─▒\r\n */\r\nexport function useBeneficiaries(options: UseBeneficiariesOptions = {}) {\r\n  const {\r\n    includeDeleted = false,\r\n    status,\r\n    city,\r\n    needType,\r\n    realtime = true,\r\n    autoFetch = true\r\n  } = options;\r\n\r\n  // State tan─▒mlamalar─▒\r\n  const [beneficiaries, setBeneficiaries] = useState<Beneficiary[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [stats, setStats] = useState<any>(null);\r\n\r\n  /**\r\n   * T├╝m ihtiya├ğ sahiplerini getirir\r\n   */\r\n  const fetchBeneficiaries = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await beneficiariesService.getAll();\r\n      \r\n      if (response.success && response.data) {\r\n        let filteredData = response.data;\r\n\r\n        // Filtreleri uygula\r\n        if (!includeDeleted) {\r\n          filteredData = filteredData.filter(b => b.status !== 'deleted');\r\n        }\r\n        \r\n        if (status) {\r\n          filteredData = filteredData.filter(b => b.status === status);\r\n        }\r\n        \r\n        if (city) {\r\n          filteredData = filteredData.filter(b => b.city === city);\r\n        }\r\n        \r\n        if (needType) {\r\n          filteredData = filteredData.filter(b => \r\n            b.need_types && b.need_types.includes(needType)\r\n          );\r\n        }\r\n\r\n        setBeneficiaries(filteredData);\r\n      } else {\r\n        setError(response.error || '─░htiya├ğ sahipleri getirilemedi');\r\n        toast.error('─░htiya├ğ sahipleri y├╝klenirken hata olu┼ştu');\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Beklenmeyen bir hata olu┼ştu';\r\n      setError(errorMessage);\r\n      toast.error('─░htiya├ğ sahipleri y├╝klenirken hata olu┼ştu');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [includeDeleted, status, city, needType]);\r\n\r\n  /**\r\n   * Aktif ihtiya├ğ sahiplerini getirir\r\n   */\r\n  const fetchActiveBeneficiaries = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await beneficiariesService.getActiveBeneficiaries();\r\n      \r\n      if (response.success && response.data) {\r\n        setBeneficiaries(response.data);\r\n      } else {\r\n        setError(response.error || 'Aktif ihtiya├ğ sahipleri getirilemedi');\r\n        toast.error('Aktif ihtiya├ğ sahipleri y├╝klenirken hata olu┼ştu');\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Beklenmeyen bir hata olu┼ştu';\r\n      setError(errorMessage);\r\n      toast.error('Aktif ihtiya├ğ sahipleri y├╝klenirken hata olu┼ştu');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * ┼Şehre g├Âre ihtiya├ğ sahiplerini getirir\r\n   */\r\n  const fetchBeneficiariesByCity = useCallback(async (cityName: string) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await beneficiariesService.getBeneficiariesByCity(cityName);\r\n      \r\n      if (response.success && response.data) {\r\n        setBeneficiaries(response.data);\r\n      } else {\r\n        setError(response.error || '┼Şehir baz─▒nda ihtiya├ğ sahipleri getirilemedi');\r\n        toast.error('┼Şehir baz─▒nda ihtiya├ğ sahipleri y├╝klenirken hata olu┼ştu');\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Beklenmeyen bir hata olu┼ştu';\r\n      setError(errorMessage);\r\n      toast.error('┼Şehir baz─▒nda ihtiya├ğ sahipleri y├╝klenirken hata olu┼ştu');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * Acil durumdaki ihtiya├ğ sahiplerini getirir\r\n   */\r\n  const fetchUrgentBeneficiaries = useCallback(async () => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await beneficiariesService.getUrgentBeneficiaries();\r\n      \r\n      if (response.success && response.data) {\r\n        setBeneficiaries(response.data);\r\n      } else {\r\n        setError(response.error || 'Acil durumdaki ihtiya├ğ sahipleri getirilemedi');\r\n        toast.error('Acil durumdaki ihtiya├ğ sahipleri y├╝klenirken hata olu┼ştu');\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Beklenmeyen bir hata olu┼ştu';\r\n      setError(errorMessage);\r\n      toast.error('Acil durumdaki ihtiya├ğ sahipleri y├╝klenirken hata olu┼ştu');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * ─░htiya├ğ sahibi olu┼şturur\r\n   */\r\n  const createBeneficiary = useCallback(async (beneficiaryData: BeneficiaryInsert) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await beneficiariesService.create(beneficiaryData);\r\n      \r\n      if (response.success && response.data) {\r\n        setBeneficiaries(prev => [response.data!, ...prev]);\r\n        toast.success('─░htiya├ğ sahibi ba┼şar─▒yla olu┼şturuldu');\r\n        return response.data;\r\n      } \r\n        setError(response.error || '─░htiya├ğ sahibi olu┼şturulamad─▒');\r\n        toast.error('─░htiya├ğ sahibi olu┼şturulurken hata olu┼ştu');\r\n        return null;\r\n      \r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Beklenmeyen bir hata olu┼ştu';\r\n      setError(errorMessage);\r\n      toast.error('─░htiya├ğ sahibi olu┼şturulurken hata olu┼ştu');\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * ─░htiya├ğ sahibi g├╝nceller\r\n   */\r\n  const updateBeneficiary = useCallback(async (id: number, updates: BeneficiaryUpdate) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await beneficiariesService.update(id, updates);\r\n      \r\n      if (response.success && response.data) {\r\n        setBeneficiaries(prev => \r\n          prev.map(b => b.id === id ? response.data! : b)\r\n        );\r\n        toast.success('─░htiya├ğ sahibi ba┼şar─▒yla g├╝ncellendi');\r\n        return response.data;\r\n      } \r\n        setError(response.error || '─░htiya├ğ sahibi g├╝ncellenemedi');\r\n        toast.error('─░htiya├ğ sahibi g├╝ncellenirken hata olu┼ştu');\r\n        return null;\r\n      \r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Beklenmeyen bir hata olu┼ştu';\r\n      setError(errorMessage);\r\n      toast.error('─░htiya├ğ sahibi g├╝ncellenirken hata olu┼ştu');\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * ─░htiya├ğ sahibi durumunu g├╝nceller\r\n   */\r\n  const updateBeneficiaryStatus = useCallback(async (id: number, status: string) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await beneficiariesService.updateBeneficiaryStatus(id, status);\r\n      \r\n      if (response.success && response.data) {\r\n        setBeneficiaries(prev => \r\n          prev.map(b => b.id === id ? response.data! : b)\r\n        );\r\n        toast.success('─░htiya├ğ sahibi durumu ba┼şar─▒yla g├╝ncellendi');\r\n        return response.data;\r\n      } \r\n        setError(response.error || '─░htiya├ğ sahibi durumu g├╝ncellenemedi');\r\n        toast.error('─░htiya├ğ sahibi durumu g├╝ncellenirken hata olu┼ştu');\r\n        return null;\r\n      \r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Beklenmeyen bir hata olu┼ştu';\r\n      setError(errorMessage);\r\n      toast.error('─░htiya├ğ sahibi durumu g├╝ncellenirken hata olu┼ştu');\r\n      return null;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * ─░htiya├ğ sahibi siler\r\n   */\r\n  const deleteBeneficiary = useCallback(async (id: number) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response = await beneficiariesService.delete(id);\r\n      \r\n      if (response.success) {\r\n        setBeneficiaries(prev => prev.filter(b => b.id !== id));\r\n        toast.success('─░htiya├ğ sahibi ba┼şar─▒yla silindi');\r\n        return true;\r\n      } \r\n        setError(response.error || '─░htiya├ğ sahibi silinemedi');\r\n        toast.error('─░htiya├ğ sahibi silinirken hata olu┼ştu');\r\n        return false;\r\n      \r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Beklenmeyen bir hata olu┼ştu';\r\n      setError(errorMessage);\r\n      toast.error('─░htiya├ğ sahibi silinirken hata olu┼ştu');\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * ─░htiya├ğ sahibi istatistiklerini getirir\r\n   */\r\n  const fetchStats = useCallback(async () => {\r\n    try {\r\n      const response = await beneficiariesService.getBeneficiaryStats();\r\n      \r\n      if (response.success && response.data) {\r\n        setStats(response.data);\r\n      } else {\r\n        setError(response.error || '─░statistikler getirilemedi');\r\n      }\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Beklenmeyen bir hata olu┼ştu';\r\n      setError(errorMessage);\r\n    }\r\n  }, []);\r\n\r\n  // Otomatik veri y├╝kleme\r\n  useEffect(() => {\r\n    if (autoFetch) {\r\n      fetchBeneficiaries();\r\n    }\r\n  }, [autoFetch, fetchBeneficiaries]);\r\n\r\n  // ─░statistikleri y├╝kle\r\n  useEffect(() => {\r\n    fetchStats();\r\n  }, [fetchStats]);\r\n\r\n  return {\r\n    // State\r\n    beneficiaries,\r\n    loading,\r\n    error,\r\n    stats,\r\n    \r\n    // Actions\r\n    fetchBeneficiaries,\r\n    fetchActiveBeneficiaries,\r\n    fetchBeneficiariesByCity,\r\n    fetchUrgentBeneficiaries,\r\n    createBeneficiary,\r\n    updateBeneficiary,\r\n    updateBeneficiaryStatus,\r\n    deleteBeneficiary,\r\n    fetchStats,\r\n    \r\n    // Utilities\r\n    refresh: fetchBeneficiaries,\r\n    clearError: () => { setError(null); }\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\useDataExport.ts","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'../types/data' import is duplicated.","line":11,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":11,"endColumn":82},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":73,"column":41,"nodeType":"MemberExpression","endLine":73,"endColumn":83},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":146,"column":40,"nodeType":"MemberExpression","endLine":146,"endColumn":69},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":146,"column":70,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":146,"endColumn":72,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5017,5019],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":190,"column":11,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":190,"endColumn":25,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[6399,6400],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":191,"column":13,"nodeType":"MemberExpression","endLine":191,"endColumn":28},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":215,"column":14,"nodeType":"MemberExpression","endLine":215,"endColumn":57},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":215,"column":50,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":215,"endColumn":52,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[7151,7153],"text":""},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":223,"column":9,"nodeType":"LogicalExpression","messageId":"alwaysFalsy","endLine":223,"endColumn":35},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":223,"column":9,"nodeType":"UnaryExpression","messageId":"constantShortCircuit","endLine":223,"endColumn":14},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":223,"column":9,"nodeType":"UnaryExpression","messageId":"neverNullish","endLine":223,"endColumn":14},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":279,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":279,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8989,9089],"text":"((item as Record<string, unknown>).date ??\r\n              (item as Record<string, unknown>).createdAt)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":280,"column":59,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":280,"endColumn":61,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9090,9092],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":283,"column":32,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":283,"endColumn":49,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[9278,9279],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":283,"column":71,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":283,"endColumn":88,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[9317,9318],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":289,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":289,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9525,9527],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview useDataExport Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { useCallback, useRef, useState } from 'react';\r\nimport { toast } from 'sonner';\r\nimport type { ExportConfig, ExportResult } from '../types/data';\r\nimport { DATA_FORMATTERS, EXPORT_LIMITS, EXPORT_TEMPLATES } from '../types/data';\r\n\r\n// Specific types for different data structures\r\ninterface MemberData {\r\n  name?: string;\r\n  email?: string;\r\n  phone?: string;\r\n  membershipType?: string;\r\n  status?: string;\r\n  joinDate?: string | Date;\r\n  totalDonations?: number;\r\n  [key: string]: unknown;\r\n}\r\n\r\ninterface DonationData {\r\n  donorName?: string;\r\n  amount?: number;\r\n  type?: string;\r\n  status?: string;\r\n  date?: string | Date;\r\n  paymentMethod?: string;\r\n  campaign?: string;\r\n  [key: string]: unknown;\r\n}\r\n\r\ninterface AidData {\r\n  applicantName?: string;\r\n  aidType?: string;\r\n  requestedAmount?: number;\r\n  status?: string;\r\n  urgency?: string;\r\n  applicationDate?: string | Date;\r\n  [key: string]: unknown;\r\n}\r\n\r\n// Union type for all exportable data\r\ntype ExportableData = MemberData | DonationData | AidData;\r\n\r\ninterface UseDataExportProps {\r\n  onProgress?: (progress: number) => void;\r\n  onComplete?: (result: ExportResult) => void;\r\n  onError?: (error: string) => void;\r\n}\r\n\r\n/**\r\n * useDataExport function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useDataExport({ onProgress, onComplete, onError }: UseDataExportProps = {}) {\r\n  const [isExporting, setIsExporting] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const abortControllerRef = useRef<AbortController | null>(null);\r\n\r\n  // Generate CSV content\r\n  const generateCSV = useCallback((data: ExportableData[], config: ExportConfig): string => {\r\n    const fields = config.fields ?? Object.keys(data[0] || {});\r\n    const headers = config.customHeaders ?? EXPORT_TEMPLATES.member.headers;\r\n\r\n    // Create header row\r\n    const headerRow = fields.map((field) =>\r\n      config.includeHeaders !== false ? (headers as Record<string, string>)[field] || field : field,\r\n    );\r\n\r\n    // Create data rows\r\n    const dataRows = data.map((item) =>\r\n      fields.map((field) => {\r\n        let value = getNestedValue(item, field);\r\n\r\n        // Format value based on type\r\n        if (value instanceof Date) {\r\n          value = DATA_FORMATTERS.date(value, 'short');\r\n        } else if (typeof value === 'number' && field.includes('amount')) {\r\n          value = DATA_FORMATTERS.currency(value);\r\n        } else if (typeof value === 'boolean') {\r\n          value = DATA_FORMATTERS.boolean(value);\r\n        }\r\n\r\n        // Escape CSV special characters\r\n        const stringValue = String(value ?? '');\r\n        if (stringValue.includes(',') || stringValue.includes('\"') || stringValue.includes('\\n')) {\r\n          return `\"${stringValue.replace(/\"/g, '\"\"')}\"`;\r\n        }\r\n        return stringValue;\r\n      }),\r\n    );\r\n\r\n    // Combine header and data\r\n    const allRows = config.includeHeaders !== false ? [headerRow, ...dataRows] : dataRows;\r\n    return allRows.map((row) => row.join(',')).join('\\n');\r\n  }, []);\r\n\r\n  // Generate Excel content (simplified - in real app would use library like xlsx)\r\n  const generateExcel = useCallback(\r\n    (data: ExportableData[], config: ExportConfig): Blob => {\r\n      // This is a simplified version - in production use xlsx library\r\n      const csvContent = generateCSV(data, config);\r\n      const blob = new Blob([csvContent], {\r\n        type: 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n      });\r\n      return blob;\r\n    },\r\n    [generateCSV],\r\n  );\r\n\r\n  // Generate PDF content (simplified - in real app would use library like jsPDF)\r\n  const generatePDF = useCallback(\r\n    async (data: ExportableData[], config: ExportConfig): Promise<Blob> => {\r\n      // This is a simplified version - in production use jsPDF or similar\r\n      const content = `\r\n      <!DOCTYPE html>\r\n      <html>\r\n      <head>\r\n        <meta charset=\"utf-8\">\r\n        <title>${config.filename ?? 'Export'}</title>\r\n        <style>\r\n          body { font-family: Arial, sans-serif; margin: 20px; }\r\n          table { width: 100%; border-collapse: collapse; margin-top: 20px; }\r\n          th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\r\n          th { background-color: #f5f5f5; font-weight: bold; }\r\n          .header { text-align: center; margin-bottom: 20px; }\r\n          .footer { margin-top: 20px; text-align: center; font-size: 12px; color: #666; }\r\n        </style>\r\n      </head>\r\n      <body>\r\n        <div class=\"header\">\r\n          <h1>${config.filename ?? 'Veri Raporu'}</h1>\r\n          <p>Olu┼şturulma Tarihi: ${DATA_FORMATTERS.date(new Date())}</p>\r\n        </div>\r\n\r\n        <table>\r\n          <thead>\r\n            <tr>\r\n              ${(config.fields ?? Object.keys(data[0] || {}))\r\n                .map((field) => `<th>${config.customHeaders?.[field] || field}</th>`)\r\n                .join('')}\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            ${data\r\n              .map(\r\n                (item) => `\r\n              <tr>\r\n                ${(config.fields ?? Object.keys(item))\r\n                  .map((field) => {\r\n                    let value = getNestedValue(item, field);\r\n                    if (value instanceof Date) {\r\n                      value = DATA_FORMATTERS.date(value);\r\n                    } else if (typeof value === 'number' && field.includes('amount')) {\r\n                      value = DATA_FORMATTERS.currency(value);\r\n                    }\r\n                    return `<td>${value ?? ''}</td>`;\r\n                  })\r\n                  .join('')}\r\n              </tr>\r\n            `,\r\n              )\r\n              .join('')}\r\n          </tbody>\r\n        </table>\r\n\r\n        <div class=\"footer\">\r\n          <p>Toplam ${data.length} kay─▒t ÔÇó ${new Date().toLocaleString('tr-TR')}</p>\r\n        </div>\r\n      </body>\r\n      </html>\r\n    `;\r\n\r\n      return new Blob([content], { type: 'text/html' });\r\n    },\r\n    [],\r\n  );\r\n\r\n  // Generate JSON content\r\n  const generateJSON = useCallback((data: ExportableData[], config: ExportConfig): string => {\r\n    const filteredData = config.fields\r\n      ? data.map((item) => {\r\n          const filtered: ExportableData = {};\r\n          config.fields!.forEach((field) => {\r\n            filtered[field] = getNestedValue(item, field);\r\n          });\r\n          return filtered;\r\n        })\r\n      : data;\r\n\r\n    return JSON.stringify(\r\n      {\r\n        exportInfo: {\r\n          timestamp: new Date().toISOString(),\r\n          recordCount: data.length,\r\n          fields: config.fields ?? Object.keys(data[0] || {}),\r\n          filters: config.filters,\r\n        },\r\n        data: filteredData,\r\n      },\r\n      null,\r\n      2,\r\n    );\r\n  }, []);\r\n\r\n  // Helper function to get nested object values\r\n  const getNestedValue = (obj: Record<string, unknown>, path: string): unknown => {\r\n    return path.split('.').reduce((current: unknown, key: string) => {\r\n      return (current as Record<string, unknown>)?.[key];\r\n    }, obj);\r\n  };\r\n\r\n  // Validate export configuration\r\n  const validateConfig = useCallback((data: ExportableData[], config: ExportConfig): string[] => {\r\n    const errors: string[] = [];\r\n\r\n    if (!data ?? data.length === 0) {\r\n      errors.push('D─▒┼şa aktar─▒lacak veri bulunamad─▒');\r\n    }\r\n\r\n    if (data.length > EXPORT_LIMITS[config.format]) {\r\n      errors.push(\r\n        `${config.format.toUpperCase()} format─▒ i├ğin maksimum ${\r\n          EXPORT_LIMITS[config.format]\r\n        } kay─▒t destekleniyor`,\r\n      );\r\n    }\r\n\r\n    if (config.fields && config.fields.length === 0) {\r\n      errors.push('En az bir alan se├ğilmelidir');\r\n    }\r\n\r\n    if (config.dateRange && config.dateRange.start > config.dateRange.end) {\r\n      errors.push('Ba┼şlang─▒├ğ tarihi biti┼ş tarihinden b├╝y├╝k olamaz');\r\n    }\r\n\r\n    return errors;\r\n  }, []);\r\n\r\n  // Main export function\r\n  const exportData = useCallback(\r\n    async (data: ExportableData[], config: ExportConfig): Promise<ExportResult> => {\r\n      // Validate configuration\r\n      const validationErrors = validateConfig(data, config);\r\n      if (validationErrors.length > 0) {\r\n        const error = validationErrors.join(', ');\r\n        onError?.(error);\r\n        return {\r\n          success: false,\r\n          filename: '',\r\n          size: 0,\r\n          recordCount: 0,\r\n          error,\r\n        };\r\n      }\r\n\r\n      setIsExporting(true);\r\n      setProgress(0);\r\n\r\n      // Cancel previous export\r\n      if (abortControllerRef.current) {\r\n        abortControllerRef.current.abort();\r\n      }\r\n\r\n      abortControllerRef.current = new AbortController();\r\n\r\n      try {\r\n        // Apply date range filter if specified\r\n        let filteredData = data;\r\n        if (config.dateRange) {\r\n          filteredData = data.filter((item) => {\r\n            const dateValue =\r\n              (item as Record<string, unknown>).date ||\r\n              (item as Record<string, unknown>).createdAt ||\r\n              (item as Record<string, unknown>).timestamp;\r\n            const itemDate = new Date(dateValue as string | number | Date);\r\n            return itemDate >= config.dateRange!.start && itemDate <= config.dateRange!.end;\r\n          });\r\n        }\r\n\r\n        // Generate filename if not provided\r\n        const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');\r\n        const filename = config.filename || `export-${timestamp}.${config.format}`;\r\n\r\n        // Update progress\r\n        onProgress?.(25);\r\n        setProgress(25);\r\n\r\n        let blob: Blob;\r\n        let content: string;\r\n\r\n        // Generate content based on format\r\n        switch (config.format) {\r\n          case 'csv':\r\n            content = generateCSV(filteredData, config);\r\n            blob = new Blob([`\\ufeff${  content}`], { type: 'text/csv;charset=utf-8;' });\r\n            break;\r\n\r\n          case 'excel':\r\n            blob = generateExcel(filteredData, config);\r\n            break;\r\n\r\n          case 'pdf':\r\n            blob = await generatePDF(filteredData, config);\r\n            break;\r\n\r\n          case 'json':\r\n            content = generateJSON(filteredData, config);\r\n            blob = new Blob([content], { type: 'application/json' });\r\n            break;\r\n\r\n          default:\r\n            throw new Error(`Desteklenmeyen format: ${config.format}`);\r\n        }\r\n\r\n        // Update progress\r\n        onProgress?.(75);\r\n        setProgress(75);\r\n\r\n        // Create download link\r\n        const url = URL.createObjectURL(blob);\r\n        const link = document.createElement('a');\r\n        link.href = url;\r\n        link.download = filename;\r\n        document.body.appendChild(link);\r\n        link.click();\r\n        document.body.removeChild(link);\r\n        URL.revokeObjectURL(url);\r\n\r\n        // Update progress\r\n        onProgress?.(100);\r\n        setProgress(100);\r\n\r\n        const result: ExportResult = {\r\n          success: true,\r\n          filename,\r\n          downloadUrl: url,\r\n          size: blob.size,\r\n          recordCount: filteredData.length,\r\n          message: `${filteredData.length} kay─▒t ba┼şar─▒yla d─▒┼şa aktar─▒ld─▒`,\r\n        };\r\n\r\n        onComplete?.(result);\r\n        toast.success(`${config.format.toUpperCase()} dosyas─▒ ba┼şar─▒yla indirildi`);\r\n\r\n        return result;\r\n      } catch (error) {\r\n        const errorMessage =\r\n          error instanceof Error ? error.message : 'D─▒┼şa aktarma s─▒ras─▒nda hata olu┼ştu';\r\n        onError?.(errorMessage);\r\n        toast.error(errorMessage);\r\n\r\n        return {\r\n          success: false,\r\n          filename: '',\r\n          size: 0,\r\n          recordCount: 0,\r\n          error: errorMessage,\r\n        };\r\n      } finally {\r\n        setIsExporting(false);\r\n        setProgress(0);\r\n      }\r\n    },\r\n    [\r\n      validateConfig,\r\n      generateCSV,\r\n      generateExcel,\r\n      generatePDF,\r\n      generateJSON,\r\n      onProgress,\r\n      onComplete,\r\n      onError,\r\n    ],\r\n  );\r\n\r\n  // Cancel export\r\n  const cancelExport = useCallback(() => {\r\n    if (abortControllerRef.current) {\r\n      abortControllerRef.current.abort();\r\n    }\r\n    setIsExporting(false);\r\n    setProgress(0);\r\n    toast.info('D─▒┼şa aktarma iptal edildi');\r\n  }, []);\r\n\r\n  // Quick export functions\r\n  const exportAsCSV = useCallback(\r\n    (data: ExportableData[], config: Partial<ExportConfig> = {}) => {\r\n      return exportData(data, { ...config, format: 'csv' });\r\n    },\r\n    [exportData],\r\n  );\r\n\r\n  const exportAsExcel = useCallback(\r\n    (data: ExportableData[], config: Partial<ExportConfig> = {}) => {\r\n      return exportData(data, { ...config, format: 'excel' });\r\n    },\r\n    [exportData],\r\n  );\r\n\r\n  const exportAsPDF = useCallback(\r\n    (data: ExportableData[], config: Partial<ExportConfig> = {}) => {\r\n      return exportData(data, { ...config, format: 'pdf' });\r\n    },\r\n    [exportData],\r\n  );\r\n\r\n  const exportAsJSON = useCallback(\r\n    (data: ExportableData[], config: Partial<ExportConfig> = {}) => {\r\n      return exportData(data, { ...config, format: 'json' });\r\n    },\r\n    [exportData],\r\n  );\r\n\r\n  return {\r\n    isExporting,\r\n    progress,\r\n    exportData,\r\n    cancelExport,\r\n\r\n    // Quick export methods\r\n    exportAsCSV,\r\n    exportAsExcel,\r\n    exportAsPDF,\r\n    exportAsJSON,\r\n\r\n    // Utility methods\r\n    validateConfig,\r\n    generateCSV,\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\useDataImport.ts","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'../types/data' import is duplicated.","line":11,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":11,"endColumn":57},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":40,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":40,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1334,1337],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1334,1337],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":52,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":52,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1825,1828],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1825,1828],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":54,"column":14,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":54,"endColumn":16,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[1874,1876],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, the types have no overlap.","line":55,"column":13,"nodeType":"BinaryExpression","messageId":"noOverlapBooleanExpression","endLine":55,"endColumn":36},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":55,"column":13,"nodeType":"MemberExpression","endLine":55,"endColumn":22},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":56,"column":11,"nodeType":"MemberExpression","endLine":56,"endColumn":23},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":56,"column":26,"nodeType":"MemberExpression","endLine":56,"endColumn":35},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":71,"column":20,"nodeType":"MemberExpression","endLine":71,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":98,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":98,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3000,3003],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3000,3003],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":124,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":124,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3774,3777],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3774,3777],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":134,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":134,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4092,4095],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4092,4095],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"prefer-destructuring","severity":2,"message":"Use object destructuring.","line":138,"column":13,"nodeType":"AssignmentExpression","messageId":"preferDestructuring","endLine":138,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":149,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":149,"endColumn":23},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":149,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":149,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":163,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4804,4807],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4804,4807],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":168,"column":11,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":168,"endColumn":17},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":176,"column":23,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":176,"endColumn":25,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[5297,5299],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":177,"column":15,"nodeType":"UnaryExpression","messageId":"constantShortCircuit","endLine":177,"endColumn":27},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":177,"column":15,"nodeType":"UnaryExpression","messageId":"neverNullish","endLine":177,"endColumn":27},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":177,"column":16,"nodeType":"MemberExpression","endLine":177,"endColumn":27},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":177,"column":31,"nodeType":"MemberExpression","endLine":177,"endColumn":42},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":181,"column":22,"nodeType":"MemberExpression","endLine":181,"endColumn":33},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":191,"column":15,"nodeType":"MemberExpression","endLine":191,"endColumn":26},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":191,"column":65,"nodeType":"MemberExpression","endLine":191,"endColumn":76},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":195,"column":22,"nodeType":"MemberExpression","endLine":195,"endColumn":33},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":205,"column":15,"nodeType":"MemberExpression","endLine":205,"endColumn":26},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":205,"column":59,"nodeType":"MemberExpression","endLine":205,"endColumn":70},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":217,"column":15,"nodeType":"MemberExpression","endLine":217,"endColumn":26},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":217,"column":43,"nodeType":"MemberExpression","endLine":217,"endColumn":54},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":221,"column":22,"nodeType":"MemberExpression","endLine":221,"endColumn":33},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":231,"column":15,"nodeType":"MemberExpression","endLine":231,"endColumn":26},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":231,"column":47,"nodeType":"MemberExpression","endLine":231,"endColumn":58},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":235,"column":22,"nodeType":"MemberExpression","endLine":235,"endColumn":33},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":248,"column":25,"nodeType":"MemberExpression","endLine":248,"endColumn":36},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":274,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":274,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8383,8386],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8383,8386],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":305,"column":15,"nodeType":"MemberExpression","endLine":305,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":380,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":380,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11344,11347],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11344,11347],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":381,"column":28,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":381,"endColumn":43},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":382,"column":19,"nodeType":"MemberExpression","endLine":382,"endColumn":31},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":383,"column":17,"nodeType":"MemberExpression","endLine":383,"endColumn":31},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":383,"column":34,"nodeType":"MemberExpression","endLine":383,"endColumn":46},{"ruleId":"prefer-destructuring","severity":2,"message":"Use object destructuring.","line":399,"column":11,"nodeType":"AssignmentExpression","messageId":"preferDestructuring","endLine":399,"endColumn":37},{"ruleId":"prefer-destructuring","severity":2,"message":"Use object destructuring.","line":400,"column":11,"nodeType":"AssignmentExpression","messageId":"preferDestructuring","endLine":400,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":436,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":436,"endColumn":25},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":436,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":436,"endColumn":25},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":441,"column":41,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":441,"endColumn":43,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[13389,13391],"text":"."},"desc":"Remove unnecessary optional chain"}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":40,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview useDataImport Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { useCallback, useRef, useState } from 'react';\r\nimport { toast } from 'sonner';\r\nimport type { ImportConfig, ImportError, ImportResult, ImportWarning } from '../types/data';\r\nimport { IMPORT_VALIDATION_RULES } from '../types/data';\r\n\r\ninterface UseDataImportProps {\r\n  onProgress?: (progress: number) => void;\r\n  onComplete?: (result: ImportResult) => void;\r\n  onError?: (error: string) => void;\r\n  onValidationError?: (errors: ImportError[]) => void;\r\n}\r\n\r\n/**\r\n * useDataImport function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useDataImport({\r\n  onProgress,\r\n  onComplete,\r\n  onError,\r\n  onValidationError,\r\n}: UseDataImportProps = {}) {\r\n  const [isImporting, setIsImporting] = useState(false);\r\n  const [progress, setProgress] = useState(0);\r\n  const [previewData, setPreviewData] = useState<unknown[]>([]);\r\n  const [fieldMapping, setFieldMapping] = useState<Record<string, string>>({});\r\n  const [validationErrors, setValidationErrors] = useState<ImportError[]>([]);\r\n  const abortControllerRef = useRef<AbortController>();\r\n\r\n  // Parse CSV file\r\n  const parseCSV = useCallback((content: string, config: ImportConfig): any[] => {\r\n    const lines = content.split('\\n').filter((line) => line.trim());\r\n    const delimiter = config.delimiter ?? ',';\r\n\r\n    // Skip header rows if specified\r\n    const dataLines = config.skipRows ? lines.slice(config.skipRows) : lines;\r\n\r\n    const headers = dataLines[0]?.split(delimiter).map((h) => h.trim().replace(/\"/g, ''));\r\n    const rows = dataLines.slice(1);\r\n\r\n    return rows.map((row, index) => {\r\n      const values = parseCSVRow(row, delimiter);\r\n      const item: any = { _rowNumber: index + 1 };\r\n\r\n      headers?.forEach((header, i) => {\r\n        if (values[i] !== undefined) {\r\n          item[header] = values[i].trim();\r\n        }\r\n      });\r\n\r\n      return item;\r\n    });\r\n  }, []);\r\n\r\n  // Parse CSV row handling quoted values\r\n  const parseCSVRow = (row: string, delimiter: string): string[] => {\r\n    const values: string[] = [];\r\n    let current = '';\r\n    let inQuotes = false;\r\n\r\n    for (let i = 0; i < row.length; i++) {\r\n      const char = row[i];\r\n\r\n      if (char === '\"') {\r\n        if (inQuotes && row[i + 1] === '\"') {\r\n          // Escaped quote\r\n          current += '\"';\r\n          i++; // Skip next quote\r\n        } else {\r\n          // Toggle quote state\r\n          inQuotes = !inQuotes;\r\n        }\r\n      } else if (char === delimiter && !inQuotes) {\r\n        // End of field\r\n        values.push(current);\r\n        current = '';\r\n      } else {\r\n        current += char;\r\n      }\r\n    }\r\n\r\n    // Add last field\r\n    values.push(current);\r\n    return values;\r\n  };\r\n\r\n  // Parse Excel file (simplified - in real app would use library like xlsx)\r\n  const parseExcel = useCallback(\r\n    async (file: File): Promise<any[]> => {\r\n      // This is a simplified version - in production use xlsx library\r\n      return new Promise((resolve, reject) => {\r\n        const reader = new FileReader();\r\n\r\n        reader.onload = (e) => {\r\n          try {\r\n            // For testing purposes, treat as CSV\r\n            const content = e.target?.result as string;\r\n            const data = parseCSV(content, { format: 'csv', file });\r\n            resolve(data);\r\n          } catch (error) {\r\n            reject(error);\r\n          }\r\n        };\r\n\r\n        reader.onerror = () => {\r\n          reject(new Error('Dosya okunamad─▒'));\r\n        };\r\n        reader.readAsText(file);\r\n      });\r\n    },\r\n    [parseCSV],\r\n  );\r\n\r\n  // Parse JSON file\r\n  const parseJSON = useCallback(async (file: File): Promise<any[]> => {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n\r\n      reader.onload = (e) => {\r\n        try {\r\n          const content = e.target?.result as string;\r\n          const json = JSON.parse(content);\r\n\r\n          // Handle different JSON structures\r\n          let data: any[];\r\n          if (Array.isArray(json)) {\r\n            data = json;\r\n          } else if (json.data && Array.isArray(json.data)) {\r\n            data = json.data;\r\n          } else {\r\n            data = [json];\r\n          }\r\n\r\n          // Add row numbers\r\n          data.forEach((item, index) => {\r\n            item._rowNumber = index + 1;\r\n          });\r\n\r\n          resolve(data);\r\n        } catch (error) {\r\n          reject(new Error('Ge├ğersiz JSON format─▒'));\r\n        }\r\n      };\r\n\r\n      reader.onerror = () => {\r\n        reject(new Error('Dosya okunamad─▒'));\r\n      };\r\n      reader.readAsText(file);\r\n    });\r\n  }, []);\r\n\r\n  // Validate imported data\r\n  const validateData = useCallback(\r\n    (data: any[], dataType: string): { errors: ImportError[]; warnings: ImportWarning[] } => {\r\n      const errors: ImportError[] = [];\r\n      const warnings: ImportWarning[] = [];\r\n      const rules = IMPORT_VALIDATION_RULES[dataType as keyof typeof IMPORT_VALIDATION_RULES];\r\n\r\n      if (!rules) {\r\n        return { errors, warnings };\r\n      }\r\n\r\n      data.forEach((item, index) => {\r\n        const rowNumber = item._rowNumber ?? index + 1;\r\n\r\n        // Check required fields\r\n        rules.required?.forEach((field) => {\r\n          if (!item[field] ?? item[field].toString().trim() === '') {\r\n            errors.push({\r\n              row: rowNumber,\r\n              field,\r\n              value: item[field],\r\n              message: `${field} alan─▒ zorunludur`,\r\n              code: 'REQUIRED_FIELD',\r\n              severity: 'error',\r\n            });\r\n          }\r\n        });\r\n\r\n        // Check email format\r\n        rules.email?.forEach((field) => {\r\n          if (item[field] && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(item[field])) {\r\n            errors.push({\r\n              row: rowNumber,\r\n              field,\r\n              value: item[field],\r\n              message: `${field} alan─▒ ge├ğerli bir e-posta adresi olmal─▒d─▒r`,\r\n              code: 'INVALID_EMAIL',\r\n              severity: 'error',\r\n            });\r\n          }\r\n        });\r\n\r\n        // Check phone format\r\n        rules.phone?.forEach((field) => {\r\n          if (item[field] && !/^(\\+90|0)?5[0-9]{9}$/.test(item[field].replace(/\\D/g, ''))) {\r\n            warnings.push({\r\n              row: rowNumber,\r\n              field,\r\n              message: `${field} alan─▒ ge├ğerli bir telefon numaras─▒ format─▒nda de─şil`,\r\n              code: 'INVALID_PHONE',\r\n            });\r\n          }\r\n        });\r\n\r\n        // Check number format\r\n        rules.number?.forEach((field) => {\r\n          if (item[field] && isNaN(Number(item[field]))) {\r\n            errors.push({\r\n              row: rowNumber,\r\n              field,\r\n              value: item[field],\r\n              message: `${field} alan─▒ say─▒sal de─şer olmal─▒d─▒r`,\r\n              code: 'INVALID_NUMBER',\r\n              severity: 'error',\r\n            });\r\n          }\r\n        });\r\n\r\n        // Check date format\r\n        rules.date?.forEach((field) => {\r\n          if (item[field] && isNaN(Date.parse(item[field]))) {\r\n            errors.push({\r\n              row: rowNumber,\r\n              field,\r\n              value: item[field],\r\n              message: `${field} alan─▒ ge├ğerli bir tarih format─▒nda olmal─▒d─▒r`,\r\n              code: 'INVALID_DATE',\r\n              severity: 'error',\r\n            });\r\n          }\r\n        });\r\n      });\r\n\r\n      // Check for duplicates\r\n      rules.unique?.forEach((field) => {\r\n        const values = new Map();\r\n        data.forEach((item, index) => {\r\n          const value = item[field];\r\n          if (value) {\r\n            if (values.has(value)) {\r\n              const firstRow = values.get(value);\r\n              errors.push({\r\n                row: item._rowNumber ?? index + 1,\r\n                field,\r\n                value,\r\n                message: `${field} alan─▒ tekrar ediyor (ilk g├Âr├╝lme: ${firstRow}. sat─▒r)`,\r\n                code: 'DUPLICATE_VALUE',\r\n                severity: 'error',\r\n              });\r\n            } else {\r\n              values.set(value, item._rowNumber ?? index + 1);\r\n            }\r\n          }\r\n        });\r\n      });\r\n\r\n      return { errors, warnings };\r\n    },\r\n    [],\r\n  );\r\n\r\n  // Preview file content\r\n  const previewFile = useCallback(\r\n    async (config: ImportConfig): Promise<any[]> => {\r\n      try {\r\n        let data: unknown[];\r\n\r\n        switch (config.format) {\r\n          case 'csv':\r\n            const csvContent = await readFileAsText(config.file);\r\n            data = parseCSV(csvContent, config);\r\n            break;\r\n\r\n          case 'excel':\r\n            data = await parseExcel(config.file);\r\n            break;\r\n\r\n          case 'json':\r\n            data = await parseJSON(config.file);\r\n            break;\r\n\r\n          default:\r\n            throw new Error(`Desteklenmeyen format: ${config.format}`);\r\n        }\r\n\r\n        // Take only first 10 rows for preview\r\n        const preview = data.slice(0, 10);\r\n        setPreviewData(preview);\r\n\r\n        // Auto-generate field mapping\r\n        if (data.length > 0) {\r\n          const mapping: Record<string, string> = {};\r\n          Object.keys(data[0] as object).forEach((key) => {\r\n            if (key !== '_rowNumber') {\r\n              mapping[key] = key;\r\n            }\r\n          });\r\n          setFieldMapping(mapping);\r\n        }\r\n\r\n        return preview;\r\n      } catch (error) {\r\n        const errorMessage = error instanceof Error ? error.message : 'Dosya ├Ânizleme hatas─▒';\r\n        onError?.(errorMessage);\r\n        throw error;\r\n      }\r\n    },\r\n    [parseCSV, parseExcel, parseJSON, onError],\r\n  );\r\n\r\n  // Read file as text\r\n  const readFileAsText = (file: File): Promise<string> => {\r\n    return new Promise((resolve, reject) => {\r\n      const reader = new FileReader();\r\n      reader.onload = (e) => {\r\n        resolve(e.target?.result as string);\r\n      };\r\n      reader.onerror = () => {\r\n        reject(new Error('Dosya okunamad─▒'));\r\n      };\r\n      reader.readAsText(file, 'UTF-8');\r\n    });\r\n  };\r\n\r\n  // Main import function\r\n  const importData = useCallback(\r\n    async (config: ImportConfig, dataType = 'member'): Promise<ImportResult> => {\r\n      setIsImporting(true);\r\n      setProgress(0);\r\n      setValidationErrors([]);\r\n\r\n      // Cancel previous import\r\n      if (abortControllerRef.current) {\r\n        abortControllerRef.current.abort();\r\n      }\r\n\r\n      abortControllerRef.current = new AbortController();\r\n\r\n      try {\r\n        // Parse file\r\n        onProgress?.(10);\r\n        setProgress(10);\r\n\r\n        let data: Record<string, unknown>[];\r\n\r\n        switch (config.format) {\r\n          case 'csv':\r\n            const csvContent = await readFileAsText(config.file);\r\n            data = parseCSV(csvContent, config);\r\n            break;\r\n\r\n          case 'excel':\r\n            data = await parseExcel(config.file);\r\n            break;\r\n\r\n          case 'json':\r\n            data = await parseJSON(config.file);\r\n            break;\r\n\r\n          default:\r\n            throw new Error(`Desteklenmeyen format: ${config.format}`);\r\n        }\r\n\r\n        onProgress?.(30);\r\n        setProgress(30);\r\n\r\n        // Apply field mapping if provided\r\n        if (config.mapping) {\r\n          data = data.map((item) => {\r\n            const mapped: any = { _rowNumber: item._rowNumber };\r\n            Object.entries(config.mapping!).forEach(([source, target]) => {\r\n              if (item[source] !== undefined) {\r\n                mapped[target] = item[source];\r\n              }\r\n            });\r\n            return mapped;\r\n          });\r\n        }\r\n\r\n        onProgress?.(50);\r\n        setProgress(50);\r\n\r\n        // Validate data if requested\r\n        let errors: ImportError[] = [];\r\n        let warnings: ImportWarning[] = [];\r\n\r\n        if (config.validateData !== false) {\r\n          const validation = validateData(data, dataType);\r\n          errors = validation.errors;\r\n          warnings = validation.warnings;\r\n          setValidationErrors(errors);\r\n          onValidationError?.(errors);\r\n        }\r\n\r\n        onProgress?.(70);\r\n        setProgress(70);\r\n\r\n        // Process data in batches\r\n        const batchSize = config.batchSize ?? 100;\r\n        let processedCount = 0;\r\n        let successCount = 0;\r\n        let errorCount = 0;\r\n        const duplicates = 0;\r\n        const skipped = errors.length;\r\n\r\n        // Filter out rows with errors if validation is enabled\r\n        const validData =\r\n          config.validateData !== false\r\n            ? data.filter((item) => !errors.some((error) => error.row === item._rowNumber))\r\n            : data;\r\n\r\n        // Simulate processing (in real app, this would be API calls)\r\n        for (let i = 0; i < validData.length; i += batchSize) {\r\n          const batch = validData.slice(i, i + batchSize);\r\n\r\n          try {\r\n            // Simulate API call\r\n            await new Promise((resolve) => setTimeout(resolve, 100));\r\n\r\n            processedCount += batch.length;\r\n            successCount += batch.length;\r\n\r\n            const progress = 70 + (processedCount / validData.length) * 25;\r\n            onProgress?.(progress);\r\n            setProgress(progress);\r\n          } catch (error) {\r\n            errorCount += batch.length;\r\n          }\r\n\r\n          // Check if cancelled\r\n          if (abortControllerRef.current?.signal.aborted) {\r\n            throw new Error('─░├ğe aktarma iptal edildi');\r\n          }\r\n        }\r\n\r\n        onProgress?.(100);\r\n        setProgress(100);\r\n\r\n        const result: ImportResult = {\r\n          success: errorCount === 0,\r\n          processedCount,\r\n          successCount,\r\n          errorCount,\r\n          errors,\r\n          warnings,\r\n          duplicates,\r\n          skipped,\r\n          message: `${successCount} kay─▒t ba┼şar─▒yla i├ğe aktar─▒ld─▒`,\r\n        };\r\n\r\n        onComplete?.(result);\r\n        toast.success(`${successCount} kay─▒t ba┼şar─▒yla i├ğe aktar─▒ld─▒`);\r\n\r\n        return result;\r\n      } catch (error) {\r\n        const errorMessage =\r\n          error instanceof Error ? error.message : '─░├ğe aktarma s─▒ras─▒nda hata olu┼ştu';\r\n        onError?.(errorMessage);\r\n        toast.error(errorMessage);\r\n\r\n        return {\r\n          success: false,\r\n          processedCount: 0,\r\n          successCount: 0,\r\n          errorCount: 0,\r\n          errors: [],\r\n          warnings: [],\r\n          duplicates: 0,\r\n          skipped: 0,\r\n          message: errorMessage,\r\n        };\r\n      } finally {\r\n        setIsImporting(false);\r\n        setProgress(0);\r\n      }\r\n    },\r\n    [\r\n      parseCSV,\r\n      parseExcel,\r\n      parseJSON,\r\n      validateData,\r\n      onProgress,\r\n      onComplete,\r\n      onError,\r\n      onValidationError,\r\n    ],\r\n  );\r\n\r\n  // Cancel import\r\n  const cancelImport = useCallback(() => {\r\n    if (abortControllerRef.current) {\r\n      abortControllerRef.current.abort();\r\n    }\r\n    setIsImporting(false);\r\n    setProgress(0);\r\n    toast.info('─░├ğe aktarma iptal edildi');\r\n  }, []);\r\n\r\n  // Update field mapping\r\n  const updateFieldMapping = useCallback((sourceField: string, targetField: string) => {\r\n    setFieldMapping((prev) => ({\r\n      ...prev,\r\n      [sourceField]: targetField,\r\n    }));\r\n  }, []);\r\n\r\n  // Reset import state\r\n  const resetImport = useCallback(() => {\r\n    setPreviewData([]);\r\n    setFieldMapping({});\r\n    setValidationErrors([]);\r\n    setProgress(0);\r\n  }, []);\r\n\r\n  return {\r\n    isImporting,\r\n    progress,\r\n    previewData,\r\n    fieldMapping,\r\n    validationErrors,\r\n\r\n    // Main functions\r\n    importData,\r\n    previewFile,\r\n    cancelImport,\r\n\r\n    // Utility functions\r\n    updateFieldMapping,\r\n    resetImport,\r\n    validateData,\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\useDebounce.ts","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":82,"column":26,"nodeType":"MemberExpression","endLine":82,"endColumn":37}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview useDebounce Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { useState, useEffect, useRef } from 'react';\r\n\r\n// Debounce hook for search and input optimization\r\n/**\r\n * useDebounce function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useDebounce<T>(value: T, delay: number): T {\r\n  const [debouncedValue, setDebouncedValue] = useState<T>(value);\r\n\r\n  useEffect(() => {\r\n    const handler = setTimeout(() => {\r\n      setDebouncedValue(value);\r\n    }, delay);\r\n\r\n    return () => {\r\n      clearTimeout(handler);\r\n    };\r\n  }, [value, delay]);\r\n\r\n  return debouncedValue;\r\n}\r\n\r\n// Throttle hook for scroll and resize events\r\n/**\r\n * useThrottle function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useThrottle<T>(value: T, delay: number): T {\r\n  const [throttledValue, setThrottledValue] = useState<T>(value);\r\n  const lastExecuted = useRef<number>(Date.now());\r\n\r\n  useEffect(() => {\r\n    if (Date.now() >= lastExecuted.current + delay) {\r\n      lastExecuted.current = Date.now();\r\n      setThrottledValue(value);\r\n    } else {\r\n      const timer = setTimeout(() => {\r\n        lastExecuted.current = Date.now();\r\n        setThrottledValue(value);\r\n      }, delay);\r\n\r\n      return () => {\r\n        clearTimeout(timer);\r\n      };\r\n    }\r\n  }, [value, delay]);\r\n\r\n  return throttledValue;\r\n}\r\n\r\n// Optimized search hook\r\n/**\r\n * useSearch function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useSearch<T>(\r\n  items: T[],\r\n  searchFields: (keyof T)[],\r\n  searchTerm: string,\r\n  debounceMs = 300,\r\n) {\r\n  const debouncedSearchTerm = useDebounce(searchTerm.toLowerCase(), debounceMs);\r\n\r\n  const filteredItems = items.filter((item) => {\r\n    if (!debouncedSearchTerm) return true;\r\n\r\n    return searchFields.some((field) => {\r\n      const fieldValue = item[field];\r\n      if (typeof fieldValue === 'string') {\r\n        return fieldValue.toLowerCase().includes(debouncedSearchTerm);\r\n      }\r\n      if (typeof fieldValue === 'number') {\r\n        return fieldValue.toString().includes(debouncedSearchTerm);\r\n      }\r\n      return false;\r\n    });\r\n  });\r\n\r\n  return {\r\n    filteredItems,\r\n    isSearching: searchTerm !== debouncedSearchTerm,\r\n    searchTerm: debouncedSearchTerm,\r\n  };\r\n}\r\n\r\n// Intersection Observer hook for lazy loading\r\n/**\r\n * useIntersectionObserver function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useIntersectionObserver(\r\n  elementRef: React.RefObject<Element>,\r\n  options?: IntersectionObserverInit,\r\n) {\r\n  const [isVisible, setIsVisible] = useState(false);\r\n\r\n  useEffect(() => {\r\n    const element = elementRef.current;\r\n    if (!element) return;\r\n\r\n    const observer = new IntersectionObserver(([entry]) => {\r\n      setIsVisible(entry.isIntersecting);\r\n    }, options);\r\n\r\n    observer.observe(element);\r\n\r\n    return () => {\r\n      observer.unobserve(element);\r\n    };\r\n  }, [elementRef, options]);\r\n\r\n  return isVisible;\r\n}\r\n\r\n// Virtual scrolling hook for large lists\r\n/**\r\n * useVirtualScroll function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useVirtualScroll<T>(\r\n  items: T[],\r\n  containerHeight: number,\r\n  itemHeight: number,\r\n  overscan = 5,\r\n) {\r\n  const [scrollTop, setScrollTop] = useState(0);\r\n\r\n  const visibleItemsCount = Math.ceil(containerHeight / itemHeight);\r\n  const startIndex = Math.max(0, Math.floor(scrollTop / itemHeight) - overscan);\r\n  const endIndex = Math.min(items.length - 1, startIndex + visibleItemsCount + overscan * 2);\r\n\r\n  const visibleItems = items.slice(startIndex, endIndex + 1);\r\n  const totalHeight = items.length * itemHeight;\r\n  const offsetY = startIndex * itemHeight;\r\n\r\n  return {\r\n    visibleItems,\r\n    totalHeight,\r\n    offsetY,\r\n    startIndex,\r\n    endIndex,\r\n    setScrollTop,\r\n  };\r\n}\r\n\r\nexport default useDebounce;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\useDonations.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'dateRange' is assigned a value but never used.","line":45,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":14},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'dateRange' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":45,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":14},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":50,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":50,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1197,1200],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1197,1200],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":229,"column":44,"nodeType":"MemberExpression","endLine":229,"endColumn":62},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":243,"column":13,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":243,"endColumn":32},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":243,"column":14,"nodeType":"MemberExpression","endLine":243,"endColumn":32},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":244,"column":11,"nodeType":"MemberExpression","endLine":244,"endColumn":29},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":247,"column":9,"nodeType":"MemberExpression","endLine":247,"endColumn":27},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":248,"column":9,"nodeType":"MemberExpression","endLine":248,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":293,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":293,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8272,8275],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8272,8275],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":342,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":342,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9380,9383],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9380,9383],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":376,"column":19,"nodeType":"Identifier","messageId":"neverNullish","endLine":376,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":382,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":382,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10432,10435],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10432,10435],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview useDonations Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { useCallback, useMemo } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { TABLES } from '../lib/supabase';\r\nimport type {\r\n  Donation,\r\n  DonationInsert,\r\n  DonationUpdate,\r\n  DonationWithMember,\r\n} from '../types/database';\r\nimport { useSupabaseData, useSupabasePagination } from './useSupabaseData';\r\n\r\n// Basic donations hook\r\n/**\r\n * useDonations function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useDonations(\r\n  options: {\r\n    includeDeleted?: boolean;\r\n    status?: 'pending' | 'completed' | 'cancelled' | 'refunded';\r\n    donationType?: 'one_time' | 'monthly' | 'yearly';\r\n    category?: string;\r\n    campaignId?: string;\r\n    memberId?: string;\r\n    dateRange?: { start: string; end: string };\r\n    realtime?: boolean;\r\n  } = {},\r\n) {\r\n  const {\r\n    includeDeleted = false,\r\n    status,\r\n    donationType,\r\n    category,\r\n    campaignId,\r\n    memberId,\r\n    dateRange,\r\n    realtime = true,\r\n  } = options;\r\n\r\n  const filters = useMemo(() => {\r\n    const f: Record<string, any> = {};\r\n\r\n    if (!includeDeleted) {\r\n      f.deleted_at = 'is.null';\r\n    }\r\n\r\n    if (status) {\r\n      f.status = status;\r\n    }\r\n\r\n    if (donationType) {\r\n      f.donation_type = donationType;\r\n    }\r\n\r\n    if (category) {\r\n      f.category = category;\r\n    }\r\n\r\n    if (campaignId) {\r\n      f.campaign_id = campaignId;\r\n    }\r\n\r\n    if (memberId) {\r\n      f.member_id = memberId;\r\n    }\r\n\r\n    // Date range filtering would need to be handled differently in a real implementation\r\n    // This is a simplified version\r\n\r\n    return f;\r\n  }, [includeDeleted, status, donationType, category, campaignId, memberId]);\r\n\r\n  const {\r\n    data: donations,\r\n    loading,\r\n    error,\r\n    count,\r\n    refetch,\r\n    insert,\r\n    update,\r\n    delete: deleteDonation,\r\n    bulkInsert,\r\n    bulkUpdate,\r\n    bulkDelete,\r\n  } = useSupabaseData<Donation>(TABLES.DONATIONS, {\r\n    select: '*',\r\n    orderBy: { column: 'created_at', ascending: false },\r\n    filters,\r\n    realtime,\r\n  });\r\n\r\n  // Create new donation\r\n  const createDonation = useCallback(\r\n    async (donationData: Omit<DonationInsert, 'created_by'>) => {\r\n      try {\r\n        const newDonation = await insert({\r\n          ...donationData,\r\n          created_by: 'current-user-id', // Replace with actual user ID from auth context\r\n        });\r\n\r\n        toast.success(`${donationData.donor_name} ba─ş─▒┼ş─▒ ba┼şar─▒yla eklendi`);\r\n        return newDonation;\r\n      } catch (error) {\r\n        throw error;\r\n      }\r\n    },\r\n    [insert],\r\n  );\r\n\r\n  // Update donation\r\n  const updateDonation = useCallback(\r\n    async (id: string, donationData: Partial<DonationUpdate>) => {\r\n      try {\r\n        const updatedDonation = await update(id, {\r\n          ...donationData,\r\n          updated_by: 'current-user-id',\r\n          updated_at: new Date().toISOString(),\r\n        });\r\n\r\n        return updatedDonation;\r\n      } catch (error) {\r\n        throw error;\r\n      }\r\n    },\r\n    [update],\r\n  );\r\n\r\n  // Process donation (mark as completed)\r\n  const processDonation = useCallback(\r\n    async (id: string, processedBy?: string) => {\r\n      return updateDonation(id, {\r\n        status: 'completed',\r\n        processed_by: processedBy ?? 'current-user-id',\r\n      });\r\n    },\r\n    [updateDonation],\r\n  );\r\n\r\n  // Cancel donation\r\n  const cancelDonation = useCallback(\r\n    async (id: string, reason?: string) => {\r\n      return updateDonation(id, {\r\n        status: 'cancelled',\r\n        notes: reason ? `─░ptal nedeni: ${reason}` : undefined,\r\n      });\r\n    },\r\n    [updateDonation],\r\n  );\r\n\r\n  // Refund donation\r\n  const refundDonation = useCallback(\r\n    async (id: string, reason?: string) => {\r\n      return updateDonation(id, {\r\n        status: 'refunded',\r\n        notes: reason ? `─░ade nedeni: ${reason}` : undefined,\r\n      });\r\n    },\r\n    [updateDonation],\r\n  );\r\n\r\n  // Get donation statistics\r\n  const getStats = useCallback(() => {\r\n    const completedDonations = donations.filter((d: Donation) => d.status === 'completed');\r\n    const totalAmount = completedDonations.reduce((sum: number, d: Donation) => sum + d.amount, 0);\r\n    const averageAmount =\r\n      completedDonations.length > 0 ? totalAmount / completedDonations.length : 0;\r\n\r\n    return {\r\n      total: donations.length,\r\n      completed: completedDonations.length,\r\n      pending: donations.filter((d: Donation) => d.status === 'pending').length,\r\n      cancelled: donations.filter((d: Donation) => d.status === 'cancelled').length,\r\n      refunded: donations.filter((d: Donation) => d.status === 'refunded').length,\r\n      totalAmount,\r\n      averageAmount,\r\n      byType: {\r\n        one_time: donations.filter((d: Donation) => d.donation_type === 'one_time').length,\r\n        monthly: donations.filter((d: Donation) => d.donation_type === 'monthly').length,\r\n        yearly: donations.filter((d: Donation) => d.donation_type === 'yearly').length,\r\n      },\r\n      byCategory: {\r\n        general: donations.filter((d: Donation) => d.category === 'general').length,\r\n        education: donations.filter((d: Donation) => d.category === 'education').length,\r\n        health: donations.filter((d: Donation) => d.category === 'health').length,\r\n        emergency: donations.filter((d: Donation) => d.category === 'emergency').length,\r\n        other: donations.filter((d: Donation) => d.category === 'other').length,\r\n      },\r\n      byPaymentMethod: {\r\n        cash: donations.filter((d: Donation) => d.payment_method === 'cash').length,\r\n        bank_transfer: donations.filter((d: Donation) => d.payment_method === 'bank_transfer')\r\n          .length,\r\n        credit_card: donations.filter((d: Donation) => d.payment_method === 'credit_card').length,\r\n        online: donations.filter((d: Donation) => d.payment_method === 'online').length,\r\n      },\r\n    };\r\n  }, [donations]);\r\n\r\n  // Bulk status updates\r\n  const bulkUpdateStatus = useCallback(\r\n    async (ids: string[], status: Donation['status']) => {\r\n      const updates = ids.map((id) => ({\r\n        id,\r\n        data: {\r\n          status,\r\n          updated_by: 'current-user-id',\r\n          updated_at: new Date().toISOString(),\r\n          ...(status === 'completed' ? { processed_by: 'current-user-id' } : {}),\r\n        } as Partial<Donation>,\r\n      }));\r\n\r\n      await bulkUpdate(updates);\r\n\r\n      const statusText = {\r\n        pending: 'beklemede',\r\n        completed: 'tamamland─▒',\r\n        cancelled: 'iptal edildi',\r\n        refunded: 'iade edildi',\r\n      };\r\n\r\n      toast.success(`${ids.length} ba─ş─▒┼ş ${statusText[status]} olarak i┼şaretlendi`);\r\n    },\r\n    [bulkUpdate],\r\n  );\r\n\r\n  // Get monthly donation trend\r\n  const getMonthlyTrend = useCallback(() => {\r\n    const monthlyData: Record<string, { count: number; amount: number }> = {};\r\n\r\n    donations\r\n      .filter((d: Donation) => d.status === 'completed')\r\n      .forEach((donation: Donation) => {\r\n        const month = new Date(donation.created_at).toISOString().slice(0, 7); // YYYY-MM\r\n\r\n        if (!monthlyData[month]) {\r\n          monthlyData[month] = { count: 0, amount: 0 };\r\n        }\r\n\r\n        monthlyData[month].count += 1;\r\n        monthlyData[month].amount += donation.amount;\r\n      });\r\n\r\n    return Object.entries(monthlyData)\r\n      .map(([month, data]) => ({\r\n        month,\r\n        count: data.count,\r\n        amount: data.amount,\r\n      }))\r\n      .sort((a, b) => a.month.localeCompare(b.month));\r\n  }, [donations]);\r\n\r\n  return {\r\n    donations,\r\n    loading,\r\n    error,\r\n    count,\r\n    stats: getStats(),\r\n    monthlyTrend: getMonthlyTrend(),\r\n    refetch,\r\n    createDonation,\r\n    updateDonation,\r\n    deleteDonation,\r\n    processDonation,\r\n    cancelDonation,\r\n    refundDonation,\r\n    bulkInsert,\r\n    bulkUpdate,\r\n    bulkDelete,\r\n    bulkUpdateStatus,\r\n  };\r\n}\r\n\r\n// Paginated donations hook\r\n/**\r\n * useDonationsPaginated function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useDonationsPaginated(\r\n  options: {\r\n    pageSize?: number;\r\n    includeDeleted?: boolean;\r\n    searchQuery?: string;\r\n    filters?: Record<string, any>;\r\n  } = {},\r\n) {\r\n  const {\r\n    pageSize = 20,\r\n    includeDeleted = false,\r\n    searchQuery = '',\r\n    filters: additionalFilters = {},\r\n  } = options;\r\n\r\n  const filters = useMemo(() => {\r\n    const f = { ...additionalFilters };\r\n\r\n    if (!includeDeleted) {\r\n      f.deleted_at = 'is.null';\r\n    }\r\n\r\n    return f;\r\n  }, [includeDeleted, additionalFilters]);\r\n\r\n  const searchFields = ['donor_name', 'donor_email', 'reference_number'];\r\n\r\n  return useSupabasePagination<Donation>(TABLES.DONATIONS, {\r\n    select: '*',\r\n    orderBy: { column: 'created_at', ascending: false },\r\n    pageSize,\r\n    filters,\r\n    searchQuery,\r\n    searchFields,\r\n  });\r\n}\r\n\r\n// Donations with member info hook\r\n/**\r\n * useDonationsWithMembers function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useDonationsWithMembers(\r\n  options: {\r\n    limit?: number;\r\n    status?: string;\r\n    includeDeleted?: boolean;\r\n  } = {},\r\n) {\r\n  const { limit = 100, status, includeDeleted = false } = options;\r\n\r\n  const filters = useMemo(() => {\r\n    const f: Record<string, any> = {};\r\n\r\n    if (!includeDeleted) {\r\n      f.deleted_at = 'is.null';\r\n    }\r\n\r\n    if (status) {\r\n      f.status = status;\r\n    }\r\n\r\n    return f;\r\n  }, [includeDeleted, status]);\r\n\r\n  // This would be a more complex query in real implementation using joins\r\n  const {\r\n    data: donations,\r\n    loading: donationsLoading,\r\n    error: donationsError,\r\n  } = useSupabaseData<Donation>(TABLES.DONATIONS, {\r\n    select: '*',\r\n    orderBy: { column: 'created_at', ascending: false },\r\n    filters,\r\n    limit,\r\n  });\r\n\r\n  const {\r\n    data: members,\r\n    loading: membersLoading,\r\n    error: membersError,\r\n  } = useSupabaseData(TABLES.MEMBERS, {\r\n    select: 'id, name, email, status, membership_type',\r\n    filters: { deleted_at: 'is.null' },\r\n  });\r\n\r\n  const loading = donationsLoading ?? membersLoading;\r\n  const error = donationsError ?? membersError;\r\n\r\n  const donationsWithMembers: DonationWithMember[] = useMemo(() => {\r\n    return donations.map((donation: Donation) => {\r\n      const member = donation.member_id\r\n        ? members.find((m: any) => m.id === donation.member_id)\r\n        : undefined;\r\n\r\n      return {\r\n        ...donation,\r\n        member,\r\n      };\r\n    });\r\n  }, [donations, members]);\r\n\r\n  return {\r\n    donations: donationsWithMembers,\r\n    loading,\r\n    error,\r\n  };\r\n}\r\n\r\n// Donation export data formatter\r\n/**\r\n * useDonationExportData function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useDonationExportData() {\r\n  const formatDonationForExport = useCallback((donation: Donation) => {\r\n    return {\r\n      id: donation.id,\r\n      donorName: donation.donor_name,\r\n      donorEmail: donation.donor_email ?? '-',\r\n      donorPhone: donation.donor_phone ?? '-',\r\n      amount: donation.amount,\r\n      currency: donation.currency,\r\n      donationType: donation.donation_type,\r\n      category: donation.category,\r\n      paymentMethod: donation.payment_method,\r\n      status: donation.status,\r\n      referenceNumber: donation.reference_number ?? '-',\r\n      isAnonymous: donation.is_anonymous ? 'Evet' : 'Hay─▒r',\r\n      taxDeductible: donation.tax_deductible ? 'Evet' : 'Hay─▒r',\r\n      notes: donation.notes ?? '-',\r\n      createdAt: donation.created_at,\r\n      processedBy: donation.processed_by ?? '-',\r\n    };\r\n  }, []);\r\n\r\n  const formatDonationsForExport = useCallback(\r\n    (donations: Donation[]) => {\r\n      return donations.map(formatDonationForExport);\r\n    },\r\n    [formatDonationForExport],\r\n  );\r\n\r\n  const getDonationSummary = useCallback((donations: Donation[]) => {\r\n    const completed = donations.filter((d: Donation) => d.status === 'completed');\r\n    const totalAmount = completed.reduce((sum: number, d: Donation) => sum + d.amount, 0);\r\n\r\n    return {\r\n      totalDonations: donations.length,\r\n      completedDonations: completed.length,\r\n      totalAmount,\r\n      averageAmount: completed.length > 0 ? totalAmount / completed.length : 0,\r\n      exportDate: new Date().toISOString(),\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    formatDonationForExport,\r\n    formatDonationsForExport,\r\n    getDonationSummary,\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\useExport.ts","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'../types/reporting' import is duplicated.","line":12,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":12,"endColumn":51},{"ruleId":"no-duplicate-imports","severity":2,"message":"'../services/exportService' import is duplicated.","line":14,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":14,"endColumn":59},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'lastResult'. Either exclude it or remove the dependency array.","line":177,"column":5,"nodeType":"ArrayExpression","endLine":177,"endColumn":55,"suggestions":[{"desc":"Update the dependencies array to be: [isExporting, handleProgress, options]","fix":{"range":[5414,5464],"text":"[isExporting, handleProgress, options]"}}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":197,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":197,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5866,5869],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5866,5869],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":200,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":200,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6019,6021],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":237,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":237,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6965,6968],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6965,6968],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":240,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":240,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7120,7122],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":290,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":290,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8449,8451],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview useExport Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\n// Geli┼şmi┼ş Raporlama Sistemi - Export Hook\r\n\r\nimport { useState, useCallback } from 'react';\r\nimport type { ExportConfig, ReportResponse } from '../types/reporting';\r\nimport { ExportFormat } from '../types/reporting';\r\nimport type { ExportResult, ExportProgress } from '../services/exportService';\r\nimport { exportService } from '../services/exportService';\r\n\r\ninterface UseExportOptions {\r\n  onSuccess?: (result: ExportResult) => void;\r\n  onError?: (error: string) => void;\r\n  onProgress?: (progress: ExportProgress) => void;\r\n}\r\n\r\ninterface UseExportReturn {\r\n  exportData: (data: ReportResponse, config: ExportConfig) => Promise<void>;\r\n  exportBatch: (exports: { data: ReportResponse; config: ExportConfig }[]) => Promise<void>;\r\n  isExporting: boolean;\r\n  progress: ExportProgress | null;\r\n  lastResult: ExportResult | null;\r\n  error: string | null;\r\n  clearError: () => void;\r\n  cancelExport: () => void;\r\n}\r\n\r\nexport const useExport = (options: UseExportOptions = {}): UseExportReturn => {\r\n  const [isExporting, setIsExporting] = useState(false);\r\n  const [progress, setProgress] = useState<ExportProgress | null>(null);\r\n  const [lastResult, setLastResult] = useState<ExportResult | null>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [abortController, setAbortController] = useState<AbortController | null>(null);\r\n\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n  }, []);\r\n\r\n  const cancelExport = useCallback(() => {\r\n    if (abortController) {\r\n      abortController.abort();\r\n      setAbortController(null);\r\n      setIsExporting(false);\r\n      setProgress(null);\r\n    }\r\n  }, [abortController]);\r\n\r\n  const handleProgress = useCallback(\r\n    (progressData: ExportProgress) => {\r\n      setProgress(progressData);\r\n      options.onProgress?.(progressData);\r\n    },\r\n    [options],\r\n  );\r\n\r\n  const exportData = useCallback(\r\n    async (data: ReportResponse, config: ExportConfig): Promise<void> => {\r\n      if (isExporting) {\r\n        throw new Error('Export already in progress');\r\n      }\r\n\r\n      setIsExporting(true);\r\n      setError(null);\r\n      setProgress(null);\r\n      setLastResult(null);\r\n\r\n      // Create abort controller for cancellation\r\n      const controller = new AbortController();\r\n      setAbortController(controller);\r\n\r\n      try {\r\n        const result = await exportService.exportReport(data, config, handleProgress);\r\n\r\n        if (controller.signal.aborted) {\r\n          return;\r\n        }\r\n\r\n        setLastResult(result);\r\n\r\n        if (result.success) {\r\n          options.onSuccess?.(result);\r\n        } else {\r\n          const errorMessage = result.error ?? 'Export failed';\r\n          setError(errorMessage);\r\n          options.onError?.(errorMessage);\r\n        }\r\n      } catch (err) {\r\n        if (controller.signal.aborted) {\r\n          return;\r\n        }\r\n\r\n        const errorMessage = err instanceof Error ? err.message : 'Unknown export error';\r\n        setError(errorMessage);\r\n        options.onError?.(errorMessage);\r\n      } finally {\r\n        if (!controller.signal.aborted) {\r\n          setIsExporting(false);\r\n          setProgress(null);\r\n          setAbortController(null);\r\n        }\r\n      }\r\n    },\r\n    [isExporting, handleProgress, options],\r\n  );\r\n\r\n  const exportBatch = useCallback(\r\n    async (exports: { data: ReportResponse; config: ExportConfig }[]): Promise<void> => {\r\n      if (isExporting) {\r\n        throw new Error('Export already in progress');\r\n      }\r\n\r\n      setIsExporting(true);\r\n      setError(null);\r\n      setProgress(null);\r\n      setLastResult(null);\r\n\r\n      const controller = new AbortController();\r\n      setAbortController(controller);\r\n\r\n      try {\r\n        const results = await exportService.exportBatch(exports, (overall, current) => {\r\n          if (controller.signal.aborted) return;\r\n\r\n          handleProgress({\r\n            stage: 'processing',\r\n            progress: overall,\r\n            message: current,\r\n          });\r\n        });\r\n\r\n        if (controller.signal.aborted) {\r\n          return;\r\n        }\r\n\r\n        // Check if all exports were successful\r\n        const failedExports = results.filter((r) => !r.success);\r\n\r\n        if (failedExports.length === 0) {\r\n          // All successful\r\n          const newResult = {\r\n            success: true,\r\n            format: ExportFormat.PDF, // Default format for batch\r\n            metadata: {\r\n              recordCount: results.length,\r\n              processingTime: 0,\r\n            },\r\n          };\r\n          setLastResult(newResult);\r\n          options.onSuccess?.(newResult);\r\n        } else {\r\n          // Some failed\r\n          const errorMessage = `${failedExports.length} of ${results.length} exports failed`;\r\n          setError(errorMessage);\r\n          options.onError?.(errorMessage);\r\n        }\r\n      } catch (err) {\r\n        if (controller.signal.aborted) {\r\n          return;\r\n        }\r\n\r\n        const errorMessage = err instanceof Error ? err.message : 'Batch export failed';\r\n        setError(errorMessage);\r\n        options.onError?.(errorMessage);\r\n      } finally {\r\n        if (!controller.signal.aborted) {\r\n          setIsExporting(false);\r\n          setProgress(null);\r\n          setAbortController(null);\r\n        }\r\n      }\r\n    },\r\n    [isExporting, handleProgress, options, lastResult],\r\n  );\r\n\r\n  return {\r\n    exportData,\r\n    exportBatch,\r\n    isExporting,\r\n    progress,\r\n    lastResult,\r\n    error,\r\n    clearError,\r\n    cancelExport,\r\n  };\r\n};\r\n\r\n// Specialized hooks for different data types\r\nexport const useFinancialExport = (options: UseExportOptions = {}) => {\r\n  const baseExport = useExport(options);\r\n\r\n  const exportFinancialData = useCallback(\r\n    async (financialData: any, format: ExportFormat = ExportFormat.PDF, filename?: string) => {\r\n      const config: ExportConfig = {\r\n        format,\r\n        filename: filename || `mali_rapor_${new Date().toISOString().split('T')[0]}.${format}`,\r\n        includeCharts: true,\r\n        includeData: true,\r\n        template: 'financial',\r\n        options: {\r\n          pageSize: 'A4',\r\n          orientation: 'portrait',\r\n          margins: { top: 20, right: 20, bottom: 20, left: 20 },\r\n        },\r\n      };\r\n\r\n      const reportResponse: ReportResponse = {\r\n        data: financialData,\r\n        metadata: {\r\n          total_records: 1,\r\n          page: 1,\r\n          page_size: 1,\r\n          execution_time: 0,\r\n          generated_at: new Date(),\r\n        },\r\n      };\r\n\r\n      await baseExport.exportData(reportResponse, config);\r\n    },\r\n    [baseExport],\r\n  );\r\n\r\n  return {\r\n    ...baseExport,\r\n    exportFinancialData,\r\n  };\r\n};\r\n\r\nexport const useDonationExport = (options: UseExportOptions = {}) => {\r\n  const baseExport = useExport(options);\r\n\r\n  const exportDonationData = useCallback(\r\n    async (donationData: any, format: ExportFormat = ExportFormat.EXCEL, filename?: string) => {\r\n      const config: ExportConfig = {\r\n        format,\r\n        filename: filename || `bagis_analizi_${new Date().toISOString().split('T')[0]}.${format}`,\r\n        includeCharts: true,\r\n        includeData: true,\r\n        template: 'donation',\r\n        options: {\r\n          pageSize: 'A4',\r\n          orientation: 'landscape',\r\n          margins: { top: 15, right: 15, bottom: 15, left: 15 },\r\n        },\r\n      };\r\n\r\n      const reportResponse: ReportResponse = {\r\n        data: donationData,\r\n        metadata: {\r\n          total_records: Array.isArray(donationData) ? donationData.length : 1,\r\n          page: 1,\r\n          page_size: 1000,\r\n          execution_time: 0,\r\n          generated_at: new Date(),\r\n        },\r\n      };\r\n\r\n      await baseExport.exportData(reportResponse, config);\r\n    },\r\n    [baseExport],\r\n  );\r\n\r\n  return {\r\n    ...baseExport,\r\n    exportDonationData,\r\n  };\r\n};\r\n\r\nexport const useChartExport = (options: UseExportOptions = {}) => {\r\n  const baseExport = useExport(options);\r\n\r\n  const exportChart = useCallback(\r\n    async (\r\n      chartElement: HTMLElement,\r\n      format: ExportFormat = ExportFormat.PNG,\r\n      filename?: string,\r\n      chartOptions?: {\r\n        width?: number;\r\n        height?: number;\r\n        backgroundColor?: string;\r\n        quality?: number;\r\n      },\r\n    ) => {\r\n      const config: ExportConfig = {\r\n        format,\r\n        filename: filename || `grafik_${new Date().toISOString().split('T')[0]}.${format}`,\r\n        includeCharts: true,\r\n        includeData: false,\r\n        options: {\r\n          ...chartOptions,\r\n          pageSize: 'A4',\r\n          orientation: 'landscape',\r\n        },\r\n      };\r\n\r\n      // Convert chart element to data\r\n      const chartData = {\r\n        element: chartElement,\r\n        type: 'chart',\r\n        timestamp: new Date(),\r\n      };\r\n\r\n      const reportResponse: ReportResponse = {\r\n        data: chartData,\r\n        metadata: {\r\n          total_records: 1,\r\n          page: 1,\r\n          page_size: 1,\r\n          execution_time: 0,\r\n          generated_at: new Date(),\r\n        },\r\n      };\r\n\r\n      await baseExport.exportData(reportResponse, config);\r\n    },\r\n    [baseExport],\r\n  );\r\n\r\n  return {\r\n    ...baseExport,\r\n    exportChart,\r\n  };\r\n};\r\n\r\n// Static export templates - moved from useState to module constant\r\nexport const TEMPLATES = [\r\n  { id: 'default', name: 'Varsay─▒lan ┼Şablon', description: 'Standart rapor format─▒' },\r\n  { id: 'executive', name: 'Y├Ânetici ├ûzeti', description: '├ûzet bilgiler ve grafikler' },\r\n  { id: 'detailed', name: 'Detayl─▒ Rapor', description: 'T├╝m veriler ve analizler' },\r\n  { id: 'presentation', name: 'Sunum Format─▒', description: 'G├Ârsel a─ş─▒rl─▒kl─▒ format' },\r\n  { id: 'financial', name: 'Mali Rapor', description: 'Mali veriler i├ğin ├Âzelle┼ştirilmi┼ş' },\r\n  { id: 'donation', name: 'Ba─ş─▒┼ş Raporu', description: 'Ba─ş─▒┼ş analizleri i├ğin ├Âzelle┼ştirilmi┼ş' },\r\n] as const;\r\n\r\n// Utility hook for export templates\r\nexport const useExportTemplates = () => {\r\n  const getTemplate = useCallback((id: string) => {\r\n    return TEMPLATES.find((t) => t.id === id);\r\n  }, []);\r\n\r\n  return {\r\n    templates: TEMPLATES,\r\n    getTemplate,\r\n  };\r\n};\r\n\r\nexport default useExport;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\useFormValidation.ts","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":86,"column":25,"nodeType":"MemberExpression","endLine":86,"endColumn":38},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":87,"column":19,"nodeType":"MemberExpression","endLine":87,"endColumn":32},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":95,"column":13,"nodeType":"MemberExpression","endLine":95,"endColumn":26},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":103,"column":11,"nodeType":"MemberExpression","endLine":103,"endColumn":24},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'validateSingleField'. Either include it or remove the dependency array.","line":112,"column":5,"nodeType":"ArrayExpression","endLine":112,"endColumn":31,"suggestions":[{"desc":"Update the dependencies array to be: [errors, validateOnChange, validateSingleField]","fix":{"range":[3345,3371],"text":"[errors, validateOnChange, validateSingleField]"}}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":134,"column":11,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":134,"endColumn":23},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":147,"column":27,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":147,"endColumn":40},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":166,"column":27,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":166,"endColumn":40},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":179,"column":27,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":179,"endColumn":40},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":196,"column":27,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":196,"endColumn":40},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":210,"column":41,"nodeType":"MemberExpression","endLine":210,"endColumn":54},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":221,"column":21,"nodeType":"MemberExpression","endLine":221,"endColumn":47},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":222,"column":7,"nodeType":"MemberExpression","endLine":222,"endColumn":23},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":266,"column":25,"nodeType":"MemberExpression","endLine":266,"endColumn":41},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":269,"column":26,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":269,"endColumn":28,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[8092,8094],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":270,"column":13,"nodeType":"MemberExpression","endLine":270,"endColumn":38},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":272,"column":13,"nodeType":"MemberExpression","endLine":272,"endColumn":38},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":293,"column":36,"nodeType":"MemberExpression","endLine":293,"endColumn":49}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview useFormValidation Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { useCallback, useState } from 'react';\r\nimport { logger } from '../lib/logging/logger';\r\nimport {\r\n  validateField,\r\n  validateForm,\r\n  type ValidationResult,\r\n  type ValidationSchema,\r\n} from '../lib/validation';\r\n\r\n/**\r\n * UseFormValidationOptions Interface\r\n * \r\n * @interface UseFormValidationOptions\r\n */\r\nexport interface UseFormValidationOptions<T> {\r\n  schema: ValidationSchema;\r\n  initialValues: T;\r\n  onSubmit?: (values: T) => void | Promise<void>;\r\n  validateOnChange?: boolean;\r\n  validateOnBlur?: boolean;\r\n}\r\n\r\n/**\r\n * FormValidationState Interface\r\n * \r\n * @interface FormValidationState\r\n */\r\nexport interface FormValidationState<T> {\r\n  values: T;\r\n  errors: Record<keyof T, string>;\r\n  touched: Record<keyof T, boolean>;\r\n  isValid: boolean;\r\n  isSubmitting: boolean;\r\n  submitCount: number;\r\n}\r\n\r\n/**\r\n * FormValidationActions Interface\r\n * \r\n * @interface FormValidationActions\r\n */\r\nexport interface FormValidationActions<T> {\r\n  setValue: (field: keyof T, value: string | number | boolean) => void;\r\n  setValues: (values: Partial<T>) => void;\r\n  setError: (field: keyof T, error: string) => void;\r\n  setTouched: (field: keyof T, touched?: boolean) => void;\r\n  setFieldError: (field: keyof T, error?: string) => void;\r\n  validateField: (field: keyof T) => boolean;\r\n  validateForm: () => ValidationResult;\r\n  reset: () => void;\r\n  handleSubmit: (e?: React.FormEvent) => Promise<void>;\r\n  handleBlur: (field: keyof T) => void;\r\n  handleChange: (field: keyof T, value: string | number | boolean) => void;\r\n}\r\n\r\n/**\r\n * useFormValidation function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useFormValidation<T extends Record<string, string | number | boolean>>({\r\n  schema,\r\n  initialValues,\r\n  onSubmit,\r\n  validateOnChange = true,\r\n  validateOnBlur = true,\r\n}: UseFormValidationOptions<T>): FormValidationState<T> & FormValidationActions<T> {\r\n  const [values, setValuesState] = useState<T>(initialValues);\r\n  const [errors, setErrors] = useState<Record<keyof T, string>>({} as Record<keyof T, string>);\r\n  const [touched, setTouchedState] = useState<Record<keyof T, boolean>>(\r\n    {} as Record<keyof T, boolean>,\r\n  );\r\n  const [isSubmitting, setIsSubmitting] = useState(false);\r\n  const [submitCount, setSubmitCount] = useState(0);\r\n\r\n  // Calculate overall form validity\r\n  const isValid = Object.keys(schema).every((field) => {\r\n    const fieldSchema = schema[field];\r\n    const value = values[field];\r\n\r\n    // If field is required and empty, form is invalid\r\n    if (fieldSchema.required && (!value || (typeof value === 'string' && value.trim() === ''))) {\r\n      return false;\r\n    }\r\n\r\n    // If field has errors, form is invalid\r\n    return !errors[field];\r\n  });\r\n\r\n  const setValue = useCallback(\r\n    (field: keyof T, value: string | number | boolean) => {\r\n      setValuesState((prev) => ({ ...prev, [field]: value }));\r\n\r\n      // Clear error when user starts typing\r\n      if (errors[field]) {\r\n        setErrors((prev) => ({ ...prev, [field]: '' }));\r\n      }\r\n\r\n      // Validate on change if enabled\r\n      if (validateOnChange) {\r\n        validateSingleField(field, value);\r\n      }\r\n    },\r\n    [errors, validateOnChange],\r\n  );\r\n\r\n  const setValues = useCallback((newValues: Partial<T>) => {\r\n    setValuesState((prev) => ({ ...prev, ...newValues }));\r\n  }, []);\r\n\r\n  const setError = useCallback((field: keyof T, error: string) => {\r\n    setErrors((prev) => ({ ...prev, [field]: error }));\r\n  }, []);\r\n\r\n  const setTouched = useCallback((field: keyof T, touchedValue = true) => {\r\n    setTouchedState((prev) => ({ ...prev, [field]: touchedValue }));\r\n  }, []);\r\n\r\n  const setFieldError = useCallback((field: keyof T, error?: string) => {\r\n    setErrors((prev) => ({ ...prev, [field]: error ?? '' }));\r\n  }, []);\r\n\r\n  const validateSingleField = useCallback(\r\n    (field: keyof T, value: string | number | boolean): boolean => {\r\n      const fieldSchema = schema[field as string];\r\n      if (!fieldSchema) return true;\r\n\r\n      let sanitizedValue = value;\r\n\r\n      // Sanitize input if specified\r\n      if (fieldSchema.sanitize && typeof value === 'string') {\r\n        sanitizedValue = fieldSchema.sanitize(value);\r\n      }\r\n\r\n      // Required validation\r\n      if (fieldSchema.required) {\r\n        const result = validateField.required(sanitizedValue as string | number, field as string);\r\n        if (!result.isValid) {\r\n          setError(field, result.error!);\r\n          return false;\r\n        }\r\n      }\r\n\r\n      // Skip other validations if value is empty and not required\r\n      if (!sanitizedValue && !fieldSchema.required) {\r\n        setFieldError(field);\r\n        return true;\r\n      }\r\n\r\n      // Min length validation\r\n      if (fieldSchema.minLength && typeof sanitizedValue === 'string') {\r\n        const result = validateField.minLength(\r\n          sanitizedValue,\r\n          fieldSchema.minLength,\r\n          field as string,\r\n        );\r\n        if (!result.isValid) {\r\n          setError(field, result.error!);\r\n          return false;\r\n        }\r\n      }\r\n\r\n      // Max length validation\r\n      if (fieldSchema.maxLength && typeof sanitizedValue === 'string') {\r\n        const result = validateField.maxLength(\r\n          sanitizedValue,\r\n          fieldSchema.maxLength,\r\n          field as string,\r\n        );\r\n        if (!result.isValid) {\r\n          setError(field, result.error!);\r\n          return false;\r\n        }\r\n      }\r\n\r\n      // Pattern validation\r\n      if (fieldSchema.pattern && typeof sanitizedValue === 'string') {\r\n        if (!fieldSchema.pattern.test(sanitizedValue)) {\r\n          setError(field, `${field as string} format─▒ ge├ğersiz`);\r\n          return false;\r\n        }\r\n      }\r\n\r\n      // Custom validation\r\n      if (fieldSchema.custom) {\r\n        const result = fieldSchema.custom(sanitizedValue);\r\n        if (!result.isValid) {\r\n          setError(field, result.error!);\r\n          return false;\r\n        }\r\n      }\r\n\r\n      // Clear error if validation passes\r\n      setFieldError(field);\r\n      return true;\r\n    },\r\n    [schema, setError, setFieldError],\r\n  );\r\n\r\n  const validateFieldAction = useCallback(\r\n    (field: keyof T): boolean => {\r\n      return validateSingleField(field, values[field]);\r\n    },\r\n    [validateSingleField, values],\r\n  );\r\n\r\n  const validateFormAction = useCallback((): ValidationResult => {\r\n    const result = validateForm(values, schema);\r\n\r\n    // Update errors state\r\n    const newErrors = {} as Record<keyof T, string>;\r\n    result.errors.forEach((error, index) => {\r\n      const field = Object.keys(schema)[index] as keyof T;\r\n      newErrors[field] = error;\r\n    });\r\n\r\n    setErrors(newErrors);\r\n    return result;\r\n  }, [values, schema]);\r\n\r\n  const reset = useCallback(() => {\r\n    setValuesState(initialValues);\r\n    setErrors({} as Record<keyof T, string>);\r\n    setTouchedState({} as Record<keyof T, boolean>);\r\n    setIsSubmitting(false);\r\n    setSubmitCount(0);\r\n  }, [initialValues]);\r\n\r\n  const handleSubmit = useCallback(\r\n    async (e?: React.FormEvent) => {\r\n      if (e) {\r\n        e.preventDefault();\r\n      }\r\n\r\n      setIsSubmitting(true);\r\n      setSubmitCount((prev) => prev + 1);\r\n\r\n      // Mark all fields as touched\r\n      const allTouched = {} as Record<keyof T, boolean>;\r\n      Object.keys(schema).forEach((field) => {\r\n        allTouched[field as keyof T] = true;\r\n      });\r\n      setTouchedState(allTouched);\r\n\r\n      // Validate form\r\n      const validationResult = validateFormAction();\r\n\r\n      if (!validationResult.isValid) {\r\n        setIsSubmitting(false);\r\n        return;\r\n      }\r\n\r\n      try {\r\n        // Sanitize all values before submission\r\n        const sanitizedValues = {} as T;\r\n        Object.keys(values).forEach((key) => {\r\n          const fieldKey = key as keyof T;\r\n          const value = values[fieldKey];\r\n          const fieldSchema = schema[fieldKey as string];\r\n\r\n          if (fieldSchema?.sanitize && typeof value === 'string') {\r\n            sanitizedValues[fieldKey] = fieldSchema.sanitize(value) as T[keyof T];\r\n          } else {\r\n            sanitizedValues[fieldKey] = value;\r\n          }\r\n        });\r\n\r\n        if (onSubmit) {\r\n          await onSubmit(sanitizedValues);\r\n        }\r\n      } catch (error) {\r\n        logger.error('Form submission error:', error);\r\n      } finally {\r\n        setIsSubmitting(false);\r\n      }\r\n    },\r\n    [validateFormAction, onSubmit, values, schema],\r\n  );\r\n\r\n  const handleBlur = useCallback(\r\n    (field: keyof T) => {\r\n      setTouched(field, true);\r\n\r\n      if (validateOnBlur) {\r\n        validateSingleField(field, values[field]);\r\n      }\r\n    },\r\n    [setTouched, validateOnBlur, validateSingleField, values],\r\n  );\r\n\r\n  const handleChange = useCallback(\r\n    (field: keyof T, value: string | number | boolean) => {\r\n      setValue(field, value);\r\n    },\r\n    [setValue],\r\n  );\r\n\r\n  return {\r\n    // State\r\n    values,\r\n    errors,\r\n    touched,\r\n    isValid,\r\n    isSubmitting,\r\n    submitCount,\r\n\r\n    // Actions\r\n    setValue,\r\n    setValues,\r\n    setError,\r\n    setTouched,\r\n    setFieldError,\r\n    validateField: validateFieldAction,\r\n    validateForm: validateFormAction,\r\n    reset,\r\n    handleSubmit,\r\n    handleBlur,\r\n    handleChange,\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\useInfiniteScroll.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\useKeyboard.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":37,"column":37,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":37,"endColumn":50},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'metaMatches' is assigned a value but never used.","line":44,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":28},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'metaMatches' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":44,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":44,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'ctrlMatches' is assigned a value but never used.","line":45,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":28},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'ctrlMatches' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":45,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'shiftMatches' is assigned a value but never used.","line":46,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":29},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'shiftMatches' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":46,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":46,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'altMatches' is assigned a value but never used.","line":47,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":27},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'altMatches' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":47,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":47,"endColumn":27}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview useKeyboard Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { useEffect, useCallback } from 'react';\r\n\r\ninterface KeyboardShortcut {\r\n  key: string;\r\n  metaKey?: boolean;\r\n  ctrlKey?: boolean;\r\n  shiftKey?: boolean;\r\n  altKey?: boolean;\r\n  callback: (event: KeyboardEvent) => void;\r\n  description?: string;\r\n}\r\n\r\n/**\r\n * useKeyboardShortcuts function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useKeyboardShortcuts(shortcuts: KeyboardShortcut[]) {\r\n  const handleKeyDown = useCallback(\r\n    (event: KeyboardEvent) => {\r\n      // Don't trigger shortcuts when typing in input fields\r\n      const target = event.target as HTMLElement;\r\n      if (\r\n        target.tagName === 'INPUT' ||\r\n        target.tagName === 'TEXTAREA' ||\r\n        target.contentEditable === 'true'\r\n      ) {\r\n        // Exception: Allow Ctrl+K for search even in input fields\r\n        if (!(event.key === 'k' && (event.ctrlKey ?? event.metaKey))) {\r\n          return;\r\n        }\r\n      }\r\n\r\n      for (const shortcut of shortcuts) {\r\n        const keyMatches = shortcut.key.toLowerCase() === event.key.toLowerCase();\r\n          const metaMatches = !shortcut.metaKey || event.metaKey;\r\n          const ctrlMatches = !shortcut.ctrlKey || event.ctrlKey;\r\n          const shiftMatches = !shortcut.shiftKey || event.shiftKey;\r\n          const altMatches = !shortcut.altKey || event.altKey;\r\n\r\n        // Ensure exact modifier match\r\n        const exactMetaMatch = shortcut.metaKey ? event.metaKey : !event.metaKey;\r\n        const exactCtrlMatch = shortcut.ctrlKey ? event.ctrlKey : !event.ctrlKey;\r\n        const exactShiftMatch = shortcut.shiftKey ? event.shiftKey : !event.shiftKey;\r\n        const exactAltMatch = shortcut.altKey ? event.altKey : !event.altKey;\r\n\r\n        if (keyMatches && exactMetaMatch && exactCtrlMatch && exactShiftMatch && exactAltMatch) {\r\n          event.preventDefault();\r\n          shortcut.callback(event);\r\n          break;\r\n        }\r\n      }\r\n    },\r\n    [shortcuts],\r\n  );\r\n\r\n  useEffect(() => {\r\n    document.addEventListener('keydown', handleKeyDown);\r\n    return () => {\r\n      document.removeEventListener('keydown', handleKeyDown);\r\n    };\r\n  }, [handleKeyDown]);\r\n}\r\n\r\n// Global keyboard shortcuts\r\n/**\r\n * useGlobalShortcuts function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useGlobalShortcuts({\r\n  onSearch,\r\n  onNewItem,\r\n  onHelp,\r\n  onRefresh,\r\n}: {\r\n  onSearch?: () => void;\r\n  onNewItem?: () => void;\r\n  onHelp?: () => void;\r\n  onRefresh?: () => void;\r\n}) {\r\n  useKeyboardShortcuts([\r\n    {\r\n      key: 'k',\r\n      ctrlKey: true,\r\n      callback: () => onSearch?.(),\r\n      description: 'Global search',\r\n    },\r\n    {\r\n      key: 'k',\r\n      metaKey: true,\r\n      callback: () => onSearch?.(),\r\n      description: 'Global search (Mac)',\r\n    },\r\n    {\r\n      key: 'n',\r\n      ctrlKey: true,\r\n      callback: () => onNewItem?.(),\r\n      description: 'Create new item',\r\n    },\r\n    {\r\n      key: 'n',\r\n      metaKey: true,\r\n      callback: () => onNewItem?.(),\r\n      description: 'Create new item (Mac)',\r\n    },\r\n    {\r\n      key: '?',\r\n      shiftKey: true,\r\n      callback: () => onHelp?.(),\r\n      description: 'Show help',\r\n    },\r\n    {\r\n      key: 'r',\r\n      ctrlKey: true,\r\n      callback: (e) => {\r\n        e.preventDefault();\r\n        onRefresh?.();\r\n      },\r\n      description: 'Refresh page',\r\n    },\r\n    {\r\n      key: 'r',\r\n      metaKey: true,\r\n      callback: (e) => {\r\n        e.preventDefault();\r\n        onRefresh?.();\r\n      },\r\n      description: 'Refresh page (Mac)',\r\n    },\r\n  ]);\r\n}\r\n\r\n// Navigation shortcuts\r\n/**\r\n * useNavigationShortcuts function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useNavigationShortcuts({\r\n  onGoHome,\r\n  onGoBack,\r\n  onGoForward,\r\n}: {\r\n  onGoHome?: () => void;\r\n  onGoBack?: () => void;\r\n  onGoForward?: () => void;\r\n}) {\r\n  useKeyboardShortcuts([\r\n    {\r\n      key: 'h',\r\n      altKey: true,\r\n      callback: () => onGoHome?.(),\r\n      description: 'Go to home',\r\n    },\r\n    {\r\n      key: 'ArrowLeft',\r\n      altKey: true,\r\n      callback: () => onGoBack?.(),\r\n      description: 'Go back',\r\n    },\r\n    {\r\n      key: 'ArrowRight',\r\n      altKey: true,\r\n      callback: () => onGoForward?.(),\r\n      description: 'Go forward',\r\n    },\r\n  ]);\r\n}\r\n\r\n// Table shortcuts\r\n/**\r\n * useTableShortcuts function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useTableShortcuts({\r\n  onSelectAll,\r\n  onDelete,\r\n  onEdit,\r\n  onExport,\r\n}: {\r\n  onSelectAll?: () => void;\r\n  onDelete?: () => void;\r\n  onEdit?: () => void;\r\n  onExport?: () => void;\r\n}) {\r\n  useKeyboardShortcuts([\r\n    {\r\n      key: 'a',\r\n      ctrlKey: true,\r\n      callback: () => onSelectAll?.(),\r\n      description: 'Select all',\r\n    },\r\n    {\r\n      key: 'a',\r\n      metaKey: true,\r\n      callback: () => onSelectAll?.(),\r\n      description: 'Select all (Mac)',\r\n    },\r\n    {\r\n      key: 'Delete',\r\n      callback: () => onDelete?.(),\r\n      description: 'Delete selected',\r\n    },\r\n    {\r\n      key: 'e',\r\n      ctrlKey: true,\r\n      callback: () => onEdit?.(),\r\n      description: 'Edit selected',\r\n    },\r\n    {\r\n      key: 'e',\r\n      metaKey: true,\r\n      callback: () => onEdit?.(),\r\n      description: 'Edit selected (Mac)',\r\n    },\r\n    {\r\n      key: 's',\r\n      ctrlKey: true,\r\n      shiftKey: true,\r\n      callback: (e) => {\r\n        e.preventDefault();\r\n        onExport?.();\r\n      },\r\n      description: 'Export data',\r\n    },\r\n    {\r\n      key: 's',\r\n      metaKey: true,\r\n      shiftKey: true,\r\n      callback: (e) => {\r\n        e.preventDefault();\r\n        onExport?.();\r\n      },\r\n      description: 'Export data (Mac)',\r\n    },\r\n  ]);\r\n}\r\n\r\nexport default useKeyboardShortcuts;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\useKumbara.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":117,"column":28,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":117,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'kumbaraId' is defined but never used.","line":634,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":634,"endColumn":46},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'kumbaraId' is defined but never used. Allowed unused args must match /^_/u.","line":634,"column":37,"nodeType":null,"messageId":"unusedVar","endLine":634,"endColumn":46}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview useKumbara Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\n// ­şÅĞ USE KUMBARA HOOK\r\n// Custom React hook for Kumbara (Piggy Bank) management\r\n\r\nimport { useCallback, useEffect, useMemo, useState } from 'react';\r\nimport { toast } from 'sonner';\r\nimport kumbaraService from '../services/kumbaraService';\r\nimport type {\r\n  Kumbara,\r\n  KumbaraAlert,\r\n  KumbaraCollection,\r\n  KumbaraCollectionInsert,\r\n  KumbaraDashboardStats,\r\n  KumbaraFilters,\r\n  KumbaraInsert,\r\n  KumbaraSearchResult,\r\n  KumbaraUpdate,\r\n} from '../types/kumbara';\r\n\r\n// Hook options interface\r\n/**\r\n * UseKumbaraOptions Interface\r\n * \r\n * @interface UseKumbaraOptions\r\n */\r\nexport interface UseKumbaraOptions {\r\n  autoFetch?: boolean;\r\n  realtime?: boolean;\r\n  filters?: KumbaraFilters;\r\n  onError?: (error: Error) => void;\r\n  onSuccess?: (message: string) => void;\r\n}\r\n\r\n// Hook return type\r\n/**\r\n * UseKumbaraReturn Interface\r\n * \r\n * @interface UseKumbaraReturn\r\n */\r\nexport interface UseKumbaraReturn {\r\n  // Data\r\n  kumbaras: Kumbara[];\r\n  kumbara: Kumbara | null;\r\n  searchResult: KumbaraSearchResult | null;\r\n  dashboardStats: KumbaraDashboardStats | null;\r\n  collections: KumbaraCollection[];\r\n  alerts: KumbaraAlert[];\r\n\r\n  // Loading states\r\n  loading: boolean;\r\n  creating: boolean;\r\n  updating: boolean;\r\n  deleting: boolean;\r\n  collecting: boolean;\r\n\r\n  // Error states\r\n  error: string | null;\r\n\r\n  // Actions\r\n  fetchKumbaras: (filters?: KumbaraFilters) => Promise<void>;\r\n  fetchKumbara: (id: string) => Promise<void>;\r\n  createKumbara: (data: KumbaraInsert) => Promise<Kumbara | null>;\r\n  updateKumbara: (id: string, data: KumbaraUpdate) => Promise<Kumbara | null>;\r\n  deleteKumbara: (id: string, deletedBy: string) => Promise<boolean>;\r\n  recordCollection: (data: KumbaraCollectionInsert) => Promise<KumbaraCollection | null>;\r\n  fetchDashboardStats: () => Promise<void>;\r\n  fetchCollections: (kumbaraId: string, limit?: number) => Promise<void>;\r\n  fetchAlerts: () => Promise<void>;\r\n  acknowledgeAlert: (alertId: string, acknowledgedBy: string) => Promise<boolean>;\r\n  exportKumbaras: (format?: 'csv' | 'excel' | 'pdf') => Promise<Blob | null>;\r\n\r\n  // Utility functions\r\n  clearError: () => void;\r\n  refresh: () => Promise<void>;\r\n  validateKumbara: (data: KumbaraInsert) => { isValid: boolean; errors: string[] };\r\n}\r\n\r\n/**\r\n * Main Kumbara management hook\r\n */\r\n/**\r\n * useKumbara function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useKumbara(options: UseKumbaraOptions = {}): UseKumbaraReturn {\r\n  const { autoFetch = true, realtime = false, filters = {}, onError, onSuccess } = options;\r\n\r\n  // State management\r\n  const [kumbaras, setKumbaras] = useState<Kumbara[]>([]);\r\n  const [kumbara, setKumbara] = useState<Kumbara | null>(null);\r\n  const [searchResult, setSearchResult] = useState<KumbaraSearchResult | null>(null);\r\n  const [dashboardStats, setDashboardStats] = useState<KumbaraDashboardStats | null>(null);\r\n  const [collections, setCollections] = useState<KumbaraCollection[]>([]);\r\n  const [alerts, setAlerts] = useState<KumbaraAlert[]>([]);\r\n\r\n  // Loading states\r\n  const [loading, setLoading] = useState(false);\r\n  const [creating, setCreating] = useState(false);\r\n  const [updating, setUpdating] = useState(false);\r\n  const [deleting, setDeleting] = useState(false);\r\n  const [collecting, setCollecting] = useState(false);\r\n\r\n  // Error state\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Error handler\r\n  const handleError = useCallback(\r\n    (err: Error) => {\r\n      const errorMessage = err.message ?? 'Bilinmeyen bir hata olu┼ştu';\r\n      setError(errorMessage);\r\n\r\n      if (onError) {\r\n        onError(err);\r\n      } else {\r\n        toast.error(errorMessage);\r\n      }\r\n    },\r\n    [onError],\r\n  );\r\n\r\n  // Success handler\r\n  const handleSuccess = useCallback(\r\n    (message: string) => {\r\n      if (onSuccess) {\r\n        onSuccess(message);\r\n      } else {\r\n        toast.success(message);\r\n      }\r\n    },\r\n    [onSuccess],\r\n  );\r\n\r\n  // Clear error\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n  }, []);\r\n\r\n  // Fetch kumbaras\r\n  const fetchKumbaras = useCallback(\r\n    async (customFilters?: KumbaraFilters) => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        const result = await kumbaraService.getKumbaras(customFilters ?? filters);\r\n        setSearchResult(result);\r\n        setKumbaras(result.kumbaras);\r\n      } catch (err) {\r\n        handleError(err as Error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n    [filters, handleError],\r\n  );\r\n\r\n  // Fetch single kumbara\r\n  const fetchKumbara = useCallback(\r\n    async (id: string) => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        const result = await kumbaraService.getKumbara(id);\r\n        setKumbara(result);\r\n      } catch (err) {\r\n        handleError(err as Error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n    [handleError],\r\n  );\r\n\r\n  // Create kumbara\r\n  const createKumbara = useCallback(\r\n    async (data: KumbaraInsert): Promise<Kumbara | null> => {\r\n      try {\r\n        setCreating(true);\r\n        setError(null);\r\n\r\n        // Validate data first\r\n        const validation = kumbaraService.validateKumbaraData(data);\r\n        if (!validation.isValid) {\r\n          throw new Error(validation.errors.join(', '));\r\n        }\r\n\r\n        const newKumbara = await kumbaraService.createKumbara(data);\r\n\r\n        // Update local state\r\n        setKumbaras((prev) => [newKumbara, ...prev]);\r\n\r\n        handleSuccess('Kumbara ba┼şar─▒yla olu┼şturuldu');\r\n        return newKumbara;\r\n      } catch (err) {\r\n        handleError(err as Error);\r\n        return null;\r\n      } finally {\r\n        setCreating(false);\r\n      }\r\n    },\r\n    [handleError, handleSuccess],\r\n  );\r\n\r\n  // Update kumbara\r\n  const updateKumbara = useCallback(\r\n    async (id: string, data: KumbaraUpdate): Promise<Kumbara | null> => {\r\n      try {\r\n        setUpdating(true);\r\n        setError(null);\r\n\r\n        const updatedKumbara = await kumbaraService.updateKumbara(id, data);\r\n\r\n        // Update local state\r\n        setKumbaras((prev) => prev.map((k) => (k.id === id ? updatedKumbara : k)));\r\n\r\n        if (kumbara && kumbara.id === id) {\r\n          setKumbara(updatedKumbara);\r\n        }\r\n\r\n        handleSuccess('Kumbara ba┼şar─▒yla g├╝ncellendi');\r\n        return updatedKumbara;\r\n      } catch (err) {\r\n        handleError(err as Error);\r\n        return null;\r\n      } finally {\r\n        setUpdating(false);\r\n      }\r\n    },\r\n    [kumbara, handleError, handleSuccess],\r\n  );\r\n\r\n  // Delete kumbara\r\n  const deleteKumbara = useCallback(\r\n    async (id: string, deletedBy: string): Promise<boolean> => {\r\n      try {\r\n        setDeleting(true);\r\n        setError(null);\r\n\r\n        const success = await kumbaraService.deleteKumbara(id, deletedBy);\r\n\r\n        if (success) {\r\n          // Remove from local state\r\n          setKumbaras((prev) => prev.filter((k) => k.id !== id));\r\n\r\n          if (kumbara && kumbara.id === id) {\r\n            setKumbara(null);\r\n          }\r\n\r\n          handleSuccess('Kumbara ba┼şar─▒yla silindi');\r\n        }\r\n\r\n        return success;\r\n      } catch (err) {\r\n        handleError(err as Error);\r\n        return false;\r\n      } finally {\r\n        setDeleting(false);\r\n      }\r\n    },\r\n    [kumbara, handleError, handleSuccess],\r\n  );\r\n\r\n  // Record collection\r\n  const recordCollection = useCallback(\r\n    async (data: KumbaraCollectionInsert): Promise<KumbaraCollection | null> => {\r\n      try {\r\n        setCollecting(true);\r\n        setError(null);\r\n\r\n        const newCollection = await kumbaraService.recordCollection(data);\r\n\r\n        // Update collections list\r\n        setCollections((prev) => [newCollection, ...prev]);\r\n\r\n        // Update kumbara total amount if loaded\r\n        if (kumbara && kumbara.id === data.kumbara_id) {\r\n          setKumbara((prev) =>\r\n            prev\r\n              ? {\r\n                  ...prev,\r\n                  totalAmount: prev.totalAmount + data.amount,\r\n                  lastCollection: data.collection_date ?? new Date().toISOString(),\r\n                }\r\n              : prev,\r\n          );\r\n        }\r\n\r\n        // Update kumbaras list\r\n        setKumbaras((prev) =>\r\n          prev.map((k) =>\r\n            k.id === data.kumbara_id\r\n              ? {\r\n                  ...k,\r\n                  totalAmount: k.totalAmount + data.amount,\r\n                  lastCollection: data.collection_date ?? new Date().toISOString(),\r\n                }\r\n              : k,\r\n          ),\r\n        );\r\n\r\n        handleSuccess('Toplama kayd─▒ ba┼şar─▒yla olu┼şturuldu');\r\n        return newCollection;\r\n      } catch (err) {\r\n        handleError(err as Error);\r\n        return null;\r\n      } finally {\r\n        setCollecting(false);\r\n      }\r\n    },\r\n    [kumbara, handleError, handleSuccess],\r\n  );\r\n\r\n  // Fetch dashboard stats\r\n  const fetchDashboardStats = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const stats = await kumbaraService.getDashboardStats();\r\n      setDashboardStats(stats);\r\n    } catch (err) {\r\n      handleError(err as Error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [handleError]);\r\n\r\n  // Fetch collections\r\n  const fetchCollections = useCallback(\r\n    async (kumbaraId: string, limit = 10) => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        const result = await kumbaraService.getCollections(kumbaraId, limit);\r\n        setCollections(result);\r\n      } catch (err) {\r\n        handleError(err as Error);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n    [handleError],\r\n  );\r\n\r\n  // Fetch alerts\r\n  const fetchAlerts = useCallback(async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const result = await kumbaraService.getKumbaraAlerts();\r\n      setAlerts(result);\r\n    } catch (err) {\r\n      handleError(err as Error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, [handleError]);\r\n\r\n  // Acknowledge alert\r\n  const acknowledgeAlert = useCallback(\r\n    async (alertId: string, acknowledgedBy: string): Promise<boolean> => {\r\n      try {\r\n        setError(null);\r\n\r\n        const success = await kumbaraService.acknowledgeAlert(alertId, acknowledgedBy);\r\n\r\n        if (success) {\r\n          // Update alerts list\r\n          setAlerts((prev) =>\r\n            prev.map((alert) =>\r\n              alert.id === alertId\r\n                ? {\r\n                    ...alert,\r\n                    acknowledged: true,\r\n                    acknowledged_by: acknowledgedBy,\r\n                    acknowledged_at: new Date().toISOString(),\r\n                  }\r\n                : alert,\r\n            ),\r\n          );\r\n\r\n          handleSuccess('Uyar─▒ ba┼şar─▒yla onayland─▒');\r\n        }\r\n\r\n        return success;\r\n      } catch (err) {\r\n        handleError(err as Error);\r\n        return false;\r\n      }\r\n    },\r\n    [handleError, handleSuccess],\r\n  );\r\n\r\n  // Export kumbaras\r\n  const exportKumbaras = useCallback(\r\n    async (format: 'csv' | 'excel' | 'pdf' = 'csv'): Promise<Blob | null> => {\r\n      try {\r\n        setLoading(true);\r\n        setError(null);\r\n\r\n        const blob = await kumbaraService.exportKumbaras(format);\r\n\r\n        // Download file\r\n        const url = URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        a.href = url;\r\n        a.download = `kumbaralar-${new Date().toISOString().split('T')[0]}.${format}`;\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        document.body.removeChild(a);\r\n        URL.revokeObjectURL(url);\r\n\r\n        handleSuccess(`Kumbara verileri ${format.toUpperCase()} format─▒nda d─▒┼şa aktar─▒ld─▒`);\r\n        return blob;\r\n      } catch (err) {\r\n        handleError(err as Error);\r\n        return null;\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n    [handleError, handleSuccess],\r\n  );\r\n\r\n  // Validate kumbara data\r\n  const validateKumbara = useCallback((data: KumbaraInsert) => {\r\n    return kumbaraService.validateKumbaraData(data);\r\n  }, []);\r\n\r\n  // Refresh all data\r\n  const refresh = useCallback(async () => {\r\n    await Promise.all([fetchKumbaras(), fetchDashboardStats(), fetchAlerts()]);\r\n  }, [fetchKumbaras, fetchDashboardStats, fetchAlerts]);\r\n\r\n  // Auto-fetch on mount\r\n  useEffect(() => {\r\n    if (autoFetch) {\r\n      fetchKumbaras();\r\n    }\r\n  }, [autoFetch, fetchKumbaras]);\r\n\r\n  // Realtime updates (mock implementation)\r\n  useEffect(() => {\r\n    if (!realtime) return;\r\n\r\n    const interval = setInterval(() => {\r\n      // In a real implementation, this would be WebSocket or EventSource\r\n      fetchKumbaras();\r\n    }, 30000); // 30 seconds\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, [realtime, fetchKumbaras]);\r\n\r\n  // Memoized return object\r\n  return useMemo(\r\n    () => ({\r\n      // Data\r\n      kumbaras,\r\n      kumbara,\r\n      searchResult,\r\n      dashboardStats,\r\n      collections,\r\n      alerts,\r\n\r\n      // Loading states\r\n      loading,\r\n      creating,\r\n      updating,\r\n      deleting,\r\n      collecting,\r\n\r\n      // Error state\r\n      error,\r\n\r\n      // Actions\r\n      fetchKumbaras,\r\n      fetchKumbara,\r\n      createKumbara,\r\n      updateKumbara,\r\n      deleteKumbara,\r\n      recordCollection,\r\n      fetchDashboardStats,\r\n      fetchCollections,\r\n      fetchAlerts,\r\n      acknowledgeAlert,\r\n      exportKumbaras,\r\n\r\n      // Utilities\r\n      clearError,\r\n      refresh,\r\n      validateKumbara,\r\n    }),\r\n    [\r\n      kumbaras,\r\n      kumbara,\r\n      searchResult,\r\n      dashboardStats,\r\n      collections,\r\n      alerts,\r\n      loading,\r\n      creating,\r\n      updating,\r\n      deleting,\r\n      collecting,\r\n      error,\r\n      fetchKumbaras,\r\n      fetchKumbara,\r\n      createKumbara,\r\n      updateKumbara,\r\n      deleteKumbara,\r\n      recordCollection,\r\n      fetchDashboardStats,\r\n      fetchCollections,\r\n      fetchAlerts,\r\n      acknowledgeAlert,\r\n      exportKumbaras,\r\n      clearError,\r\n      refresh,\r\n      validateKumbara,\r\n    ],\r\n  );\r\n}\r\n\r\n/**\r\n * Hook for single kumbara management\r\n */\r\n/**\r\n * useKumbaraDetail function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useKumbaraDetail(id: string) {\r\n  const {\r\n    kumbara,\r\n    collections,\r\n    loading,\r\n    error,\r\n    fetchKumbara,\r\n    fetchCollections,\r\n    updateKumbara,\r\n    recordCollection,\r\n    clearError,\r\n  } = useKumbara({ autoFetch: false });\r\n\r\n  // Auto-fetch kumbara details\r\n  useEffect(() => {\r\n    if (id) {\r\n      fetchKumbara(id);\r\n      fetchCollections(id);\r\n    }\r\n  }, [id, fetchKumbara, fetchCollections]);\r\n\r\n  return {\r\n    kumbara,\r\n    collections,\r\n    loading,\r\n    error,\r\n    updateKumbara,\r\n    recordCollection,\r\n    refresh: () => {\r\n      if (id) {\r\n        fetchKumbara(id);\r\n        fetchCollections(id);\r\n      }\r\n    },\r\n    clearError,\r\n  };\r\n}\r\n\r\n/**\r\n * Hook for kumbara dashboard\r\n */\r\n/**\r\n * useKumbaraDashboard function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useKumbaraDashboard() {\r\n  const {\r\n    dashboardStats,\r\n    alerts,\r\n    loading,\r\n    error,\r\n    fetchDashboardStats,\r\n    fetchAlerts,\r\n    acknowledgeAlert,\r\n    clearError,\r\n  } = useKumbara({ autoFetch: false });\r\n\r\n  // Auto-fetch dashboard data\r\n  useEffect(() => {\r\n    fetchDashboardStats();\r\n    fetchAlerts();\r\n  }, [fetchDashboardStats, fetchAlerts]);\r\n\r\n  return {\r\n    dashboardStats,\r\n    alerts,\r\n    loading,\r\n    error,\r\n    acknowledgeAlert,\r\n    refresh: () => {\r\n      fetchDashboardStats();\r\n      fetchAlerts();\r\n    },\r\n    clearError,\r\n  };\r\n}\r\n\r\n/**\r\n * Hook for kumbara analytics\r\n */\r\n/**\r\n * useKumbaraAnalytics function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useKumbaraAnalytics(kumbaraId?: string) {\r\n  const [analytics, setAnalytics] = useState(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  const fetchAnalytics = useCallback(async (id: string, periodStart: string, periodEnd: string) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      const result = await kumbaraService.getKumbaraAnalytics(id, periodStart, periodEnd);\r\n      setAnalytics(result);\r\n    } catch (err) {\r\n      setError((err as Error).message);\r\n      toast.error('Analitik verileri al─▒namad─▒');\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  return {\r\n    analytics,\r\n    loading,\r\n    error,\r\n    fetchAnalytics,\r\n    clearError: () => {\r\n      setError(null);\r\n    },\r\n  };\r\n}\r\n\r\nexport default useKumbara;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\useLazyLoading.tsx","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":24,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":24,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[664,667],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[664,667],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":56,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":56,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1731,1734],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1731,1734],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The ref value 'ref.current' will likely have changed by the time this effect cleanup function runs. If this ref points to a node rendered by React, copy 'ref.current' to a variable inside the effect, and use that variable in the cleanup function.","line":126,"column":32,"nodeType":"Identifier","endLine":126,"endColumn":39}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview Lazy Loading Hooks and Utilities\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport React from 'react';\r\nimport { logger } from '../lib/logging/logger';\r\n\r\n// Hook for conditional lazy loading\r\nexport const useLazyLoading = (condition = true) => {\r\n  return {\r\n    shouldLazyLoad: condition,\r\n    LazyWrapper: condition\r\n      ? ({ children }: { children: React.ReactNode }) => (\r\n          <>{children}</>\r\n        )\r\n      : ({ children }: { children: React.ReactNode }) => <>{children}</>,\r\n  };\r\n};\r\n\r\n// Performance monitoring for lazy components\r\nexport const withLazyPerformance = <P extends Record<string, any>>(\r\n  Component: React.ComponentType<P>,\r\n  componentName: string,\r\n) => {\r\n  const WrappedComponent = (props: P) => {\r\n    React.useEffect(() => {\r\n      const startTime = performance.now();\r\n\r\n      return () => {\r\n        const loadTime = performance.now() - startTime;\r\n        logger.info(`[Lazy Loading] ${componentName} loaded in ${loadTime.toFixed(2)}ms`);\r\n\r\n        // Send to analytics in production\r\n        if (process.env.NODE_ENV === 'production') {\r\n          // Analytics tracking code here\r\n        }\r\n      };\r\n    }, []);\r\n\r\n    return <Component {...props} />;\r\n  };\r\n\r\n  WrappedComponent.displayName = `withLazyPerformance(${componentName})`;\r\n  return WrappedComponent;\r\n};\r\n\r\n// Advanced lazy loading hook\r\nexport const useAdvancedLazyLoading = () => {\r\n  const [loadedComponents, setLoadedComponents] = React.useState<Set<string>>(new Set());\r\n  const [loadingComponents, setLoadingComponents] = React.useState<Set<string>>(new Set());\r\n\r\n  const preloadComponent = React.useCallback(\r\n    (componentName: string, importFn: () => Promise<any>) => {\r\n      if (loadedComponents.has(componentName) || loadingComponents.has(componentName)) {\r\n        return Promise.resolve();\r\n      }\r\n\r\n      setLoadingComponents((prev) => new Set(prev).add(componentName));\r\n\r\n      return importFn()\r\n        .then(() => {\r\n          setLoadedComponents((prev) => new Set(prev).add(componentName));\r\n          setLoadingComponents((prev) => {\r\n            const newSet = new Set(prev);\r\n            newSet.delete(componentName);\r\n            return newSet;\r\n          });\r\n        })\r\n        .catch((error) => {\r\n          logger.error(`Failed to preload ${componentName}:`, error);\r\n          setLoadingComponents((prev) => {\r\n            const newSet = new Set(prev);\r\n            newSet.delete(componentName);\r\n            return newSet;\r\n          });\r\n        });\r\n    },\r\n    [loadedComponents, loadingComponents],\r\n  );\r\n\r\n  const isComponentLoaded = React.useCallback(\r\n    (componentName: string) => {\r\n      return loadedComponents.has(componentName);\r\n    },\r\n    [loadedComponents],\r\n  );\r\n\r\n  const isComponentLoading = React.useCallback(\r\n    (componentName: string) => {\r\n      return loadingComponents.has(componentName);\r\n    },\r\n    [loadingComponents],\r\n  );\r\n\r\n  return {\r\n    preloadComponent,\r\n    isComponentLoaded,\r\n    isComponentLoading,\r\n    loadedComponents: Array.from(loadedComponents),\r\n    loadingComponents: Array.from(loadingComponents),\r\n  };\r\n};\r\n\r\n// Intersection Observer for automatic lazy loading\r\nexport const useIntersectionLazyLoading = (threshold = 0.1) => {\r\n  const [isIntersecting, setIsIntersecting] = React.useState(false);\r\n  const ref = React.useRef<HTMLDivElement>(null);\r\n\r\n  React.useEffect(() => {\r\n    const observer = new IntersectionObserver(\r\n      ([entry]) => {\r\n        setIsIntersecting(entry.isIntersecting);\r\n      },\r\n      { threshold },\r\n    );\r\n\r\n    if (ref.current) {\r\n      observer.observe(ref.current);\r\n    }\r\n\r\n    return () => {\r\n      if (ref.current) {\r\n        observer.unobserve(ref.current);\r\n      }\r\n    };\r\n  }, [threshold]);\r\n\r\n  return { ref, isIntersecting };\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\useLocalStorage.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\useMembers.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1006,1009],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1006,1009],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":214,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":214,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5715,5718],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5715,5718],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":299,"column":19,"nodeType":"Identifier","messageId":"neverNullish","endLine":299,"endColumn":32},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":303,"column":9,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":303,"endColumn":16}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview useMembers Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { useCallback, useMemo } from 'react';\r\nimport { toast } from 'sonner';\r\n// Removed direct supabase import - using service layer instead\r\nimport type { Member, MemberInsert, MemberUpdate, MemberWithDonations } from '../types/database';\r\nimport { useSupabaseData, useSupabasePagination, useSupabaseSearch } from './useSupabaseData';\r\nimport { TABLES } from '../lib/supabase';\r\n\r\n// Basic members hook\r\n/**\r\n * useMembers function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useMembers(\r\n  options: {\r\n    includeDeleted?: boolean;\r\n    status?: 'active' | 'inactive' | 'suspended';\r\n    membershipType?: string;\r\n    realtime?: boolean;\r\n  } = {},\r\n) {\r\n  const { includeDeleted = false, status, membershipType, realtime = true } = options;\r\n\r\n  const filters = useMemo(() => {\r\n    const f: Record<string, any> = {};\r\n\r\n    if (!includeDeleted) {\r\n      f.deleted_at = 'is.null';\r\n    }\r\n\r\n    if (status) {\r\n      f.status = status;\r\n    }\r\n\r\n    if (membershipType) {\r\n      f.membership_type = membershipType;\r\n    }\r\n\r\n    return f;\r\n  }, [includeDeleted, status, membershipType]);\r\n\r\n  const {\r\n    data: members,\r\n    loading,\r\n    error,\r\n    count,\r\n    refetch,\r\n    insert,\r\n    update,\r\n    delete: deleteMember,\r\n    bulkInsert,\r\n    bulkUpdate,\r\n    bulkDelete,\r\n  } = useSupabaseData<Member>(TABLES.MEMBERS, {\r\n    select: '*',\r\n    orderBy: { column: 'created_at', ascending: false },\r\n    filters,\r\n    realtime,\r\n  });\r\n\r\n  // Create new member\r\n  const createMember = useCallback(\r\n    async (memberData: Omit<MemberInsert, 'created_by'>) => {\r\n      try {\r\n        // Add created_by from current user context (you'll need to get this from auth)\r\n        const newMember = await insert({\r\n          ...memberData,\r\n          created_by: 'current-user-id', // Replace with actual user ID from auth context\r\n        });\r\n\r\n        toast.success(`${memberData.name} ba┼şar─▒yla eklendi`);\r\n        return newMember;\r\n      } catch (error) {\r\n        throw error;\r\n      }\r\n    },\r\n    [insert],\r\n  );\r\n\r\n  // Update member\r\n  const updateMember = useCallback(\r\n    async (id: string, memberData: Partial<MemberUpdate>) => {\r\n      try {\r\n        const updatedMember = await update(id, {\r\n          ...memberData,\r\n          updated_by: 'current-user-id', // Replace with actual user ID\r\n          updated_at: new Date().toISOString(),\r\n        });\r\n\r\n        return updatedMember;\r\n      } catch (error) {\r\n        throw error;\r\n      }\r\n    },\r\n    [update],\r\n  );\r\n\r\n  // Get member statistics\r\n  const getStats = useCallback(() => {\r\n    return {\r\n      total: members.length,\r\n      active: members.filter((m) => m.status === 'active').length,\r\n      inactive: members.filter((m) => m.status === 'inactive').length,\r\n      suspended: members.filter((m) => m.status === 'suspended').length,\r\n      byMembershipType: {\r\n        standard: members.filter((m) => m.membership_type === 'standard').length,\r\n        premium: members.filter((m) => m.membership_type === 'premium').length,\r\n        corporate: members.filter((m) => m.membership_type === 'corporate').length,\r\n        student: members.filter((m) => m.membership_type === 'student').length,\r\n        senior: members.filter((m) => m.membership_type === 'senior').length,\r\n      },\r\n    };\r\n  }, [members]);\r\n\r\n  // Activate/deactivate members\r\n  const activateMember = useCallback(\r\n    async (id: string) => {\r\n      return updateMember(id, { status: 'active' });\r\n    },\r\n    [updateMember],\r\n  );\r\n\r\n  const deactivateMember = useCallback(\r\n    async (id: string) => {\r\n      return updateMember(id, { status: 'inactive' });\r\n    },\r\n    [updateMember],\r\n  );\r\n\r\n  const suspendMember = useCallback(\r\n    async (id: string) => {\r\n      return updateMember(id, { status: 'suspended' });\r\n    },\r\n    [updateMember],\r\n  );\r\n\r\n  // Bulk status updates\r\n  const bulkUpdateStatus = useCallback(\r\n    async (ids: string[], status: 'active' | 'inactive' | 'suspended') => {\r\n      const updates = ids.map((id) => ({\r\n        id,\r\n        data: {\r\n          status,\r\n          updated_by: 'current-user-id',\r\n          updated_at: new Date().toISOString(),\r\n        } as Partial<Member>,\r\n      }));\r\n\r\n      await bulkUpdate(updates);\r\n      toast.success(`${ids.length} ├╝ye durumu ${status} olarak g├╝ncellendi`);\r\n    },\r\n    [bulkUpdate],\r\n  );\r\n\r\n  // Bulk membership type update\r\n  const bulkUpdateMembershipType = useCallback(\r\n    async (ids: string[], membershipType: string) => {\r\n      const updates = ids.map((id) => ({\r\n        id,\r\n        data: {\r\n          membership_type: membershipType,\r\n          updated_by: 'current-user-id',\r\n          updated_at: new Date().toISOString(),\r\n        } as Partial<Member>,\r\n      }));\r\n\r\n      await bulkUpdate(updates);\r\n      toast.success(`${ids.length} ├╝ye ${membershipType} ├╝yeli─şine g├╝ncellendi`);\r\n    },\r\n    [bulkUpdate],\r\n  );\r\n\r\n  return {\r\n    members,\r\n    loading,\r\n    error,\r\n    count,\r\n    stats: getStats(),\r\n    refetch,\r\n    createMember,\r\n    updateMember,\r\n    deleteMember,\r\n    activateMember,\r\n    deactivateMember,\r\n    suspendMember,\r\n    bulkInsert,\r\n    bulkUpdate,\r\n    bulkDelete,\r\n    bulkUpdateStatus,\r\n    bulkUpdateMembershipType,\r\n  };\r\n}\r\n\r\n// Paginated members hook\r\n/**\r\n * useMembersPaginated function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useMembersPaginated(\r\n  options: {\r\n    pageSize?: number;\r\n    includeDeleted?: boolean;\r\n    searchQuery?: string;\r\n    filters?: Record<string, any>;\r\n  } = {},\r\n) {\r\n  const {\r\n    pageSize = 20,\r\n    includeDeleted = false,\r\n    searchQuery = '',\r\n    filters: additionalFilters = {},\r\n  } = options;\r\n\r\n  const filters = useMemo(() => {\r\n    const f = { ...additionalFilters };\r\n\r\n    if (!includeDeleted) {\r\n      f.deleted_at = 'is.null';\r\n    }\r\n\r\n    return f;\r\n  }, [includeDeleted, additionalFilters]);\r\n\r\n  const searchFields = ['name', 'email', 'phone', 'city', 'occupation'];\r\n\r\n  return useSupabasePagination<Member>(TABLES.MEMBERS, {\r\n    select: '*',\r\n    orderBy: { column: 'created_at', ascending: false },\r\n    pageSize,\r\n    filters,\r\n    searchQuery,\r\n    searchFields,\r\n  });\r\n}\r\n\r\n// Member search hook\r\n/**\r\n * useMemberSearch function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useMemberSearch(\r\n  options: {\r\n    maxResults?: number;\r\n    debounceMs?: number;\r\n  } = {},\r\n) {\r\n  const { maxResults = 50, debounceMs = 300 } = options;\r\n\r\n  const searchFields = ['name', 'email', 'phone', 'city'];\r\n\r\n  return useSupabaseSearch<Member>(TABLES.MEMBERS, searchFields, {\r\n    select: 'id, name, email, phone, status, membership_type',\r\n    debounceMs,\r\n    maxResults,\r\n  });\r\n}\r\n\r\n// Member with donations hook\r\n/**\r\n * useMemberWithDonations function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useMemberWithDonations(memberId: string) {\r\n  const {\r\n    data: members,\r\n    loading: memberLoading,\r\n    error: memberError,\r\n  } = useSupabaseData<Member>(TABLES.MEMBERS, {\r\n    select: '*',\r\n    filters: { id: memberId },\r\n    limit: 1,\r\n  });\r\n\r\n  const {\r\n    data: donations,\r\n    loading: donationsLoading,\r\n    error: donationsError,\r\n  } = useSupabaseData(TABLES.DONATIONS, {\r\n    select: '*',\r\n    filters: { member_id: memberId, deleted_at: 'is.null' },\r\n    orderBy: { column: 'created_at', ascending: false },\r\n  });\r\n\r\n  const member = members[0];\r\n  const loading = memberLoading ?? donationsLoading;\r\n  const error = memberError ?? donationsError;\r\n\r\n  const memberWithDonations: MemberWithDonations | null = useMemo(() => {\r\n    if (!member) return null;\r\n\r\n    const totalDonations = donations.reduce((sum, donation) => {\r\n      return sum + (donation.status === 'completed' ? donation.amount : 0);\r\n    }, 0);\r\n\r\n    const lastDonation = donations.find((d) => d.status === 'completed');\r\n\r\n    return {\r\n      ...member,\r\n      donations,\r\n      totalDonations,\r\n      lastDonation,\r\n    };\r\n  }, [member, donations]);\r\n\r\n  return {\r\n    member: memberWithDonations,\r\n    loading,\r\n    error,\r\n  };\r\n}\r\n\r\n// Member export data formatter\r\n/**\r\n * useMemberExportData function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useMemberExportData() {\r\n  const formatMemberForExport = useCallback((member: Member) => {\r\n    return {\r\n      id: member.id,\r\n      name: member.name,\r\n      email: member.email,\r\n      phone: member.phone ?? '-',\r\n      city: member.city ?? '-',\r\n      membershipType: member.membership_type,\r\n      status: member.status,\r\n      joinDate: member.join_date,\r\n      birthDate: member.birth_date ?? '-',\r\n      gender: member.gender ?? '-',\r\n      occupation: member.occupation ?? '-',\r\n      createdAt: member.created_at,\r\n    };\r\n  }, []);\r\n\r\n  const formatMembersForExport = useCallback(\r\n    (members: Member[]) => {\r\n      return members.map(formatMemberForExport);\r\n    },\r\n    [formatMemberForExport],\r\n  );\r\n\r\n  return {\r\n    formatMemberForExport,\r\n    formatMembersForExport,\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\useMobileForm.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\useMobileFormOptimized.ts","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":133,"column":20,"nodeType":"MemberExpression","endLine":133,"endColumn":35},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":147,"column":23,"nodeType":"MemberExpression","endLine":147,"endColumn":51},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":148,"column":11,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":148,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'rules' is defined but never used.","line":198,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":198,"endColumn":45},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'rules' is defined but never used. Allowed unused args must match /^_/u.","line":198,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":198,"endColumn":45},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":203,"column":11,"nodeType":"MemberExpression","endLine":203,"endColumn":28},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":207,"column":20,"nodeType":"MemberExpression","endLine":207,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":236,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":236,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7153,7156],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7153,7156],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":238,"column":15,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":238,"endColumn":17},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":238,"column":19,"nodeType":"MemberExpression","endLine":238,"endColumn":47},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":241,"column":16,"nodeType":"MemberExpression","endLine":241,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":245,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":245,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7457,7460],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7457,7460],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":248,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":248,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7564,7567],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7564,7567],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":251,"column":27,"nodeType":"MemberExpression","endLine":251,"endColumn":44},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":252,"column":29,"nodeType":"MemberExpression","endLine":252,"endColumn":46},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":258,"column":11,"nodeType":"MemberExpression","endLine":258,"endColumn":28},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":359,"column":14,"nodeType":"MemberExpression","endLine":359,"endColumn":32},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":359,"column":35,"nodeType":"MemberExpression","endLine":359,"endColumn":52}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":17,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview useMobileFormOptimized Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { useCallback, useEffect, useRef, useState } from 'react';\r\nimport { useAdvancedMobile } from './useAdvancedMobile';\r\nimport { usePerformanceOptimization } from './usePerformanceOptimization';\r\n\r\ninterface UseMobileFormProps {\r\n  validateOnBlur?: boolean;\r\n  submitOnEnter?: boolean;\r\n  autosaveDelay?: number;\r\n  enableHapticFeedback?: boolean;\r\n}\r\n\r\ninterface MobileFormState {\r\n  isKeyboardOpen: boolean;\r\n  activeField: string | null;\r\n  scrollPosition: number;\r\n  formHeight: number;\r\n  keyboardHeight: number;\r\n}\r\n\r\ninterface ValidationRule {\r\n  required?: boolean;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  pattern?: RegExp;\r\n  email?: boolean;\r\n  phone?: boolean;\r\n  custom?: (value: string) => string | null;\r\n}\r\n\r\n/**\r\n * useMobileFormOptimized function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useMobileFormOptimized({\r\n  validateOnBlur = true,\r\n  submitOnEnter = false,\r\n  autosaveDelay = 1000,\r\n  enableHapticFeedback = true,\r\n}: UseMobileFormProps = {}) {\r\n  const {\r\n    deviceInfo,\r\n    optimizedSettings,\r\n    triggerHapticFeedback,\r\n    keyboardHeight,\r\n    isKeyboardOpen: advancedKeyboardOpen,\r\n    optimizeInputFocus,\r\n  } = useAdvancedMobile();\r\n\r\n  const { requestFrame } = usePerformanceOptimization();\r\n\r\n  const [formState, setFormState] = useState<MobileFormState>({\r\n    isKeyboardOpen: false,\r\n    activeField: null,\r\n    scrollPosition: 0,\r\n    formHeight: 0,\r\n    keyboardHeight: 0,\r\n  });\r\n\r\n  const [errors, setErrors] = useState<Record<string, string>>({});\r\n  const [touched, setTouched] = useState<Record<string, boolean>>({});\r\n  const [values, setValues] = useState<Record<string, string>>({});\r\n  const formRef = useRef<HTMLFormElement>(null);\r\n  const autosaveTimeoutRef = useRef<NodeJS.Timeout>();\r\n  const fieldRefs = useRef<Record<string, HTMLInputElement | HTMLTextAreaElement>>({});\r\n\r\n  // Enhanced keyboard detection using advanced mobile hook\r\n  useEffect(() => {\r\n    setFormState((prev) => ({\r\n      ...prev,\r\n      isKeyboardOpen: advancedKeyboardOpen,\r\n      keyboardHeight,\r\n    }));\r\n  }, [advancedKeyboardOpen, keyboardHeight]);\r\n\r\n  // Enhanced field validation with comprehensive rules\r\n  const validateField = useCallback(\r\n    (name: string, value: string, rules?: ValidationRule) => {\r\n      if (!rules) return true;\r\n\r\n      let errorMessage = '';\r\n\r\n      // Required validation\r\n      if (rules.required && !value.trim()) {\r\n        errorMessage = 'Bu alan zorunludur';\r\n      }\r\n      // Length validations\r\n      else if (rules.minLength && value.length < rules.minLength) {\r\n        errorMessage = `En az ${rules.minLength} karakter olmal─▒d─▒r`;\r\n      } else if (rules.maxLength && value.length > rules.maxLength) {\r\n        errorMessage = `En fazla ${rules.maxLength} karakter olmal─▒d─▒r`;\r\n      }\r\n      // Email validation\r\n      else if (rules.email && value && !/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/.test(value)) {\r\n        errorMessage = 'Ge├ğerli bir e-posta adresi giriniz';\r\n      }\r\n      // Phone validation\r\n      else if (rules.phone && value && !/^[+]?[\\d\\s\\-()]{10,}$/.test(value.replace(/\\s/g, ''))) {\r\n        errorMessage = 'Ge├ğerli bir telefon numaras─▒ giriniz';\r\n      }\r\n      // Pattern validation\r\n      else if (rules.pattern && value && !rules.pattern.test(value)) {\r\n        errorMessage = 'Ge├ğersiz format';\r\n      }\r\n      // Custom validation\r\n      else if (rules.custom && value) {\r\n        const customError = rules.custom(value);\r\n        if (customError) {\r\n          errorMessage = customError;\r\n        }\r\n      }\r\n\r\n      // Update errors state\r\n      requestFrame(() => {\r\n        if (errorMessage) {\r\n          setErrors((prev) => ({ ...prev, [name]: errorMessage }));\r\n\r\n          // Haptic feedback for validation errors\r\n          if (enableHapticFeedback && deviceInfo.isMobile) {\r\n            triggerHapticFeedback('medium');\r\n          }\r\n        } else {\r\n          setErrors((prev) => {\r\n            const newErrors = { ...prev };\r\n            delete newErrors[name];\r\n            return newErrors;\r\n          });\r\n        }\r\n      });\r\n\r\n      return !errorMessage;\r\n    },\r\n    [requestFrame, enableHapticFeedback, deviceInfo.isMobile, triggerHapticFeedback],\r\n  );\r\n\r\n  // Enhanced field focus with mobile optimizations\r\n  const handleFieldFocus = useCallback(\r\n    (fieldName: string) => {\r\n      const element = fieldRefs.current[fieldName];\r\n      if (!element) return;\r\n\r\n      requestFrame(() => {\r\n        setFormState((prev) => ({\r\n          ...prev,\r\n          activeField: fieldName,\r\n          scrollPosition: window.scrollY,\r\n        }));\r\n\r\n        // Mobile-specific optimizations\r\n        if (deviceInfo.isMobile) {\r\n          optimizeInputFocus(element);\r\n\r\n          // Haptic feedback\r\n          if (enableHapticFeedback) {\r\n            triggerHapticFeedback('light');\r\n          }\r\n        }\r\n      });\r\n    },\r\n    [\r\n      requestFrame,\r\n      deviceInfo.isMobile,\r\n      optimizeInputFocus,\r\n      enableHapticFeedback,\r\n      triggerHapticFeedback,\r\n    ],\r\n  );\r\n\r\n  // Enhanced field blur with validation\r\n  const handleFieldBlur = useCallback(\r\n    (fieldName: string, value: string, rules?: ValidationRule) => {\r\n      requestFrame(() => {\r\n        setTouched((prev) => ({ ...prev, [fieldName]: true }));\r\n\r\n        if (validateOnBlur && rules) {\r\n          validateField(fieldName, value, rules);\r\n        }\r\n\r\n        setFormState((prev) => ({\r\n          ...prev,\r\n          activeField: null,\r\n        }));\r\n      });\r\n    },\r\n    [requestFrame, validateOnBlur, validateField],\r\n  );\r\n\r\n  // Enhanced field change with optimized updates\r\n  const handleFieldChange = useCallback(\r\n    (fieldName: string, value: string, rules?: ValidationRule) => {\r\n      // Update values immediately for better UX\r\n      setValues((prev) => ({ ...prev, [fieldName]: value }));\r\n\r\n      // Clear errors on change (optimistic UX)\r\n      if (errors[fieldName]) {\r\n        requestFrame(() => {\r\n          setErrors((prev) => {\r\n            const newErrors = { ...prev };\r\n            delete newErrors[fieldName];\r\n            return newErrors;\r\n          });\r\n        });\r\n      }\r\n\r\n      // Debounced autosave with performance optimization\r\n      if (autosaveDelay > 0) {\r\n        if (autosaveTimeoutRef.current) {\r\n          clearTimeout(autosaveTimeoutRef.current);\r\n        }\r\n\r\n        autosaveTimeoutRef.current = setTimeout(() => {\r\n          requestFrame(() => {\r\n            // Trigger autosave event\r\n            const event = new CustomEvent('form-autosave', {\r\n              detail: { fieldName, value, timestamp: Date.now() },\r\n            });\r\n            document.dispatchEvent(event);\r\n          });\r\n        }, autosaveDelay);\r\n      }\r\n    },\r\n    [errors, autosaveDelay, requestFrame],\r\n  );\r\n\r\n  // Enhanced input props with comprehensive mobile optimization\r\n  const optimizeInputProps = useCallback(\r\n    (fieldName: string, type = 'text', rules?: ValidationRule) => {\r\n      const baseProps: any = {\r\n        ref: (el: HTMLInputElement | HTMLTextAreaElement) => {\r\n          if (el) fieldRefs.current[fieldName] = el;\r\n        },\r\n        name: fieldName,\r\n        value: values[fieldName] || '',\r\n        onFocus: () => {\r\n          handleFieldFocus(fieldName);\r\n        },\r\n        onBlur: (e: any) => {\r\n          handleFieldBlur(fieldName, e.target.value, rules);\r\n        },\r\n        onChange: (e: any) => {\r\n          handleFieldChange(fieldName, e.target.value, rules);\r\n        },\r\n        'aria-invalid': !!errors[fieldName],\r\n        'aria-describedby': errors[fieldName] ? `${fieldName}-error` : undefined,\r\n        className: `\r\n        w-full min-h-[44px] px-3 py-2 border rounded-md\r\n        focus:outline-none focus:ring-2 focus:ring-primary/20\r\n        transition-colors duration-200\r\n        ${\r\n          errors[fieldName]\r\n            ? 'border-red-500 focus:ring-red-200'\r\n            : 'border-border focus:ring-primary/20'\r\n        }\r\n        ${deviceInfo.isMobile ? 'text-base' : ''}\r\n      `.trim(),\r\n      };\r\n\r\n      // Mobile-specific optimizations\r\n      if (deviceInfo.isMobile) {\r\n        baseProps.autoComplete = 'on';\r\n        baseProps.autoCorrect = type === 'text' ? 'on' : 'off';\r\n        baseProps.autoCapitalize = type === 'email' ? 'none' : 'sentences';\r\n        baseProps.spellCheck = type === 'text' || type === 'textarea';\r\n\r\n        // Prevent iOS zoom\r\n        if (deviceInfo.isIOS) {\r\n          baseProps.style = { fontSize: '16px', ...baseProps.style };\r\n        }\r\n\r\n        // Enhanced input mode and type optimization\r\n        switch (type) {\r\n          case 'email':\r\n            baseProps.inputMode = 'email';\r\n            baseProps.type = 'email';\r\n            baseProps.autoCapitalize = 'none';\r\n            baseProps.autoCorrect = 'off';\r\n            break;\r\n          case 'tel':\r\n          case 'phone':\r\n            baseProps.inputMode = 'tel';\r\n            baseProps.type = 'tel';\r\n            baseProps.autoCapitalize = 'none';\r\n            break;\r\n          case 'number':\r\n            baseProps.inputMode = 'numeric';\r\n            baseProps.type = 'number';\r\n            baseProps.pattern = '[0-9]*';\r\n            break;\r\n          case 'decimal':\r\n            baseProps.inputMode = 'decimal';\r\n            baseProps.type = 'number';\r\n            baseProps.step = 'any';\r\n            break;\r\n          case 'search':\r\n            baseProps.inputMode = 'search';\r\n            baseProps.type = 'search';\r\n            break;\r\n          case 'url':\r\n            baseProps.inputMode = 'url';\r\n            baseProps.type = 'url';\r\n            baseProps.autoCapitalize = 'none';\r\n            baseProps.autoCorrect = 'off';\r\n            break;\r\n          case 'password':\r\n            baseProps.type = 'password';\r\n            baseProps.autoComplete = 'current-password';\r\n            baseProps.autoCapitalize = 'none';\r\n            baseProps.autoCorrect = 'off';\r\n            break;\r\n          case 'textarea':\r\n            baseProps.rows = 3;\r\n            baseProps.resize = 'vertical';\r\n            break;\r\n          default:\r\n            baseProps.inputMode = 'text';\r\n            baseProps.type = 'text';\r\n        }\r\n\r\n        // Enhanced keyboard behavior\r\n        if (submitOnEnter && type !== 'textarea') {\r\n          baseProps.onKeyDown = (e: KeyboardEvent) => {\r\n            if (e.key === 'Enter') {\r\n              e.preventDefault();\r\n              const form = formRef.current;\r\n              if (form) {\r\n                const submitEvent = new Event('submit', { bubbles: true });\r\n                form.dispatchEvent(submitEvent);\r\n              }\r\n            }\r\n          };\r\n        }\r\n      }\r\n\r\n      return baseProps;\r\n    },\r\n    [\r\n      values,\r\n      errors,\r\n      handleFieldFocus,\r\n      handleFieldBlur,\r\n      handleFieldChange,\r\n      deviceInfo.isMobile,\r\n      deviceInfo.isIOS,\r\n      submitOnEnter,\r\n    ],\r\n  );\r\n\r\n  // Enhanced error retrieval\r\n  const getFieldError = useCallback(\r\n    (fieldName: string) => {\r\n      return touched[fieldName] ? errors[fieldName] : undefined;\r\n    },\r\n    [touched, errors],\r\n  );\r\n\r\n  // Form validation helpers\r\n  const validateForm = useCallback(\r\n    (formData: Record<string, { value: string; rules?: ValidationRule }>) => {\r\n      let isFormValid = true;\r\n\r\n      Object.entries(formData).forEach(([fieldName, { value, rules }]) => {\r\n        if (!validateField(fieldName, value, rules)) {\r\n          isFormValid = false;\r\n        }\r\n      });\r\n\r\n      return isFormValid;\r\n    },\r\n    [validateField],\r\n  );\r\n\r\n  // Cleanup\r\n  useEffect(() => {\r\n    return () => {\r\n      if (autosaveTimeoutRef.current) {\r\n        clearTimeout(autosaveTimeoutRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  const isValid = Object.keys(errors).length === 0;\r\n  const hasErrors = Object.keys(errors).length > 0;\r\n  const hasValues = Object.keys(values).length > 0;\r\n\r\n  return {\r\n    // State\r\n    formState,\r\n    errors,\r\n    touched,\r\n    values,\r\n\r\n    // Validation\r\n    validateField,\r\n    validateForm,\r\n    isValid,\r\n    hasErrors,\r\n    hasValues,\r\n\r\n    // Field helpers\r\n    optimizeInputProps,\r\n    getFieldError,\r\n\r\n    // Refs\r\n    formRef,\r\n    fieldRefs,\r\n\r\n    // Mobile-specific data\r\n    isKeyboardOpen: formState.isKeyboardOpen,\r\n    keyboardHeight: formState.keyboardHeight,\r\n    activeField: formState.activeField,\r\n\r\n    // Performance settings\r\n    shouldReduceAnimations: !optimizedSettings.enableAnimations,\r\n    adaptiveTimings: {\r\n      animationDuration: optimizedSettings.animationDuration,\r\n      debounceDelay: deviceInfo.isLowPowerMode ? autosaveDelay * 2 : autosaveDelay,\r\n    },\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\useMobilePerformance.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1530,1533],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1530,1533],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":76,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":76,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2005,2008],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2005,2008],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2975,2978],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2975,2978],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":130,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":130,"endColumn":21},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":130,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":130,"endColumn":21}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview useMobilePerformance Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { useEffect, useState, useCallback } from 'react';\r\nimport { useIsMobile } from './useTouchDevice';\r\n\r\ninterface PerformanceMetrics {\r\n  isSlowDevice: boolean;\r\n  networkSpeed: 'slow' | 'medium' | 'fast';\r\n  battery: {\r\n    level: number;\r\n    charging: boolean;\r\n  } | null;\r\n  reducedMotion: boolean;\r\n  dataSaver: boolean;\r\n}\r\n\r\ninterface MobilePerformanceSettings {\r\n  enableAnimations: boolean;\r\n  enableHeavyEffects: boolean;\r\n  enableAutoRefresh: boolean;\r\n  imageQuality: 'low' | 'medium' | 'high';\r\n  lazyLoadThreshold: number;\r\n}\r\n\r\n/**\r\n * useMobilePerformance function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useMobilePerformance() {\r\n  const isMobile = useIsMobile();\r\n  const [metrics, setMetrics] = useState<PerformanceMetrics>({\r\n    isSlowDevice: false,\r\n    networkSpeed: 'medium',\r\n    battery: null,\r\n    reducedMotion: false,\r\n    dataSaver: false,\r\n  });\r\n\r\n  const [settings, setSettings] = useState<MobilePerformanceSettings>({\r\n    enableAnimations: true,\r\n    enableHeavyEffects: true,\r\n    enableAutoRefresh: true,\r\n    imageQuality: 'high',\r\n    lazyLoadThreshold: 300,\r\n  });\r\n\r\n  // Detect device performance\r\n  useEffect(() => {\r\n    if (!isMobile) return;\r\n\r\n    const detectDevicePerformance = () => {\r\n      // Check device memory (if available)\r\n      const memory = (navigator as any).deviceMemory;\r\n      const {hardwareConcurrency} = navigator;\r\n\r\n      // Simple heuristic for device performance\r\n      const isSlowDevice = memory ? memory <= 2 : hardwareConcurrency <= 2;\r\n\r\n      setMetrics((prev) => ({ ...prev, isSlowDevice }));\r\n    };\r\n\r\n    detectDevicePerformance();\r\n  }, [isMobile]);\r\n\r\n  // Monitor network connection\r\n  useEffect(() => {\r\n    if (!isMobile || !('connection' in navigator)) return;\r\n\r\n    const {connection} = (navigator as any);\r\n\r\n    const updateNetworkSpeed = () => {\r\n      const effectiveType = connection?.effectiveType;\r\n      let speed: 'slow' | 'medium' | 'fast' = 'medium';\r\n\r\n      if (effectiveType === 'slow-2g' || effectiveType === '2g') {\r\n        speed = 'slow';\r\n      } else if (effectiveType === '3g') {\r\n        speed = 'medium';\r\n      } else if (effectiveType === '4g') {\r\n        speed = 'fast';\r\n      }\r\n\r\n      setMetrics((prev) => ({\r\n        ...prev,\r\n        networkSpeed: speed,\r\n        dataSaver: connection?.saveData ?? false,\r\n      }));\r\n    };\r\n\r\n    updateNetworkSpeed();\r\n    connection?.addEventListener('change', updateNetworkSpeed);\r\n\r\n    return () => connection?.removeEventListener('change', updateNetworkSpeed);\r\n  }, [isMobile]);\r\n\r\n  // Monitor battery status\r\n  useEffect(() => {\r\n    if (!isMobile || !('getBattery' in navigator)) return;\r\n\r\n    const updateBatteryInfo = async () => {\r\n      try {\r\n        const battery = await (navigator as any).getBattery();\r\n\r\n        const updateBattery = () => {\r\n          setMetrics((prev) => ({\r\n            ...prev,\r\n            battery: {\r\n              level: Math.round(battery.level * 100),\r\n              charging: battery.charging,\r\n            },\r\n          }));\r\n        };\r\n\r\n        updateBattery();\r\n\r\n        battery.addEventListener('levelchange', updateBattery);\r\n        battery.addEventListener('chargingchange', updateBattery);\r\n\r\n        return () => {\r\n          battery.removeEventListener('levelchange', updateBattery);\r\n          battery.removeEventListener('chargingchange', updateBattery);\r\n        };\r\n      } catch (error) {\r\n        // Battery API not supported\r\n      }\r\n    };\r\n\r\n    updateBatteryInfo();\r\n  }, [isMobile]);\r\n\r\n  // Check for reduced motion preference\r\n  useEffect(() => {\r\n    const mediaQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\r\n\r\n    setMetrics((prev) => ({ ...prev, reducedMotion: mediaQuery.matches }));\r\n\r\n    const handleChange = (e: MediaQueryListEvent) => {\r\n      setMetrics((prev) => ({ ...prev, reducedMotion: e.matches }));\r\n    };\r\n\r\n    mediaQuery.addEventListener('change', handleChange);\r\n    return () => {\r\n      mediaQuery.removeEventListener('change', handleChange);\r\n    };\r\n  }, []);\r\n\r\n  // Auto-adjust settings based on metrics\r\n  useEffect(() => {\r\n    const newSettings: MobilePerformanceSettings = {\r\n      enableAnimations: !metrics.reducedMotion && !metrics.isSlowDevice,\r\n      enableHeavyEffects: !metrics.isSlowDevice && metrics.networkSpeed !== 'slow',\r\n      enableAutoRefresh: !metrics.dataSaver && metrics.networkSpeed !== 'slow',\r\n      imageQuality:\r\n        metrics.networkSpeed === 'slow'\r\n          ? 'low'\r\n          : metrics.networkSpeed === 'medium'\r\n            ? 'medium'\r\n            : 'high',\r\n      lazyLoadThreshold:\r\n        metrics.networkSpeed === 'slow' ? 100 : metrics.networkSpeed === 'medium' ? 200 : 300,\r\n    };\r\n\r\n    // Reduce performance if battery is low and not charging\r\n    if (metrics.battery && metrics.battery.level < 20 && !metrics.battery.charging) {\r\n      newSettings.enableAnimations = false;\r\n      newSettings.enableHeavyEffects = false;\r\n      newSettings.enableAutoRefresh = false;\r\n      newSettings.imageQuality = 'low';\r\n    }\r\n\r\n    setSettings(newSettings);\r\n  }, [metrics]);\r\n\r\n  // Get optimized component props\r\n  const getOptimizedProps = useCallback(\r\n    (componentType: 'image' | 'animation' | 'autoRefresh') => {\r\n      switch (componentType) {\r\n        case 'image':\r\n          return {\r\n            loading: 'lazy' as const,\r\n            quality: settings.imageQuality,\r\n            threshold: settings.lazyLoadThreshold,\r\n          };\r\n\r\n        case 'animation':\r\n          return {\r\n            animate: settings.enableAnimations,\r\n            duration: settings.enableAnimations ? (metrics.isSlowDevice ? 0.15 : 0.3) : 0,\r\n            reduce: metrics.reducedMotion,\r\n          };\r\n\r\n        case 'autoRefresh':\r\n          return {\r\n            enabled: settings.enableAutoRefresh,\r\n            interval: metrics.networkSpeed === 'slow' ? 60000 : 30000,\r\n          };\r\n\r\n        default:\r\n          return {};\r\n      }\r\n    },\r\n    [settings, metrics],\r\n  );\r\n\r\n  // Performance-aware CSS classes\r\n  const getPerformanceClasses = useCallback(() => {\r\n    const classes: string[] = [];\r\n\r\n    if (!settings.enableAnimations) {\r\n      classes.push('reduce-motion');\r\n    }\r\n\r\n    if (metrics.isSlowDevice) {\r\n      classes.push('slow-device');\r\n    }\r\n\r\n    if (metrics.networkSpeed === 'slow') {\r\n      classes.push('slow-network');\r\n    }\r\n\r\n    if (metrics.dataSaver) {\r\n      classes.push('data-saver');\r\n    }\r\n\r\n    return classes.join(' ');\r\n  }, [settings, metrics]);\r\n\r\n  // Manual settings override\r\n  const updateSettings = useCallback((newSettings: Partial<MobilePerformanceSettings>) => {\r\n    setSettings((prev) => ({ ...prev, ...newSettings }));\r\n  }, []);\r\n\r\n  return {\r\n    metrics,\r\n    settings,\r\n    getOptimizedProps,\r\n    getPerformanceClasses,\r\n    updateSettings,\r\n    isMobile,\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\usePagination.ts","messages":[{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":104,"column":11,"nodeType":"BinaryExpression","messageId":"constantShortCircuit","endLine":104,"endColumn":19},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":104,"column":11,"nodeType":"BinaryExpression","messageId":"neverNullish","endLine":104,"endColumn":19}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview usePagination Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { useState, useMemo, useCallback } from 'react';\r\n\r\ninterface UsePaginationProps {\r\n  totalItems: number;\r\n  itemsPerPage?: number;\r\n  initialPage?: number;\r\n  maxPageNumbers?: number;\r\n  boundaryCount?: number;\r\n  siblingCount?: number;\r\n  onPageChange?: (page: number) => void;\r\n}\r\n\r\n/**\r\n * usePagination function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function usePagination({\r\n  totalItems,\r\n  itemsPerPage = 20,\r\n  initialPage = 1,\r\n  maxPageNumbers = 7,\r\n  boundaryCount = 1,\r\n  siblingCount = 1,\r\n  onPageChange,\r\n}: UsePaginationProps) {\r\n  const [currentPage, setCurrentPage] = useState(initialPage);\r\n\r\n  // Calculate total pages\r\n  const totalPages = useMemo(() => {\r\n    return Math.ceil(totalItems / itemsPerPage);\r\n  }, [totalItems, itemsPerPage]);\r\n\r\n  // Calculate current page range\r\n  const pageRange = useMemo(() => {\r\n    const startIndex = (currentPage - 1) * itemsPerPage;\r\n    const endIndex = Math.min(startIndex + itemsPerPage, totalItems);\r\n\r\n    return {\r\n      start: startIndex + 1,\r\n      end: endIndex,\r\n      total: totalItems,\r\n    };\r\n  }, [currentPage, itemsPerPage, totalItems]);\r\n\r\n  // Generate page numbers to display\r\n  const pageNumbers = useMemo(() => {\r\n    if (totalPages <= maxPageNumbers) {\r\n      return Array.from({ length: totalPages }, (_, i) => i + 1);\r\n    }\r\n\r\n    const startPage = Math.max(1, currentPage - siblingCount);\r\n    const endPage = Math.min(totalPages, currentPage + siblingCount);\r\n\r\n    const pages: (number | string)[] = [];\r\n\r\n    // Add first page(s)\r\n    for (let i = 1; i <= Math.min(boundaryCount, totalPages); i++) {\r\n      pages.push(i);\r\n    }\r\n\r\n    // Add ellipsis if needed\r\n    if (startPage > boundaryCount + 1) {\r\n      pages.push('...');\r\n    }\r\n\r\n    // Add middle pages\r\n    for (\r\n      let i = Math.max(startPage, boundaryCount + 1);\r\n      i <= Math.min(endPage, totalPages - boundaryCount);\r\n      i++\r\n    ) {\r\n      if (!pages.includes(i)) {\r\n        pages.push(i);\r\n      }\r\n    }\r\n\r\n    // Add ellipsis if needed\r\n    if (endPage < totalPages - boundaryCount) {\r\n      pages.push('...');\r\n    }\r\n\r\n    // Add last page(s)\r\n    for (let i = Math.max(totalPages - boundaryCount + 1, endPage + 1); i <= totalPages; i++) {\r\n      if (!pages.includes(i)) {\r\n        pages.push(i);\r\n      }\r\n    }\r\n\r\n    return pages;\r\n  }, [currentPage, totalPages, maxPageNumbers, boundaryCount, siblingCount]);\r\n\r\n  // Navigation functions\r\n  const goToPage = useCallback(\r\n    (page: number) => {\r\n      if (page < 1 ?? page > totalPages) return;\r\n\r\n      setCurrentPage(page);\r\n      onPageChange?.(page);\r\n    },\r\n    [totalPages, onPageChange],\r\n  );\r\n\r\n  const goToFirstPage = useCallback(() => {\r\n    goToPage(1);\r\n  }, [goToPage]);\r\n\r\n  const goToLastPage = useCallback(() => {\r\n    goToPage(totalPages);\r\n  }, [goToPage, totalPages]);\r\n\r\n  const goToNextPage = useCallback(() => {\r\n    if (currentPage < totalPages) {\r\n      goToPage(currentPage + 1);\r\n    }\r\n  }, [currentPage, totalPages, goToPage]);\r\n\r\n  const goToPreviousPage = useCallback(() => {\r\n    if (currentPage > 1) {\r\n      goToPage(currentPage - 1);\r\n    }\r\n  }, [currentPage, goToPage]);\r\n\r\n  // Computed properties\r\n  const hasNextPage = currentPage < totalPages;\r\n  const hasPreviousPage = currentPage > 1;\r\n  const isFirstPage = currentPage === 1;\r\n  const isLastPage = currentPage === totalPages;\r\n\r\n  // Get items for current page (for client-side pagination)\r\n  const getPageItems = useCallback(\r\n    <T>(items: T[]): T[] => {\r\n      const startIndex = (currentPage - 1) * itemsPerPage;\r\n      const endIndex = startIndex + itemsPerPage;\r\n      return items.slice(startIndex, endIndex);\r\n    },\r\n    [currentPage, itemsPerPage],\r\n  );\r\n\r\n  // Reset to first page (useful when filters change)\r\n  const resetToFirstPage = useCallback(() => {\r\n    setCurrentPage(1);\r\n  }, []);\r\n\r\n  // Page size options\r\n  const pageSizeOptions = [10, 20, 50, 100];\r\n\r\n  // Change page size\r\n  const changePageSize = useCallback(\r\n    (newSize: number) => {\r\n      // Calculate what the new page should be to keep the same item visible\r\n      const currentFirstItem = (currentPage - 1) * itemsPerPage + 1;\r\n      const newPage = Math.ceil(currentFirstItem / newSize);\r\n\r\n      setCurrentPage(newPage);\r\n      onPageChange?.(newPage);\r\n    },\r\n    [currentPage, itemsPerPage, onPageChange],\r\n  );\r\n\r\n  // Get pagination info for display\r\n  const getPaginationInfo = useCallback(() => {\r\n    if (totalItems === 0) {\r\n      return 'Sonu├ğ bulunamad─▒';\r\n    }\r\n\r\n    const { start, end, total } = pageRange;\r\n    return `${start}-${end} / ${total} sonu├ğ`;\r\n  }, [pageRange, totalItems]);\r\n\r\n  // Get pagination summary for mobile\r\n  const getMobilePaginationInfo = useCallback(() => {\r\n    if (totalItems === 0) {\r\n      return 'Sonu├ğ yok';\r\n    }\r\n\r\n    return `Sayfa ${currentPage} / ${totalPages}`;\r\n  }, [currentPage, totalPages, totalItems]);\r\n\r\n  return {\r\n    // State\r\n    currentPage,\r\n    totalPages,\r\n    totalItems,\r\n    itemsPerPage,\r\n    pageRange,\r\n    pageNumbers,\r\n\r\n    // Navigation\r\n    goToPage,\r\n    goToFirstPage,\r\n    goToLastPage,\r\n    goToNextPage,\r\n    goToPreviousPage,\r\n    resetToFirstPage,\r\n\r\n    // Computed\r\n    hasNextPage,\r\n    hasPreviousPage,\r\n    isFirstPage,\r\n    isLastPage,\r\n\r\n    // Utilities\r\n    getPageItems,\r\n    changePageSize,\r\n    pageSizeOptions,\r\n    getPaginationInfo,\r\n    getMobilePaginationInfo,\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\usePerformanceEnhanced.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'finalThresholds' object makes the dependencies of useCallback Hook (at line 159) change on every render. To fix this, wrap the initialization of 'finalThresholds' in its own useMemo() Hook.","line":82,"column":9,"nodeType":"VariableDeclarator","endLine":82,"endColumn":67},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'finalThresholds' object makes the dependencies of useCallback Hook (at line 215) change on every render. To fix this, wrap the initialization of 'finalThresholds' in its own useMemo() Hook.","line":82,"column":9,"nodeType":"VariableDeclarator","endLine":82,"endColumn":67},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"The 'finalThresholds' object makes the dependencies of useCallback Hook (at line 240) change on every render. To fix this, wrap the initialization of 'finalThresholds' in its own useMemo() Hook.","line":82,"column":9,"nodeType":"VariableDeclarator","endLine":82,"endColumn":67},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":87,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":87,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2363,2366],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2363,2366],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'componentName', 'metrics.averageRenderTime', and 'metrics.peakMemoryUsage'. Either include them or remove the dependency array.","line":179,"column":6,"nodeType":"ArrayExpression","endLine":179,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [componentName, metrics.averageRenderTime, metrics.peakMemoryUsage]","fix":{"range":[5420,5422],"text":"[componentName, metrics.averageRenderTime, metrics.peakMemoryUsage]"}}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":269,"column":5,"nodeType":"MemberExpression","endLine":269,"endColumn":34},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":273,"column":23,"nodeType":"MemberExpression","endLine":273,"endColumn":52},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":280,"column":14,"nodeType":"MemberExpression","endLine":280,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":344,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":344,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9818,9821],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9818,9821],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":345,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":345,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9880,9883],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9880,9883],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":352,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":352,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10140,10143],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10140,10143],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":377,"column":30,"nodeType":"BinaryExpression","messageId":"constantShortCircuit","endLine":377,"endColumn":80},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":377,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":377,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10967,10970],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10967,10970],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview usePerformanceEnhanced Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\n// ­şÜÇ ENHANCED PERFORMANCE MONITORING HOOK\r\n// Comprehensive performance tracking and optimization\r\n\r\nimport { useCallback, useEffect, useRef, useState } from 'react';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\n/**\r\n * PerformanceMetrics Interface\r\n * \r\n * @interface PerformanceMetrics\r\n */\r\nexport interface PerformanceMetrics {\r\n  readonly renderTime: number;\r\n  readonly memoryUsage: number;\r\n  readonly componentMounts: number;\r\n  readonly reRenders: number;\r\n  readonly lastRenderTime: number;\r\n  readonly averageRenderTime: number;\r\n  readonly peakMemoryUsage: number;\r\n}\r\n\r\n/**\r\n * PerformanceThresholds Interface\r\n * \r\n * @interface PerformanceThresholds\r\n */\r\nexport interface PerformanceThresholds {\r\n  readonly maxRenderTime: number;\r\n  readonly maxMemoryUsage: number;\r\n  readonly maxReRenders: number;\r\n}\r\n\r\ninterface PerformanceEntry {\r\n  readonly timestamp: number;\r\n  readonly renderTime: number;\r\n  readonly memoryUsage: number;\r\n}\r\n\r\nconst DEFAULT_THRESHOLDS: PerformanceThresholds = {\r\n  maxRenderTime: 16, // 16ms for 60fps\r\n  maxMemoryUsage: 50 * 1024 * 1024, // 50MB\r\n  maxReRenders: 5,\r\n};\r\n\r\n/**\r\n * Enhanced performance monitoring hook\r\n * Tracks component performance metrics and provides optimization insights\r\n */\r\n/**\r\n * usePerformanceEnhanced function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function usePerformanceEnhanced(\r\n  componentName: string,\r\n  thresholds: Partial<PerformanceThresholds> = {},\r\n) {\r\n  const [metrics, setMetrics] = useState<PerformanceMetrics>({\r\n    renderTime: 0,\r\n    memoryUsage: 0,\r\n    componentMounts: 0,\r\n    reRenders: 0,\r\n    lastRenderTime: 0,\r\n    averageRenderTime: 0,\r\n    peakMemoryUsage: 0,\r\n  });\r\n\r\n  const renderStartTime = useRef<number>(0);\r\n  const performanceHistory = useRef<PerformanceEntry[]>([]);\r\n  const mountCount = useRef<number>(0);\r\n  const renderCount = useRef<number>(0);\r\n  const isFirstRender = useRef<boolean>(true);\r\n\r\n  const finalThresholds = { ...DEFAULT_THRESHOLDS, ...thresholds };\r\n\r\n  // Get memory usage (if available)\r\n  const getMemoryUsage = useCallback((): number => {\r\n    if ('memory' in performance) {\r\n      const {memory} = (performance as any);\r\n      return memory.usedJSHeapSize ?? 0;\r\n    }\r\n    return 0;\r\n  }, []);\r\n\r\n  // Start performance measurement\r\n  const startMeasurement = useCallback(() => {\r\n    renderStartTime.current = performance.now();\r\n  }, []);\r\n\r\n  // End performance measurement and update metrics\r\n  const endMeasurement = useCallback(() => {\r\n    const renderTime = performance.now() - renderStartTime.current;\r\n    const memoryUsage = getMemoryUsage();\r\n\r\n    renderCount.current += 1;\r\n\r\n    // Add to history (keep last 100 entries)\r\n    const entry: PerformanceEntry = {\r\n      timestamp: Date.now(),\r\n      renderTime,\r\n      memoryUsage,\r\n    };\r\n\r\n    performanceHistory.current.push(entry);\r\n    if (performanceHistory.current.length > 100) {\r\n      performanceHistory.current.shift();\r\n    }\r\n\r\n    // Calculate metrics\r\n    const history = performanceHistory.current;\r\n    const averageRenderTime =\r\n      history.length > 0\r\n        ? history.reduce((sum, entry) => sum + entry.renderTime, 0) / history.length\r\n        : 0;\r\n\r\n    const peakMemoryUsage = Math.max(metrics.peakMemoryUsage, memoryUsage);\r\n\r\n    setMetrics({\r\n      renderTime,\r\n      memoryUsage,\r\n      componentMounts: mountCount.current,\r\n      reRenders: renderCount.current - 1, // Subtract initial render\r\n      lastRenderTime: renderTime,\r\n      averageRenderTime,\r\n      peakMemoryUsage,\r\n    });\r\n\r\n    // Performance warnings in development\r\n    if (process.env.NODE_ENV === 'development') {\r\n      if (renderTime > finalThresholds.maxRenderTime) {\r\n        logger.warn(\r\n          `ÔÜí Performance Warning: ${componentName} render time (${renderTime.toFixed(2)}ms) ` +\r\n            `exceeds threshold (${finalThresholds.maxRenderTime}ms)`,\r\n        );\r\n      }\r\n\r\n      if (memoryUsage > finalThresholds.maxMemoryUsage) {\r\n        logger.warn(\r\n          `­şğá Memory Warning: ${componentName} memory usage (${(memoryUsage / 1024 / 1024).toFixed(2)}MB) ` +\r\n            `exceeds threshold (${(finalThresholds.maxMemoryUsage / 1024 / 1024).toFixed(2)}MB)`,\r\n        );\r\n      }\r\n\r\n      if (renderCount.current > finalThresholds.maxReRenders + 1) {\r\n        logger.warn(\r\n          `­şöä Re-render Warning: ${componentName} has re-rendered ${renderCount.current} times ` +\r\n            `(threshold: ${finalThresholds.maxReRenders})`,\r\n        );\r\n      }\r\n    }\r\n  }, [componentName, finalThresholds, getMemoryUsage, metrics.peakMemoryUsage]);\r\n\r\n  // Component mount/unmount tracking\r\n  useEffect(() => {\r\n    if (isFirstRender.current) {\r\n      mountCount.current += 1;\r\n      isFirstRender.current = false;\r\n    }\r\n\r\n    return () => {\r\n      // Component unmount cleanup\r\n      if (process.env.NODE_ENV === 'development') {\r\n        logger.info(`­şôè Performance Summary for ${componentName}:`, {\r\n          totalRenders: renderCount.current,\r\n          averageRenderTime: `${metrics.averageRenderTime.toFixed(2)  }ms`,\r\n          peakMemoryUsage: `${(metrics.peakMemoryUsage / 1024 / 1024).toFixed(2)  }MB`,\r\n          mountCount: mountCount.current,\r\n        });\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Performance measurement effect\r\n  useEffect(() => {\r\n    startMeasurement();\r\n\r\n    // Use setTimeout to measure after paint\r\n    const timeoutId = setTimeout(() => {\r\n      endMeasurement();\r\n    }, 0);\r\n\r\n    return () => {\r\n      clearTimeout(timeoutId);\r\n    };\r\n  });\r\n\r\n  // Get performance insights\r\n  const getInsights = useCallback(() => {\r\n    const insights: string[] = [];\r\n\r\n    if (metrics.averageRenderTime > finalThresholds.maxRenderTime) {\r\n      insights.push('Consider memoizing expensive calculations with useMemo');\r\n      insights.push('Check if components can be wrapped with React.memo');\r\n    }\r\n\r\n    if (metrics.reRenders > finalThresholds.maxReRenders) {\r\n      insights.push('High re-render count - check dependency arrays in hooks');\r\n      insights.push('Consider using useCallback for function props');\r\n    }\r\n\r\n    if (metrics.peakMemoryUsage > finalThresholds.maxMemoryUsage) {\r\n      insights.push('High memory usage - check for memory leaks');\r\n      insights.push('Consider lazy loading or virtualization for large datasets');\r\n    }\r\n\r\n    return insights;\r\n  }, [metrics, finalThresholds]);\r\n\r\n  // Clear performance history\r\n  const clearHistory = useCallback(() => {\r\n    performanceHistory.current = [];\r\n    renderCount.current = 0;\r\n    mountCount.current = 0;\r\n    setMetrics({\r\n      renderTime: 0,\r\n      memoryUsage: 0,\r\n      componentMounts: 0,\r\n      reRenders: 0,\r\n      lastRenderTime: 0,\r\n      averageRenderTime: 0,\r\n      peakMemoryUsage: 0,\r\n    });\r\n  }, []);\r\n\r\n  // Check if performance is within acceptable limits\r\n  const isPerformanceGood = useCallback(() => {\r\n    return (\r\n      metrics.averageRenderTime <= finalThresholds.maxRenderTime &&\r\n      metrics.peakMemoryUsage <= finalThresholds.maxMemoryUsage &&\r\n      metrics.reRenders <= finalThresholds.maxReRenders\r\n    );\r\n  }, [metrics, finalThresholds]);\r\n\r\n  return {\r\n    metrics,\r\n    thresholds: finalThresholds,\r\n    getInsights,\r\n    clearHistory,\r\n    isPerformanceGood,\r\n\r\n    // For manual measurement\r\n    startMeasurement,\r\n    endMeasurement,\r\n  };\r\n}\r\n\r\n/**\r\n * Hook for measuring specific operations\r\n */\r\n/**\r\n * useOperationTimer function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useOperationTimer() {\r\n  const [measurements, setMeasurements] = useState<Record<string, number>>({});\r\n  const timers = useRef<Record<string, number>>({});\r\n\r\n  const startTimer = useCallback((operationName: string) => {\r\n    timers.current[operationName] = performance.now();\r\n  }, []);\r\n\r\n  const endTimer = useCallback((operationName: string) => {\r\n    const startTime = timers.current[operationName];\r\n    if (startTime) {\r\n      const duration = performance.now() - startTime;\r\n      setMeasurements((prev) => ({\r\n        ...prev,\r\n        [operationName]: duration,\r\n      }));\r\n      delete timers.current[operationName];\r\n\r\n      if (process.env.NODE_ENV === 'development') {\r\n        logger.info(`ÔÅ▒´©Å ${operationName}: ${duration.toFixed(2)}ms`);\r\n      }\r\n\r\n      return duration;\r\n    }\r\n    return 0;\r\n  }, []);\r\n\r\n  const measureAsync = useCallback(\r\n    async <T>(operationName: string, operation: () => Promise<T>): Promise<T> => {\r\n      startTimer(operationName);\r\n      try {\r\n        const result = await operation();\r\n        return result;\r\n      } finally {\r\n        endTimer(operationName);\r\n      }\r\n    },\r\n    [startTimer, endTimer],\r\n  );\r\n\r\n  const measureSync = useCallback(\r\n    <T>(operationName: string, operation: () => T): T => {\r\n      startTimer(operationName);\r\n      try {\r\n        const result = operation();\r\n        return result;\r\n      } finally {\r\n        endTimer(operationName);\r\n      }\r\n    },\r\n    [startTimer, endTimer],\r\n  );\r\n\r\n  return {\r\n    measurements,\r\n    startTimer,\r\n    endTimer,\r\n    measureAsync,\r\n    measureSync,\r\n  };\r\n}\r\n\r\n/**\r\n * Hook for monitoring bundle size and chunk loading\r\n */\r\n/**\r\n * useBundleMetrics function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useBundleMetrics() {\r\n  const [bundleMetrics, setBundleMetrics] = useState({\r\n    loadedChunks: 0,\r\n    totalBundleSize: 0,\r\n    chunkLoadTimes: {} as Record<string, number>,\r\n  });\r\n\r\n  useEffect(() => {\r\n    // Monitor chunk loading if webpack is available\r\n    if (typeof window !== 'undefined' && (window as any).__webpack_require__) {\r\n      const webpack = (window as any).__webpack_require__;\r\n\r\n      // Track loaded chunks\r\n      const originalEnsure = webpack.e;\r\n      webpack.e = function (chunkId: string) {\r\n        const startTime = performance.now();\r\n\r\n        return originalEnsure.call(this, chunkId).then((result: any) => {\r\n          const loadTime = performance.now() - startTime;\r\n\r\n          setBundleMetrics((prev) => ({\r\n            loadedChunks: prev.loadedChunks + 1,\r\n            totalBundleSize: prev.totalBundleSize,\r\n            chunkLoadTimes: {\r\n              ...prev.chunkLoadTimes,\r\n              [chunkId]: loadTime,\r\n            },\r\n          }));\r\n\r\n          // Chunk loading performance tracking (removed logger.info)\r\n\r\n          return result;\r\n        });\r\n      };\r\n    }\r\n\r\n    // Monitor resource loading\r\n    const observer = new PerformanceObserver((list) => {\r\n      for (const entry of list.getEntries()) {\r\n        if (entry.entryType === 'resource' && entry.name.includes('.js')) {\r\n          setBundleMetrics((prev) => ({\r\n            ...prev,\r\n            totalBundleSize: prev.totalBundleSize + (entry as any).transferSize ?? 0,\r\n          }));\r\n        }\r\n      }\r\n    });\r\n\r\n    observer.observe({ entryTypes: ['resource'] });\r\n\r\n    return () => {\r\n      observer.disconnect();\r\n    };\r\n  }, []);\r\n\r\n  return bundleMetrics;\r\n}\r\n\r\nexport default usePerformanceEnhanced;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\usePerformanceMonitoring.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":107,"column":40,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":107,"endColumn":43,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2912,2915],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2912,2915],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":212,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":212,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6674,6677],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6674,6677],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":342,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":342,"endColumn":59}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview usePerformanceMonitoring Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { useCallback, useEffect, useRef, useState } from 'react';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\ninterface PerformanceMetrics {\r\n  fps: number;\r\n  memoryUsage: number;\r\n  loadTime: number;\r\n  renderTime: number;\r\n  networkLatency: number;\r\n  errorCount: number;\r\n  timestamp: number;\r\n}\r\n\r\ninterface UsePerformanceMonitoringOptions {\r\n  interval?: number;\r\n  enableFPSMonitoring?: boolean;\r\n  enableMemoryMonitoring?: boolean;\r\n  enableNetworkMonitoring?: boolean;\r\n  onAlert?: (metric: string, value: number, threshold: number) => void;\r\n}\r\n\r\nconst PERFORMANCE_THRESHOLDS = {\r\n  fps: 30,\r\n  memoryUsage: 80,\r\n  renderTime: 16,\r\n  networkLatency: 1000,\r\n  errorCount: 5,\r\n};\r\n\r\n/**\r\n * usePerformanceMonitoring function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function usePerformanceMonitoring({\r\n  interval = 5000,\r\n  enableFPSMonitoring = true,\r\n  enableMemoryMonitoring = true,\r\n  enableNetworkMonitoring = true,\r\n  onAlert,\r\n}: UsePerformanceMonitoringOptions = {}) {\r\n  const [metrics, setMetrics] = useState<PerformanceMetrics>({\r\n    fps: 60,\r\n    memoryUsage: 0,\r\n    loadTime: 0,\r\n    renderTime: 0,\r\n    networkLatency: 0,\r\n    errorCount: 0,\r\n    timestamp: Date.now(),\r\n  });\r\n\r\n  const [isMonitoring, setIsMonitoring] = useState(false);\r\n  const [history, setHistory] = useState<PerformanceMetrics[]>([]);\r\n\r\n  const fpsCounterRef = useRef<{ frames: number; lastTime: number }>({\r\n    frames: 0,\r\n    lastTime: performance.now(),\r\n  });\r\n  const errorCountRef = useRef<number>(0);\r\n  const intervalRef = useRef<ReturnType<typeof setInterval> | null>(null);\r\n\r\n  // FPS Monitoring\r\n  const measureFPS = useCallback(() => {\r\n    if (!enableFPSMonitoring) return;\r\n\r\n    const measure = () => {\r\n      fpsCounterRef.current.frames++;\r\n      const currentTime = performance.now();\r\n      const elapsed = currentTime - fpsCounterRef.current.lastTime;\r\n\r\n      if (elapsed >= 1000) {\r\n        const fps = Math.round((fpsCounterRef.current.frames * 1000) / elapsed);\r\n        fpsCounterRef.current.frames = 0;\r\n        fpsCounterRef.current.lastTime = currentTime;\r\n\r\n        setMetrics((prev) => ({ ...prev, fps }));\r\n\r\n        // Check threshold\r\n        if (fps < PERFORMANCE_THRESHOLDS.fps) {\r\n          onAlert?.('fps', fps, PERFORMANCE_THRESHOLDS.fps);\r\n        }\r\n      }\r\n\r\n      if (isMonitoring) {\r\n        requestAnimationFrame(measure);\r\n      }\r\n    };\r\n\r\n    if (isMonitoring) {\r\n      requestAnimationFrame(measure);\r\n    }\r\n  }, [isMonitoring, enableFPSMonitoring, onAlert]);\r\n\r\n  // Memory Monitoring\r\n  const measureMemory = useCallback(() => {\r\n    if (!enableMemoryMonitoring) return;\r\n\r\n    if ('memory' in performance) {\r\n      const {memory} = (performance as any);\r\n      const usagePercent = Math.round((memory.usedJSHeapSize / memory.jsHeapSizeLimit) * 100);\r\n\r\n      setMetrics((prev) => ({ ...prev, memoryUsage: usagePercent }));\r\n\r\n      // Check threshold\r\n      if (usagePercent > PERFORMANCE_THRESHOLDS.memoryUsage) {\r\n        onAlert?.('memory', usagePercent, PERFORMANCE_THRESHOLDS.memoryUsage);\r\n      }\r\n    }\r\n  }, [enableMemoryMonitoring, onAlert]);\r\n\r\n  // Network Latency Monitoring\r\n  const measureNetworkLatency = useCallback(async () => {\r\n    if (!enableNetworkMonitoring) return;\r\n\r\n    const startTime = performance.now();\r\n\r\n    try {\r\n      await fetch('/favicon.svg', {\r\n        method: 'HEAD',\r\n        cache: 'no-cache',\r\n      });\r\n\r\n      const latency = Math.round(performance.now() - startTime);\r\n      setMetrics((prev) => ({ ...prev, networkLatency: latency }));\r\n\r\n      // Check threshold\r\n      if (latency > PERFORMANCE_THRESHOLDS.networkLatency) {\r\n        onAlert?.('network', latency, PERFORMANCE_THRESHOLDS.networkLatency);\r\n      }\r\n    } catch (error) {\r\n      logger.warn('Network latency measurement failed:', error);\r\n      setMetrics((prev) => ({ ...prev, networkLatency: -1 }));\r\n    }\r\n  }, [enableNetworkMonitoring, onAlert]);\r\n\r\n  // Render Time Monitoring\r\n  const measureRenderTime = useCallback(() => {\r\n    const renderStart = performance.now();\r\n\r\n    requestAnimationFrame(() => {\r\n      const renderTime = Math.round(performance.now() - renderStart);\r\n      setMetrics((prev) => ({ ...prev, renderTime }));\r\n\r\n      // Check threshold\r\n      if (renderTime > PERFORMANCE_THRESHOLDS.renderTime) {\r\n        onAlert?.('render', renderTime, PERFORMANCE_THRESHOLDS.renderTime);\r\n      }\r\n    });\r\n  }, [onAlert]);\r\n\r\n  // Error Monitoring\r\n  useEffect(() => {\r\n    const handleError = () => {\r\n      errorCountRef.current++;\r\n      setMetrics((prev) => ({ ...prev, errorCount: errorCountRef.current }));\r\n\r\n      // Check threshold\r\n      if (errorCountRef.current > PERFORMANCE_THRESHOLDS.errorCount) {\r\n        onAlert?.('errors', errorCountRef.current, PERFORMANCE_THRESHOLDS.errorCount);\r\n      }\r\n    };\r\n\r\n    const handleUnhandledRejection = () => {\r\n      errorCountRef.current++;\r\n      setMetrics((prev) => ({ ...prev, errorCount: errorCountRef.current }));\r\n    };\r\n\r\n    window.addEventListener('error', handleError);\r\n    window.addEventListener('unhandledrejection', handleUnhandledRejection);\r\n\r\n    return () => {\r\n      window.removeEventListener('error', handleError);\r\n      window.removeEventListener('unhandledrejection', handleUnhandledRejection);\r\n    };\r\n  }, [onAlert]);\r\n\r\n  // Core Web Vitals\r\n  const measureCoreWebVitals = useCallback(() => {\r\n    // Largest Contentful Paint\r\n    new PerformanceObserver((list) => {\r\n      const entries = list.getEntries();\r\n      const lastEntry = entries[entries.length - 1];\r\n      setMetrics((prev) => ({ ...prev, loadTime: Math.round(lastEntry.startTime) }));\r\n    }).observe({ entryTypes: ['largest-contentful-paint'] });\r\n\r\n    // First Input Delay\r\n    new PerformanceObserver((list) => {\r\n      list.getEntries().forEach((entry) => {\r\n        // Type guard to ensure we have the correct entry type\r\n        if ('processingStart' in entry) {\r\n          const eventEntry = entry as PerformanceEventTiming;\r\n          const fid = eventEntry.processingStart - eventEntry.startTime;\r\n          logger.info('First Input Delay:', fid);\r\n        }\r\n      });\r\n    }).observe({ entryTypes: ['first-input'] });\r\n\r\n    // Cumulative Layout Shift\r\n    new PerformanceObserver((list) => {\r\n      let cumulativeScore = 0;\r\n      list.getEntries().forEach((entry) => {\r\n        // Type guard for LayoutShift entry\r\n        if (entry.entryType === 'layout-shift') {\r\n          const layoutShiftEntry = entry as any; // Use any for layout-shift entries as the interface may not be available\r\n          if (!layoutShiftEntry.hadRecentInput) {\r\n            cumulativeScore += layoutShiftEntry.value ?? 0;\r\n          }\r\n        }\r\n      });\r\n      logger.info('Cumulative Layout Shift:', cumulativeScore);\r\n    }).observe({ entryTypes: ['layout-shift'] });\r\n  }, []);\r\n\r\n  // Start monitoring\r\n  const startMonitoring = useCallback(() => {\r\n    setIsMonitoring(true);\r\n    measureCoreWebVitals();\r\n  }, [measureCoreWebVitals]);\r\n\r\n  // Stop monitoring\r\n  const stopMonitoring = useCallback(() => {\r\n    setIsMonitoring(false);\r\n    if (intervalRef.current) {\r\n      clearInterval(intervalRef.current);\r\n    }\r\n  }, []);\r\n\r\n  // Main monitoring loop\r\n  useEffect(() => {\r\n    if (!isMonitoring) return;\r\n\r\n    intervalRef.current = setInterval(() => {\r\n      measureMemory();\r\n      measureNetworkLatency();\r\n      measureRenderTime();\r\n\r\n      // Update history\r\n      setHistory((prev) => {\r\n        const newMetrics = { ...metrics, timestamp: Date.now() };\r\n        const newHistory = [...prev, newMetrics];\r\n        return newHistory.slice(-50); // Keep last 50 measurements\r\n      });\r\n    }, interval);\r\n\r\n    measureFPS();\r\n\r\n    return () => {\r\n      if (intervalRef.current) {\r\n        clearInterval(intervalRef.current);\r\n      }\r\n    };\r\n  }, [\r\n    isMonitoring,\r\n    interval,\r\n    measureFPS,\r\n    measureMemory,\r\n    measureNetworkLatency,\r\n    measureRenderTime,\r\n    metrics,\r\n  ]);\r\n\r\n  // Get performance summary\r\n  const getPerformanceSummary = useCallback(() => {\r\n    const recentMetrics = history.slice(-10);\r\n    if (recentMetrics.length === 0) return null;\r\n\r\n    const avgFPS = recentMetrics.reduce((sum, m) => sum + m.fps, 0) / recentMetrics.length;\r\n    const avgMemory =\r\n      recentMetrics.reduce((sum, m) => sum + m.memoryUsage, 0) / recentMetrics.length;\r\n    const avgLatency =\r\n      recentMetrics.reduce((sum, m) => sum + m.networkLatency, 0) / recentMetrics.length;\r\n    const avgRenderTime =\r\n      recentMetrics.reduce((sum, m) => sum + m.renderTime, 0) / recentMetrics.length;\r\n\r\n    return {\r\n      averages: {\r\n        fps: Math.round(avgFPS),\r\n        memory: Math.round(avgMemory),\r\n        latency: Math.round(avgLatency),\r\n        renderTime: Math.round(avgRenderTime),\r\n      },\r\n      trends: {\r\n        fps: recentMetrics[recentMetrics.length - 1]?.fps > avgFPS ? 'up' : 'down',\r\n        memory: recentMetrics[recentMetrics.length - 1]?.memoryUsage < avgMemory ? 'up' : 'down',\r\n        latency:\r\n          recentMetrics[recentMetrics.length - 1]?.networkLatency < avgLatency ? 'up' : 'down',\r\n      },\r\n    };\r\n  }, [history]);\r\n\r\n  // Reset monitoring data\r\n  const resetMonitoring = useCallback(() => {\r\n    setHistory([]);\r\n    errorCountRef.current = 0;\r\n    setMetrics({\r\n      fps: 60,\r\n      memoryUsage: 0,\r\n      loadTime: 0,\r\n      renderTime: 0,\r\n      networkLatency: 0,\r\n      errorCount: 0,\r\n      timestamp: Date.now(),\r\n    });\r\n  }, []);\r\n\r\n  // Get performance status\r\n  const getPerformanceStatus = useCallback(() => {\r\n    const issues = [];\r\n\r\n    if (metrics.fps < PERFORMANCE_THRESHOLDS.fps) issues.push('D├╝┼ş├╝k FPS');\r\n    if (metrics.memoryUsage > PERFORMANCE_THRESHOLDS.memoryUsage) issues.push('Y├╝ksek Memory');\r\n    if (metrics.networkLatency > PERFORMANCE_THRESHOLDS.networkLatency)\r\n      issues.push('Yava┼ş Network');\r\n    if (metrics.renderTime > PERFORMANCE_THRESHOLDS.renderTime) issues.push('Yava┼ş Render');\r\n\r\n    return {\r\n      status: issues.length === 0 ? 'excellent' : issues.length < 2 ? 'good' : 'poor',\r\n      issues,\r\n    };\r\n  }, [metrics]);\r\n\r\n  const performanceStatus = getPerformanceStatus();\r\n\r\n  return {\r\n    metrics,\r\n    history,\r\n    isMonitoring,\r\n    performanceStatus,\r\n    summary: getPerformanceSummary(),\r\n    startMonitoring,\r\n    stopMonitoring,\r\n    resetMonitoring,\r\n    toggleMonitoring: () => {\r\n      isMonitoring ? stopMonitoring() : startMonitoring();\r\n    },\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\usePerformanceOptimization.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":30,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":30,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[910,913],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[910,913],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":69,"column":5,"nodeType":"Identifier","messageId":"neverNullish","endLine":69,"endColumn":16},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":168,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4168,4171],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4168,4171],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":182,"column":20,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":182,"endColumn":22,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4581,4583],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"react/no-children-prop","severity":2,"message":"Do not pass children as props. Instead, pass them as additional arguments to React.createElement.","line":182,"column":31,"nodeType":"CallExpression","messageId":"passChildrenAsArgs","endLine":182,"endColumn":89}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview usePerformanceOptimization Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport React, { useCallback, useEffect, useRef, useState } from 'react';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\n/**\r\n * Performance optimization hook for the NGO management system\r\n * Handles memory management, debouncing, and efficient re-renders\r\n */\r\n/**\r\n * usePerformanceOptimization function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function usePerformanceOptimization() {\r\n  const rafId = useRef<number | null>(null);\r\n  const mounted = useRef(true);\r\n  const [isLowMemory, setIsLowMemory] = useState(false);\r\n\r\n  // Memory monitoring for mobile devices\r\n  useEffect(() => {\r\n    const checkMemory = () => {\r\n      if ('memory' in performance) {\r\n        const memInfo = (performance as any).memory;\r\n        const memoryRatio = memInfo.usedJSHeapSize / memInfo.jsHeapSizeLimit;\r\n        setIsLowMemory(memoryRatio > 0.8);\r\n      }\r\n    };\r\n\r\n    // Check memory every 30 seconds\r\n    const interval = setInterval(checkMemory, 30000);\r\n    checkMemory();\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  // Optimized RAF function\r\n  const requestFrame = useCallback((callback: () => void) => {\r\n    if (rafId.current) {\r\n      cancelAnimationFrame(rafId.current);\r\n    }\r\n    rafId.current = requestAnimationFrame(() => {\r\n      if (mounted.current) {\r\n        callback();\r\n      }\r\n    });\r\n  }, []);\r\n\r\n  // Memory cleanup on unmount\r\n  useEffect(() => {\r\n    return () => {\r\n      mounted.current = false;\r\n      if (rafId.current) {\r\n        cancelAnimationFrame(rafId.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  // Low memory mode optimizations\r\n  const shouldReduceAnimations =\r\n    isLowMemory ?? window.matchMedia('(prefers-reduced-motion: reduce)').matches;\r\n\r\n  return {\r\n    isLowMemory,\r\n    shouldReduceAnimations,\r\n    requestFrame,\r\n    mounted,\r\n  };\r\n}\r\n\r\n/**\r\n * Optimized state management hook with debouncing\r\n */\r\n/**\r\n * useOptimizedState function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useOptimizedState<T>(\r\n  initialValue: T,\r\n  debounceMs = 100,\r\n): [T, (value: T) => void, T] {\r\n  const [value, setValue] = useState<T>(initialValue);\r\n  const [debouncedValue, setDebouncedValue] = useState<T>(initialValue);\r\n  const timeoutRef = useRef<NodeJS.Timeout | null>(null);\r\n\r\n  const setOptimizedValue = useCallback(\r\n    (newValue: T) => {\r\n      setValue(newValue);\r\n\r\n      if (timeoutRef.current) {\r\n        clearTimeout(timeoutRef.current);\r\n      }\r\n\r\n      timeoutRef.current = setTimeout(() => {\r\n        setDebouncedValue(newValue);\r\n      }, debounceMs);\r\n    },\r\n    [debounceMs],\r\n  );\r\n\r\n  useEffect(() => {\r\n    return () => {\r\n      if (timeoutRef.current) {\r\n        clearTimeout(timeoutRef.current);\r\n      }\r\n    };\r\n  }, []);\r\n\r\n  return [value, setOptimizedValue, debouncedValue];\r\n}\r\n\r\n/**\r\n * Component visibility optimization hook\r\n */\r\n/**\r\n * useVisibilityOptimization function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useVisibilityOptimization(elementRef: React.RefObject<HTMLElement>) {\r\n  const [isVisible, setIsVisible] = useState(true);\r\n  const observerRef = useRef<IntersectionObserver | null>(null);\r\n\r\n  useEffect(() => {\r\n    const element = elementRef.current;\r\n    if (!element || !('IntersectionObserver' in window)) {\r\n      return;\r\n    }\r\n\r\n    observerRef.current = new IntersectionObserver(\r\n      (entries) => {\r\n        entries.forEach((entry) => {\r\n          setIsVisible(entry.isIntersecting);\r\n        });\r\n      },\r\n      {\r\n        rootMargin: '50px',\r\n        threshold: 0.1,\r\n      },\r\n    );\r\n\r\n    observerRef.current.observe(element);\r\n\r\n    return () => {\r\n      if (observerRef.current) {\r\n        observerRef.current.disconnect();\r\n      }\r\n    };\r\n  }, [elementRef]);\r\n\r\n  return isVisible;\r\n}\r\n\r\n/**\r\n * Bundle size optimization helper\r\n */\r\nexport const createLazyComponent = <T extends React.ComponentType<any>>(\r\n  importFn: () => Promise<{ default: T } | T>,\r\n  fallback?: React.ComponentType,\r\n) => {\r\n  return React.lazy(async () => {\r\n    try {\r\n      const module = await importFn();\r\n      return {\r\n        default: 'default' in module ? module.default : module,\r\n      };\r\n    } catch (error) {\r\n      logger.warn('Component lazy loading failed:', error);\r\n      return {\r\n        default:\r\n          fallback || ((() => React.createElement('div', { children: 'Y├╝kleme hatas─▒' })) as T),\r\n      };\r\n    }\r\n  });\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\usePermissions.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\usePushNotifications.ts","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'../services/pushNotificationService' import is duplicated.","line":8,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":8,"endColumn":79}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Push Notifications Hook\r\n * React hook for managing push notifications\r\n */\r\n\r\nimport { useCallback, useEffect, useState } from 'react';\r\nimport type { NotificationPayload } from '../services/pushNotificationService';\r\nimport { pushNotificationService } from '../services/pushNotificationService';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\n/**\r\n * UsePushNotificationsReturn Interface\r\n * \r\n * @interface UsePushNotificationsReturn\r\n */\r\nexport interface UsePushNotificationsReturn {\r\n  isSupported: boolean;\r\n  isSubscribed: boolean;\r\n  permission: NotificationPermission;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  subscribe: () => Promise<boolean>;\r\n  unsubscribe: () => Promise<boolean>;\r\n  showNotification: (payload: NotificationPayload) => Promise<void>;\r\n  sendToUser: (userId: string, payload: NotificationPayload) => Promise<boolean>;\r\n  broadcast: (payload: NotificationPayload) => Promise<boolean>;\r\n}\r\n\r\nexport const usePushNotifications = (): UsePushNotificationsReturn => {\r\n  const [isSupported, setIsSupported] = useState(false);\r\n  const [isSubscribed, setIsSubscribed] = useState(false);\r\n  const [permission, setPermission] = useState<NotificationPermission>('default');\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // Initialize service on mount\r\n  useEffect(() => {\r\n    const initializeService = async () => {\r\n      try {\r\n        setIsLoading(true);\r\n        setError(null);\r\n\r\n        // Check if push notifications are supported\r\n        const supported =\r\n          'serviceWorker' in navigator && 'PushManager' in window && 'Notification' in window;\r\n        setIsSupported(supported);\r\n\r\n        if (!supported) {\r\n          setError('Push notifications are not supported in this browser');\r\n          return;\r\n        }\r\n\r\n        // Initialize service\r\n        const initialized = await pushNotificationService.initialize();\r\n        setIsSubscribed(pushNotificationService.isSubscribed());\r\n        setPermission(pushNotificationService.getPermissionStatus());\r\n\r\n        logger.info('Push notification service initialized:', initialized);\r\n      } catch (err) {\r\n        setError(err instanceof Error ? err.message : 'Failed to initialize push notifications');\r\n        logger.error('Push notification initialization error:', err);\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n\r\n    initializeService();\r\n\r\n    // Listen for permission changes\r\n    const handlePermissionChange = () => {\r\n      setPermission(Notification.permission);\r\n    };\r\n\r\n    // Check if permission change event is supported\r\n    if ('permissions' in navigator) {\r\n      navigator.permissions\r\n        .query({ name: 'notifications' as PermissionName })\r\n        .then((permissionStatus) => {\r\n          permissionStatus.addEventListener('change', handlePermissionChange);\r\n          return () => {\r\n            permissionStatus.removeEventListener('change', handlePermissionChange);\r\n          };\r\n        });\r\n    }\r\n  }, []);\r\n\r\n  // Subscribe to push notifications\r\n  const subscribe = useCallback(async (): Promise<boolean> => {\r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n\r\n      const success = await pushNotificationService.subscribe();\r\n      setIsSubscribed(success);\r\n      setPermission(pushNotificationService.getPermissionStatus());\r\n\r\n      if (!success) {\r\n        setError('Failed to subscribe to push notifications');\r\n      }\r\n\r\n      return success;\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to subscribe';\r\n      setError(errorMessage);\r\n      logger.error('Push notification subscription error:', err);\r\n      return false;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Unsubscribe from push notifications\r\n  const unsubscribe = useCallback(async (): Promise<boolean> => {\r\n    try {\r\n      setIsLoading(true);\r\n      setError(null);\r\n\r\n      const success = await pushNotificationService.unsubscribe();\r\n      setIsSubscribed(!success);\r\n\r\n      if (!success) {\r\n        setError('Failed to unsubscribe from push notifications');\r\n      }\r\n\r\n      return success;\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to unsubscribe';\r\n      setError(errorMessage);\r\n      logger.error('Push notification unsubscription error:', err);\r\n      return false;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  // Show local notification\r\n  const showNotification = useCallback(async (payload: NotificationPayload): Promise<void> => {\r\n    try {\r\n      setError(null);\r\n      await pushNotificationService.showNotification(payload);\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to show notification';\r\n      setError(errorMessage);\r\n      logger.error('Show notification error:', err);\r\n      throw err;\r\n    }\r\n  }, []);\r\n\r\n  // Send notification to specific user\r\n  const sendToUser = useCallback(\r\n    async (userId: string, payload: NotificationPayload): Promise<boolean> => {\r\n      try {\r\n        setError(null);\r\n        return await pushNotificationService.sendNotificationToUser(userId, payload);\r\n      } catch (err) {\r\n        const errorMessage = err instanceof Error ? err.message : 'Failed to send notification';\r\n        setError(errorMessage);\r\n        logger.error('Send notification error:', err);\r\n        return false;\r\n      }\r\n    },\r\n    [],\r\n  );\r\n\r\n  // Broadcast notification to all users\r\n  const broadcast = useCallback(async (payload: NotificationPayload): Promise<boolean> => {\r\n    try {\r\n      setError(null);\r\n      return await pushNotificationService.broadcastNotification(payload);\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Failed to broadcast notification';\r\n      setError(errorMessage);\r\n      logger.error('Broadcast notification error:', err);\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  return {\r\n    isSupported,\r\n    isSubscribed,\r\n    permission,\r\n    isLoading,\r\n    error,\r\n    subscribe,\r\n    unsubscribe,\r\n    showNotification,\r\n    sendToUser,\r\n    broadcast,\r\n  };\r\n};\r\n\r\nexport default usePushNotifications;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\useSafeMobile.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\useSearch.ts","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'../types/search' import is duplicated.","line":17,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":17,"endColumn":52},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[922,925],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[922,925],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":34,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":34,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[940,943],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[940,943],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":69,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":69,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2516,2518],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":92,"column":47,"nodeType":"MemberExpression","endLine":92,"endColumn":69},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":110,"column":22,"nodeType":"MemberExpression","endLine":110,"endColumn":49},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4119,4122],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4119,4122],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":121,"column":53,"nodeType":"MemberExpression","endLine":121,"endColumn":67},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":125,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":125,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4309,4312],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4309,4312],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":306,"column":32,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":306,"endColumn":34,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10258,10260],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":317,"column":5,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":317,"endColumn":72},{"ruleId":"@typescript-eslint/no-confusing-void-expression","severity":2,"message":"Returning a void expression from an arrow function shorthand is forbidden. Please add braces to the arrow function.","line":319,"column":46,"nodeType":"CallExpression","messageId":"invalidVoidExprArrow","endLine":319,"endColumn":84},{"ruleId":"no-unused-expressions","severity":2,"message":"Expected an assignment or function call and instead saw an expression.","line":326,"column":7,"nodeType":"ExpressionStatement","messageId":"unusedExpression","endLine":326,"endColumn":74},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":335,"column":87,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":335,"endColumn":104}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview useSearch Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { useState, useCallback, useRef, useEffect, useMemo } from 'react';\r\nimport { useDebounce } from './useDebounce';\r\nimport type {\r\n  SearchState,\r\n  SearchConfig,\r\n  FilterValue,\r\n  SortConfig,\r\n  SearchResult,\r\n} from '../types/search';\r\nimport { TURKISH_CHAR_MAP } from '../types/search';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\ninterface UseSearchProps<T = unknown> {\r\n  config: SearchConfig;\r\n  data?: T[];\r\n  onSearch?: (\r\n    query: string,\r\n    filters: FilterValue[],\r\n    sort: SortConfig,\r\n  ) => Promise<SearchResult<T>> | SearchResult<T>;\r\n  initialQuery?: string;\r\n  initialFilters?: FilterValue[];\r\n  initialSort?: SortConfig;\r\n}\r\n\r\n// Filter operator functions map for better performance and maintainability\r\nconst filterOperators = new Map<string, (value: any, filterValue: any) => boolean>([\r\n  ['eq', (value, filterValue) => value === filterValue],\r\n  ['ne', (value, filterValue) => value !== filterValue],\r\n  ['gt', (value, filterValue) => Number(value) > Number(filterValue)],\r\n  ['gte', (value, filterValue) => Number(value) >= Number(filterValue)],\r\n  ['lt', (value, filterValue) => Number(value) < Number(filterValue)],\r\n  ['lte', (value, filterValue) => Number(value) <= Number(filterValue)],\r\n  ['contains', (value, filterValue) => String(value).toLowerCase().includes(String(filterValue).toLowerCase())],\r\n  ['startsWith', (value, filterValue) => String(value).toLowerCase().startsWith(String(filterValue).toLowerCase())],\r\n  ['endsWith', (value, filterValue) => String(value).toLowerCase().endsWith(String(filterValue).toLowerCase())],\r\n  ['in', (value, filterValue) => Array.isArray(filterValue) && filterValue.includes(value)],\r\n  ['between', (value, filterValue) => {\r\n    if (!Array.isArray(filterValue) || filterValue.length !== 2) return false;\r\n    const numValue = Number(value);\r\n    return numValue >= Number(filterValue[0]) && numValue <= Number(filterValue[1]);\r\n  }],\r\n]);\r\n\r\n/**\r\n * useSearch function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useSearch<T = unknown>({\r\n  config,\r\n  data = [],\r\n  onSearch,\r\n  initialQuery = '',\r\n  initialFilters = [],\r\n  initialSort,\r\n}: UseSearchProps<T>) {\r\n  const [searchState, setSearchState] = useState<SearchState>({\r\n    query: initialQuery,\r\n    filters: initialFilters,\r\n      sort: initialSort ?? (config.defaultSort || { field: 'id', direction: 'desc' }),\r\n    currentPage: 1,\r\n    totalPages: 1,\r\n    totalItems: 0,\r\n    itemsPerPage: config.itemsPerPage ?? 20,\r\n    isLoading: false,\r\n    results: [],\r\n    hasMore: false,\r\n    lastSearchTime: null,\r\n  });\r\n\r\n  const searchTimeoutRef = useRef<NodeJS.Timeout>();\r\n  const abortControllerRef = useRef<AbortController>();\r\n\r\n  // Debounced search query\r\n  const debouncedQuery = useDebounce(searchState.query, config.debounceMs ?? 300);\r\n\r\n  // Turkish character normalization\r\n  const normalizeText = useCallback(\r\n    (text: string): string => {\r\n      if (!config.enableTurkishSearch) return text.toLowerCase().trim();\r\n      return text\r\n        .toLowerCase()\r\n        .replace(/[├ğ─ş─▒├Â┼ş├╝├ç─ŞI├û┼Ş├£]/g, (char) => TURKISH_CHAR_MAP[char] ?? char)\r\n        .trim();\r\n    },\r\n    [config.enableTurkishSearch],\r\n  );\r\n\r\n  // Fuzzy search implementation\r\n  const fuzzyMatch = useCallback(\r\n    (query: string, target: string): boolean => {\r\n      if (!config.enableFuzzySearch) {\r\n        return normalizeText(target).includes(normalizeText(query));\r\n      }\r\n\r\n      const normalizedQuery = normalizeText(query);\r\n      const normalizedTarget = normalizeText(target);\r\n      let queryIndex = 0;\r\n\r\n      for (const char of normalizedTarget) {\r\n        if (char === normalizedQuery[queryIndex]) queryIndex++;\r\n        if (queryIndex === normalizedQuery.length) break;\r\n      }\r\n\r\n      return queryIndex === normalizedQuery.length;\r\n    },\r\n    [config.enableFuzzySearch, normalizeText],\r\n  );\r\n\r\n  // Optimized nested value getter\r\n  const getNestedValue = useCallback((obj: any, path: string) => {\r\n    return path.split('.').reduce((current, key) => current?.[key], obj);\r\n  }, []);\r\n\r\n  // Optimized filter application\r\n  const applyFilter = useCallback((value: any, filter: FilterValue): boolean => {\r\n    if (value == null) return false;\r\n    const { operator = 'eq', value: filterValue } = filter;\r\n    const operatorFn = filterOperators.get(operator);\r\n    return operatorFn ? operatorFn(value, filterValue) : true;\r\n  }, []);\r\n\r\n  // Optimized sort function\r\n  const sortItems = useCallback((items: T[], sort: SortConfig) => {\r\n    if (!sort.field) return items;\r\n\r\n    return [...items].sort((a, b) => {\r\n      const aValue = getNestedValue(a, sort.field);\r\n      const bValue = getNestedValue(b, sort.field);\r\n\r\n        if (aValue == null || bValue == null) {\r\n        return (aValue == null ? 1 : 0) - (bValue == null ? 1 : 0);\r\n      }\r\n\r\n      const comparison = typeof aValue === 'string' && typeof bValue === 'string'\r\n        ? aValue.localeCompare(bValue, 'tr')\r\n        : typeof aValue === 'number' && typeof bValue === 'number'\r\n        ? aValue - bValue\r\n        : aValue instanceof Date && bValue instanceof Date\r\n        ? aValue.getTime() - bValue.getTime()\r\n        : String(aValue).localeCompare(String(bValue), 'tr');\r\n\r\n      return sort.direction === 'desc' ? -comparison : comparison;\r\n    });\r\n  }, [getNestedValue]);\r\n\r\n  // Local search implementation\r\n  const performLocalSearch = useCallback(\r\n    (query: string, filters: FilterValue[], sort: SortConfig, page = 1): SearchResult => {\r\n      const startTime = performance.now();\r\n\r\n      // Apply text search\r\n      const textFiltered = query.trim()\r\n        ? data.filter((item) =>\r\n            config.searchableFields.some((field) => {\r\n              const value = getNestedValue(item, field);\r\n              return value != null && fuzzyMatch(query, String(value));\r\n            })\r\n          )\r\n        : data;\r\n\r\n      // Apply filters\r\n      const filtered = filters.length\r\n        ? textFiltered.filter((item) =>\r\n            filters.every((filter) => applyFilter(getNestedValue(item, filter.field), filter))\r\n          )\r\n        : textFiltered;\r\n\r\n      // Apply sorting\r\n      const sorted = sortItems(filtered, sort);\r\n\r\n      const totalCount = sorted.length;\r\n      const startIndex = (page - 1) * searchState.itemsPerPage;\r\n      const endIndex = startIndex + searchState.itemsPerPage;\r\n      const pageItems = sorted.slice(startIndex, endIndex);\r\n\r\n      return {\r\n        items: pageItems,\r\n        totalCount,\r\n        filteredCount: totalCount,\r\n        searchTime: performance.now() - startTime,\r\n      };\r\n    },\r\n    [\r\n      data,\r\n      config.searchableFields,\r\n      fuzzyMatch,\r\n      getNestedValue,\r\n      applyFilter,\r\n      sortItems,\r\n      searchState.itemsPerPage,\r\n    ],\r\n  );\r\n\r\n  // Execute search with optimized error handling\r\n  const executeSearch = useCallback(\r\n    async (\r\n      query: string = searchState.query,\r\n      filters: FilterValue[] = searchState.filters,\r\n      sort: SortConfig = searchState.sort,\r\n      page = 1,\r\n      append = false,\r\n    ) => {\r\n      abortControllerRef.current?.abort();\r\n      abortControllerRef.current = new AbortController();\r\n\r\n      setSearchState((prev) => ({ ...prev, isLoading: true }));\r\n\r\n      try {\r\n        const result = onSearch\r\n          ? await onSearch(query, filters, sort)\r\n          : performLocalSearch(query, filters, sort, page);\r\n\r\n        const totalPages = Math.ceil(result.totalCount / searchState.itemsPerPage);\r\n\r\n        setSearchState((prev) => ({\r\n          ...prev,\r\n          results: append ? [...prev.results, ...result.items] : result.items,\r\n          totalItems: result.totalCount,\r\n          totalPages,\r\n          currentPage: page,\r\n          hasMore: page < totalPages,\r\n          isLoading: false,\r\n          lastSearchTime: new Date(),\r\n        }));\r\n\r\n        return result;\r\n      } catch (error) {\r\n        if (error instanceof Error && error.name !== 'AbortError') {\r\n          logger.error('Search error:', error);\r\n          setSearchState((prev) => ({\r\n            ...prev,\r\n            isLoading: false,\r\n            results: [],\r\n            totalItems: 0,\r\n            totalPages: 1,\r\n            hasMore: false,\r\n          }));\r\n        }\r\n        throw error;\r\n      }\r\n    },\r\n    [searchState.query, searchState.filters, searchState.sort, searchState.itemsPerPage, onSearch, performLocalSearch],\r\n  );\r\n\r\n  // Optimized state update functions\r\n  const setQuery = useCallback((query: string) => {\r\n    setSearchState((prev) => ({ ...prev, query, currentPage: 1 }));\r\n  }, []);\r\n\r\n  const setFilters = useCallback((filters: FilterValue[]) => {\r\n    setSearchState((prev) => ({ ...prev, filters, currentPage: 1 }));\r\n  }, []);\r\n\r\n  const addFilter = useCallback((filter: FilterValue) => {\r\n    setSearchState((prev) => {\r\n      const existingIndex = prev.filters.findIndex((f) => f.field === filter.field);\r\n      const newFilters = existingIndex >= 0\r\n        ? prev.filters.map((f, i) => (i === existingIndex ? filter : f))\r\n        : [...prev.filters, filter];\r\n      return { ...prev, filters: newFilters, currentPage: 1 };\r\n    });\r\n  }, []);\r\n\r\n  const removeFilter = useCallback((field: string) => {\r\n    setSearchState((prev) => ({\r\n      ...prev,\r\n      filters: prev.filters.filter((f) => f.field !== field),\r\n      currentPage: 1,\r\n    }));\r\n  }, []);\r\n\r\n  const clearFilters = useCallback(() => {\r\n    setSearchState((prev) => ({ ...prev, filters: [], currentPage: 1 }));\r\n  }, []);\r\n\r\n  const setSort = useCallback((sort: SortConfig) => {\r\n    setSearchState((prev) => ({ ...prev, sort, currentPage: 1 }));\r\n  }, []);\r\n\r\n  const loadMore = useCallback(() => {\r\n      if (!searchState.hasMore || searchState.isLoading) return;\r\n    executeSearch(\r\n      searchState.query,\r\n      searchState.filters,\r\n      searchState.sort,\r\n      searchState.currentPage + 1,\r\n      true,\r\n    );\r\n  }, [searchState, executeSearch]);\r\n\r\n  const reset = useCallback(() => {\r\n    setSearchState((prev) => ({\r\n      ...prev,\r\n      query: '',\r\n      filters: [],\r\n      sort: config.defaultSort || { field: 'id', direction: 'desc' },\r\n      currentPage: 1,\r\n      results: [],\r\n      totalItems: 0,\r\n      totalPages: 1,\r\n      hasMore: false,\r\n    }));\r\n  }, [config.defaultSort]);\r\n\r\n  // Auto-search effect with cleanup\r\n  useEffect(() => {\r\n    searchTimeoutRef.current && clearTimeout(searchTimeoutRef.current);\r\n    searchTimeoutRef.current = setTimeout(() => executeSearch(), 100);\r\n    return () => searchTimeoutRef.current && clearTimeout(searchTimeoutRef.current);\r\n  }, [debouncedQuery, searchState.filters, searchState.sort, executeSearch]);\r\n\r\n  // Cleanup effect\r\n  useEffect(() => {\r\n    return () => {\r\n      abortControllerRef.current?.abort();\r\n      searchTimeoutRef.current && clearTimeout(searchTimeoutRef.current);\r\n    };\r\n  }, []);\r\n\r\n  // Memoized computed values with optimized dependencies\r\n  const computedValues = useMemo(\r\n    () => ({\r\n      hasActiveFilters: searchState.filters.length > 0,\r\n      hasResults: searchState.results.length > 0,\r\n      isEmpty: Boolean(!searchState.isLoading && searchState.results.length === 0 && (searchState.query ?? searchState.filters.length > 0)),\r\n    }),\r\n    [searchState.filters.length, searchState.results.length, searchState.isLoading, searchState.query],\r\n  );\r\n\r\n  return {\r\n    searchState,\r\n    setQuery,\r\n    setFilters,\r\n    addFilter,\r\n    removeFilter,\r\n    clearFilters,\r\n    setSort,\r\n    executeSearch,\r\n    loadMore,\r\n    reset,\r\n    ...computedValues,\r\n    normalizeText,\r\n    fuzzyMatch,\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\useSupabaseConnection.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":37,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":21},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'data' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":37,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":37,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":59,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":59,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1701,1704],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1701,1704],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview useSupabaseConnection Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { supabase } from '../lib/supabase';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\ninterface ConnectionStatus {\r\n  isConnected: boolean;\r\n  isLoading: boolean;\r\n  error: string | null;\r\n  projectUrl: string | null;\r\n}\r\n\r\n/**\r\n * useSupabaseConnection function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useSupabaseConnection(): ConnectionStatus {\r\n  const [status, setStatus] = useState<ConnectionStatus>({\r\n    isConnected: false,\r\n    isLoading: true,\r\n    error: null,\r\n    projectUrl: null,\r\n  });\r\n\r\n  useEffect(() => {\r\n    const testConnection = async () => {\r\n      try {\r\n        // Test basic connection\r\n        const { data, error } = await supabase.from('users').select('count(*)').limit(1);\r\n\r\n        if (error) {\r\n          // If users table doesn't exist, that's still a valid connection\r\n          if (error.message.includes('relation \"public.users\" does not exist')) {\r\n            setStatus({\r\n              isConnected: true,\r\n              isLoading: false,\r\n              error: 'Ba─şlant─▒ ba┼şar─▒l─▒ - Users tablosu hen├╝z olu┼şturulmam─▒┼ş',\r\n              projectUrl: import.meta.env.VITE_SUPABASE_URL,\r\n            });\r\n          } else {\r\n            throw error;\r\n          }\r\n        } else {\r\n          setStatus({\r\n            isConnected: true,\r\n            isLoading: false,\r\n            error: null,\r\n            projectUrl: import.meta.env.VITE_SUPABASE_URL,\r\n          });\r\n        }\r\n      } catch (error: any) {\r\n        logger.error('Supabase connection test failed:', error);\r\n        setStatus({\r\n          isConnected: false,\r\n          isLoading: false,\r\n          error: error.message ?? 'Supabase ba─şlant─▒s─▒ kurulamad─▒',\r\n          projectUrl: null,\r\n        });\r\n      }\r\n    };\r\n\r\n    // Only test if we have valid config\r\n    if (!isSupabaseConfigured()) {\r\n      setStatus({\r\n        isConnected: false,\r\n        isLoading: false,\r\n        error: 'Supabase konfig├╝rasyonu eksik - .env dosyas─▒n─▒ kontrol edin',\r\n        projectUrl: null,\r\n      });\r\n      return;\r\n    }\r\n\r\n    testConnection();\r\n  }, []);\r\n\r\n  return status;\r\n}\r\n\r\n// Utility function to check if Supabase is properly configured\r\n/**\r\n * isSupabaseConfigured function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function isSupabaseConfigured(): boolean {\r\n  const url = import.meta.env.VITE_SUPABASE_URL;\r\n  const key = import.meta.env.VITE_SUPABASE_ANON_KEY;\r\n\r\n  return !!(\r\n    url &&\r\n    key &&\r\n    !url.includes('your-project') &&\r\n    !key.includes('your-anon-key') &&\r\n    url.startsWith('https://') &&\r\n    url.includes('.supabase.co')\r\n  );\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\useSupabaseData.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":43,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":43,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[899,902],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[899,902],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_options' is assigned a value but never used.","line":45,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":45,"endColumn":11},{"ruleId":"@typescript-eslint/no-empty-function","severity":1,"message":"Unexpected empty async method 'refetch'.","line":64,"column":21,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":64,"endColumn":23,"suggestions":[{"messageId":"suggestComment","data":{"name":"async method 'refetch'"},"fix":{"range":[1522,1522],"text":" /* empty */ "},"desc":"Add comment inside empty async method 'refetch'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_id' is defined but never used.","line":71,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":71,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_updates' is defined but never used.","line":77,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":77,"endColumn":30},{"ruleId":"@typescript-eslint/no-empty-function","severity":1,"message":"Unexpected empty async method 'bulkUpdate'.","line":77,"column":32,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":77,"endColumn":34,"suggestions":[{"messageId":"suggestComment","data":{"name":"async method 'bulkUpdate'"},"fix":{"range":[1813,1813],"text":" /* empty */ "},"desc":"Add comment inside empty async method 'bulkUpdate'."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_ids' is defined but never used.","line":78,"column":22,"nodeType":null,"messageId":"unusedVar","endLine":78,"endColumn":26},{"ruleId":"@typescript-eslint/no-empty-function","severity":1,"message":"Unexpected empty async method 'bulkDelete'.","line":78,"column":28,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":78,"endColumn":30,"suggestions":[{"messageId":"suggestComment","data":{"name":"async method 'bulkDelete'"},"fix":{"range":[1845,1845],"text":" /* empty */ "},"desc":"Add comment inside empty async method 'bulkDelete'."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":88,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":88,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2029,2032],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2029,2032],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_options' is assigned a value but never used.","line":90,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":90,"endColumn":11},{"ruleId":"@typescript-eslint/no-empty-function","severity":1,"message":"Unexpected empty async method 'refetch'.","line":110,"column":21,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":110,"endColumn":23,"suggestions":[{"messageId":"suggestComment","data":{"name":"async method 'refetch'"},"fix":{"range":[2482,2482],"text":" /* empty */ "},"desc":"Add comment inside empty async method 'refetch'."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":120,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":120,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2658,2661],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2658,2661],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_options' is assigned a value but never used.","line":123,"column":3,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_query' is defined but never used.","line":134,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":134,"endColumn":24},{"ruleId":"@typescript-eslint/no-empty-function","severity":1,"message":"Unexpected empty async method 'search'.","line":134,"column":34,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":134,"endColumn":36,"suggestions":[{"messageId":"suggestComment","data":{"name":"async method 'search'"},"fix":{"range":[2960,2960],"text":" /* empty */ "},"desc":"Add comment inside empty async method 'search'."}]}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":8,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview useSupabaseData Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\n// Lightweight stubs for Supabase data hooks to satisfy type-checking\r\n// Replace with real implementations as needed\r\n\r\n/**\r\n * OrderByOption Interface\r\n * \r\n * @interface OrderByOption\r\n */\r\nexport interface OrderByOption {\r\n  column: string;\r\n  ascending?: boolean;\r\n}\r\n\r\n/**\r\n * UseSupabaseOptions Interface\r\n * \r\n * @interface UseSupabaseOptions\r\n */\r\nexport interface UseSupabaseOptions {\r\n  select?: string;\r\n  orderBy?: OrderByOption;\r\n  filters?: Record<string, unknown>;\r\n  limit?: number;\r\n  realtime?: boolean;\r\n  pageSize?: number;\r\n  searchQuery?: string;\r\n  searchFields?: string[];\r\n}\r\n\r\n/**\r\n * useSupabaseData function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useSupabaseData<T = any>(\r\n  _table: string,\r\n  _options: UseSupabaseOptions = {},\r\n): {\r\n  data: T[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  count: number;\r\n  refetch: () => Promise<void>;\r\n  insert: (record: Partial<T>) => Promise<T>;\r\n  update: (id: string, record: Partial<T>) => Promise<T>;\r\n  delete: (id: string) => Promise<boolean>;\r\n  bulkInsert: (records: Partial<T>[]) => Promise<T[]>;\r\n  bulkUpdate: (updates: { id: string; data: Partial<T> }[]) => Promise<void>;\r\n  bulkDelete: (ids: string[]) => Promise<void>;\r\n} {\r\n  return {\r\n    data: [],\r\n    loading: false,\r\n    error: null,\r\n    count: 0,\r\n    async refetch() {},\r\n    async insert(record) {\r\n      return record as T;\r\n    },\r\n    async update(_id, record) {\r\n      return record as T;\r\n    },\r\n    async delete(_id) {\r\n      return true;\r\n    },\r\n    async bulkInsert(records) {\r\n      return records as T[];\r\n    },\r\n    async bulkUpdate(_updates) {},\r\n    async bulkDelete(_ids) {},\r\n  };\r\n}\r\n\r\n/**\r\n * useSupabasePagination function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useSupabasePagination<T = any>(\r\n  _table: string,\r\n  _options: UseSupabaseOptions = {},\r\n): {\r\n  data: T[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  count: number;\r\n  page: number;\r\n  setPage: (page: number) => void;\r\n  refetch: () => Promise<void>;\r\n} {\r\n  let currentPage = 1;\r\n  return {\r\n    data: [],\r\n    loading: false,\r\n    error: null,\r\n    count: 0,\r\n    page: currentPage,\r\n    setPage(page: number) {\r\n      currentPage = page;\r\n    },\r\n    async refetch() {},\r\n  };\r\n}\r\n\r\n/**\r\n * useSupabaseSearch function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useSupabaseSearch<T = any>(\r\n  _table: string,\r\n  _fields: string[],\r\n  _options: UseSupabaseOptions = {},\r\n): {\r\n  data: T[];\r\n  loading: boolean;\r\n  error: string | null;\r\n  search: (query: string) => Promise<void>;\r\n} {\r\n  return {\r\n    data: [],\r\n    loading: false,\r\n    error: null,\r\n    async search(_query: string) {},\r\n  };\r\n}\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\useTokenRefresh.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\useTouchDevice.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\hooks\\useUserManagement.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'loadStats'. Either include it or remove the dependency array.","line":135,"column":6,"nodeType":"ArrayExpression","endLine":135,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadStats]","fix":{"range":[4006,4008],"text":"[loadStats]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'loadStats'. Either include it or remove the dependency array.","line":166,"column":5,"nodeType":"ArrayExpression","endLine":166,"endColumn":7,"suggestions":[{"desc":"Update the dependencies array to be: [loadStats]","fix":{"range":[4869,4871],"text":"[loadStats]"}}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has a missing dependency: 'loadStats'. Either include it or remove the dependency array.","line":198,"column":5,"nodeType":"ArrayExpression","endLine":198,"endColumn":12,"suggestions":[{"desc":"Update the dependencies array to be: [loadStats, users]","fix":{"range":[5701,5708],"text":"[loadStats, users]"}}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":287,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":287,"endColumn":41},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'id' is defined but never used. Allowed unused args must match /^_/u.","line":287,"column":39,"nodeType":null,"messageId":"unusedVar","endLine":287,"endColumn":41},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useEffect has missing dependencies: 'loadActivities', 'loadStats', and 'loadUsers'. Either include them or remove the dependency array.","line":299,"column":6,"nodeType":"ArrayExpression","endLine":299,"endColumn":8,"suggestions":[{"desc":"Update the dependencies array to be: [loadActivities, loadStats, loadUsers]","fix":{"range":[8536,8538],"text":"[loadActivities, loadStats, loadUsers]"}}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview useUserManagement Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\n// ­şæÑ USER MANAGEMENT HOOK\r\n// Real-time user management with Supabase integration\r\n\r\nimport { useState, useEffect, useCallback } from 'react';\r\nimport { toast } from 'sonner';\r\nimport { logger } from '../lib/logging/logger';\r\nimport {\r\n  userManagementService,\r\n  type ManagedUser,\r\n  type CreateUserRequest,\r\n  type UpdateUserRequest,\r\n  type UserFilters,\r\n  type UserListResponse,\r\n  type UserActivity,\r\n} from '../services/userManagementService';\r\n\r\ninterface UseUserManagementReturn {\r\n  // State\r\n  readonly users: readonly ManagedUser[];\r\n  readonly activities: readonly UserActivity[];\r\n  readonly loading: boolean;\r\n  readonly error: string | null;\r\n  readonly totalUsers: number;\r\n  readonly currentPage: number;\r\n  readonly totalPages: number;\r\n  readonly stats: {\r\n    readonly total: number;\r\n    readonly active: number;\r\n    readonly inactive: number;\r\n    readonly pending: number;\r\n    readonly suspended: number;\r\n  };\r\n\r\n  // Actions\r\n  readonly loadUsers: (filters?: UserFilters) => Promise<void>;\r\n  readonly createUser: (request: CreateUserRequest) => Promise<ManagedUser>;\r\n  readonly updateUser: (id: string, request: UpdateUserRequest) => Promise<ManagedUser>;\r\n  readonly deleteUser: (id: string) => Promise<void>;\r\n  readonly resetPassword: (id: string, newPassword?: string) => Promise<void>;\r\n  readonly loadActivities: (userId?: string) => Promise<void>;\r\n  readonly loadStats: () => Promise<void>;\r\n  readonly refreshData: () => Promise<void>;\r\n\r\n  // Utilities\r\n  readonly clearError: () => void;\r\n  readonly getUserById: (id: string) => ManagedUser | undefined;\r\n  readonly isUserSelected: (id: string) => boolean;\r\n}\r\n\r\n/**\r\n * useUserManagement function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function useUserManagement(): UseUserManagementReturn {\r\n  const [users, setUsers] = useState<ManagedUser[]>([]);\r\n  const [activities, setActivities] = useState<UserActivity[]>([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [currentFilters, setCurrentFilters] = useState<UserFilters>({});\r\n  const [stats, setStats] = useState({\r\n    total: 0,\r\n    active: 0,\r\n    inactive: 0,\r\n    pending: 0,\r\n    suspended: 0,\r\n  });\r\n  const [pagination, setPagination] = useState({\r\n    currentPage: 1,\r\n    totalPages: 1,\r\n    total: 0,\r\n  });\r\n\r\n  /**\r\n   * Load users with filters\r\n   */\r\n  const loadUsers = useCallback(async (filters: UserFilters = {}) => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const response: UserListResponse = await userManagementService.getUsers(filters);\r\n\r\n      setUsers([...response.users]);\r\n      setPagination({\r\n        currentPage: response.page,\r\n        totalPages: response.totalPages,\r\n        total: response.total,\r\n      });\r\n      setCurrentFilters(filters);\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Kullan─▒c─▒lar y├╝klenemedi';\r\n      setError(errorMessage);\r\n      toast.error(errorMessage);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * Create new user\r\n   */\r\n  const createUser = useCallback(async (request: CreateUserRequest): Promise<ManagedUser> => {\r\n    setLoading(true);\r\n    setError(null);\r\n\r\n    try {\r\n      const newUser = await userManagementService.createUser(request);\r\n\r\n      // Add to local state\r\n      setUsers((prev) => [newUser, ...prev]);\r\n\r\n      toast.success(`Kullan─▒c─▒ ${newUser.name} ba┼şar─▒yla olu┼şturuldu`);\r\n\r\n      // Refresh stats\r\n      await loadStats();\r\n\r\n      return newUser;\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Kullan─▒c─▒ olu┼şturulamad─▒';\r\n      setError(errorMessage);\r\n      toast.error(errorMessage);\r\n      throw err;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * Update user\r\n   */\r\n  const updateUser = useCallback(\r\n    async (id: string, request: UpdateUserRequest): Promise<ManagedUser> => {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        const updatedUser = await userManagementService.updateUser(id, request);\r\n\r\n        // Update local state\r\n        setUsers((prev) => prev.map((user) => (user.id === id ? updatedUser : user)));\r\n\r\n        toast.success(`Kullan─▒c─▒ ${updatedUser.name} ba┼şar─▒yla g├╝ncellendi`);\r\n\r\n        // Refresh stats\r\n        await loadStats();\r\n\r\n        return updatedUser;\r\n      } catch (err) {\r\n        const errorMessage = err instanceof Error ? err.message : 'Kullan─▒c─▒ g├╝ncellenemedi';\r\n        setError(errorMessage);\r\n        toast.error(errorMessage);\r\n        throw err;\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n    [],\r\n  );\r\n\r\n  /**\r\n   * Delete user\r\n   */\r\n  const deleteUser = useCallback(\r\n    async (id: string): Promise<void> => {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        const userToDelete = users.find((u) => u.id === id);\r\n\r\n        await userManagementService.deleteUser(id);\r\n\r\n        // Remove from local state\r\n        setUsers((prev) => prev.filter((user) => user.id !== id));\r\n\r\n        toast.success(`Kullan─▒c─▒ ${userToDelete?.name ?? 'bilinmeyen'} ba┼şar─▒yla silindi`);\r\n\r\n        // Refresh stats\r\n        await loadStats();\r\n      } catch (err) {\r\n        const errorMessage = err instanceof Error ? err.message : 'Kullan─▒c─▒ silinemedi';\r\n        setError(errorMessage);\r\n        toast.error(errorMessage);\r\n        throw err;\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n    [users],\r\n  );\r\n\r\n  /**\r\n   * Reset user password\r\n   */\r\n  const resetPassword = useCallback(\r\n    async (id: string, newPassword?: string): Promise<void> => {\r\n      setLoading(true);\r\n      setError(null);\r\n\r\n      try {\r\n        const user = users.find((u) => u.id === id);\r\n\r\n        await userManagementService.resetUserPassword(id, newPassword);\r\n\r\n        toast.success(`${user?.name ?? 'Kullan─▒c─▒'} ┼şifresi s─▒f─▒rland─▒`);\r\n      } catch (err) {\r\n        const errorMessage = err instanceof Error ? err.message : '┼Şifre s─▒f─▒rlanamad─▒';\r\n        setError(errorMessage);\r\n        toast.error(errorMessage);\r\n        throw err;\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    },\r\n    [users],\r\n  );\r\n\r\n  /**\r\n   * Load user activities\r\n   */\r\n  const loadActivities = useCallback(async (userId?: string): Promise<void> => {\r\n    try {\r\n      const userActivities = await userManagementService.getUserActivities(userId, 100);\r\n      setActivities([...userActivities]);\r\n    } catch (err) {\r\n      const errorMessage = err instanceof Error ? err.message : 'Aktiviteler y├╝klenemedi';\r\n      logger.error('Failed to load activities:', errorMessage);\r\n      // Don't show toast for activities as it's not critical\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * Load user statistics\r\n   */\r\n  const loadStats = useCallback(async (): Promise<void> => {\r\n    try {\r\n      const userStats = await userManagementService.getUserStats();\r\n      setStats({\r\n        total: userStats.total,\r\n        active: userStats.active,\r\n        inactive: userStats.inactive,\r\n        pending: userStats.pending,\r\n        suspended: userStats.suspended,\r\n      });\r\n    } catch (err) {\r\n      logger.error('Failed to load user stats:', err);\r\n      // Don't show toast for stats as it's not critical\r\n    }\r\n  }, []);\r\n\r\n  /**\r\n   * Refresh all data\r\n   */\r\n  const refreshData = useCallback(async (): Promise<void> => {\r\n    await Promise.all([loadUsers(currentFilters), loadActivities(), loadStats()]);\r\n  }, [currentFilters, loadUsers, loadActivities, loadStats]);\r\n\r\n  /**\r\n   * Clear error state\r\n   */\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n  }, []);\r\n\r\n  /**\r\n   * Get user by ID from local state\r\n   */\r\n  const getUserById = useCallback(\r\n    (id: string): ManagedUser | undefined => {\r\n      return users.find((user) => user.id === id);\r\n    },\r\n    [users],\r\n  );\r\n\r\n  /**\r\n   * Check if user is selected (for future multi-select functionality)\r\n   */\r\n  const isUserSelected = useCallback((id: string): boolean => {\r\n    // This would be used with a selectedUsers state for bulk operations\r\n    return false;\r\n  }, []);\r\n\r\n  // Initial data load\r\n  useEffect(() => {\r\n    const initializeData = async () => {\r\n      await Promise.all([loadUsers(), loadActivities(), loadStats()]);\r\n    };\r\n\r\n    initializeData();\r\n  }, []);\r\n\r\n  return {\r\n    // State\r\n    users,\r\n    activities,\r\n    loading,\r\n    error,\r\n    totalUsers: pagination.total,\r\n    currentPage: pagination.currentPage,\r\n    totalPages: pagination.totalPages,\r\n    stats,\r\n\r\n    // Actions\r\n    loadUsers,\r\n    createUser,\r\n    updateUser,\r\n    deleteUser,\r\n    resetPassword,\r\n    loadActivities,\r\n    loadStats,\r\n    refreshData,\r\n\r\n    // Utilities\r\n    clearError,\r\n    getUserById,\r\n    isUserSelected,\r\n  };\r\n}\r\n\r\nexport default useUserManagement;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\lib\\__tests__\\utils.test.ts","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":19,"column":47,"nodeType":"MemberExpression","endLine":23,"endColumn":12},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1104,1107],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1104,1107],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":32,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":32,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1114,1117],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1114,1117],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":119,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":119,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4136,4139],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4136,4139],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":184,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":184,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5697,5700],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5697,5700],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":185,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5737,5740],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5737,5740],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, vi, beforeEach, afterEach } from 'vitest';\r\n\r\n// Simple utility functions to test\r\nfunction formatCurrency(amount: number, currency = 'TRY'): string {\r\n  return new Intl.NumberFormat('tr-TR', {\r\n    style: 'currency',\r\n    currency,\r\n  }).format(amount);\r\n}\r\n\r\nfunction validateEmail(email: string): boolean {\r\n  const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n  return emailRegex.test(email);\r\n}\r\n\r\nfunction formatDate(date: Date | string, format = 'short'): string {\r\n  const dateObj = typeof date === 'string' ? new Date(date) : date;\r\n\r\n  const options: Intl.DateTimeFormatOptions = {\r\n    short: { year: 'numeric', month: 'short', day: 'numeric' },\r\n    long: { year: 'numeric', month: 'long', day: 'numeric', weekday: 'long' },\r\n    time: { hour: '2-digit', minute: '2-digit' },\r\n  }[format] || { year: 'numeric', month: 'short', day: 'numeric' };\r\n\r\n  return dateObj.toLocaleDateString('tr-TR', options);\r\n}\r\n\r\nfunction generateId(): string {\r\n  return Math.random().toString(36).substring(2) + Date.now().toString(36);\r\n}\r\n\r\nfunction debounce<T extends (...args: any[]) => any>(\r\n  func: T,\r\n  wait: number,\r\n): (...args: Parameters<T>) => void {\r\n  let timeout: NodeJS.Timeout | null = null;\r\n\r\n  return (...args: Parameters<T>) => {\r\n    if (timeout) clearTimeout(timeout);\r\n    timeout = setTimeout(() => func(...args), wait);\r\n  };\r\n}\r\n\r\ndescribe('Utility Functions', () => {\r\n  describe('formatCurrency', () => {\r\n    it('should format Turkish currency correctly', () => {\r\n      expect(formatCurrency(1000)).toContain('1.000');\r\n      expect(formatCurrency(1000)).toContain('Ôé║');\r\n    });\r\n\r\n    it('should format different currencies', () => {\r\n      expect(formatCurrency(1000, 'USD')).toContain('$');\r\n      expect(formatCurrency(1000, 'EUR')).toContain('Ôé¼');\r\n    });\r\n\r\n    it('should handle decimal amounts', () => {\r\n      expect(formatCurrency(1234.56)).toContain('1.234,56');\r\n    });\r\n\r\n    it('should handle zero amount', () => {\r\n      expect(formatCurrency(0)).toContain('0,00');\r\n    });\r\n\r\n    it('should handle negative amounts', () => {\r\n      expect(formatCurrency(-100)).toContain('-');\r\n      expect(formatCurrency(-100)).toContain('100');\r\n    });\r\n  });\r\n\r\n  describe('validateEmail', () => {\r\n    it('should validate correct email addresses', () => {\r\n      expect(validateEmail('test@example.com')).toBe(true);\r\n      expect(validateEmail('user.name@domain.co.uk')).toBe(true);\r\n      expect(validateEmail('user+tag@example.org')).toBe(true);\r\n    });\r\n\r\n    it('should reject invalid email addresses', () => {\r\n      expect(validateEmail('invalid-email')).toBe(false);\r\n      expect(validateEmail('test@')).toBe(false);\r\n      expect(validateEmail('@example.com')).toBe(false);\r\n      // Note: test..test@example.com is actually valid according to basic regex\r\n      // For stricter validation, we'd need more complex logic\r\n      expect(validateEmail('')).toBe(false);\r\n    });\r\n\r\n    it('should handle edge cases', () => {\r\n      expect(validateEmail('test@example')).toBe(false);\r\n      expect(validateEmail('test @example.com')).toBe(false);\r\n      expect(validateEmail('test@exam ple.com')).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('formatDate', () => {\r\n    const testDate = new Date('2024-01-15T10:30:00');\r\n\r\n    it('should format date in short format by default', () => {\r\n      const formatted = formatDate(testDate);\r\n      expect(formatted).toContain('2024');\r\n      expect(formatted).toContain('15');\r\n    });\r\n\r\n    it('should format date in long format', () => {\r\n      const formatted = formatDate(testDate, 'long');\r\n      expect(formatted).toContain('2024');\r\n      expect(formatted).toContain('15');\r\n    });\r\n\r\n    it('should format time', () => {\r\n      const formatted = formatDate(testDate, 'time');\r\n      expect(formatted).toMatch(/\\d{2}:\\d{2}/);\r\n    });\r\n\r\n    it('should handle string dates', () => {\r\n      const formatted = formatDate('2024-01-15T10:30:00');\r\n      expect(formatted).toContain('2024');\r\n    });\r\n\r\n    it('should handle invalid format gracefully', () => {\r\n      const formatted = formatDate(testDate, 'invalid' as any);\r\n      expect(formatted).toContain('2024');\r\n    });\r\n  });\r\n\r\n  describe('generateId', () => {\r\n    it('should generate unique IDs', () => {\r\n      const id1 = generateId();\r\n      const id2 = generateId();\r\n\r\n      expect(id1).not.toBe(id2);\r\n      expect(typeof id1).toBe('string');\r\n      expect(typeof id2).toBe('string');\r\n    });\r\n\r\n    it('should generate IDs of reasonable length', () => {\r\n      const id = generateId();\r\n      expect(id.length).toBeGreaterThan(5);\r\n      expect(id.length).toBeLessThan(50);\r\n    });\r\n\r\n    it('should generate alphanumeric IDs', () => {\r\n      const id = generateId();\r\n      expect(id).toMatch(/^[a-z0-9]+$/i);\r\n    });\r\n  });\r\n\r\n  describe('debounce', () => {\r\n    beforeEach(() => {\r\n      vi.useFakeTimers();\r\n    });\r\n\r\n    afterEach(() => {\r\n      vi.useRealTimers();\r\n    });\r\n    it('should delay function execution', () => {\r\n      let callCount = 0;\r\n      const fn = () => {\r\n        callCount++;\r\n      };\r\n      const debouncedFn = debounce(fn, 100);\r\n\r\n      debouncedFn();\r\n      expect(callCount).toBe(0);\r\n\r\n      vi.advanceTimersByTime(150);\r\n      expect(callCount).toBe(1);\r\n    });\r\n\r\n    it('should cancel previous calls', () => {\r\n      let callCount = 0;\r\n      const fn = () => {\r\n        callCount++;\r\n      };\r\n      const debouncedFn = debounce(fn, 100);\r\n\r\n      debouncedFn();\r\n      debouncedFn();\r\n      debouncedFn();\r\n\r\n      vi.advanceTimersByTime(150);\r\n      expect(callCount).toBe(1);\r\n    });\r\n\r\n    it('should pass arguments correctly', () => {\r\n      let receivedArgs: any[] = [];\r\n      const fn = (...args: any[]) => {\r\n        receivedArgs = args;\r\n      };\r\n      const debouncedFn = debounce(fn, 50);\r\n\r\n      debouncedFn('test', 123, { key: 'value' });\r\n\r\n      vi.advanceTimersByTime(100);\r\n      expect(receivedArgs).toEqual(['test', 123, { key: 'value' }]);\r\n    });\r\n\r\n    it('should handle multiple rapid calls', () => {\r\n      let callCount = 0;\r\n      const fn = () => {\r\n        callCount++;\r\n      };\r\n      const debouncedFn = debounce(fn, 50);\r\n\r\n      for (let i = 0; i < 10; i++) {\r\n        debouncedFn();\r\n        vi.advanceTimersByTime(10);\r\n      }\r\n\r\n      vi.advanceTimersByTime(100);\r\n      expect(callCount).toBe(1);\r\n    });\r\n  });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\lib\\config.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":25,"column":20,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":25,"endColumn":22,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[703,705],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":25,"column":25,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":25,"endColumn":27,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[708,710],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":25,"column":46,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":25,"endColumn":48,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[729,731],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":26,"column":24,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":26,"endColumn":26,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[787,789],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":26,"column":29,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":26,"endColumn":31,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[792,794],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":26,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":26,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[818,820],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":27,"column":31,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":27,"endColumn":33,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[888,890],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":27,"column":36,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":27,"endColumn":38,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[893,895],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":27,"column":65,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":27,"endColumn":67,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[922,924],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":1,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":31,"column":31,"nodeType":null,"messageId":"preferOptionalChain","endLine":31,"endColumn":89,"suggestions":[{"fix":{"range":[1023,1081],"text":"import.meta?.env?.DEV"},"messageId":"optionalChainSuggest","desc":"Change to an optional chain."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":31,"column":84,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":31,"endColumn":86,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[1076,1078],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":1,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":32,"column":30,"nodeType":null,"messageId":"preferOptionalChain","endLine":32,"endColumn":89,"suggestions":[{"fix":{"range":[1156,1215],"text":"import.meta?.env?.PROD"},"messageId":"optionalChainSuggest","desc":"Change to an optional chain."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":32,"column":83,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":32,"endColumn":85,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[1209,1211],"text":"."},"desc":"Remove unnecessary optional chain"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview config Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\n// Application Configuration with Supabase\r\nexport const APP_CONFIG = {\r\n  name: 'Dernek Y├Ânetim Sistemi',\r\n  version: '1.0.0',\r\n  mode: 'production', // Changed from 'demo' to 'production'\r\n  description: 'Modern NGO Management System - Full Stack Application',\r\n  features: {\r\n    auth: true,\r\n    notifications: true,\r\n    supabase: true, // Added Supabase support\r\n    realtime: true, // Added realtime support\r\n    localStorage: false, // Disabled localStorage for production\r\n  },\r\n};\r\n\r\n// Supabase Configuration\r\nexport const SUPABASE_CONFIG = {\r\n  url: (import.meta?.env?.VITE_SUPABASE_URL) || process.env.VITE_SUPABASE_URL,\r\n  anonKey: (import.meta?.env?.VITE_SUPABASE_ANON_KEY) || process.env.VITE_SUPABASE_ANON_KEY,\r\n  serviceRoleKey: (import.meta?.env?.SUPABASE_SERVICE_ROLE_KEY) || process.env.SUPABASE_SERVICE_ROLE_KEY,\r\n};\r\n\r\n// Environment check\r\nexport const isDevelopment = (typeof import.meta !== 'undefined' && import.meta.env?.DEV) || process.env.NODE_ENV === 'development';\r\nexport const isProduction = (typeof import.meta !== 'undefined' && import.meta.env?.PROD) || process.env.NODE_ENV === 'production';\r\n\r\n// Mock credentials fallback (only for development)\r\nexport const MOCK_CREDENTIALS = isDevelopment\r\n  ? {\r\n      'admin@dernek.org': 'admin123',\r\n      'manager@dernek.org': 'manager123',\r\n      'operator@dernek.org': 'operator123',\r\n      'viewer@dernek.org': 'viewer123',\r\n    }\r\n  : {};\r\n\r\nexport default APP_CONFIG;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\lib\\enhancedNotifications.tsx","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\lib\\environment.ts","messages":[{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":170,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":170,"endColumn":20,"suggestions":[{"fix":{"range":[4492,4520],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":92,"column":13,"nodeType":"MemberExpression","endLine":92,"endColumn":29,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":345,"column":24,"nodeType":"MemberExpression","endLine":345,"endColumn":53,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview environment Module - Application module\r\n *\r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\n// ­şîı ENVIRONMENT CONFIGURATION MANAGER\r\n// Centralized environment variable management\r\n\r\nimport { generateTestSecret } from './security/testSecrets';\r\n\r\nimport { logger } from './logging/logger';\r\ninterface EnvironmentConfig {\r\n  // Application\r\n  app: {\r\n    name: string;\r\n    version: string;\r\n    mode: 'development' | 'production' | 'test';\r\n    debug: boolean;\r\n  };\r\n\r\n  // Supabase\r\n  supabase: {\r\n    url: string;\r\n    anonKey: string;\r\n    serviceRoleKey?: string;\r\n  };\r\n\r\n  // Feature Flags\r\n  features: {\r\n    pwa: boolean;\r\n    analytics: boolean;\r\n    monitoring: boolean;\r\n    mockData: boolean;\r\n    offlineMode: boolean;\r\n    security?: {\r\n      virusScan: boolean;\r\n      contentModeration: boolean;\r\n      watermarking: boolean;\r\n      encryption: boolean;\r\n    };\r\n  };\r\n\r\n  // Performance\r\n  performance: {\r\n    serviceWorker: boolean;\r\n    cacheStrategy: 'networkFirst' | 'cacheFirst';\r\n    bundleAnalyzer: boolean;\r\n    sourcemaps: boolean;\r\n  };\r\n\r\n  // Security\r\n  security: {\r\n    csp: boolean;\r\n    hsts: boolean;\r\n    xssProtection: boolean;\r\n    contentTypeOptions: boolean;\r\n  };\r\n\r\n  // Development\r\n  development: {\r\n    port: number;\r\n    host: string;\r\n    open: boolean;\r\n    cors: boolean;\r\n  };\r\n\r\n  // Logging\r\n  logging: {\r\n    level: 'debug' | 'info' | 'warn' | 'error';\r\n    console: boolean;\r\n    errorTracking: boolean;\r\n    performanceLogging: boolean;\r\n  };\r\n\r\n  // External error tracking removed\r\n}\r\n\r\n// Environment variable getter with type safety\r\nfunction getEnvVar(key: string, defaultValue?: string): string {\r\n  // Check if we're in a browser environment (Vite)\r\n  const isBrowser = typeof window !== 'undefined' && typeof import.meta !== 'undefined';\r\n  const isNode = typeof process !== 'undefined';\r\n\r\n  let value: string | undefined;\r\n\r\n  if (isBrowser) {\r\n    value = import.meta.env[key as keyof ImportMetaEnv] as string;\r\n  } else if (isNode) {\r\n    // eslint-disable-next-line security/detect-object-injection\r\n    value = process.env[key];\r\n  }\r\n\r\n  // If no environment variable is set, use default value\r\n  if (!value || value === '') {\r\n    if (defaultValue === undefined) {\r\n      logger.warn(`Environment variable ${key} is not defined and no default provided`);\r\n      return '';\r\n    }\r\n    return defaultValue;\r\n  }\r\n\r\n  return value;\r\n}\r\n\r\nfunction getEnvBool(key: string, defaultValue = false): boolean {\r\n  const value = getEnvVar(key);\r\n  if (value === '') return defaultValue;\r\n  return value.toLowerCase() === 'true' || value === '1';\r\n}\r\n\r\nfunction getEnvNumber(key: string, defaultValue = 0): number {\r\n  const value = getEnvVar(key);\r\n  if (value === '') return defaultValue;\r\n  const parsed = parseInt(value, 10);\r\n  return isNaN(parsed) ? defaultValue : parsed;\r\n}\r\n\r\n// Environment validation\r\nfunction validateEnvironment(): void {\r\n  const mode = getEnvVar('VITE_APP_MODE', 'development');\r\n\r\n  // In test mode, use default values for missing environment variables\r\n  if (mode === 'test') {\r\n    // Set default test values for required variables if not provided\r\n    if (typeof process !== 'undefined') {\r\n      process.env.VITE_SUPABASE_URL ??= 'https://test.supabase.co';\r\n      process.env.VITE_SUPABASE_ANON_KEY ??= 'test-anon-key';\r\n      process.env.VITE_CSRF_SECRET ??= generateTestSecret('csrf');\r\n    }\r\n    logger.info('­şğ¬ Test mode: Using default environment values');\r\n    return;\r\n  }\r\n\r\n  const requiredVars = ['VITE_SUPABASE_URL', 'VITE_SUPABASE_ANON_KEY'];\r\n\r\n  const missingVars: string[] = [];\r\n\r\n  for (const varName of requiredVars) {\r\n    const value = getEnvVar(varName, '');\r\n    if (!value || value === '') {\r\n      missingVars.push(varName);\r\n    }\r\n  }\r\n\r\n  if (missingVars.length > 0) {\r\n    // Production'da daha yumu┼şak hata handling\r\n    const errorMessage = `\r\n­şÜ¿ KR─░T─░K G├£VENL─░K UYARISI!\r\n\r\nEksik environment variable'lar tespit edildi:\r\n${missingVars.map((v) => `  - ${v}`).join('\\n')}\r\n\r\nL├╝tfen .env dosyan─▒z─▒ olu┼şturun ve gerekli de─şi┼şkenleri ekleyin:\r\n\r\n# .env dosyas─▒ olu┼şturun:\r\ncp .env.example .env\r\n\r\n# Gerekli de─şi┼şkenleri ekleyin:\r\nVITE_SUPABASE_URL=your_supabase_url\r\nVITE_SUPABASE_ANON_KEY=your_supabase_anon_key\r\nVITE_CSRF_SECRET=your_csrf_secret_key\r\n\r\nBu eksiklikler giderilmezse uygulama ├ğal─▒┼şmayacakt─▒r!\r\n        `;\r\n\r\n    // Production'da console.error kullan, throw etme\r\n    if (typeof window !== 'undefined') {\r\n      console.error(errorMessage);\r\n      // Show a user-friendly error message\r\n      const errorDiv = document.createElement('div');\r\n      errorDiv.innerHTML = `\r\n        <div style=\"padding: 20px; background: #fee; border: 1px solid #fcc; color: #800; font-family: monospace;\">\r\n          <h3>­şÜ¿ Konfig├╝rasyon Hatas─▒</h3>\r\n          <p>Uygulama environment variable'lar─▒ eksik. L├╝tfen administrator ile ileti┼şime ge├ğin.</p>\r\n          <details>\r\n            <summary>Teknik Detaylar</summary>\r\n            <pre>${errorMessage}</pre>\r\n          </details>\r\n        </div>\r\n      `;\r\n      document.body.appendChild(errorDiv);\r\n      return; // Don't throw in production\r\n    } \r\n      // Only throw in build/server environments\r\n      throw new Error(errorMessage);\r\n    \r\n  }\r\n\r\n  // Security check - hardcoded credentials kontrol├╝ (test ortam─▒nda disable)\r\n  const supabaseUrl = getEnvVar('VITE_SUPABASE_URL');\r\n  const supabaseKey = getEnvVar('VITE_SUPABASE_ANON_KEY');\r\n\r\n  // Test ortam─▒nda hardcoded credentials check'ini disable et\r\n  if (mode !== 'test') {\r\n    if (\r\n      supabaseUrl.includes('hardcoded-test-url') ||\r\n      supabaseKey.includes('eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9')\r\n    ) {\r\n      throw new Error(`\r\n­şÜ¿ KR─░T─░K G├£VENL─░K A├çI─ŞI TESP─░T ED─░LD─░!\r\n\r\nEnvironment variable'larda hardcoded credentials tespit edildi:\r\n\r\nVITE_SUPABASE_URL: ${supabaseUrl}\r\nVITE_SUPABASE_ANON_KEY: ${supabaseKey.substring(0, 20)}...\r\n\r\nBu ├ğok tehlikelidir! L├╝tfen:\r\n1. Bu credentials'lar─▒ derhal de─şi┼ştirin\r\n2. Environment variable'lar─▒ .env dosyas─▒ndan al─▒n\r\n3. Git history'den bu bilgileri temizleyin\r\n\r\n            `);\r\n    }\r\n  }\r\n\r\n  logger.info('Ô£à Environment validation ba┼şar─▒l─▒');\r\n}\r\n\r\n// Lazy environment validation - only validate when explicitly requested\r\nlet environmentValidated = false;\r\n\r\n/**\r\n * validateEnvironmentIfNeeded function\r\n *\r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function validateEnvironmentIfNeeded(): void {\r\n  if (environmentValidated) return;\r\n\r\n  const appMode = getEnvVar('VITE_APP_MODE', 'development');\r\n  const forceValidation = getEnvVar('VITE_FORCE_ENV_VALIDATION', 'false');\r\n  const shouldValidate = appMode !== 'test' || forceValidation === 'true';\r\n  logger.info('­şöğ Environment validation check:', {\r\n    mode: appMode,\r\n    shouldValidate,\r\n    forceValidation,\r\n  });\r\n\r\n  if (shouldValidate) {\r\n    validateEnvironment();\r\n  } else {\r\n    logger.info('­şğ¬ Skipping environment validation in test mode');\r\n  }\r\n\r\n  environmentValidated = true;\r\n}\r\n\r\n// Environment validation is now lazy-loaded\r\n// Call validateEnvironmentIfNeeded() when needed\r\n\r\n// Main environment configuration\r\nexport const environment: EnvironmentConfig = {\r\n  app: {\r\n    name: getEnvVar('VITE_APP_NAME', 'Dernek Y├Ânetim Sistemi'),\r\n    version: getEnvVar('VITE_APP_VERSION', '1.0.0'),\r\n    mode: ['development', 'production', 'test'].includes(getEnvVar('VITE_APP_MODE', 'development'))\r\n      ? (getEnvVar('VITE_APP_MODE', 'development') as 'development' | 'production' | 'test')\r\n      : 'development',\r\n    debug: getEnvBool('VITE_APP_DEBUG', true),\r\n  },\r\n\r\n  supabase: {\r\n    url: getEnvVar('VITE_SUPABASE_URL'),\r\n    anonKey: getEnvVar('VITE_SUPABASE_ANON_KEY'),\r\n  },\r\n\r\n  features: {\r\n    pwa: getEnvBool('VITE_ENABLE_PWA', true),\r\n    analytics: getEnvBool('VITE_ENABLE_ANALYTICS', false),\r\n    monitoring: getEnvBool('VITE_ENABLE_MONITORING', true),\r\n    mockData: getEnvBool('VITE_ENABLE_MOCK_DATA', true),\r\n    offlineMode: getEnvBool('VITE_ENABLE_OFFLINE_MODE', true),\r\n  },\r\n\r\n  performance: {\r\n    serviceWorker: getEnvBool('VITE_ENABLE_SERVICE_WORKER', true),\r\n    cacheStrategy: ['networkFirst', 'cacheFirst'].includes(\r\n      getEnvVar('VITE_CACHE_STRATEGY', 'networkFirst'),\r\n    )\r\n      ? (getEnvVar('VITE_CACHE_STRATEGY', 'networkFirst') as 'networkFirst' | 'cacheFirst')\r\n      : 'networkFirst',\r\n    bundleAnalyzer: getEnvBool('VITE_BUNDLE_ANALYZER', false),\r\n    sourcemaps: getEnvBool('VITE_SOURCEMAPS', false),\r\n  },\r\n\r\n  security: {\r\n    csp: getEnvBool('VITE_ENABLE_CSP', true),\r\n    hsts: getEnvBool('VITE_ENABLE_HSTS', true),\r\n    xssProtection: getEnvBool('VITE_ENABLE_XSS_PROTECTION', true),\r\n    contentTypeOptions: getEnvBool('VITE_ENABLE_CONTENT_TYPE_OPTIONS', true),\r\n  },\r\n\r\n  development: {\r\n    port: getEnvNumber('VITE_DEV_PORT', 5173),\r\n    host: getEnvVar('VITE_DEV_HOST', 'localhost'),\r\n    open: getEnvBool('VITE_DEV_OPEN', true),\r\n    cors: getEnvBool('VITE_DEV_CORS', true),\r\n  },\r\n\r\n  logging: {\r\n    level: ['debug', 'info', 'warn', 'error'].includes(getEnvVar('VITE_LOG_LEVEL', 'info'))\r\n      ? (getEnvVar('VITE_LOG_LEVEL', 'info') as 'debug' | 'info' | 'warn' | 'error')\r\n      : 'info',\r\n    console: getEnvBool('VITE_ENABLE_CONSOLE_LOGS', true),\r\n    errorTracking: getEnvBool('VITE_ENABLE_ERROR_TRACKING', true),\r\n    performanceLogging: getEnvBool('VITE_ENABLE_PERFORMANCE_LOGGING', true),\r\n  },\r\n\r\n  // External error tracking configuration removed\r\n};\r\n\r\n// Environment info for debugging\r\n/**\r\n * getEnvironmentInfo function\r\n *\r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function getEnvironmentInfo() {\r\n  return {\r\n    config: environment,\r\n    runtime: {\r\n      nodeEnv: getEnvVar('VITE_APP_MODE', 'development'),\r\n      isDevelopment: getEnvVar('VITE_APP_MODE', 'development') === 'development',\r\n      isProduction: getEnvVar('VITE_APP_MODE', 'development') === 'production',\r\n      baseUrl: getEnvVar('VITE_BASE_URL', '/'),\r\n    },\r\n    build: {\r\n      timestamp: new Date().toISOString(),\r\n      userAgent: navigator.userAgent,\r\n      platform: 'unknown', // Deprecated navigator.platform replaced with safer fallback\r\n      language: navigator.language,\r\n    },\r\n  };\r\n}\r\n\r\n// Feature flag helpers\r\nexport const isFeatureEnabled = (\r\n  feature: keyof Omit<EnvironmentConfig['features'], 'security'>,\r\n): boolean => {\r\n  // eslint-disable-next-line security/detect-object-injection\r\n  const featureValue = environment.features[feature];\r\n  return typeof featureValue === 'boolean' ? featureValue : false;\r\n};\r\n\r\nexport const isProduction = (): boolean => {\r\n  return environment.app.mode === 'production';\r\n};\r\n\r\nexport const isDevelopment = (): boolean => {\r\n  return environment.app.mode === 'development';\r\n};\r\n\r\n// Logging helper\r\nexport const log = {\r\n  debug: (...args: unknown[]) => {\r\n    if (environment.logging.console && environment.logging.level === 'debug') {\r\n      logger.debug('[DEBUG]', ...args);\r\n    }\r\n  },\r\n\r\n  info: (...args: unknown[]) => {\r\n    if (environment.logging.console && ['debug', 'info'].includes(environment.logging.level)) {\r\n      logger.info('[INFO]', ...args);\r\n    }\r\n  },\r\n\r\n  warn: (...args: unknown[]) => {\r\n    if (\r\n      environment.logging.console &&\r\n      ['debug', 'info', 'warn'].includes(environment.logging.level)\r\n    ) {\r\n      logger.warn('[WARN]', ...args);\r\n    }\r\n  },\r\n\r\n  error: (...args: unknown[]) => {\r\n    if (environment.logging.console) {\r\n      logger.error('[ERROR]', ...args);\r\n    }\r\n\r\n    if (environment.logging.errorTracking) {\r\n      // Send to error tracking service\r\n    }\r\n  },\r\n};\r\n\r\n// Performance logging\r\nexport const performanceLog = (metric: string, value: number, context?: unknown) => {\r\n  if (environment.logging.performanceLogging) {\r\n    log.info(`[PERFORMANCE] ${metric}: ${value.toString()}ms`, context);\r\n  }\r\n};\r\n\r\n// Export environment for global access\r\nexport default environment;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\lib\\errorHandling.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":104,"column":9,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":104,"endColumn":32},{"ruleId":"@typescript-eslint/no-empty-function","severity":1,"message":"Unexpected empty constructor.","line":125,"column":25,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":125,"endColumn":27,"suggestions":[{"messageId":"suggestComment","data":{"name":"constructor"},"fix":{"range":[2976,2976],"text":" /* empty */ "},"desc":"Add comment inside empty constructor."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":128,"column":9,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":128,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":168,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4070,4073],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4070,4073],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":168,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":168,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4080,4082],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":168,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":168,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4093,4096],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4093,4096],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":176,"column":23,"nodeType":"BinaryExpression","messageId":"constantShortCircuit","endLine":176,"endColumn":54},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":176,"column":23,"nodeType":"BinaryExpression","messageId":"neverNullish","endLine":176,"endColumn":54},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":214,"column":9,"nodeType":"BinaryExpression","messageId":"constantShortCircuit","endLine":214,"endColumn":34},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":214,"column":9,"nodeType":"BinaryExpression","messageId":"neverNullish","endLine":214,"endColumn":34},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":219,"column":9,"nodeType":"BinaryExpression","messageId":"constantShortCircuit","endLine":219,"endColumn":35},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":219,"column":9,"nodeType":"BinaryExpression","messageId":"neverNullish","endLine":219,"endColumn":35},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":224,"column":9,"nodeType":"BinaryExpression","messageId":"constantShortCircuit","endLine":224,"endColumn":38},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":224,"column":9,"nodeType":"BinaryExpression","messageId":"neverNullish","endLine":224,"endColumn":38},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":246,"column":12,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":246,"endColumn":26},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":246,"column":12,"nodeType":"MemberExpression","endLine":246,"endColumn":26},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":262,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":262,"endColumn":20,"suggestions":[{"fix":{"range":[7166,7225],"text":""},"messageId":"removeConsole","data":{"propertyName":"group"},"desc":"Remove the console.group()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":267,"column":7,"nodeType":"MemberExpression","messageId":"unexpected","endLine":267,"endColumn":23,"suggestions":[{"fix":{"range":[7430,7449],"text":""},"messageId":"removeConsole","data":{"propertyName":"groupEnd"},"desc":"Remove the console.groupEnd()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used.","line":304,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":304,"endColumn":47},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'context' is defined but never used. Allowed unused args must match /^_/u.","line":304,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":304,"endColumn":47},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":307,"column":10,"nodeType":"BinaryExpression","messageId":"constantShortCircuit","endLine":307,"endColumn":47},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":307,"column":10,"nodeType":"BinaryExpression","messageId":"neverNullish","endLine":307,"endColumn":47},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":336,"column":7,"nodeType":"MemberExpression","endLine":336,"endColumn":17},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":336,"column":21,"nodeType":"MemberExpression","endLine":336,"endColumn":31}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":18,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Enhanced Error Handling Utilities for Kafkasder Management Panel\r\n * Provides comprehensive error handling, logging, and user-friendly error messages\r\n */\r\n\r\nimport { toast } from 'sonner';\r\n\r\nimport { logger } from './logging/logger';\r\n// Error types for better categorization\r\nexport enum ErrorType {\r\n  NETWORK = 'NETWORK',\r\n  VALIDATION = 'VALIDATION',\r\n  AUTHENTICATION = 'AUTHENTICATION',\r\n  AUTHORIZATION = 'AUTHORIZATION',\r\n  NOT_FOUND = 'NOT_FOUND',\r\n  SERVER = 'SERVER',\r\n  CLIENT = 'CLIENT',\r\n  UNKNOWN = 'UNKNOWN',\r\n}\r\n\r\n// Error severity levels\r\nexport enum ErrorSeverity {\r\n  LOW = 'LOW',\r\n  MEDIUM = 'MEDIUM',\r\n  HIGH = 'HIGH',\r\n  CRITICAL = 'CRITICAL',\r\n}\r\n\r\n// Custom error interface\r\n/**\r\n * AppError Interface\r\n * \r\n * @interface AppError\r\n */\r\nexport interface AppError {\r\n  type: ErrorType;\r\n  severity: ErrorSeverity;\r\n  message: string;\r\n  code?: string | number;\r\n  details?: Record<string, unknown>;\r\n  timestamp: Date;\r\n  stack?: string;\r\n  userMessage?: string;\r\n  actionRequired?: boolean;\r\n}\r\n\r\n// Error context for better debugging\r\n/**\r\n * ErrorContext Interface\r\n * \r\n * @interface ErrorContext\r\n */\r\nexport interface ErrorContext {\r\n  userId?: string;\r\n  sessionId?: string;\r\n  component?: string;\r\n  action?: string;\r\n  url?: string;\r\n  userAgent?: string;\r\n  timestamp: Date;\r\n}\r\n\r\n/**\r\n * Custom Error class for application-specific errors\r\n */\r\n/**\r\n * AppErrorClass Service\r\n * \r\n * Service class for handling apperrorclass operations\r\n * \r\n * @class AppErrorClass\r\n */\r\nexport class AppErrorClass extends Error implements AppError {\r\n  public readonly type: ErrorType;\r\n  public readonly severity: ErrorSeverity;\r\n  public readonly code?: string | number;\r\n  public readonly details?: Record<string, unknown>;\r\n  public readonly timestamp: Date;\r\n  public readonly userMessage?: string;\r\n  public readonly actionRequired?: boolean;\r\n\r\n  constructor(\r\n    type: ErrorType,\r\n    message: string,\r\n    severity: ErrorSeverity = ErrorSeverity.MEDIUM,\r\n    options: {\r\n      code?: string | number;\r\n      details?: Record<string, unknown>;\r\n      userMessage?: string;\r\n      actionRequired?: boolean;\r\n    } = {}\r\n  ) {\r\n    super(message);\r\n    this.name = 'AppError';\r\n    this.type = type;\r\n    this.severity = severity;\r\n    this.code = options.code;\r\n    this.details = options.details;\r\n    this.timestamp = new Date();\r\n    this.userMessage = options.userMessage;\r\n    this.actionRequired = options.actionRequired;\r\n\r\n    // Maintain proper stack trace\r\n    if (Error.captureStackTrace) {\r\n      Error.captureStackTrace(this, AppErrorClass);\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Error handler class for centralized error management\r\n */\r\n/**\r\n * ErrorHandler Service\r\n * \r\n * Service class for handling errorhandler operations\r\n * \r\n * @class ErrorHandler\r\n */\r\nexport class ErrorHandler {\r\n  private static instance: ErrorHandler;\r\n  private errorLog: AppError[] = [];\r\n  private readonly maxLogSize = 100;\r\n\r\n  private constructor() {}\r\n\r\n  public static getInstance(): ErrorHandler {\r\n    if (!ErrorHandler.instance) {\r\n      ErrorHandler.instance = new ErrorHandler();\r\n    }\r\n    return ErrorHandler.instance;\r\n  }\r\n\r\n  /**\r\n   * Handle and process errors\r\n   */\r\n  public handleError(\r\n    error: Error | AppError,\r\n    context?: ErrorContext\r\n  ): AppError {\r\n    const appError = this.normalizeError(error, context);\r\n    this.logError(appError);\r\n    this.notifyUser(appError);\r\n    this.reportError(appError, context);\r\n    return appError;\r\n  }\r\n\r\n  /**\r\n   * Normalize different error types to AppError\r\n   */\r\n  private normalizeError(\r\n    error: Error | AppError,\r\n    context?: ErrorContext\r\n  ): AppError {\r\n    if (error instanceof AppErrorClass) {\r\n      return error;\r\n    }\r\n\r\n    // Determine error type based on error properties\r\n    const type = this.determineErrorType(error);\r\n    const severity = this.determineErrorSeverity(error, type);\r\n    const userMessage = this.generateUserMessage(error, type);\r\n\r\n    return {\r\n      type,\r\n      severity,\r\n      message: error.message,\r\n      code: (error as any).code || (error as any).status,\r\n      details: {\r\n        name: error.name,\r\n        stack: error.stack,\r\n        ...context,\r\n      },\r\n      timestamp: new Date(),\r\n      userMessage,\r\n      actionRequired: severity === ErrorSeverity.HIGH ?? severity === ErrorSeverity.CRITICAL,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Determine error type from error object\r\n   */\r\n  private determineErrorType(error: Error): ErrorType {\r\n    const message = error.message.toLowerCase();\r\n    const name = error.name.toLowerCase();\r\n\r\n    if (name.includes('network') || message.includes('fetch') || message.includes('network')) {\r\n      return ErrorType.NETWORK;\r\n    }\r\n    if (name.includes('validation') || message.includes('validation')) {\r\n      return ErrorType.VALIDATION;\r\n    }\r\n    if (name.includes('auth') || message.includes('unauthorized')) {\r\n      return ErrorType.AUTHENTICATION;\r\n    }\r\n    if (message.includes('forbidden') || message.includes('permission')) {\r\n      return ErrorType.AUTHORIZATION;\r\n    }\r\n    if (message.includes('not found') || message.includes('404')) {\r\n      return ErrorType.NOT_FOUND;\r\n    }\r\n    if (message.includes('server') || message.includes('500')) {\r\n      return ErrorType.SERVER;\r\n    }\r\n\r\n    return ErrorType.UNKNOWN;\r\n  }\r\n\r\n  /**\r\n   * Determine error severity\r\n   */\r\n  private determineErrorSeverity(error: Error, type: ErrorType): ErrorSeverity {\r\n    // Critical errors\r\n    if (type === ErrorType.SERVER ?? type === ErrorType.AUTHENTICATION) {\r\n      return ErrorSeverity.CRITICAL;\r\n    }\r\n\r\n    // High severity errors\r\n    if (type === ErrorType.NETWORK ?? type === ErrorType.AUTHORIZATION) {\r\n      return ErrorSeverity.HIGH;\r\n    }\r\n\r\n    // Medium severity errors\r\n    if (type === ErrorType.VALIDATION ?? type === ErrorType.NOT_FOUND) {\r\n      return ErrorSeverity.MEDIUM;\r\n    }\r\n\r\n    return ErrorSeverity.LOW;\r\n  }\r\n\r\n  /**\r\n   * Generate user-friendly error messages\r\n   */\r\n  private generateUserMessage(error: Error, type: ErrorType): string {\r\n    const messages = {\r\n      [ErrorType.NETWORK]: 'Ba─şlant─▒ hatas─▒. L├╝tfen internet ba─şlant─▒n─▒z─▒ kontrol edin.',\r\n      [ErrorType.VALIDATION]: 'Girilen bilgilerde hata var. L├╝tfen kontrol edin.',\r\n      [ErrorType.AUTHENTICATION]: 'Oturum s├╝reniz dolmu┼ş. L├╝tfen tekrar giri┼ş yap─▒n.',\r\n      [ErrorType.AUTHORIZATION]: 'Bu i┼şlem i├ğin yetkiniz bulunmuyor.',\r\n      [ErrorType.NOT_FOUND]: 'Arad─▒─ş─▒n─▒z kay─▒t bulunamad─▒.',\r\n      [ErrorType.SERVER]: 'Sunucu hatas─▒. L├╝tfen daha sonra tekrar deneyin.',\r\n      [ErrorType.CLIENT]: 'Bir hata olu┼ştu. L├╝tfen sayfay─▒ yenileyin.',\r\n      [ErrorType.UNKNOWN]: 'Beklenmeyen bir hata olu┼ştu.',\r\n    };\r\n\r\n    return messages[type] ?? messages[ErrorType.UNKNOWN];\r\n  }\r\n\r\n  /**\r\n   * Log error to internal log\r\n   */\r\n  private logError(error: AppError): void {\r\n    this.errorLog.unshift(error);\r\n    \r\n    // Keep log size manageable\r\n    if (this.errorLog.length > this.maxLogSize) {\r\n      this.errorLog = this.errorLog.slice(0, this.maxLogSize);\r\n    }\r\n\r\n    // Console logging for development\r\n    if (process.env.NODE_ENV === 'development') {\r\n      console.group(`­şÜ¿ ${error.severity} Error: ${error.type}`);\r\n      logger.error('Message:', error.message);\r\n      logger.error('User Message:', error.userMessage);\r\n      logger.error('Details:', error.details);\r\n      logger.error('Stack:', error.stack);\r\n      console.groupEnd();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Notify user about error\r\n   */\r\n  private notifyUser(error: AppError): void {\r\n    if (!error.userMessage) return;\r\n\r\n    const toastOptions = {\r\n      duration: error.severity === ErrorSeverity.CRITICAL ? 0 : 5000,\r\n      action: error.actionRequired ? {\r\n        label: 'Yeniden Dene',\r\n        onClick: () => { window.location.reload(); },\r\n      } : undefined,\r\n    };\r\n\r\n    switch (error.severity) {\r\n      case ErrorSeverity.CRITICAL:\r\n        toast.error(error.userMessage, toastOptions);\r\n        break;\r\n      case ErrorSeverity.HIGH:\r\n        toast.error(error.userMessage, toastOptions);\r\n        break;\r\n      case ErrorSeverity.MEDIUM:\r\n        toast.warning(error.userMessage, toastOptions);\r\n        break;\r\n      case ErrorSeverity.LOW:\r\n        toast.info(error.userMessage, toastOptions);\r\n        break;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Report error to external services (external error tracking services)\r\n   */\r\n  private reportError(error: AppError, context?: ErrorContext): void {\r\n    // Only report high severity errors in production\r\n    if (process.env.NODE_ENV === 'production' &&\r\n        (error.severity === ErrorSeverity.HIGH ?? error.severity === ErrorSeverity.CRITICAL)) {\r\n\r\n      // External error reporting can be configured here\r\n      // Currently no external error tracking service is configured\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get error log for debugging\r\n   */\r\n  public getErrorLog(): AppError[] {\r\n    return [...this.errorLog];\r\n  }\r\n\r\n  /**\r\n   * Clear error log\r\n   */\r\n  public clearErrorLog(): void {\r\n    this.errorLog = [];\r\n  }\r\n\r\n  /**\r\n   * Get error statistics\r\n   */\r\n  public getErrorStats(): Record<string, number> {\r\n    const stats: Record<string, number> = {};\r\n    \r\n    this.errorLog.forEach(error => {\r\n      const key = `${error.type}_${error.severity}`;\r\n      stats[key] = (stats[key] ?? 0) + 1;\r\n    });\r\n\r\n    return stats;\r\n  }\r\n}\r\n\r\n/**\r\n * Utility functions for common error scenarios\r\n */\r\nexport const ErrorUtils = {\r\n  /**\r\n   * Create a network error\r\n   */\r\n  networkError: (message: string, details?: Record<string, unknown>): AppErrorClass => {\r\n    return new AppErrorClass(\r\n      ErrorType.NETWORK,\r\n      message,\r\n      ErrorSeverity.HIGH,\r\n      { details, userMessage: 'Ba─şlant─▒ hatas─▒. L├╝tfen internet ba─şlant─▒n─▒z─▒ kontrol edin.' }\r\n    );\r\n  },\r\n\r\n  /**\r\n   * Create a validation error\r\n   */\r\n  validationError: (message: string, details?: Record<string, unknown>): AppErrorClass => {\r\n    return new AppErrorClass(\r\n      ErrorType.VALIDATION,\r\n      message,\r\n      ErrorSeverity.MEDIUM,\r\n      { details, userMessage: 'Girilen bilgilerde hata var. L├╝tfen kontrol edin.' }\r\n    );\r\n  },\r\n\r\n  /**\r\n   * Create an authentication error\r\n   */\r\n  authError: (message: string, details?: Record<string, unknown>): AppErrorClass => {\r\n    return new AppErrorClass(\r\n      ErrorType.AUTHENTICATION,\r\n      message,\r\n      ErrorSeverity.CRITICAL,\r\n      { details, userMessage: 'Oturum s├╝reniz dolmu┼ş. L├╝tfen tekrar giri┼ş yap─▒n.', actionRequired: true }\r\n    );\r\n  },\r\n\r\n  /**\r\n   * Create a server error\r\n   */\r\n  serverError: (message: string, details?: Record<string, unknown>): AppErrorClass => {\r\n    return new AppErrorClass(\r\n      ErrorType.SERVER,\r\n      message,\r\n      ErrorSeverity.CRITICAL,\r\n      { details, userMessage: 'Sunucu hatas─▒. L├╝tfen daha sonra tekrar deneyin.' }\r\n    );\r\n  },\r\n\r\n  /**\r\n   * Wrap async functions with error handling\r\n   */\r\n  async withErrorHandling<T>(\r\n    fn: () => Promise<T>,\r\n    context?: ErrorContext\r\n  ): Promise<T | null> {\r\n    try {\r\n      return await fn();\r\n    } catch (error) {\r\n      const errorHandler = ErrorHandler.getInstance();\r\n      errorHandler.handleError(error as Error, context);\r\n      return null;\r\n    }\r\n  },\r\n\r\n  /**\r\n   * Wrap sync functions with error handling\r\n   */\r\n  withSyncErrorHandling<T>(\r\n    fn: () => T,\r\n    context?: ErrorContext\r\n  ): T | null {\r\n    try {\r\n      return fn();\r\n    } catch (error) {\r\n      const errorHandler = ErrorHandler.getInstance();\r\n      errorHandler.handleError(error as Error, context);\r\n      return null;\r\n    }\r\n  },\r\n};\r\n\r\n// Export singleton instance\r\nexport const errorHandler = ErrorHandler.getInstance();\r\n\r\n// Default export\r\nexport default ErrorHandler;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\lib\\logging\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\lib\\logging\\logger.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":48,"column":9,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":48,"endColumn":25},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":58,"column":10,"nodeType":"LogicalExpression","messageId":"neverNullish","endLine":58,"endColumn":87},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":1,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":58,"column":10,"nodeType":null,"messageId":"preferOptionalChain","endLine":58,"endColumn":87,"suggestions":[{"fix":{"range":[1273,1350],"text":"import.meta?.env?.PROD"},"messageId":"optionalChainSuggest","desc":"Change to an optional chain."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":58,"column":48,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":58,"endColumn":63},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":63,"column":10,"nodeType":"LogicalExpression","messageId":"neverNullish","endLine":63,"endColumn":86},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":1,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":63,"column":10,"nodeType":null,"messageId":"preferOptionalChain","endLine":63,"endColumn":86,"suggestions":[{"fix":{"range":[1486,1562],"text":"import.meta?.env?.DEV"},"messageId":"optionalChainSuggest","desc":"Change to an optional chain."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":63,"column":48,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":63,"endColumn":63},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":1,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":68,"column":10,"nodeType":null,"messageId":"preferOptionalChain","endLine":68,"endColumn":63,"suggestions":[{"fix":{"range":[1698,1751],"text":"import.meta?.env"},"messageId":"optionalChainSuggest","desc":"Change to an optional chain."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":68,"column":48,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":68,"endColumn":63},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":77,"column":10,"nodeType":"LogicalExpression","messageId":"neverNullish","endLine":77,"endColumn":87},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":1,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":77,"column":10,"nodeType":null,"messageId":"preferOptionalChain","endLine":77,"endColumn":87,"suggestions":[{"fix":{"range":[2014,2091],"text":"import.meta?.env?.PROD"},"messageId":"optionalChainSuggest","desc":"Change to an optional chain."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":77,"column":48,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":77,"endColumn":63},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":1,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":82,"column":10,"nodeType":null,"messageId":"preferOptionalChain","endLine":82,"endColumn":63,"suggestions":[{"fix":{"range":[2231,2284],"text":"import.meta?.env"},"messageId":"optionalChainSuggest","desc":"Change to an optional chain."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":82,"column":48,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":82,"endColumn":63},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_args' is defined but never used.","line":89,"column":60,"nodeType":null,"messageId":"unusedVar","endLine":89,"endColumn":65},{"ruleId":"@typescript-eslint/switch-exhaustiveness-check","severity":2,"message":"Switch is not exhaustive. Cases not matched: LogLevel.SILENT","line":103,"column":15,"nodeType":"Identifier","messageId":"switchIsNotExhaustive","endLine":103,"endColumn":20,"suggestions":[{"messageId":"addMissingCases","fix":{"range":[3359,3359],"text":"\n        case LogLevel.SILENT: { throw new Error('Not implemented yet: LogLevel.SILENT case') }"},"desc":"Add branches for missing cases."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":105,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":105,"endColumn":24,"suggestions":[{"fix":{"range":[3001,3042],"text":""},"messageId":"removeConsole","data":{"propertyName":"debug"},"desc":"Remove the console.debug()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":108,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":108,"endColumn":23,"suggestions":[{"fix":{"range":[3101,3141],"text":""},"messageId":"removeConsole","data":{"propertyName":"info"},"desc":"Remove the console.info()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":111,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":111,"endColumn":23,"suggestions":[{"fix":{"range":[3200,3240],"text":""},"messageId":"removeConsole","data":{"propertyName":"warn"},"desc":"Remove the console.warn()."}]},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":114,"column":11,"nodeType":"MemberExpression","messageId":"unexpected","endLine":114,"endColumn":24,"suggestions":[{"fix":{"range":[3300,3341],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'level' is defined but never used.","line":125,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":32},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'level' is defined but never used. Allowed unused args must match /^_/u.","line":125,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'message' is defined but never used.","line":125,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":49},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'message' is defined but never used. Allowed unused args must match /^_/u.","line":125,"column":42,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":49},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'args' is defined but never used.","line":125,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":63},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'args' is defined but never used. Allowed unused args must match /^_/u.","line":125,"column":59,"nodeType":null,"messageId":"unusedVar","endLine":125,"endColumn":63},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":1,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":160,"column":10,"nodeType":null,"messageId":"preferOptionalChain","endLine":160,"endColumn":68,"suggestions":[{"fix":{"range":[4725,4783],"text":"import.meta?.env?.DEV"},"messageId":"optionalChainSuggest","desc":"Change to an optional chain."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":160,"column":63,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":160,"endColumn":65,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[4778,4780],"text":"."},"desc":"Remove unnecessary optional chain"}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview logger Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\n/**\r\n * Centralized logging utility for the application\r\n * Provides different log levels and environment-specific behavior\r\n */\r\n\r\nexport enum LogLevel {\r\n  DEBUG = 0,\r\n  INFO = 1,\r\n  WARN = 2,\r\n  ERROR = 3,\r\n  SILENT = 4,\r\n}\r\n\r\n/**\r\n * LoggerConfig Interface\r\n * \r\n * @interface LoggerConfig\r\n */\r\nexport interface LoggerConfig {\r\n  level: LogLevel;\r\n  prefix: string;\r\n  enableConsole: boolean;\r\n  enableAnalytics: boolean;\r\n}\r\n\r\nclass Logger {\r\n  private readonly config: LoggerConfig;\r\n  private static instance: Logger;\r\n\r\n  private constructor(config?: Partial<LoggerConfig>) {\r\n    this.config = {\r\n      level: this.getEnvironmentLogLevel(),\r\n      prefix: '[DernekYS]',\r\n      enableConsole: this.shouldEnableConsole(),\r\n      enableAnalytics: false,\r\n      ...config,\r\n    };\r\n  }\r\n\r\n  static getInstance(config?: Partial<LoggerConfig>): Logger {\r\n    if (!Logger.instance) {\r\n      Logger.instance = new Logger(config);\r\n    }\r\n    return Logger.instance;\r\n  }\r\n\r\n  private getEnvironmentLogLevel(): LogLevel {\r\n    if (typeof window === 'undefined') return LogLevel.INFO;\r\n    \r\n    // Production'da sadece error ve ├╝st├╝\r\n    if ((typeof import.meta !== 'undefined' && import.meta.env && import.meta.env.PROD) ?? process.env.NODE_ENV === 'production') {\r\n      return LogLevel.ERROR;\r\n    }\r\n    \r\n    // Development'da debug ve ├╝st├╝\r\n    if ((typeof import.meta !== 'undefined' && import.meta.env && import.meta.env.DEV) ?? process.env.NODE_ENV === 'development') {\r\n      return LogLevel.DEBUG;\r\n    }\r\n    \r\n    // Test ortam─▒nda sadece error\r\n    if ((typeof import.meta !== 'undefined' && import.meta.env && import.meta.env.MODE === 'test') || process.env.NODE_ENV === 'test') {\r\n      return LogLevel.ERROR;\r\n    }\r\n    \r\n    return LogLevel.INFO;\r\n  }\r\n\r\n  private shouldEnableConsole(): boolean {\r\n    // Production'da console'u tamamen devre d─▒┼ş─▒ b─▒rak\r\n    if ((typeof import.meta !== 'undefined' && import.meta.env && import.meta.env.PROD) ?? process.env.NODE_ENV === 'production') {\r\n      return false;\r\n    }\r\n    \r\n    // Test ortam─▒nda console'u devre d─▒┼ş─▒ b─▒rak\r\n    if ((typeof import.meta !== 'undefined' && import.meta.env && import.meta.env.MODE === 'test') || process.env.NODE_ENV === 'test') {\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  }\r\n\r\n  private formatMessage(level: string, message: string, ..._args: unknown[]): string {\r\n    const timestamp = new Date().toISOString();\r\n    const {prefix} = this.config;\r\n    return `[${timestamp}] ${prefix} [${level}] ${message}`;\r\n  }\r\n\r\n  private log(level: LogLevel, levelName: string, message: string, ...args: unknown[]): void {\r\n    if (level < this.config.level) {\r\n      return;\r\n    }\r\n\r\n    const formattedMessage = this.formatMessage(levelName, message, ...args);\r\n\r\n    if (this.config.enableConsole) {\r\n      switch (level) {\r\n        case LogLevel.DEBUG:\r\n          console.debug(formattedMessage, ...args);\r\n          break;\r\n        case LogLevel.INFO:\r\n          console.info(formattedMessage, ...args);\r\n          break;\r\n        case LogLevel.WARN:\r\n          console.warn(formattedMessage, ...args);\r\n          break;\r\n        case LogLevel.ERROR:\r\n          console.error(formattedMessage, ...args);\r\n          break;\r\n      }\r\n    }\r\n\r\n    // Analytics'e g├Ânder (iste─şe ba─şl─▒)\r\n    if (this.config.enableAnalytics && level >= LogLevel.ERROR) {\r\n      this.sendToAnalytics(levelName, message, args);\r\n    }\r\n  }\r\n\r\n  private sendToAnalytics(level: string, message: string, args: unknown[]): void {\r\n    // Analytics g├Ânderimi burada implemente edilecek\r\n    // External analytics services can be integrated here\r\n    // Example: Google Analytics, etc.\r\n    // Currently no external analytics service is configured\r\n  }\r\n\r\n  debug(message: string, ...args: unknown[]): void {\r\n    this.log(LogLevel.DEBUG, 'DEBUG', message, ...args);\r\n  }\r\n\r\n  info(message: string, ...args: unknown[]): void {\r\n    this.log(LogLevel.INFO, 'INFO', message, ...args);\r\n  }\r\n\r\n  warn(message: string, ...args: unknown[]): void {\r\n    this.log(LogLevel.WARN, 'WARN', message, ...args);\r\n  }\r\n\r\n  error(message: string, ...args: unknown[]): void {\r\n    this.log(LogLevel.ERROR, 'ERROR', message, ...args);\r\n  }\r\n\r\n  // Store initialization i├ğin ├Âzel metod\r\n  storeInit(message: string, ...args: unknown[]): void {\r\n    this.info(`Store: ${message}`, ...args);\r\n  }\r\n\r\n  // API ├ğa─şr─▒lar─▒ i├ğin ├Âzel metod\r\n  api(message: string, ...args: unknown[]): void {\r\n    this.debug(`API: ${message}`, ...args);\r\n  }\r\n\r\n  // Hata ay─▒klama i├ğin ├Âzel metod\r\n  dev(message: string, ...args: unknown[]): void {\r\n    if ((typeof import.meta !== 'undefined' && import.meta.env?.DEV) || process.env.NODE_ENV === 'development') {\r\n      this.debug(`DEV: ${message}`, ...args);\r\n    }\r\n  }\r\n}\r\n\r\n// Default logger instance\r\nexport const logger = Logger.getInstance();\r\n\r\n// Convenience functions for different modules\r\nexport const storeLogger = {\r\n  init: (message: string, ...args: unknown[]): void => { logger.storeInit(message, ...args); },\r\n  error: (message: string, ...args: unknown[]): void => { logger.log(LogLevel.ERROR, 'ERROR', `Store: ${message}`, ...args); },\r\n  warn: (message: string, ...args: unknown[]): void => { logger.log(LogLevel.WARN, 'WARN', `Store: ${message}`, ...args); },\r\n  info: (message: string, ...args: unknown[]): void => { logger.log(LogLevel.INFO, 'INFO', `Store: ${message}`, ...args); },\r\n};\r\n\r\nexport const apiLogger = {\r\n  request: (url: string, method: string, ...args: unknown[]): void => {\r\n    logger.api(`${method} ${url}`, ...args);\r\n  },\r\n  response: (url: string, status: number, ...args: unknown[]): void => {\r\n    logger.api(`Response ${status} from ${url}`, ...args);\r\n  },\r\n  error: (url: string, error: unknown, ...args: unknown[]): void => {\r\n    logger.log(LogLevel.ERROR, 'ERROR', `API Error on ${url}: ${String(error)}`, ...args);\r\n  },\r\n};\r\n\r\nexport const authLogger = {\r\n  login: (userId: string, ...args: unknown[]): void => {\r\n    logger.log(LogLevel.INFO, 'INFO', `User login: ${userId}`, ...args);\r\n  },\r\n  logout: (userId: string, ...args: unknown[]): void => {\r\n    logger.log(LogLevel.INFO, 'INFO', `User logout: ${userId}`, ...args);\r\n  },\r\n  error: (action: string, error: unknown, ...args: unknown[]): void => {\r\n    logger.log(LogLevel.ERROR, 'ERROR', `Auth error on ${action}: ${String(error)}`, ...args);\r\n  },\r\n};\r\nexport default logger;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\lib\\performance.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":396,"column":19,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":396,"endColumn":48}],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unnecessary-type-assertion","severity":1,"message":"This assertion is unnecessary since it does not change the type of the expression.","line":105,"column":35,"nodeType":"TSAsExpression","messageId":"unnecessaryAssertion","endLine":105,"endColumn":60,"fix":{"range":[3292,3312],"text":""},"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Performance Optimization Utilities for Kafkasder Management Panel\r\n * Provides performance monitoring, optimization helpers, and bundle analysis\r\n */\r\n\r\nimport { logger } from './logging/logger';\r\n\r\n// Performance metrics interface\r\n/**\r\n * PerformanceMetrics Interface\r\n * \r\n * @interface PerformanceMetrics\r\n */\r\nexport interface PerformanceMetrics {\r\n  loadTime: number;\r\n  renderTime: number;\r\n  memoryUsage: number;\r\n  bundleSize: number;\r\n  apiResponseTime: number;\r\n  userInteractionTime: number;\r\n}\r\n\r\n// Performance thresholds\r\nexport const PERFORMANCE_THRESHOLDS = {\r\n  LOAD_TIME: 3000, // 3 seconds\r\n  RENDER_TIME: 100, // 100ms\r\n  API_RESPONSE_TIME: 2000, // 2 seconds\r\n  MEMORY_USAGE: 50 * 1024 * 1024, // 50MB\r\n  BUNDLE_SIZE: 1024 * 1024, // 1MB\r\n} as const;\r\n\r\n/**\r\n * Performance Monitor class\r\n */\r\n/**\r\n * PerformanceMonitor Service\r\n * \r\n * Service class for handling performancemonitor operations\r\n * \r\n * @class PerformanceMonitor\r\n */\r\nexport class PerformanceMonitor {\r\n  private static instance: PerformanceMonitor | undefined;\r\n  private metrics: PerformanceMetrics[] = [];\r\n  private observers: PerformanceObserver[] = [];\r\n  private readonly maxMetrics = 100;\r\n\r\n  private constructor() {\r\n    this.initializeObservers();\r\n  }\r\n\r\n  public static getInstance(): PerformanceMonitor {\r\n    PerformanceMonitor.instance ??= new PerformanceMonitor();\r\n    return PerformanceMonitor.instance;\r\n  }\r\n\r\n  /**\r\n   * Initialize performance observers\r\n   */\r\n  private initializeObservers(): void {\r\n    if (typeof window === 'undefined') return;\r\n\r\n    // Navigation timing observer\r\n    if ('PerformanceObserver' in window) {\r\n      try {\r\n        const navObserver = new PerformanceObserver((list) => {\r\n          const entries = list.getEntries();\r\n          entries.forEach((entry) => {\r\n            if (entry.entryType === 'navigation') {\r\n              this.recordNavigationMetrics(entry as PerformanceNavigationTiming);\r\n            }\r\n          });\r\n        });\r\n        navObserver.observe({ entryTypes: ['navigation'] });\r\n        this.observers.push(navObserver);\r\n      } catch (error) {\r\n        // Navigation timing observer not supported\r\n        logger.warn('Navigation timing observer not supported:', error);\r\n      }\r\n\r\n      // Resource timing observer\r\n      try {\r\n        const resourceObserver = new PerformanceObserver((list) => {\r\n          const entries = list.getEntries();\r\n          entries.forEach((entry) => {\r\n            if (entry.entryType === 'resource') {\r\n              this.recordResourceMetrics(entry as PerformanceResourceTiming);\r\n            }\r\n          });\r\n        });\r\n        resourceObserver.observe({ entryTypes: ['resource'] });\r\n        this.observers.push(resourceObserver);\r\n      } catch (error) {\r\n        // Resource timing observer not supported\r\n        logger.warn('Resource timing observer not supported:', error);\r\n      }\r\n\r\n      // Long task observer\r\n      try {\r\n        const longTaskObserver = new PerformanceObserver((list) => {\r\n          const entries = list.getEntries();\r\n          entries.forEach((entry) => {\r\n            if (entry.entryType === 'longtask') {\r\n              // eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion\r\n              this.recordLongTask(entry as PerformanceEntry);\r\n            }\r\n          });\r\n        });\r\n        longTaskObserver.observe({ entryTypes: ['longtask'] });\r\n        this.observers.push(longTaskObserver);\r\n      } catch (error) {\r\n        // Long task observer not supported\r\n        logger.warn('Long task observer not supported:', error);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Record navigation metrics\r\n   */\r\n  private recordNavigationMetrics(entry: PerformanceNavigationTiming): void {\r\n    const loadTime = entry.loadEventEnd - entry.fetchStart;\r\n    const renderTime = entry.domContentLoadedEventEnd - entry.domContentLoadedEventStart;\r\n\r\n    this.addMetric({\r\n      loadTime,\r\n      renderTime,\r\n      memoryUsage: this.getMemoryUsage(),\r\n      bundleSize: this.estimateBundleSize(),\r\n      apiResponseTime: 0,\r\n      userInteractionTime: 0,\r\n    });\r\n\r\n    // Log performance warnings\r\n    if (loadTime > PERFORMANCE_THRESHOLDS.LOAD_TIME) {\r\n      logger.warn(`ÔÜá´©Å Slow page load: ${loadTime}ms (threshold: ${PERFORMANCE_THRESHOLDS.LOAD_TIME}ms)`);\r\n    }\r\n\r\n    if (renderTime > PERFORMANCE_THRESHOLDS.RENDER_TIME) {\r\n      logger.warn(`ÔÜá´©Å Slow render: ${renderTime}ms (threshold: ${PERFORMANCE_THRESHOLDS.RENDER_TIME}ms)`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Record resource metrics\r\n   */\r\n  private recordResourceMetrics(entry: PerformanceResourceTiming): void {\r\n    const responseTime = entry.responseEnd - entry.requestStart;\r\n    \r\n    if (responseTime > PERFORMANCE_THRESHOLDS.API_RESPONSE_TIME) {\r\n      logger.warn(`ÔÜá´©Å Slow resource load: ${entry.name} - ${responseTime}ms`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Record long task\r\n   */\r\n  private recordLongTask(entry: PerformanceEntry): void {\r\n    logger.warn(`ÔÜá´©Å Long task detected: ${entry.duration}ms`);\r\n    \r\n    // Report to analytics if available\r\n    if (typeof window !== 'undefined' && 'gtag' in window) {\r\n      const { gtag } = window as { gtag: (event: string, action: string, params: Record<string, unknown>) => void };\r\n      gtag('event', 'long_task', {\r\n        duration: entry.duration,\r\n        start_time: entry.startTime,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get memory usage\r\n   */\r\n  private getMemoryUsage(): number {\r\n    if (typeof window !== 'undefined' && 'memory' in performance) {\r\n      const { memory } = performance as { memory: { usedJSHeapSize: number } };\r\n      return memory.usedJSHeapSize;\r\n    }\r\n    return 0;\r\n  }\r\n\r\n  /**\r\n   * Estimate bundle size\r\n   */\r\n  private estimateBundleSize(): number {\r\n    if (typeof window === 'undefined') return 0;\r\n\r\n    let totalSize = 0;\r\n    const scripts = document.querySelectorAll('script[src]');\r\n    \r\n    scripts.forEach(script => {\r\n      const src = script.getAttribute('src');\r\n      if (src && !src.includes('node_modules')) {\r\n        // Rough estimation based on script count\r\n        totalSize += 100 * 1024; // 100KB per script estimate\r\n      }\r\n    });\r\n\r\n    return totalSize;\r\n  }\r\n\r\n  /**\r\n   * Add performance metric\r\n   */\r\n  private addMetric(metric: PerformanceMetrics): void {\r\n    this.metrics.unshift(metric);\r\n    \r\n    if (this.metrics.length > this.maxMetrics) {\r\n      this.metrics = this.metrics.slice(0, this.maxMetrics);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get performance metrics\r\n   */\r\n  public getMetrics(): PerformanceMetrics[] {\r\n    return [...this.metrics];\r\n  }\r\n\r\n  /**\r\n   * Get average metrics\r\n   */\r\n  public getAverageMetrics(): Partial<PerformanceMetrics> {\r\n    if (this.metrics.length === 0) return {};\r\n\r\n    const totals = this.metrics.reduce(\r\n      (acc, metric) => ({\r\n        loadTime: acc.loadTime + metric.loadTime,\r\n        renderTime: acc.renderTime + metric.renderTime,\r\n        memoryUsage: acc.memoryUsage + metric.memoryUsage,\r\n        bundleSize: acc.bundleSize + metric.bundleSize,\r\n        apiResponseTime: acc.apiResponseTime + metric.apiResponseTime,\r\n        userInteractionTime: acc.userInteractionTime + metric.userInteractionTime,\r\n      }),\r\n      {\r\n        loadTime: 0,\r\n        renderTime: 0,\r\n        memoryUsage: 0,\r\n        bundleSize: 0,\r\n        apiResponseTime: 0,\r\n        userInteractionTime: 0,\r\n      }\r\n    );\r\n\r\n    const count = this.metrics.length;\r\n    return {\r\n      loadTime: totals.loadTime / count,\r\n      renderTime: totals.renderTime / count,\r\n      memoryUsage: totals.memoryUsage / count,\r\n      bundleSize: totals.bundleSize / count,\r\n      apiResponseTime: totals.apiResponseTime / count,\r\n      userInteractionTime: totals.userInteractionTime / count,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get performance score\r\n   */\r\n  public getPerformanceScore(): number {\r\n    const averages = this.getAverageMetrics();\r\n    let score = 100;\r\n\r\n    // Deduct points for poor performance\r\n    if (averages.loadTime && averages.loadTime > PERFORMANCE_THRESHOLDS.LOAD_TIME) {\r\n      score -= 20;\r\n    }\r\n    if (averages.renderTime && averages.renderTime > PERFORMANCE_THRESHOLDS.RENDER_TIME) {\r\n      score -= 15;\r\n    }\r\n    if (averages.memoryUsage && averages.memoryUsage > PERFORMANCE_THRESHOLDS.MEMORY_USAGE) {\r\n      score -= 10;\r\n    }\r\n    if (averages.bundleSize && averages.bundleSize > PERFORMANCE_THRESHOLDS.BUNDLE_SIZE) {\r\n      score -= 15;\r\n    }\r\n    if (averages.apiResponseTime && averages.apiResponseTime > PERFORMANCE_THRESHOLDS.API_RESPONSE_TIME) {\r\n      score -= 10;\r\n    }\r\n\r\n    return Math.max(0, score);\r\n  }\r\n\r\n  /**\r\n   * Cleanup observers\r\n   */\r\n  public cleanup(): void {\r\n    this.observers.forEach(observer => {\r\n      observer.disconnect();\r\n    });\r\n    this.observers = [];\r\n  }\r\n}\r\n\r\n/**\r\n * Performance optimization utilities\r\n */\r\nexport const PerformanceUtils = {\r\n  /**\r\n   * Debounce function for performance\r\n   */\r\n  debounce<T extends (...args: unknown[]) => unknown>(\r\n    func: T,\r\n    wait: number\r\n  ): (...args: Parameters<T>) => void {\r\n    let timeout: NodeJS.Timeout;\r\n    return (...args: Parameters<T>) => {\r\n      clearTimeout(timeout);\r\n      timeout = setTimeout(() => func(...args), wait);\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Throttle function for performance\r\n   */\r\n  throttle<T extends (...args: unknown[]) => unknown>(\r\n    func: T,\r\n    limit: number\r\n  ): (...args: Parameters<T>) => void {\r\n    let inThrottle: boolean;\r\n    return (...args: Parameters<T>) => {\r\n      if (!inThrottle) {\r\n        func(...args);\r\n        inThrottle = true;\r\n        setTimeout(() => (inThrottle = false), limit);\r\n      }\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Lazy load images\r\n   */\r\n  lazyLoadImages(): void {\r\n    if (typeof window === 'undefined') return;\r\n\r\n    const images = document.querySelectorAll('img[data-src]');\r\n    const imageObserver = new IntersectionObserver((entries) => {\r\n      entries.forEach((entry) => {\r\n        if (entry.isIntersecting) {\r\n          const img = entry.target as HTMLImageElement;\r\n          img.setAttribute('src', img.dataset.src ?? '');\r\n          img.removeAttribute('data-src');\r\n          imageObserver.unobserve(img);\r\n        }\r\n      });\r\n    });\r\n\r\n    images.forEach((img) => {\r\n      imageObserver.observe(img);\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Preload critical resources\r\n   */\r\n  preloadResource(href: string, as: string): void {\r\n    if (typeof document === 'undefined') return;\r\n\r\n    const link = document.createElement('link');\r\n    link.rel = 'preload';\r\n    link.href = href;\r\n    link.as = as;\r\n    document.head.appendChild(link);\r\n  },\r\n\r\n  /**\r\n   * Measure function execution time\r\n   */\r\n  measureTime<T>(fn: () => T, label: string): T {\r\n    const start = performance.now();\r\n    const result = fn();\r\n    const end = performance.now();\r\n    \r\n    logger.debug(`${label}: ${end - start}ms`);\r\n    return result;\r\n  },\r\n\r\n  /**\r\n   * Measure async function execution time\r\n   */\r\n  async measureAsyncTime<T>(fn: () => Promise<T>, label: string): Promise<T> {\r\n    const start = performance.now();\r\n    const result = await fn();\r\n    const end = performance.now();\r\n    \r\n    logger.debug(`${label}: ${end - start}ms`);\r\n    return result;\r\n  },\r\n\r\n  /**\r\n   * Check if device is low-end\r\n   */\r\n  isLowEndDevice(): boolean {\r\n    if (typeof navigator === 'undefined') return false;\r\n\r\n    // Check hardware concurrency\r\n    const cores = navigator.hardwareConcurrency ?? 1;\r\n    if (cores < 4) return true;\r\n\r\n    // Check memory (if available)\r\n    if ('memory' in performance) {\r\n      const { memory } = performance as { memory: { jsHeapSizeLimit: number } };\r\n      if (memory.jsHeapSizeLimit < 2 * 1024 * 1024 * 1024) { // 2GB\r\n        return true;\r\n      }\r\n    }\r\n\r\n    // Check connection (if available)\r\n    if ('connection' in navigator) {\r\n      const { connection } = navigator as { connection: { effectiveType: string } };\r\n      if (connection.effectiveType === 'slow-2g' || connection.effectiveType === '2g') {\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  },\r\n\r\n  /**\r\n   * Optimize for low-end devices\r\n   */\r\n  optimizeForLowEnd(): void {\r\n    if (!this.isLowEndDevice()) return;\r\n\r\n    // Reduce animation complexity\r\n    document.documentElement.style.setProperty('--animation-duration', '0.1s');\r\n    \r\n    // Disable expensive features\r\n    const expensiveElements = document.querySelectorAll('[data-expensive]');\r\n    expensiveElements.forEach(el => {\r\n      (el as HTMLElement).style.display = 'none';\r\n    });\r\n\r\n    logger.info('­şöğ Optimized for low-end device');\r\n  },\r\n\r\n  /**\r\n   * Bundle size analyzer\r\n   */\r\n  analyzeBundleSize(): void {\r\n    if (typeof window === 'undefined') return;\r\n\r\n    const scripts = Array.from(document.querySelectorAll('script[src]'));\r\n    const stylesheets = Array.from(document.querySelectorAll('link[rel=\"stylesheet\"]'));\r\n    \r\n    logger.debug('­şôĞ Bundle Analysis');\r\n    logger.debug(`Scripts: ${scripts.length}`);\r\n    logger.debug(`Stylesheets: ${stylesheets.length}`);\r\n    \r\n    scripts.forEach(script => {\r\n      const src = script.getAttribute('src');\r\n      if (src) {\r\n        logger.debug(`Script: ${src}`);\r\n      }\r\n    });\r\n    \r\n    stylesheets.forEach(link => {\r\n      const href = link.getAttribute('href');\r\n      if (href) {\r\n        logger.debug(`Stylesheet: ${href}`);\r\n      }\r\n    });\r\n  },\r\n};\r\n\r\n// Export singleton instance\r\nexport const performanceMonitor = PerformanceMonitor.getInstance();\r\n\r\n// Default export\r\nexport default PerformanceMonitor;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\lib\\security.ts","messages":[{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":83,"column":7,"nodeType":"Literal","endLine":83,"endColumn":60},{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":86,"column":7,"nodeType":"Literal","endLine":86,"endColumn":60},{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":87,"column":7,"nodeType":"Literal","endLine":87,"endColumn":60},{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":88,"column":7,"nodeType":"Literal","endLine":88,"endColumn":57},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":129,"column":59,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":129,"endColumn":61,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3606,3608],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Security Utilities for Kafkasder Management Panel\r\n * Provides security validation, sanitization, and protection mechanisms\r\n */\r\n\r\nimport DOMPurify from 'dompurify';\r\n\r\n// Security configuration\r\nexport const SECURITY_CONFIG = {\r\n  MAX_INPUT_LENGTH: 10000,\r\n  MAX_FILE_SIZE: 10 * 1024 * 1024, // 10MB\r\n  ALLOWED_FILE_TYPES: ['image/jpeg', 'image/png', 'image/gif', 'application/pdf'],\r\n  SESSION_TIMEOUT: 30 * 60 * 1000, // 30 minutes\r\n  MAX_LOGIN_ATTEMPTS: 5,\r\n  RATE_LIMIT_WINDOW: 15 * 60 * 1000, // 15 minutes\r\n  RATE_LIMIT_MAX_REQUESTS: 100,\r\n} as const;\r\n\r\n/**\r\n * Input sanitization utilities\r\n */\r\nexport const SecurityUtils = {\r\n  /**\r\n   * Sanitize HTML content\r\n   */\r\n  sanitizeHTML: (input: string): string => {\r\n    if (typeof window !== 'undefined') {\r\n      return DOMPurify.sanitize(input, {\r\n        ALLOWED_TAGS: ['b', 'i', 'em', 'strong', 'p', 'br'],\r\n        ALLOWED_ATTR: [],\r\n      });\r\n    }\r\n    return input.replace(/<[^>]*>/g, '');\r\n  },\r\n\r\n  /**\r\n   * Sanitize user input\r\n   */\r\n  sanitizeInput: (input: string): string => {\r\n    return input\r\n      .replace(/[<>'\"&]/g, '')\r\n      .replace(/javascript:/gi, '')\r\n      .replace(/on\\w+=/gi, '')\r\n      .trim();\r\n  },\r\n\r\n  /**\r\n   * Validate file upload\r\n   */\r\n  validateFile: (file: File): { isValid: boolean; error?: string } => {\r\n    if (file.size > SECURITY_CONFIG.MAX_FILE_SIZE) {\r\n      return { isValid: false, error: 'Dosya boyutu ├ğok b├╝y├╝k' };\r\n    }\r\n\r\n    if (!SECURITY_CONFIG.ALLOWED_FILE_TYPES.includes(file.type)) {\r\n      return { isValid: false, error: 'Desteklenmeyen dosya t├╝r├╝' };\r\n    }\r\n\r\n    return { isValid: true };\r\n  },\r\n\r\n  /**\r\n   * Generate secure random string\r\n   */\r\n  generateSecureToken: (length = 32): string => {\r\n    const array = new Uint8Array(length);\r\n    crypto.getRandomValues(array);\r\n    return Array.from(array, byte => byte.toString(16).padStart(2, '0')).join('');\r\n  },\r\n\r\n  /**\r\n   * Validate CSRF token\r\n   */\r\n  validateCSRFToken: (token: string, sessionToken: string): boolean => {\r\n    return token === sessionToken && token.length > 0;\r\n  },\r\n\r\n  /**\r\n   * Check for XSS patterns\r\n   */\r\n  detectXSS: (input: string): boolean => {\r\n    const xssPatterns = [\r\n      /<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi,\r\n      /javascript:/gi,\r\n      /on\\w+\\s*=/gi,\r\n      /<iframe\\b[^<]*(?:(?!<\\/iframe>)<[^<]*)*<\\/iframe>/gi,\r\n      /<object\\b[^<]*(?:(?!<\\/object>)<[^<]*)*<\\/object>/gi,\r\n      /<embed\\b[^<]*(?:(?!<\\/embed>)<[^<]*)*<\\/embed>/gi,\r\n    ];\r\n\r\n    return xssPatterns.some(pattern => pattern.test(input));\r\n  },\r\n\r\n  /**\r\n   * Validate email format\r\n   */\r\n  validateEmail: (email: string): boolean => {\r\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\r\n    return emailRegex.test(email) && email.length <= 254;\r\n  },\r\n\r\n  /**\r\n   * Validate Turkish phone number\r\n   */\r\n  validateTurkishPhone: (phone: string): boolean => {\r\n    const phoneRegex = /^(\\+90|0)?[5][0-9]{9}$/;\r\n    return phoneRegex.test(phone);\r\n  },\r\n\r\n  /**\r\n   * Validate TC Kimlik No\r\n   */\r\n  validateTCKimlik: (tcNo: string): boolean => {\r\n    if (!/^[1-9][0-9]{10}$/.test(tcNo)) return false;\r\n\r\n    const digits = tcNo.split('').map(Number);\r\n    const sum1 = digits[0] + digits[2] + digits[4] + digits[6] + digits[8];\r\n    const sum2 = digits[1] + digits[3] + digits[5] + digits[7];\r\n\r\n    return (sum1 * 7 - sum2) % 10 === digits[9];\r\n  },\r\n\r\n  /**\r\n   * Rate limiting check\r\n   */\r\n  checkRateLimit: (identifier: string): boolean => {\r\n    const key = `rate_limit_${identifier}`;\r\n    const now = Date.now();\r\n    const requests = JSON.parse(localStorage.getItem(key) || '[]');\r\n    \r\n    // Remove old requests\r\n    const validRequests = requests.filter((time: number) => \r\n      now - time < SECURITY_CONFIG.RATE_LIMIT_WINDOW\r\n    );\r\n\r\n    if (validRequests.length >= SECURITY_CONFIG.RATE_LIMIT_MAX_REQUESTS) {\r\n      return false;\r\n    }\r\n\r\n    validRequests.push(now);\r\n    localStorage.setItem(key, JSON.stringify(validRequests));\r\n    return true;\r\n  },\r\n\r\n  /**\r\n   * Session security check\r\n   */\r\n  checkSessionSecurity: (): boolean => {\r\n    const lastActivity = localStorage.getItem('last_activity');\r\n    if (!lastActivity) return false;\r\n\r\n    const now = Date.now();\r\n    const timeSinceActivity = now - parseInt(lastActivity);\r\n\r\n    return timeSinceActivity < SECURITY_CONFIG.SESSION_TIMEOUT;\r\n  },\r\n\r\n  /**\r\n   * Update session activity\r\n   */\r\n  updateSessionActivity: (): void => {\r\n    localStorage.setItem('last_activity', Date.now().toString());\r\n  },\r\n};\r\n\r\n// Export default\r\nexport default SecurityUtils;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\lib\\security\\InputSanitizer.ts","messages":[{"ruleId":"security/detect-non-literal-regexp","severity":1,"message":"Found non-literal argument to RegExp Constructor","line":18,"column":28,"nodeType":"NewExpression","endLine":29,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'SQL_INJECTION_PATTERNS' is assigned a value but never used.","line":32,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":29},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'SQL_INJECTION_PATTERNS' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":32,"column":7,"nodeType":null,"messageId":"unusedVar","endLine":32,"endColumn":29},{"ruleId":"security/detect-non-literal-regexp","severity":1,"message":"Found non-literal argument to RegExp Constructor","line":32,"column":32,"nodeType":"NewExpression","endLine":37,"endColumn":19},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":102,"column":73,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":102,"endColumn":75,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3077,3079],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'sessionId' is defined but never used.","line":159,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":159,"endColumn":33},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'sessionId' is defined but never used. Allowed unused args must match /^_/u.","line":159,"column":24,"nodeType":null,"messageId":"unusedVar","endLine":159,"endColumn":33},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":226,"column":9,"nodeType":"UnaryExpression","messageId":"constantShortCircuit","endLine":226,"endColumn":17},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":226,"column":9,"nodeType":"UnaryExpression","messageId":"neverNullish","endLine":226,"endColumn":17},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":261,"column":9,"nodeType":"BinaryExpression","messageId":"constantShortCircuit","endLine":261,"endColumn":23},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":261,"column":9,"nodeType":"BinaryExpression","messageId":"neverNullish","endLine":261,"endColumn":23},{"ruleId":"@typescript-eslint/switch-exhaustiveness-check","severity":2,"message":"Switch is not exhaustive. Cases not matched: \"text\"","line":265,"column":13,"nodeType":"Identifier","messageId":"switchIsNotExhaustive","endLine":265,"endColumn":17,"suggestions":[{"messageId":"addMissingCases","fix":{"range":[8312,8312],"text":"case \"text\": { throw new Error('Not implemented yet: \"text\" case') }\n      "},"desc":"Add branches for missing cases."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":286,"column":62,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":286,"endColumn":64,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8526,8528],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":339,"column":11,"nodeType":"BinaryExpression","messageId":"constantShortCircuit","endLine":339,"endColumn":25},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":339,"column":11,"nodeType":"BinaryExpression","messageId":"neverNullish","endLine":339,"endColumn":25},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":340,"column":9,"nodeType":"MemberExpression","endLine":340,"endColumn":20},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":344,"column":11,"nodeType":"MemberExpression","endLine":344,"endColumn":22},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":346,"column":11,"nodeType":"MemberExpression","endLine":346,"endColumn":22},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":348,"column":11,"nodeType":"MemberExpression","endLine":348,"endColumn":22},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":350,"column":11,"nodeType":"MemberExpression","endLine":350,"endColumn":22},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":353,"column":9,"nodeType":"MemberExpression","endLine":353,"endColumn":20}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Comprehensive Input Sanitization and Security System\r\n * Protects against XSS, SQL Injection, and other security threats\r\n */\r\n\r\n\r\n// Optimized HTML escape map using a Map for O(1) lookup\r\nconst HTML_ESCAPE_MAP = new Map([\r\n  ['&', '&amp;'],\r\n  ['<', '&lt;'],\r\n  ['>', '&gt;'],\r\n  ['\"', '&quot;'],\r\n  [\"'\", '&#x27;'],\r\n  ['/', '&#x2F;'],\r\n]);\r\n\r\n// Safe dangerous patterns using simple RegExp\r\nconst DANGEROUS_PATTERNS = new RegExp([\r\n  '<script[^>]*>[^<]*(?:</script>)?',\r\n  '<iframe[^>]*>[^<]*(?:</iframe>)?',\r\n  '<object[^>]*>[^<]*(?:</object>)?',\r\n  '<embed[^>]*>[^<]*(?:</embed>)?',\r\n  '<link[^>]*>[^<]*(?:</link>)?',\r\n  '<meta[^>]*>[^<]*(?:</meta>)?',\r\n  'javascript:',\r\n  'vbscript:',\r\n  'data:text/html',\r\n  'on\\\\w+\\\\s*=',\r\n].join('|'), 'gi');\r\n\r\n// Optimized SQL injection patterns using a single RegExp\r\nconst SQL_INJECTION_PATTERNS = new RegExp([\r\n  '\\\\bUNION\\\\b|\\\\bSELECT\\\\b|\\\\bINSERT\\\\b|\\\\bUPDATE\\\\b|\\\\bDELETE\\\\b|\\\\bDROP\\\\b|\\\\bCREATE\\\\b|\\\\bALTER\\\\b',\r\n  \"['\\\"\\\\\\\\]\",\r\n  '--',\r\n  '/\\\\*|\\\\*/',\r\n].join('|'), 'gi');\r\n\r\n// XSS Protection\r\n/**\r\n * XSSProtection Service\r\n * \r\n * Service class for handling xssprotection operations\r\n * \r\n * @class XSSProtection\r\n */\r\nexport class XSSProtection {\r\n  private static readonly ALLOWED_TAGS = new Set([\r\n    'b', 'i', 'u', 'strong', 'em', 'p', 'br', 'span', 'div'\r\n  ]);\r\n\r\n  static sanitizeHTML(input: string): string {\r\n    if (!input) return '';\r\n\r\n    // Remove dangerous patterns first\r\n    let sanitized = input.replace(DANGEROUS_PATTERNS, '');\r\n    \r\n    // Remove script tags and content\r\n    sanitized = sanitized.replace(/<script[^>]*>.*?<\\/script>/gi, '');\r\n    sanitized = sanitized.replace(/<script[^>]*>/gi, '');\r\n    \r\n    // Remove iframe tags and content\r\n    sanitized = sanitized.replace(/<iframe[^>]*>.*?<\\/iframe>/gi, '');\r\n    sanitized = sanitized.replace(/<iframe[^>]*>/gi, '');\r\n    \r\n    // Remove event handlers\r\n    sanitized = sanitized.replace(/on\\w+\\s*=\\s*[\"'][^\"']*[\"']/gi, '');\r\n    \r\n    // Remove javascript: protocols\r\n    sanitized = sanitized.replace(/javascript:/gi, '');\r\n    \r\n    // Encode remaining HTML tags and special characters (avoid double encoding)\r\n    sanitized = sanitized.replace(/</g, '&lt;').replace(/>/g, '&gt;');\r\n    sanitized = sanitized.replace(/\"/g, '&quot;').replace(/'/g, '&#x27;');\r\n    sanitized = sanitized.replace(/\\//g, '&#x2F;');\r\n    \r\n    return sanitized;\r\n  }\r\n\r\n  static sanitizeText(input: string): string {\r\n    if (!input) return '';\r\n    return input\r\n      .replace(/</g, '')\r\n      .replace(/>/g, '')\r\n      .replace(/javascript:/gi, '')\r\n      .replace(/vbscript:/gi, '')\r\n      .replace(/on\\w+\\s*=/gi, '');\r\n  }\r\n\r\n  static sanitizeURL(input: string): string {\r\n    if (!input) return '';\r\n    const dangerous = ['javascript:', 'vbscript:', 'data:text/html'];\r\n    for (const pattern of dangerous) {\r\n      if (input.toLowerCase().includes(pattern)) {\r\n        return '';\r\n      }\r\n    }\r\n    return input;\r\n  }\r\n\r\n  static escapeHTML(input: string): string {\r\n    return input.replace(/[&<>\"'/]/g, char => HTML_ESCAPE_MAP.get(char) || char);\r\n  }\r\n\r\n  static hasDangerousContent(input: string): boolean {\r\n    return DANGEROUS_PATTERNS.test(input);\r\n  }\r\n}\r\n\r\n// SQL Injection Protection\r\n/**\r\n * SQLInjectionProtection Service\r\n * \r\n * Service class for handling sqlinjectionprotection operations\r\n * \r\n * @class SQLInjectionProtection\r\n */\r\nexport class SQLInjectionProtection {\r\n  static validate(input: string): boolean {\r\n    if (!input) return true;\r\n    // More aggressive validation - reject any input with SQL keywords\r\n    const hasSQLKeywords = /(\\bUNION\\b|\\bSELECT\\b|\\bINSERT\\b|\\bUPDATE\\b|\\bDELETE\\b|\\bDROP\\b|\\bCREATE\\b|\\bALTER\\b)/i.test(input);\r\n    const hasSQLOperators = /(\\bOR\\b|\\bAND\\b).*\\d+\\s*=\\s*\\d+/i.test(input);\r\n    const hasSQLComments = /(--|\\/\\*|\\*\\/)/.test(input);\r\n    const hasSQLQuotes = /['\";\\\\]/.test(input);\r\n    \r\n    // Return false if any SQL-related suspicious pattern is present\r\n    return !(hasSQLKeywords || hasSQLOperators || hasSQLComments || hasSQLQuotes);\r\n  }\r\n\r\n  static sanitize(input: string): string {\r\n    if (typeof input !== 'string') return '';\r\n    // More aggressive sanitization - remove all dangerous patterns\r\n    return input\r\n      .replace(/(\\bUNION\\b|\\bSELECT\\b|\\bINSERT\\b|\\bUPDATE\\b|\\bDELETE\\b|\\bDROP\\b|\\bCREATE\\b|\\bALTER\\b)/gi, '')\r\n      .replace(/['\";\\\\]/g, '')\r\n      .replace(/--/g, '')\r\n      .replace(/\\/\\*|\\*\\//g, '')\r\n      .replace(/OR\\s+\\d+\\s*=\\s*\\d+/gi, '')\r\n      .replace(/AND\\s+\\d+\\s*=\\s*\\d+/gi, '')\r\n      .replace(/=\\s*\\d+/g, '')\r\n      .trim();\r\n  }\r\n}\r\n\r\n// CSRF Protection\r\n/**\r\n * CSRFProtection Service\r\n * \r\n * Service class for handling csrfprotection operations\r\n * \r\n * @class CSRFProtection\r\n */\r\nexport class CSRFProtection {\r\n  private static readonly tokens = new Map<string, { token: string; expires: number }>();\r\n  private static readonly TOKEN_LENGTH = 32;\r\n  private static readonly TOKEN_EXPIRY = 30 * 60 * 1000; // 30 minutes\r\n\r\n  static generateToken(sessionId?: string): string {\r\n    const token = Array.from({ length: this.TOKEN_LENGTH }, () => \r\n      Math.random().toString(36).charAt(2)\r\n    ).join('');\r\n    \r\n    const expires = Date.now() + this.TOKEN_EXPIRY;\r\n    this.tokens.set(token, { token, expires });\r\n    \r\n    return token;\r\n  }\r\n\r\n  static validateToken(sessionId: string, token: string): boolean {\r\n    const tokenData = this.tokens.get(token);\r\n    if (!tokenData) return false;\r\n    \r\n    if (Date.now() > tokenData.expires) {\r\n      this.tokens.delete(token);\r\n      return false;\r\n    }\r\n    \r\n    return true;\r\n  }\r\n\r\n  static cleanExpiredTokens(): void {\r\n    const now = Date.now();\r\n    for (const [token, data] of this.tokens.entries()) {\r\n      if (now > data.expires) {\r\n        this.tokens.delete(token);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Rate Limiter\r\n/**\r\n * RateLimiter Service\r\n * \r\n * Service class for handling ratelimiter operations\r\n * \r\n * @class RateLimiter\r\n */\r\nexport class RateLimiter {\r\n  private static readonly attempts = new Map<string, { count: number; resetTime: number }>();\r\n  private static readonly MAX_ATTEMPTS = 5;\r\n  private static readonly WINDOW_MS = 15 * 60 * 1000; // 15 minutes\r\n\r\n  static isAllowed(identifier: string): boolean {\r\n    const now = Date.now();\r\n    const attempt = this.attempts.get(identifier);\r\n    \r\n    if (!attempt || now > attempt.resetTime) {\r\n      this.attempts.set(identifier, { count: 1, resetTime: now + this.WINDOW_MS });\r\n      return true;\r\n    }\r\n    \r\n    if (attempt.count >= this.MAX_ATTEMPTS) {\r\n      return false;\r\n    }\r\n    \r\n    attempt.count++;\r\n    return true;\r\n  }\r\n\r\n  static checkLimit(identifier: string, maxAttempts: number, windowMs: number): boolean {\r\n    const now = Date.now();\r\n    const attempt = this.attempts.get(identifier);\r\n    \r\n    if (!attempt ?? now > attempt.resetTime) {\r\n      this.attempts.set(identifier, { count: 1, resetTime: now + windowMs });\r\n      return true;\r\n    }\r\n    \r\n    if (attempt.count >= maxAttempts) {\r\n      return false;\r\n    }\r\n    \r\n    attempt.count++;\r\n    return true;\r\n  }\r\n\r\n  static getRemainingTime(identifier: string): number {\r\n    const attempt = this.attempts.get(identifier);\r\n    if (!attempt) return 0;\r\n    \r\n    return Math.max(0, attempt.resetTime - Date.now());\r\n  }\r\n\r\n  static resetAttempts(identifier: string): void {\r\n    this.attempts.delete(identifier);\r\n  }\r\n}\r\n\r\n// Input Sanitizer\r\n/**\r\n * InputSanitizer Service\r\n * \r\n * Service class for handling inputsanitizer operations\r\n * \r\n * @class InputSanitizer\r\n */\r\nexport class InputSanitizer {\r\n  static sanitize(input: unknown, type: 'text' | 'html' | 'sql' | 'email' | 'phone' | 'url' | 'filepath' = 'text'): string {\r\n    if (input === null ?? input === undefined) return '';\r\n    \r\n    const stringInput = typeof input === 'string' ? input : String(input);\r\n    \r\n    switch (type) {\r\n      case 'html':\r\n        return XSSProtection.sanitizeHTML(stringInput);\r\n      case 'sql':\r\n        return SQLInjectionProtection.sanitize(stringInput);\r\n      case 'email':\r\n        return this.sanitizeEmail(stringInput);\r\n      case 'phone':\r\n        return this.sanitizePhone(stringInput);\r\n      case 'url':\r\n        return this.sanitizeURL(stringInput);\r\n      case 'filepath':\r\n        return this.sanitizeFilePath(stringInput);\r\n      default:\r\n        return this.sanitizeText(stringInput);\r\n    }\r\n  }\r\n\r\n  static sanitizeText(input: string): string {\r\n    return input\r\n      .trim()\r\n      .replace(/[<>\"'&]/g, char => HTML_ESCAPE_MAP.get(char) || char)\r\n      .replace(/[\\x00-\\x1F\\x7F]/g, ''); // Remove control characters\r\n  }\r\n\r\n  static sanitizeEmail(input: string): string {\r\n    return input\r\n      .trim()\r\n      .toLowerCase()\r\n      .replace(/[^a-z0-9.@_-]/g, '');\r\n  }\r\n\r\n  static sanitizePhone(input: string): string {\r\n    return input\r\n      .replace(/[^\\d+]/g, '')\r\n      .slice(0, 15); // Maximum length for international numbers\r\n  }\r\n\r\n  static sanitizeURL(input: string): string {\r\n    try {\r\n      const url = new URL(input.trim());\r\n      return ['http:', 'https:'].includes(url.protocol) ? url.toString() : '';\r\n    } catch {\r\n      return '';\r\n    }\r\n  }\r\n\r\n  static sanitizeFilePath(input: string): string {\r\n    return input\r\n      .replace(/\\.\\./g, '') // Remove parent directory references\r\n      .replace(/[<>:\"|?*]/g, '') // Remove invalid filename characters\r\n      .replace(/^[./\\\\]+|[./\\\\]+$/g, '') // Remove leading/trailing dots and slashes\r\n      .trim();\r\n  }\r\n\r\n  static sanitizeUserInput(input: string, type = 'text'): string {\r\n    switch (type) {\r\n      case 'email':\r\n        return this.sanitizeEmail(input);\r\n      case 'phone':\r\n        return this.sanitizePhone(input);\r\n      case 'tcKimlik':\r\n        return input.replace(/[^\\d]/g, '').slice(0, 11);\r\n      case 'iban':\r\n        return input.replace(/[^\\dA-Z]/gi, '').toUpperCase();\r\n      default:\r\n        return this.sanitizeText(input);\r\n    }\r\n  }\r\n\r\n  static sanitizeFormData(formData: Record<string, unknown>): Record<string, string> {\r\n    const result: Record<string, string> = {};\r\n\r\n    for (const [key, value] of Object.entries(formData)) {\r\n      if (value === null ?? value === undefined) {\r\n        result[key] = '';\r\n      } else if (typeof value === 'string') {\r\n        // Determine field type based on key name\r\n        if (key.toLowerCase().includes('email')) {\r\n          result[key] = this.sanitizeEmail(value);\r\n        } else if (key.toLowerCase().includes('phone')) {\r\n          result[key] = this.sanitizePhone(value);\r\n        } else if (key.toLowerCase().includes('url')) {\r\n          result[key] = this.sanitizeURL(value);\r\n        } else {\r\n          result[key] = this.sanitizeText(value);\r\n        }\r\n      } else {\r\n        result[key] = String(value);\r\n      }\r\n    }\r\n\r\n    return result;\r\n  }\r\n}\r\n\r\n// Security validation rules\r\nexport const SecurityValidationRules = {\r\n  noScriptTags: {\r\n    validate: (input: string) => ({\r\n      isValid: !XSSProtection.hasDangerousContent(input),\r\n      message: 'Script etiketleri izin verilmez',\r\n      severity: 'error' as const,\r\n    }),\r\n  },\r\n\r\n  noSQLInjection: {\r\n    validate: (input: string) => ({\r\n      isValid: SQLInjectionProtection.validate(input),\r\n      message: 'Ge├ğersiz karakterler tespit edildi',\r\n      severity: 'error' as const,\r\n    }),\r\n  },\r\n\r\n  maxLength: (max: number) => ({\r\n    validate: (input: string) => ({\r\n      isValid: input.length <= max,\r\n      message: `Maksimum ${max} karakter olmal─▒d─▒r`,\r\n      severity: 'error' as const,\r\n    }),\r\n  }),\r\n\r\n  noSpecialChars: {\r\n    validate: (input: string) => ({\r\n      isValid: /^[a-zA-Z├ğ─ş─▒├Â┼ş├╝├ç─ŞI─░├û┼Ş├£0-9\\s._-]*$/.test(input),\r\n      message: '├ûzel karakterler izin verilmez',\r\n      severity: 'warning' as const,\r\n    }),\r\n  },\r\n};\r\n\r\n// Security headers helper\r\nexport const SecurityHeaders = {\r\n  getCSPHeader(): string {\r\n    return [\r\n      \"default-src 'self'\",\r\n      \"script-src 'self' 'unsafe-inline' 'unsafe-eval'\",\r\n      \"style-src 'self' 'unsafe-inline'\",\r\n      \"img-src 'self' data: https:\",\r\n      \"font-src 'self' data:\",\r\n      \"connect-src 'self' https://*.supabase.co\",\r\n      \"frame-ancestors 'none'\",\r\n      \"base-uri 'self'\",\r\n      \"form-action 'self'\",\r\n    ].join('; ');\r\n  },\r\n\r\n  getSecurityHeaders(): Record<string, string> {\r\n    return {\r\n      'Content-Security-Policy': this.getCSPHeader(),\r\n      'X-Frame-Options': 'DENY',\r\n      'X-Content-Type-Options': 'nosniff',\r\n      'X-XSS-Protection': '1; mode=block',\r\n      'Referrer-Policy': 'strict-origin-when-cross-origin',\r\n      'Permissions-Policy': 'camera=(), microphone=(), geolocation=()',\r\n    };\r\n  },\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\lib\\security\\PermissionManager.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":120,"column":20,"nodeType":"LogicalExpression","messageId":"alwaysTruthy","endLine":120,"endColumn":63},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":120,"column":41,"nodeType":"MemberExpression","endLine":120,"endColumn":63},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":142,"column":27,"nodeType":"MemberExpression","endLine":142,"endColumn":54},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'action' is assigned a value but never used.","line":163,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":163,"endColumn":20},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'action' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":163,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":163,"endColumn":20},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":207,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":207,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5390,5393],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5390,5393],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":210,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":210,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5541,5544],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5541,5544],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":226,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":226,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5891,5894],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5891,5894],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":229,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":229,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6042,6045],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6042,6045],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":249,"column":73,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":249,"endColumn":76,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6471,6474],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6471,6474],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":258,"column":24,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":258,"endColumn":26,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6781,6783],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":1,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":271,"column":10,"nodeType":null,"messageId":"preferOptionalChain","endLine":271,"endColumn":69,"suggestions":[{"fix":{"range":[7081,7140],"text":"import.meta?.env?.PROD"},"messageId":"optionalChainSuggest","desc":"Change to an optional chain."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":271,"column":63,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":271,"endColumn":65,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[7134,7136],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":316,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":316,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8116,8119],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8116,8119],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview PermissionManager Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { logger } from './logging/logger';\r\n/**\r\n * Role-Based Access Control (RBAC) System\r\n * Manages user roles, permissions, and access control\r\n */\r\n\r\nexport type Permission =\r\n  | 'read:beneficiaries'\r\n  | 'write:beneficiaries'\r\n  | 'delete:beneficiaries'\r\n  | 'read:donations'\r\n  | 'write:donations'\r\n  | 'delete:donations'\r\n  | 'read:members'\r\n  | 'write:members'\r\n  | 'delete:members'\r\n  | 'read:reports'\r\n  | 'write:reports'\r\n  | 'read:settings'\r\n  | 'write:settings'\r\n  | 'admin:users'\r\n  | 'admin:system'\r\n  | 'admin:security';\r\n\r\nexport type UserRole = 'super_admin' | 'admin' | 'manager' | 'operator' | 'viewer' | 'volunteer';\r\n\r\n// Role hierarchy and permissions\r\nexport const ROLE_HIERARCHY: Record<UserRole, number> = {\r\n  super_admin: 100,\r\n  admin: 80,\r\n  manager: 60,\r\n  operator: 40,\r\n  viewer: 20,\r\n  volunteer: 10,\r\n};\r\n\r\nexport const ROLE_PERMISSIONS: Record<UserRole, Permission[]> = {\r\n  super_admin: [\r\n    'read:beneficiaries',\r\n    'write:beneficiaries',\r\n    'delete:beneficiaries',\r\n    'read:donations',\r\n    'write:donations',\r\n    'delete:donations',\r\n    'read:members',\r\n    'write:members',\r\n    'delete:members',\r\n    'read:reports',\r\n    'write:reports',\r\n    'read:settings',\r\n    'write:settings',\r\n    'admin:users',\r\n    'admin:system',\r\n    'admin:security',\r\n  ],\r\n\r\n  admin: [\r\n    'read:beneficiaries',\r\n    'write:beneficiaries',\r\n    'delete:beneficiaries',\r\n    'read:donations',\r\n    'write:donations',\r\n    'delete:donations',\r\n    'read:members',\r\n    'write:members',\r\n    'delete:members',\r\n    'read:reports',\r\n    'write:reports',\r\n    'read:settings',\r\n    'write:settings',\r\n    'admin:users',\r\n  ],\r\n\r\n  manager: [\r\n    'read:beneficiaries',\r\n    'write:beneficiaries',\r\n    'read:donations',\r\n    'write:donations',\r\n    'read:members',\r\n    'write:members',\r\n    'read:reports',\r\n    'write:reports',\r\n    'read:settings',\r\n  ],\r\n\r\n  operator: [\r\n    'read:beneficiaries',\r\n    'write:beneficiaries',\r\n    'read:donations',\r\n    'write:donations',\r\n    'read:members',\r\n    'read:reports',\r\n  ],\r\n\r\n  viewer: ['read:beneficiaries', 'read:donations', 'read:members', 'read:reports'],\r\n\r\n  volunteer: ['read:beneficiaries', 'read:donations'],\r\n};\r\n\r\n/**\r\n * PermissionManager Service\r\n * \r\n * Service class for handling permissionmanager operations\r\n * \r\n * @class PermissionManager\r\n */\r\nexport class PermissionManager {\r\n  private static currentUser: { role: UserRole; permissions: Permission[] } | null = null;\r\n\r\n  static setCurrentUser(role: UserRole, customPermissions?: Permission[]): void {\r\n    this.currentUser = {\r\n      role,\r\n      permissions: customPermissions ?? ROLE_PERMISSIONS[role] || [],\r\n    };\r\n  }\r\n\r\n  static getCurrentUser(): { role: UserRole; permissions: Permission[] } | null {\r\n    return this.currentUser;\r\n  }\r\n\r\n  static hasPermission(permission: Permission): boolean {\r\n    if (!this.currentUser) return false;\r\n    return this.currentUser.permissions.includes(permission);\r\n  }\r\n\r\n  static hasRole(role: UserRole): boolean {\r\n    if (!this.currentUser) return false;\r\n    return this.currentUser.role === role;\r\n  }\r\n\r\n  static hasMinimumRole(minimumRole: UserRole): boolean {\r\n    if (!this.currentUser) return false;\r\n\r\n    const currentLevel = ROLE_HIERARCHY[this.currentUser.role];\r\n    const requiredLevel = ROLE_HIERARCHY[minimumRole];\r\n\r\n    return currentLevel >= requiredLevel;\r\n  }\r\n\r\n  static canAccess(resource: string, action: 'read' | 'write' | 'delete'): boolean {\r\n    const permission: Permission = `${action}:${resource}` as Permission;\r\n    return this.hasPermission(permission);\r\n  }\r\n\r\n  static canManage(resource: 'users' | 'system' | 'security'): boolean {\r\n    const permission: Permission = `admin:${resource}` as Permission;\r\n    return this.hasPermission(permission);\r\n  }\r\n\r\n  static getAccessibleResources(): string[] {\r\n    if (!this.currentUser) return [];\r\n\r\n    const resources = new Set<string>();\r\n\r\n    this.currentUser.permissions.forEach((permission) => {\r\n      const [action, resource] = permission.split(':');\r\n      if (resource) {\r\n        resources.add(resource);\r\n      }\r\n    });\r\n\r\n    return Array.from(resources);\r\n  }\r\n\r\n  static getPermissionsByResource(resource: string): string[] {\r\n    if (!this.currentUser) return [];\r\n\r\n    return this.currentUser.permissions\r\n      .filter((permission) => permission.endsWith(`:${resource}`))\r\n      .map((permission) => permission.split(':')[0]);\r\n  }\r\n\r\n  static requirePermission(permission: Permission): void {\r\n    if (!this.hasPermission(permission)) {\r\n      throw new Error(`Bu i┼şlem i├ğin '${permission}' yetkisi gereklidir`);\r\n    }\r\n  }\r\n\r\n  static requireRole(role: UserRole): void {\r\n    if (!this.hasRole(role)) {\r\n      throw new Error(`Bu i┼şlem i├ğin '${role}' rol├╝ gereklidir`);\r\n    }\r\n  }\r\n\r\n  static requireMinimumRole(minimumRole: UserRole): void {\r\n    if (!this.hasMinimumRole(minimumRole)) {\r\n      throw new Error(`Bu i┼şlem i├ğin en az '${minimumRole}' rol├╝ gereklidir`);\r\n    }\r\n  }\r\n}\r\n\r\n// Permission decorators for functions\r\n/**\r\n * requirePermission function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function requirePermission(permission: Permission) {\r\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\r\n    const originalMethod = descriptor.value;\r\n\r\n    descriptor.value = function (...args: any[]) {\r\n      PermissionManager.requirePermission(permission);\r\n      return originalMethod.apply(this, args);\r\n    };\r\n\r\n    return descriptor;\r\n  };\r\n}\r\n\r\n/**\r\n * requireRole function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function requireRole(role: UserRole) {\r\n  return function (target: any, propertyKey: string, descriptor: PropertyDescriptor) {\r\n    const originalMethod = descriptor.value;\r\n\r\n    descriptor.value = function (...args: any[]) {\r\n      PermissionManager.requireRole(role);\r\n      return originalMethod.apply(this, args);\r\n    };\r\n\r\n    return descriptor;\r\n  };\r\n}\r\n\r\n// Audit logging\r\n/**\r\n * AuditLogger Service\r\n * \r\n * Service class for handling auditlogger operations\r\n * \r\n * @class AuditLogger\r\n */\r\nexport class AuditLogger {\r\n  private static logs: AuditLog[] = [];\r\n\r\n  static log(action: string, resource: string, details?: Record<string, any>): void {\r\n    const user = PermissionManager.getCurrentUser();\r\n\r\n    const auditLog: AuditLog = {\r\n      id: crypto.getRandomValues(new Uint8Array(16)).join(''),\r\n      timestamp: new Date().toISOString(),\r\n      userId: user?.role ?? 'anonymous',\r\n      action,\r\n      resource,\r\n      details: details || {},\r\n      ip: this.getClientIP(),\r\n      userAgent: navigator.userAgent,\r\n    };\r\n\r\n    this.logs.push(auditLog);\r\n\r\n    // Keep only last 1000 logs in memory\r\n    if (this.logs.length > 1000) {\r\n      this.logs = this.logs.slice(-1000);\r\n    }\r\n\r\n    // In production, send to backend\r\n    if ((typeof import.meta !== 'undefined' && import.meta.env?.PROD) || process.env.NODE_ENV === 'production') {\r\n      this.sendToBackend(auditLog);\r\n    }\r\n  }\r\n\r\n  private static getClientIP(): string {\r\n    // This would need to be implemented on the backend\r\n    return 'unknown';\r\n  }\r\n\r\n  private static async sendToBackend(log: AuditLog): Promise<void> {\r\n    try {\r\n      // Send audit log to backend API\r\n      await fetch('/api/audit-logs', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(log),\r\n      });\r\n    } catch (error) {\r\n      logger.error('Failed to send audit log:', error);\r\n    }\r\n  }\r\n\r\n  static getLogs(): AuditLog[] {\r\n    return [...this.logs];\r\n  }\r\n\r\n  static clearLogs(): void {\r\n    this.logs = [];\r\n  }\r\n}\r\n\r\n/**\r\n * AuditLog Interface\r\n * \r\n * @interface AuditLog\r\n */\r\nexport interface AuditLog {\r\n  id: string;\r\n  timestamp: string;\r\n  userId: string;\r\n  action: string;\r\n  resource: string;\r\n  details: Record<string, any>;\r\n  ip: string;\r\n  userAgent: string;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\lib\\security\\SecurityMiddleware.ts","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'./PermissionManager' import is duplicated.","line":6,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":6,"endColumn":70},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":19,"column":49,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":19,"endColumn":51,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[562,564],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":19,"column":54,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":19,"endColumn":56,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[567,569],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":19,"column":70,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":19,"endColumn":72,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[583,585],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":53,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":21},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":53,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":53,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3061,3064],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3061,3064],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3540,3543],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3540,3543],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":116,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3751,3754],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3751,3754],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":116,"column":92,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":95,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3798,3801],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3798,3801],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":129,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4091,4094],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4091,4094],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":129,"column":91,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":129,"endColumn":94,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4138,4141],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4138,4141],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":83,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":86,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4472,4475],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4472,4475],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":168,"column":12,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":168,"endColumn":26},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":180,"column":12,"nodeType":"MemberExpression","endLine":180,"endColumn":40},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":1,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":211,"column":18,"nodeType":null,"messageId":"preferOptionalChain","endLine":211,"endColumn":77,"suggestions":[{"fix":{"range":[6313,6372],"text":"import.meta?.env?.PROD"},"messageId":"optionalChainSuggest","desc":"Change to an optional chain."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":211,"column":71,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":211,"endColumn":73,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[6366,6368],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":1,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":237,"column":12,"nodeType":null,"messageId":"preferOptionalChain","endLine":237,"endColumn":71,"suggestions":[{"fix":{"range":[7071,7130],"text":"import.meta?.env?.PROD"},"messageId":"optionalChainSuggest","desc":"Change to an optional chain."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":237,"column":65,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":237,"endColumn":67,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[7124,7126],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":293,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":293,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8464,8467],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8464,8467],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":297,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":297,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8582,8585],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8582,8585],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":304,"column":14,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":304,"endColumn":17,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8837,8840],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8837,8840],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":328,"column":18,"nodeType":"MemberExpression","endLine":328,"endColumn":34}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Security Middleware for API calls and data protection\r\n */\r\n\r\nimport type { Permission } from './PermissionManager';\r\nimport { PermissionManager, AuditLogger } from './PermissionManager';\r\nimport { InputSanitizer, CSRFProtection, RateLimiter } from './InputSanitizer';\r\n\r\nimport { logger } from './logging/logger';\r\n// API Security Wrapper\r\n/**\r\n * SecureAPIClient Service\r\n * \r\n * Service class for handling secureapiclient operations\r\n * \r\n * @class SecureAPIClient\r\n */\r\nexport class SecureAPIClient {\r\n  private static readonly baseURL = (import.meta?.env?.VITE_API_URL) || process.env.VITE_API_URL ?? '';\r\n  private static readonly sessionId = crypto.getRandomValues(new Uint8Array(16)).join('');\r\n\r\n  static async secureRequest(\r\n    endpoint: string,\r\n    options: RequestInit = {},\r\n    requiredPermission?: Permission,\r\n  ): Promise<Response> {\r\n    // Permission check\r\n    if (requiredPermission && !PermissionManager.hasPermission(requiredPermission)) {\r\n      throw new Error(`Bu i┼şlem i├ğin '${requiredPermission}' yetkisi gereklidir`);\r\n    }\r\n\r\n    // Rate limiting\r\n    const identifier = this.getClientIdentifier();\r\n    if (!RateLimiter.checkLimit(identifier, 100, 60000)) {\r\n      // 100 requests per minute\r\n      throw new Error('├çok fazla istek g├Ânderiyorsunuz. L├╝tfen bekleyiniz.');\r\n    }\r\n\r\n    // CSRF protection for state-changing operations\r\n    const isStateChanging = ['POST', 'PUT', 'PATCH', 'DELETE'].includes(options.method ?? 'GET');\r\n    let csrfToken = '';\r\n\r\n    if (isStateChanging) {\r\n      csrfToken = CSRFProtection.generateToken(this.sessionId);\r\n    }\r\n\r\n    // Sanitize request body\r\n    if (options.body && typeof options.body === 'string') {\r\n      try {\r\n        const bodyData = JSON.parse(options.body);\r\n        const sanitizedData = InputSanitizer.sanitizeFormData(bodyData);\r\n        options.body = JSON.stringify(sanitizedData);\r\n      } catch (error) {\r\n        // If not JSON, sanitize as text\r\n        options.body = InputSanitizer.sanitizeUserInput(options.body, 'text');\r\n      }\r\n    }\r\n\r\n    // Add security headers\r\n    const secureHeaders = {\r\n      'Content-Type': 'application/json',\r\n      'X-Requested-With': 'XMLHttpRequest',\r\n      ...(isStateChanging && { 'X-CSRF-Token': csrfToken }),\r\n      'X-Client-Version': '1.0.0',\r\n      'X-Timestamp': Date.now().toString(),\r\n      ...options.headers,\r\n    };\r\n\r\n    // Audit logging\r\n    AuditLogger.log('api_request', endpoint, {\r\n      method: options.method ?? 'GET',\r\n      hasPermission: !!requiredPermission,\r\n      bodySize: options.body ? options.body.length : 0,\r\n    });\r\n\r\n    try {\r\n      const response = await fetch(this.baseURL + endpoint, {\r\n        ...options,\r\n        headers: secureHeaders,\r\n      });\r\n\r\n      // Log response\r\n      AuditLogger.log('api_response', endpoint, {\r\n        status: response.status,\r\n        success: response.ok,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`API Error: ${response.status} ${response.statusText}`);\r\n      }\r\n\r\n      return response;\r\n    } catch (error: any) {\r\n      // Log error\r\n      AuditLogger.log('api_error', endpoint, {\r\n        error: error.message,\r\n        method: options.method ?? 'GET',\r\n      });\r\n\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  private static getClientIdentifier(): string {\r\n    // Create a client identifier for rate limiting\r\n    return `${navigator.userAgent.slice(0, 50)}_${this.sessionId}`;\r\n  }\r\n\r\n  // Secure GET request\r\n  static async get(endpoint: string, requiredPermission?: Permission): Promise<any> {\r\n    const response = await this.secureRequest(endpoint, { method: 'GET' }, requiredPermission);\r\n    return response.json();\r\n  }\r\n\r\n  // Secure POST request\r\n  static async post(endpoint: string, data: any, requiredPermission?: Permission): Promise<any> {\r\n    const response = await this.secureRequest(\r\n      endpoint,\r\n      {\r\n        method: 'POST',\r\n        body: JSON.stringify(data),\r\n      },\r\n      requiredPermission,\r\n    );\r\n    return response.json();\r\n  }\r\n\r\n  // Secure PUT request\r\n  static async put(endpoint: string, data: any, requiredPermission?: Permission): Promise<any> {\r\n    const response = await this.secureRequest(\r\n      endpoint,\r\n      {\r\n        method: 'PUT',\r\n        body: JSON.stringify(data),\r\n      },\r\n      requiredPermission,\r\n    );\r\n    return response.json();\r\n  }\r\n\r\n  // Secure DELETE request\r\n  static async delete(endpoint: string, requiredPermission?: Permission): Promise<any> {\r\n    const response = await this.secureRequest(endpoint, { method: 'DELETE' }, requiredPermission);\r\n    return response.json();\r\n  }\r\n}\r\n\r\n// Security Context Provider\r\n/**\r\n * SecurityContext Service\r\n * \r\n * Service class for handling securitycontext operations\r\n * \r\n * @class SecurityContext\r\n */\r\nexport class SecurityContext {\r\n  private static instance: SecurityContext | null = null;\r\n  private securityConfig: SecurityConfig;\r\n\r\n  private constructor(config: SecurityConfig) {\r\n    this.securityConfig = config;\r\n  }\r\n\r\n  static getInstance(config?: SecurityConfig): SecurityContext {\r\n    if (!this.instance && config) {\r\n      this.instance = new SecurityContext(config);\r\n    }\r\n    return this.instance!;\r\n  }\r\n\r\n  getConfig(): SecurityConfig {\r\n    return this.securityConfig;\r\n  }\r\n\r\n  updateConfig(updates: Partial<SecurityConfig>): void {\r\n    this.securityConfig = { ...this.securityConfig, ...updates };\r\n  }\r\n\r\n  isFeatureEnabled(feature: keyof SecurityConfig): boolean {\r\n    return this.securityConfig[feature] === true;\r\n  }\r\n}\r\n\r\n/**\r\n * SecurityConfig Interface\r\n * \r\n * @interface SecurityConfig\r\n */\r\nexport interface SecurityConfig {\r\n  enableXSSProtection: boolean;\r\n  enableSQLInjectionProtection: boolean;\r\n  enableCSRFProtection: boolean;\r\n  enableRateLimiting: boolean;\r\n  enableAuditLogging: boolean;\r\n  enableInputSanitization: boolean;\r\n  maxRequestsPerMinute: number;\r\n  sessionTimeoutMinutes: number;\r\n  requireHTTPS: boolean;\r\n}\r\n\r\n// Default security configuration\r\nexport const DEFAULT_SECURITY_CONFIG: SecurityConfig = {\r\n  enableXSSProtection: true,\r\n  enableSQLInjectionProtection: true,\r\n  enableCSRFProtection: true,\r\n  enableRateLimiting: true,\r\n  enableAuditLogging: true,\r\n  enableInputSanitization: true,\r\n  maxRequestsPerMinute: 100,\r\n  sessionTimeoutMinutes: 60,\r\n  requireHTTPS: (typeof import.meta !== 'undefined' && import.meta.env?.PROD) || process.env.NODE_ENV === 'production',\r\n};\r\n\r\n// Security monitoring\r\n/**\r\n * SecurityMonitor Service\r\n * \r\n * Service class for handling securitymonitor operations\r\n * \r\n * @class SecurityMonitor\r\n */\r\nexport class SecurityMonitor {\r\n  private static threats: SecurityThreat[] = [];\r\n\r\n  static reportThreat(threat: SecurityThreat): void {\r\n    this.threats.push({\r\n      ...threat,\r\n      timestamp: new Date().toISOString(),\r\n      id: crypto.getRandomValues(new Uint8Array(16)).join(''),\r\n    });\r\n\r\n    // Alert if critical\r\n    if (threat.severity === 'critical') {\r\n      logger.error('CRITICAL SECURITY THREAT:', threat);\r\n\r\n      // In production, send to security service\r\n      if ((typeof import.meta !== 'undefined' && import.meta.env?.PROD) || process.env.NODE_ENV === 'production') {\r\n        this.sendThreatAlert(threat);\r\n      }\r\n    }\r\n\r\n    // Keep only last 1000 threats\r\n    if (this.threats.length > 1000) {\r\n      this.threats = this.threats.slice(-1000);\r\n    }\r\n  }\r\n\r\n  private static async sendThreatAlert(threat: SecurityThreat): Promise<void> {\r\n    try {\r\n      await fetch('/api/security/threats', {\r\n        method: 'POST',\r\n        headers: { 'Content-Type': 'application/json' },\r\n        body: JSON.stringify(threat),\r\n      });\r\n    } catch (error) {\r\n      logger.error('Failed to send threat alert:', error);\r\n    }\r\n  }\r\n\r\n  static getThreats(): SecurityThreat[] {\r\n    return [...this.threats];\r\n  }\r\n\r\n  static getThreatsByType(type: string): SecurityThreat[] {\r\n    return this.threats.filter((threat) => threat.type === type);\r\n  }\r\n\r\n  static clearThreats(): void {\r\n    this.threats = [];\r\n  }\r\n}\r\n\r\n/**\r\n * SecurityThreat Interface\r\n * \r\n * @interface SecurityThreat\r\n */\r\nexport interface SecurityThreat {\r\n  id?: string;\r\n  type:\r\n    | 'xss'\r\n    | 'sql_injection'\r\n    | 'csrf'\r\n    | 'rate_limit'\r\n    | 'unauthorized_access'\r\n    | 'suspicious_input';\r\n  severity: 'low' | 'medium' | 'high' | 'critical';\r\n  message: string;\r\n  source: string;\r\n  userAgent?: string;\r\n  ip?: string;\r\n  timestamp?: string;\r\n  details?: Record<string, any>;\r\n}\r\n\r\n// Security hooks for React components\r\nexport const useSecurityValidation = (initialData: Record<string, any> = {}) => {\r\n  const [data, setData] = React.useState(initialData);\r\n  const [securityErrors, setSecurityErrors] = React.useState<Record<string, string[]>>({});\r\n\r\n  const validateAndSet = React.useCallback(\r\n    (\r\n      field: string,\r\n      value: any,\r\n      type: 'text' | 'html' | 'url' | 'email' | 'phone' | 'tcKimlik' | 'iban' = 'text',\r\n    ) => {\r\n      // Sanitize input\r\n      const sanitizedValue = InputSanitizer.sanitizeUserInput(value, type);\r\n\r\n      // Check for security threats\r\n      const originalValue = String(value ?? '');\r\n      if (originalValue !== sanitizedValue) {\r\n        SecurityMonitor.reportThreat({\r\n          type: 'suspicious_input',\r\n          severity: 'medium',\r\n          message: `Suspicious input detected in field: ${field}`,\r\n          source: 'form_input',\r\n          details: { field, originalValue, sanitizedValue },\r\n        });\r\n\r\n        setSecurityErrors((prev) => ({\r\n          ...prev,\r\n          [field]: ['G├╝venlik nedeniyle input temizlendi'],\r\n        }));\r\n      } else {\r\n        setSecurityErrors((prev) => {\r\n          const newErrors = { ...prev };\r\n          delete newErrors[field];\r\n          return newErrors;\r\n        });\r\n      }\r\n\r\n      setData((prev) => ({ ...prev, [field]: sanitizedValue }));\r\n    },\r\n    [],\r\n  );\r\n\r\n  const validateAll = React.useCallback(() => {\r\n    const sanitizedData = InputSanitizer.sanitizeFormData(data);\r\n    setData(sanitizedData);\r\n    return sanitizedData;\r\n  }, [data]);\r\n\r\n  return {\r\n    data,\r\n    securityErrors,\r\n    validateAndSet,\r\n    validateAll,\r\n    hasSecurityErrors: Object.keys(securityErrors).length > 0,\r\n  };\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\lib\\security\\__tests__\\InputSanitizer.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\lib\\security\\apiSecurity.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":21,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":21,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[553,556],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[553,556],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":22,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":22,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[595,598],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[595,598],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":150,"column":9,"nodeType":"UnaryExpression","messageId":"constantShortCircuit","endLine":150,"endColumn":16},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":150,"column":9,"nodeType":"UnaryExpression","messageId":"neverNullish","endLine":150,"endColumn":16},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":172,"column":9,"nodeType":"UnaryExpression","messageId":"constantShortCircuit","endLine":172,"endColumn":16},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":172,"column":9,"nodeType":"UnaryExpression","messageId":"neverNullish","endLine":172,"endColumn":16},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":212,"column":48,"nodeType":"MemberExpression","endLine":212,"endColumn":74},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":268,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":268,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6708,6711],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6708,6711],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":271,"column":9,"nodeType":"MemberExpression","endLine":271,"endColumn":32},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":283,"column":9,"nodeType":"BinaryExpression","messageId":"constantShortCircuit","endLine":283,"endColumn":49},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":283,"column":9,"nodeType":"BinaryExpression","messageId":"neverNullish","endLine":283,"endColumn":49},{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":420,"column":26,"nodeType":"Literal","endLine":420,"endColumn":46},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":470,"column":39,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":470,"endColumn":42,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12887,12890],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12887,12890],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview apiSecurity Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { ServiceError, ServiceErrorCode } from '../../services/config';\r\n\r\n// Rate limiting configuration\r\n/**\r\n * RateLimitConfig Interface\r\n * \r\n * @interface RateLimitConfig\r\n */\r\nexport interface RateLimitConfig {\r\n  windowMs: number; // Time window in milliseconds\r\n  maxRequests: number; // Maximum requests per window\r\n  skipSuccessfulRequests?: boolean;\r\n  skipFailedRequests?: boolean;\r\n  keyGenerator?: (req: any) => string;\r\n  onLimitReached?: (req: any) => void;\r\n}\r\n\r\n// API security configuration\r\n/**\r\n * APISecurityConfig Interface\r\n * \r\n * @interface APISecurityConfig\r\n */\r\nexport interface APISecurityConfig {\r\n  rateLimiting: {\r\n    global: RateLimitConfig;\r\n    perEndpoint: Record<string, RateLimitConfig>;\r\n    perUser: RateLimitConfig;\r\n  };\r\n\r\n  inputValidation: {\r\n    maxRequestSize: number;\r\n    allowedContentTypes: string[];\r\n    sanitizeInput: boolean;\r\n    validateSchema: boolean;\r\n  };\r\n\r\n  xssProtection: {\r\n    enabled: boolean;\r\n    allowedTags: string[];\r\n    allowedAttributes: Record<string, string[]>;\r\n  };\r\n\r\n  csrfProtection: {\r\n    enabled: boolean;\r\n    tokenName: string;\r\n    cookieName: string;\r\n    secure: boolean;\r\n    sameSite: 'strict' | 'lax' | 'none';\r\n  };\r\n\r\n  apiVersioning: {\r\n    currentVersion: string;\r\n    supportedVersions: string[];\r\n    deprecationWarnings: boolean;\r\n    forceLatest: boolean;\r\n  };\r\n}\r\n\r\n// Default security configuration\r\nexport const DEFAULT_SECURITY_CONFIG: APISecurityConfig = {\r\n  rateLimiting: {\r\n    global: {\r\n      windowMs: 15 * 60 * 1000, // 15 minutes\r\n      maxRequests: 1000,\r\n      skipSuccessfulRequests: false,\r\n      skipFailedRequests: false,\r\n    },\r\n    perEndpoint: {\r\n      '/api/auth/login': {\r\n        windowMs: 15 * 60 * 1000,\r\n        maxRequests: 5,\r\n      },\r\n      '/api/auth/register': {\r\n        windowMs: 60 * 60 * 1000, // 1 hour\r\n        maxRequests: 3,\r\n      },\r\n      '/api/reports/export': {\r\n        windowMs: 5 * 60 * 1000, // 5 minutes\r\n        maxRequests: 10,\r\n      },\r\n    },\r\n    perUser: {\r\n      windowMs: 15 * 60 * 1000,\r\n      maxRequests: 100,\r\n    },\r\n  },\r\n\r\n  inputValidation: {\r\n    maxRequestSize: 10 * 1024 * 1024, // 10MB\r\n    allowedContentTypes: [\r\n      'application/json',\r\n      'application/x-www-form-urlencoded',\r\n      'multipart/form-data',\r\n      'text/plain',\r\n    ],\r\n    sanitizeInput: true,\r\n    validateSchema: true,\r\n  },\r\n\r\n  xssProtection: {\r\n    enabled: true,\r\n    allowedTags: ['b', 'i', 'em', 'strong', 'p', 'br'],\r\n    allowedAttributes: {\r\n      a: ['href', 'title'],\r\n      img: ['src', 'alt', 'width', 'height'],\r\n    },\r\n  },\r\n\r\n  csrfProtection: {\r\n    enabled: true,\r\n    tokenName: 'csrf-token',\r\n    cookieName: 'csrf-cookie',\r\n    secure: true,\r\n    sameSite: 'strict',\r\n  },\r\n\r\n  apiVersioning: {\r\n    currentVersion: 'v1',\r\n    supportedVersions: ['v1'],\r\n    deprecationWarnings: true,\r\n    forceLatest: false,\r\n  },\r\n};\r\n\r\n// Rate limiter implementation\r\n/**\r\n * RateLimiter Service\r\n * \r\n * Service class for handling ratelimiter operations\r\n * \r\n * @class RateLimiter\r\n */\r\nexport class RateLimiter {\r\n  private readonly requests = new Map<string, { count: number; resetTime: number }>();\r\n\r\n  constructor(private readonly config: RateLimitConfig) {}\r\n\r\n  isAllowed(key: string): boolean {\r\n    const now = Date.now();\r\n    const record = this.requests.get(key);\r\n\r\n    if (!record ?? now > record.resetTime) {\r\n      // Reset or create new record\r\n      this.requests.set(key, {\r\n        count: 1,\r\n        resetTime: now + this.config.windowMs,\r\n      });\r\n      return true;\r\n    }\r\n\r\n    if (record.count >= this.config.maxRequests) {\r\n      if (this.config.onLimitReached) {\r\n        this.config.onLimitReached({ key, count: record.count });\r\n      }\r\n      return false;\r\n    }\r\n\r\n    record.count++;\r\n    return true;\r\n  }\r\n\r\n  getRemainingRequests(key: string): number {\r\n    const record = this.requests.get(key);\r\n    if (!record ?? Date.now() > record.resetTime) {\r\n      return this.config.maxRequests;\r\n    }\r\n    return Math.max(0, this.config.maxRequests - record.count);\r\n  }\r\n\r\n  getResetTime(key: string): number {\r\n    const record = this.requests.get(key);\r\n    return record?.resetTime ?? Date.now() + this.config.windowMs;\r\n  }\r\n\r\n  cleanup(): void {\r\n    const now = Date.now();\r\n    for (const [key, record] of this.requests.entries()) {\r\n      if (now > record.resetTime) {\r\n        this.requests.delete(key);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// Input sanitization utilities\r\n/**\r\n * InputSanitizer Service\r\n * \r\n * Service class for handling inputsanitizer operations\r\n * \r\n * @class InputSanitizer\r\n */\r\nexport class InputSanitizer {\r\n  private static readonly HTML_ESCAPE_MAP: Record<string, string> = {\r\n    '&': '&amp;',\r\n    '<': '&lt;',\r\n    '>': '&gt;',\r\n    '\"': '&quot;',\r\n    \"'\": '&#x27;',\r\n    '/': '&#x2F;',\r\n  };\r\n\r\n  static escapeHtml(text: string): string {\r\n    return text.replace(/[&<>\"'/]/g, (char) => this.HTML_ESCAPE_MAP[char] ?? char);\r\n  }\r\n\r\n  static sanitizeString(input: string): string {\r\n    // Import DOMPurify for robust XSS protection\r\n    const DOMPurify = require('dompurify');\r\n\r\n    // Remove null bytes and control characters (pre-processing)\r\n    let sanitized = input.replace(/[\\x00-\\x1F\\x7F]/g, '');\r\n\r\n    // Use DOMPurify for comprehensive XSS protection\r\n    sanitized = DOMPurify.sanitize(sanitized, {\r\n      // Strip scripts, event handlers, and dangerous URI schemes\r\n      FORBID_TAGS: ['script', 'object', 'embed', 'iframe'],\r\n      FORBID_ATTR: ['onerror', 'onload', 'onclick', 'onmouseover', 'onfocus', 'onblur'],\r\n      ALLOWED_URI_REGEXP:\r\n        /^(?:(?:(?:f|ht)tps?|mailto|tel|callto|sms|cid|xmpp):|[^a-z]|[a-z+.\\-]+(?:[^a-z+.\\-:]|$))/i,\r\n      // Safe SVG handling\r\n      ALLOW_DATA_ATTR: false,\r\n      // Unicode normalization\r\n      KEEP_CONTENT: true,\r\n      // Strict allowlist of tags and attributes\r\n      ADD_ATTR: ['target'],\r\n      ALLOWED_ATTR: ['href', 'title', 'alt', 'class', 'id', 'target'],\r\n      ALLOWED_TAGS: [\r\n        'p',\r\n        'br',\r\n        'strong',\r\n        'em',\r\n        'u',\r\n        'h1',\r\n        'h2',\r\n        'h3',\r\n        'h4',\r\n        'h5',\r\n        'h6',\r\n        'ul',\r\n        'ol',\r\n        'li',\r\n        'a',\r\n      ],\r\n    });\r\n\r\n    return sanitized.trim();\r\n  }\r\n\r\n  static sanitizeObject(obj: unknown): unknown {\r\n    if (typeof obj === 'string') {\r\n      return this.sanitizeString(obj);\r\n    }\r\n\r\n    if (Array.isArray(obj)) {\r\n      return obj.map((item) => this.sanitizeObject(item));\r\n    }\r\n\r\n    if (obj && typeof obj === 'object') {\r\n      const sanitized: any = {};\r\n      for (const [key, value] of Object.entries(obj)) {\r\n        const sanitizedKey = this.sanitizeString(key);\r\n        sanitized[sanitizedKey] = this.sanitizeObject(value);\r\n      }\r\n      return sanitized;\r\n    }\r\n\r\n    return obj;\r\n  }\r\n\r\n  static validateContentType(contentType: string, allowedTypes: string[]): boolean {\r\n    const normalizedType = contentType.toLowerCase().split(';')[0].trim();\r\n    return allowedTypes.some(\r\n      (allowed) =>\r\n        normalizedType === allowed.toLowerCase() ?? normalizedType.startsWith(`${allowed.toLowerCase()  }/`),\r\n    );\r\n  }\r\n}\r\n\r\n// SQL injection prevention\r\n/**\r\n * SQLInjectionPrevention Service\r\n * \r\n * Service class for handling sqlinjectionprevention operations\r\n * \r\n * @class SQLInjectionPrevention\r\n */\r\nexport class SQLInjectionPrevention {\r\n  private static readonly DANGEROUS_PATTERNS = [\r\n    /(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|EXECUTE)\\b)/gi,\r\n    /(\\b(UNION|OR|AND)\\s+\\d+\\s*=\\s*\\d+)/gi,\r\n    /(--|\\/\\*|\\*\\/|;)/g,\r\n    /(\\b(SCRIPT|JAVASCRIPT|VBSCRIPT)\\b)/gi,\r\n    /(\\b(CHAR|NCHAR|VARCHAR|NVARCHAR)\\s*\\(\\s*\\d+\\s*\\))/gi,\r\n  ];\r\n\r\n  static containsSQLInjection(input: string): boolean {\r\n    return this.DANGEROUS_PATTERNS.some((pattern) => pattern.test(input));\r\n  }\r\n\r\n  static sanitizeSQLInput(input: string): string {\r\n    // Only perform harmless normalization - DB interactions must use parameterized queries\r\n    // This function is deprecated in favor of parameterized queries/prepared statements\r\n\r\n    // Trim whitespace\r\n    let sanitized = input.trim();\r\n\r\n    // Optional length limit to prevent buffer overflow attacks\r\n    const MAX_LENGTH = 10000;\r\n    if (sanitized.length > MAX_LENGTH) {\r\n      sanitized = sanitized.substring(0, MAX_LENGTH);\r\n    }\r\n\r\n    // Unicode normalization (harmless)\r\n    sanitized = sanitized.normalize('NFC');\r\n\r\n    // NOTE: All database interactions should use parameterized queries or prepared statements\r\n    // to prevent SQL injection. This function only provides basic normalization.\r\n\r\n    return sanitized;\r\n  }\r\n\r\n  static validateSQLInput(input: unknown): void {\r\n    if (typeof input === 'string' && this.containsSQLInjection(input)) {\r\n      throw new ServiceError(\r\n        ServiceErrorCode.VALIDATION_ERROR,\r\n        'Potentially dangerous SQL patterns detected in input',\r\n        { input: input.substring(0, 100) },\r\n      );\r\n    }\r\n\r\n    if (typeof input === 'object' && input !== null) {\r\n      Object.values(input).forEach((value) => {\r\n        if (typeof value === 'string') {\r\n          this.validateSQLInput(value);\r\n        }\r\n      });\r\n    }\r\n  }\r\n}\r\n\r\n// CSRF token management\r\n/**\r\n * CSRFTokenManager Service\r\n * \r\n * Service class for handling csrftokenmanager operations\r\n * \r\n * @class CSRFTokenManager\r\n */\r\nexport class CSRFTokenManager {\r\n  private static readonly tokens = new Map<string, { token: string; expires: number }>();\r\n\r\n  static generateToken(sessionId: string): string {\r\n    const token = this.generateRandomToken();\r\n    const expires = Date.now() + 24 * 60 * 60 * 1000; // 24 hours\r\n\r\n    this.tokens.set(sessionId, { token, expires });\r\n    return token;\r\n  }\r\n\r\n  static validateToken(sessionId: string, token: string): boolean {\r\n    const record = this.tokens.get(sessionId);\r\n\r\n    if (!record) {\r\n      return false;\r\n    }\r\n\r\n    if (Date.now() > record.expires) {\r\n      this.tokens.delete(sessionId);\r\n      return false;\r\n    }\r\n\r\n    return record.token === token;\r\n  }\r\n\r\n  static refreshToken(sessionId: string): string {\r\n    this.tokens.delete(sessionId);\r\n    return this.generateToken(sessionId);\r\n  }\r\n\r\n  private static generateRandomToken(): string {\r\n    const array = new Uint8Array(32);\r\n    crypto.getRandomValues(array);\r\n    return Array.from(array, (byte) => byte.toString(16).padStart(2, '0')).join('');\r\n  }\r\n\r\n  static cleanup(): void {\r\n    const now = Date.now();\r\n    for (const [sessionId, record] of this.tokens.entries()) {\r\n      if (now > record.expires) {\r\n        this.tokens.delete(sessionId);\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\n// API versioning utilities\r\n/**\r\n * APIVersionManager Service\r\n * \r\n * Service class for handling apiversionmanager operations\r\n * \r\n * @class APIVersionManager\r\n */\r\nexport class APIVersionManager {\r\n  static parseVersion(versionHeader?: string): string {\r\n    if (!versionHeader) {\r\n      return DEFAULT_SECURITY_CONFIG.apiVersioning.currentVersion;\r\n    }\r\n\r\n    // Support different version formats\r\n    const versionMatch = /v?(\\d+(?:\\.\\d+)*)/i.exec(versionHeader);\r\n    return versionMatch\r\n      ? `v${versionMatch[1]}`\r\n      : DEFAULT_SECURITY_CONFIG.apiVersioning.currentVersion;\r\n  }\r\n\r\n  static isVersionSupported(version: string): boolean {\r\n    return DEFAULT_SECURITY_CONFIG.apiVersioning.supportedVersions.includes(version);\r\n  }\r\n\r\n  static isVersionDeprecated(version: string): boolean {\r\n    const {currentVersion} = DEFAULT_SECURITY_CONFIG.apiVersioning;\r\n    return version !== currentVersion && this.isVersionSupported(version);\r\n  }\r\n\r\n  static getDeprecationWarning(version: string): string | null {\r\n    if (!DEFAULT_SECURITY_CONFIG.apiVersioning.deprecationWarnings) {\r\n      return null;\r\n    }\r\n\r\n    if (this.isVersionDeprecated(version)) {\r\n      return `API version ${version} is deprecated. Please upgrade to ${DEFAULT_SECURITY_CONFIG.apiVersioning.currentVersion}`;\r\n    }\r\n\r\n    return null;\r\n  }\r\n}\r\n\r\n// Security headers utility\r\n/**\r\n * SecurityHeaders Service\r\n * \r\n * Service class for handling securityheaders operations\r\n * \r\n * @class SecurityHeaders\r\n */\r\nexport class SecurityHeaders {\r\n  static getSecurityHeaders(): Record<string, string> {\r\n    return {\r\n      'X-Content-Type-Options': 'nosniff',\r\n      'X-Frame-Options': 'DENY',\r\n      'X-XSS-Protection': '1; mode=block',\r\n      'Strict-Transport-Security': 'max-age=31536000; includeSubDomains',\r\n      'Content-Security-Policy':\r\n        \"default-src 'self'; script-src 'self' 'unsafe-inline'; style-src 'self' 'unsafe-inline'\",\r\n      'Referrer-Policy': 'strict-origin-when-cross-origin',\r\n      'Permissions-Policy': 'geolocation=(), microphone=(), camera=()',\r\n    };\r\n  }\r\n\r\n  static addSecurityHeaders(response: any): void {\r\n    const headers = this.getSecurityHeaders();\r\n    Object.entries(headers).forEach(([key, value]) => {\r\n      response.setHeader(key, value);\r\n    });\r\n  }\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\lib\\security\\apiSecurityMiddleware.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":130,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":130,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3296,3299],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3296,3299],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":186,"column":33,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":186,"endColumn":65},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":189,"column":18,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":189,"endColumn":52},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":224,"column":25,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":224,"endColumn":59},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":266,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":266,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7554,7557],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7554,7557],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used.","line":266,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":266,"endColumn":56},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'context' is defined but never used. Allowed unused args must match /^_/u.","line":266,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":266,"endColumn":56},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":305,"column":70,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":305,"endColumn":73,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8936,8939],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8936,8939],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":311,"column":59,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":311,"endColumn":61,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9131,9133],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":408,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":408,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11798,11801],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11798,11801],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":411,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":411,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11948,11951],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11948,11951],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview apiSecurityMiddleware Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { ServiceError, ServiceErrorCode } from '../../services/config';\r\nimport { logger } from './logging/logger';\r\nimport {\r\n  RateLimiter,\r\n  InputSanitizer,\r\n  SQLInjectionPrevention,\r\n  CSRFTokenManager,\r\n  APIVersionManager,\r\n  SecurityHeaders,\r\n  DEFAULT_SECURITY_CONFIG,\r\n  type APISecurityConfig,\r\n} from './apiSecurity';\r\n\r\n// Request context interface\r\n/**\r\n * SecurityContext Interface\r\n * \r\n * @interface SecurityContext\r\n */\r\nexport interface SecurityContext {\r\n  userId?: string;\r\n  sessionId: string;\r\n  ipAddress: string;\r\n  userAgent: string;\r\n  endpoint: string;\r\n  method: string;\r\n  version: string;\r\n  timestamp: number;\r\n}\r\n\r\n// Security middleware result\r\n/**\r\n * SecurityResult Interface\r\n * \r\n * @interface SecurityResult\r\n */\r\nexport interface SecurityResult {\r\n  allowed: boolean;\r\n  error?: ServiceError;\r\n  warnings?: string[];\r\n  rateLimitInfo?: {\r\n    remaining: number;\r\n    resetTime: number;\r\n    limit: number;\r\n  };\r\n}\r\n\r\n// API Security Middleware class\r\n/**\r\n * APISecurityMiddleware Service\r\n * \r\n * Service class for handling apisecuritymiddleware operations\r\n * \r\n * @class APISecurityMiddleware\r\n */\r\nexport class APISecurityMiddleware {\r\n  private readonly rateLimiters = new Map<string, RateLimiter>();\r\n  private config: APISecurityConfig;\r\n\r\n  constructor(config: APISecurityConfig = DEFAULT_SECURITY_CONFIG) {\r\n    this.config = config;\r\n    this.initializeRateLimiters();\r\n\r\n    // Start cleanup intervals\r\n    this.startCleanupIntervals();\r\n  }\r\n\r\n  private initializeRateLimiters(): void {\r\n    // Global rate limiter\r\n    this.rateLimiters.set('global', new RateLimiter(this.config.rateLimiting.global));\r\n\r\n    // Per-user rate limiter\r\n    this.rateLimiters.set('per-user', new RateLimiter(this.config.rateLimiting.perUser));\r\n\r\n    // Per-endpoint rate limiters\r\n    Object.entries(this.config.rateLimiting.perEndpoint).forEach(([endpoint, config]) => {\r\n      this.rateLimiters.set(`endpoint:${endpoint}`, new RateLimiter(config));\r\n    });\r\n  }\r\n\r\n  private rateLimiterIntervalId?: NodeJS.Timeout;\r\n  private csrfCleanupIntervalId?: NodeJS.Timeout;\r\n\r\n  private startCleanupIntervals(): void {\r\n    // Cleanup rate limiters every 5 minutes\r\n    this.rateLimiterIntervalId = setInterval(\r\n      () => {\r\n        this.rateLimiters.forEach((limiter) => {\r\n          limiter.cleanup();\r\n        });\r\n      },\r\n      5 * 60 * 1000,\r\n    );\r\n\r\n    // Cleanup CSRF tokens every hour\r\n    this.csrfCleanupIntervalId = setInterval(\r\n      () => {\r\n        CSRFTokenManager.cleanup();\r\n      },\r\n      60 * 60 * 1000,\r\n    );\r\n  }\r\n\r\n  // Cleanup method to stop intervals and prevent memory leaks\r\n  public cleanup(): void {\r\n    if (this.rateLimiterIntervalId) {\r\n      clearInterval(this.rateLimiterIntervalId);\r\n      this.rateLimiterIntervalId = undefined;\r\n    }\r\n\r\n    if (this.csrfCleanupIntervalId) {\r\n      clearInterval(this.csrfCleanupIntervalId);\r\n      this.csrfCleanupIntervalId = undefined;\r\n    }\r\n  }\r\n\r\n  // Dispose method for cleanup\r\n  public dispose(): void {\r\n    this.cleanup();\r\n  }\r\n\r\n  // Main security check method\r\n  async checkSecurity(context: SecurityContext, requestData?: any): Promise<SecurityResult> {\r\n    const warnings: string[] = [];\r\n\r\n    try {\r\n      // 1. Rate limiting check\r\n      const rateLimitResult = this.checkRateLimit(context);\r\n      if (!rateLimitResult.allowed) {\r\n        return rateLimitResult;\r\n      }\r\n\r\n      // 2. API version validation\r\n      const versionResult = this.checkAPIVersion(context.version);\r\n      if (!versionResult.allowed) {\r\n        return versionResult;\r\n      }\r\n      if (versionResult.warnings) {\r\n        warnings.push(...versionResult.warnings);\r\n      }\r\n\r\n      // 3. Input validation and sanitization\r\n      if (requestData) {\r\n        const inputResult = await this.validateInput(requestData, context);\r\n        if (!inputResult.allowed) {\r\n          return inputResult;\r\n        }\r\n      }\r\n\r\n      // 4. CSRF protection (for state-changing operations)\r\n      if (['POST', 'PUT', 'DELETE', 'PATCH'].includes(context.method)) {\r\n        const csrfResult = this.checkCSRFProtection(context, requestData);\r\n        if (!csrfResult.allowed) {\r\n          return csrfResult;\r\n        }\r\n      }\r\n\r\n      return {\r\n        allowed: true,\r\n        warnings: warnings.length > 0 ? warnings : undefined,\r\n        rateLimitInfo: rateLimitResult.rateLimitInfo,\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        allowed: false,\r\n        error:\r\n          error instanceof ServiceError\r\n            ? error\r\n            : new ServiceError(ServiceErrorCode.UNKNOWN_ERROR, 'Security check failed', {\r\n                originalError: error,\r\n              }),\r\n      };\r\n    }\r\n  }\r\n\r\n  // Rate limiting check\r\n  private checkRateLimit(context: SecurityContext): SecurityResult {\r\n    const checks = [\r\n      { key: 'global', limiter: this.rateLimiters.get('global')! },\r\n      {\r\n        key: `user:${context.userId ?? context.ipAddress}`,\r\n        limiter: this.rateLimiters.get('per-user')!,\r\n      },\r\n    ];\r\n\r\n    // Check endpoint-specific rate limit\r\n    const endpointLimiter = this.rateLimiters.get(`endpoint:${context.endpoint}`);\r\n    if (endpointLimiter) {\r\n      checks.push({\r\n        key: `endpoint:${context.endpoint}:${context.userId ?? context.ipAddress}`,\r\n        limiter: endpointLimiter,\r\n      });\r\n    }\r\n\r\n    for (const { key, limiter } of checks) {\r\n      if (!limiter.isAllowed(key)) {\r\n        return {\r\n          allowed: false,\r\n          error: new ServiceError(\r\n            ServiceErrorCode.PERMISSION_DENIED,\r\n            'Rate limit exceeded. Please try again later.',\r\n            {\r\n              rateLimitType: key.split(':')[0],\r\n              resetTime: limiter.getResetTime(key),\r\n            },\r\n          ),\r\n          rateLimitInfo: {\r\n            remaining: 0,\r\n            resetTime: limiter.getResetTime(key),\r\n            limit: limiter.config.maxRequests,\r\n          },\r\n        };\r\n      }\r\n    }\r\n\r\n    // Return rate limit info for the most restrictive limiter\r\n    const userLimiter = this.rateLimiters.get('per-user')!;\r\n    const userKey = `user:${context.userId ?? context.ipAddress}`;\r\n\r\n    return {\r\n      allowed: true,\r\n      rateLimitInfo: {\r\n        remaining: userLimiter.getRemainingRequests(userKey),\r\n        resetTime: userLimiter.getResetTime(userKey),\r\n        limit: this.config.rateLimiting.perUser.maxRequests,\r\n      },\r\n    };\r\n  }\r\n\r\n  // API version validation\r\n  private checkAPIVersion(version: string): SecurityResult {\r\n    if (!APIVersionManager.isVersionSupported(version)) {\r\n      return {\r\n        allowed: false,\r\n        error: new ServiceError(\r\n          ServiceErrorCode.VALIDATION_ERROR,\r\n          `Unsupported API version: ${version}. Supported versions: ${this.config.apiVersioning.supportedVersions.join(', ')}`,\r\n          {\r\n            requestedVersion: version,\r\n            supportedVersions: this.config.apiVersioning.supportedVersions,\r\n          },\r\n        ),\r\n      };\r\n    }\r\n\r\n    const warnings: string[] = [];\r\n    const deprecationWarning = APIVersionManager.getDeprecationWarning(version);\r\n    if (deprecationWarning) {\r\n      warnings.push(deprecationWarning);\r\n    }\r\n\r\n    return {\r\n      allowed: true,\r\n      warnings: warnings.length > 0 ? warnings : undefined,\r\n    };\r\n  }\r\n\r\n  // Input validation and sanitization\r\n  private async validateInput(requestData: any, context: SecurityContext): Promise<SecurityResult> {\r\n    try {\r\n      // Check for SQL injection patterns\r\n      SQLInjectionPrevention.validateSQLInput(requestData);\r\n\r\n      // Sanitize input if enabled\r\n      let sanitizedData = requestData;\r\n      if (this.config.inputValidation.sanitizeInput) {\r\n        sanitizedData = InputSanitizer.sanitizeObject(requestData);\r\n      }\r\n\r\n      // Validate request size (approximate)\r\n      const requestSize = JSON.stringify(sanitizedData).length;\r\n      if (requestSize > this.config.inputValidation.maxRequestSize) {\r\n        return {\r\n          allowed: false,\r\n          error: new ServiceError(\r\n            ServiceErrorCode.VALIDATION_ERROR,\r\n            `Request size exceeds maximum allowed size of ${this.config.inputValidation.maxRequestSize} bytes`,\r\n            { requestSize, maxSize: this.config.inputValidation.maxRequestSize },\r\n          ),\r\n        };\r\n      }\r\n\r\n      return { allowed: true };\r\n    } catch (error) {\r\n      return {\r\n        allowed: false,\r\n        error:\r\n          error instanceof ServiceError\r\n            ? error\r\n            : new ServiceError(ServiceErrorCode.VALIDATION_ERROR, 'Input validation failed', {\r\n                originalError: error,\r\n              }),\r\n      };\r\n    }\r\n  }\r\n\r\n  // CSRF protection check\r\n  private checkCSRFProtection(context: SecurityContext, requestData: any): SecurityResult {\r\n    if (!this.config.csrfProtection.enabled) {\r\n      return { allowed: true };\r\n    }\r\n\r\n    const csrfToken =\r\n      requestData?.[this.config.csrfProtection.tokenName] ||\r\n      requestData?.headers?.[`x-${this.config.csrfProtection.tokenName}`];\r\n\r\n    if (!csrfToken) {\r\n      return {\r\n        allowed: false,\r\n        error: new ServiceError(\r\n          ServiceErrorCode.VALIDATION_ERROR,\r\n          'CSRF token is required for this operation',\r\n          { tokenName: this.config.csrfProtection.tokenName },\r\n        ),\r\n      };\r\n    }\r\n\r\n    if (!CSRFTokenManager.validateToken(context.sessionId, csrfToken)) {\r\n      return {\r\n        allowed: false,\r\n        error: new ServiceError(\r\n          ServiceErrorCode.VALIDATION_ERROR,\r\n          'Invalid or expired CSRF token',\r\n          { tokenName: this.config.csrfProtection.tokenName },\r\n        ),\r\n      };\r\n    }\r\n\r\n    return { allowed: true };\r\n  }\r\n\r\n  // Generate CSRF token for session\r\n  generateCSRFToken(sessionId: string): string {\r\n    return CSRFTokenManager.generateToken(sessionId);\r\n  }\r\n\r\n  // Refresh CSRF token\r\n  refreshCSRFToken(sessionId: string): string {\r\n    return CSRFTokenManager.refreshToken(sessionId);\r\n  }\r\n\r\n  // Get security headers\r\n  getSecurityHeaders(): Record<string, string> {\r\n    return SecurityHeaders.getSecurityHeaders();\r\n  }\r\n\r\n  // Update configuration\r\n  updateConfig(newConfig: Partial<APISecurityConfig>): void {\r\n    this.config = { ...this.config, ...newConfig };\r\n    this.rateLimiters.clear();\r\n    this.initializeRateLimiters();\r\n  }\r\n\r\n  // Get current configuration\r\n  getConfig(): APISecurityConfig {\r\n    return { ...this.config };\r\n  }\r\n}\r\n\r\n// Security middleware instance\r\nexport const apiSecurityMiddleware = new APISecurityMiddleware();\r\n\r\n// Helper function to create security context\r\n/**\r\n * createSecurityContext function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function createSecurityContext(\r\n  endpoint: string,\r\n  method: string,\r\n  options: {\r\n    userId?: string;\r\n    sessionId?: string;\r\n    ipAddress?: string;\r\n    userAgent?: string;\r\n    version?: string;\r\n  } = {},\r\n): SecurityContext {\r\n  return {\r\n    userId: options.userId,\r\n    sessionId: options.sessionId ?? 'anonymous',\r\n    ipAddress: options.ipAddress ?? '127.0.0.1',\r\n    userAgent: options.userAgent ?? 'Unknown',\r\n    endpoint,\r\n    method: method.toUpperCase(),\r\n    version: options.version ?? DEFAULT_SECURITY_CONFIG.apiVersioning.currentVersion,\r\n    timestamp: Date.now(),\r\n  };\r\n}\r\n\r\n// Decorator for securing service methods\r\n/**\r\n * SecureEndpoint function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function SecureEndpoint(endpoint: string, options: { requireAuth?: boolean } = {}) {\r\n  return function (target: any, propertyName: string, descriptor: PropertyDescriptor) {\r\n    const method = descriptor.value;\r\n\r\n    descriptor.value = async function (...args: any[]) {\r\n      const context = createSecurityContext(endpoint, 'POST', {\r\n        userId: options.requireAuth ? 'required' : undefined,\r\n      });\r\n\r\n      const securityResult = await apiSecurityMiddleware.checkSecurity(context, args[0]);\r\n\r\n      if (!securityResult.allowed) {\r\n        throw securityResult.error;\r\n      }\r\n\r\n      if (securityResult.warnings) {\r\n        logger.warn('Security warnings:', securityResult.warnings);\r\n      }\r\n\r\n      return method.apply(this, args);\r\n    };\r\n\r\n    return descriptor;\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\lib\\security\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\lib\\security\\securityConfigManager.ts","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":189,"column":26,"nodeType":"MemberExpression","endLine":189,"endColumn":50},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":190,"column":9,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":190,"endColumn":22},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":200,"column":50,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":200,"endColumn":52,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6112,6114],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":322,"column":65,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":322,"endColumn":68,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9898,9901],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9898,9901],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":323,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":323,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9937,9940],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9937,9940],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":326,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":326,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10038,10041],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10038,10041],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":326,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":326,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10049,10052],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10049,10052],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":330,"column":20,"nodeType":"MemberExpression","endLine":330,"endColumn":29},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":330,"column":46,"nodeType":"MemberExpression","endLine":330,"endColumn":55},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":330,"column":83,"nodeType":"MemberExpression","endLine":330,"endColumn":92},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":331,"column":22,"nodeType":"MemberExpression","endLine":331,"endColumn":31},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":331,"column":48,"nodeType":"MemberExpression","endLine":331,"endColumn":57},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":332,"column":28,"nodeType":"MemberExpression","endLine":332,"endColumn":37},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":332,"column":39,"nodeType":"MemberExpression","endLine":332,"endColumn":48},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":334,"column":13,"nodeType":"MemberExpression","endLine":334,"endColumn":30},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":334,"column":44,"nodeType":"MemberExpression","endLine":334,"endColumn":53},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":334,"column":62,"nodeType":"MemberExpression","endLine":334,"endColumn":71},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":336,"column":35,"nodeType":"MemberExpression","endLine":336,"endColumn":44},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":336,"column":65,"nodeType":"MemberExpression","endLine":336,"endColumn":74},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":337,"column":11,"nodeType":"MemberExpression","endLine":337,"endColumn":28},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":337,"column":42,"nodeType":"MemberExpression","endLine":337,"endColumn":51},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":337,"column":60,"nodeType":"MemberExpression","endLine":337,"endColumn":69}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":22,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview securityConfigManager Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { z } from 'zod';\r\nimport { ServiceError, ServiceErrorCode } from '../../services/config';\r\nimport {\r\n  DEFAULT_SECURITY_CONFIG,\r\n  type APISecurityConfig,\r\n  type RateLimitConfig,\r\n} from './apiSecurity';\r\n\r\n// Configuration validation schemas\r\nconst rateLimitConfigSchema = z.object({\r\n  windowMs: z\r\n    .number()\r\n    .min(1000)\r\n    .max(24 * 60 * 60 * 1000), // 1 second to 24 hours\r\n  maxRequests: z.number().min(1).max(10000),\r\n  skipSuccessfulRequests: z.boolean().optional(),\r\n  skipFailedRequests: z.boolean().optional(),\r\n});\r\n\r\nconst apiSecurityConfigSchema = z.object({\r\n  rateLimiting: z.object({\r\n    global: rateLimitConfigSchema,\r\n    perEndpoint: z.record(z.string(), rateLimitConfigSchema),\r\n    perUser: rateLimitConfigSchema,\r\n  }),\r\n\r\n  inputValidation: z.object({\r\n    maxRequestSize: z\r\n      .number()\r\n      .min(1024)\r\n      .max(100 * 1024 * 1024), // 1KB to 100MB\r\n    allowedContentTypes: z.array(z.string()),\r\n    sanitizeInput: z.boolean(),\r\n    validateSchema: z.boolean(),\r\n  }),\r\n\r\n  xssProtection: z.object({\r\n    enabled: z.boolean(),\r\n    allowedTags: z.array(z.string()),\r\n    allowedAttributes: z.record(z.string(), z.array(z.string())),\r\n  }),\r\n\r\n  csrfProtection: z.object({\r\n    enabled: z.boolean(),\r\n    tokenName: z.string(),\r\n    cookieName: z.string(),\r\n    secure: z.boolean(),\r\n    sameSite: z.enum(['strict', 'lax', 'none']),\r\n  }),\r\n\r\n  apiVersioning: z.object({\r\n    currentVersion: z.string(),\r\n    supportedVersions: z.array(z.string()),\r\n    deprecationWarnings: z.boolean(),\r\n    forceLatest: z.boolean(),\r\n  }),\r\n});\r\n\r\n// Security configuration presets\r\nexport const SECURITY_PRESETS = {\r\n  development: {\r\n    ...DEFAULT_SECURITY_CONFIG,\r\n    rateLimiting: {\r\n      ...DEFAULT_SECURITY_CONFIG.rateLimiting,\r\n      global: {\r\n        ...DEFAULT_SECURITY_CONFIG.rateLimiting.global,\r\n        maxRequests: 10000, // More lenient for development\r\n      },\r\n    },\r\n    csrfProtection: {\r\n      ...DEFAULT_SECURITY_CONFIG.csrfProtection,\r\n      enabled: false, // Disabled for easier development\r\n    },\r\n  } as APISecurityConfig,\r\n\r\n  testing: {\r\n    ...DEFAULT_SECURITY_CONFIG,\r\n    rateLimiting: {\r\n      ...DEFAULT_SECURITY_CONFIG.rateLimiting,\r\n      global: {\r\n        ...DEFAULT_SECURITY_CONFIG.rateLimiting.global,\r\n        maxRequests: 50000, // Very lenient for testing\r\n      },\r\n    },\r\n    inputValidation: {\r\n      ...DEFAULT_SECURITY_CONFIG.inputValidation,\r\n      sanitizeInput: false, // May interfere with tests\r\n    },\r\n  } as APISecurityConfig,\r\n\r\n  production: {\r\n    ...DEFAULT_SECURITY_CONFIG,\r\n    rateLimiting: {\r\n      ...DEFAULT_SECURITY_CONFIG.rateLimiting,\r\n      global: {\r\n        ...DEFAULT_SECURITY_CONFIG.rateLimiting.global,\r\n        maxRequests: 500, // Stricter for production\r\n      },\r\n      perEndpoint: {\r\n        ...DEFAULT_SECURITY_CONFIG.rateLimiting.perEndpoint,\r\n        '/api/auth/login': {\r\n          windowMs: 15 * 60 * 1000,\r\n          maxRequests: 3, // Very strict for login\r\n        },\r\n        '/api/auth/register': {\r\n          windowMs: 60 * 60 * 1000,\r\n          maxRequests: 5, // Allow reasonable retries for registration\r\n        },\r\n      },\r\n    },\r\n    inputValidation: {\r\n      ...DEFAULT_SECURITY_CONFIG.inputValidation,\r\n      maxRequestSize: 5 * 1024 * 1024, // Smaller max size for production\r\n    },\r\n  } as APISecurityConfig,\r\n\r\n  highSecurity: {\r\n    ...DEFAULT_SECURITY_CONFIG,\r\n    rateLimiting: {\r\n      ...DEFAULT_SECURITY_CONFIG.rateLimiting,\r\n      global: {\r\n        ...DEFAULT_SECURITY_CONFIG.rateLimiting.global,\r\n        maxRequests: 100, // Very strict\r\n        windowMs: 5 * 60 * 1000, // Shorter window\r\n      },\r\n      perUser: {\r\n        ...DEFAULT_SECURITY_CONFIG.rateLimiting.perUser,\r\n        maxRequests: 50,\r\n        windowMs: 5 * 60 * 1000,\r\n      },\r\n    },\r\n    inputValidation: {\r\n      ...DEFAULT_SECURITY_CONFIG.inputValidation,\r\n      maxRequestSize: 1 * 1024 * 1024, // 1MB max\r\n      sanitizeInput: true,\r\n      validateSchema: true,\r\n    },\r\n    xssProtection: {\r\n      ...DEFAULT_SECURITY_CONFIG.xssProtection,\r\n      allowedTags: [], // No HTML tags allowed\r\n      allowedAttributes: {},\r\n    },\r\n  } as APISecurityConfig,\r\n};\r\n\r\n// Security configuration manager\r\n/**\r\n * SecurityConfigManager Service\r\n * \r\n * Service class for handling securityconfigmanager operations\r\n * \r\n * @class SecurityConfigManager\r\n */\r\nexport class SecurityConfigManager {\r\n  private currentConfig: APISecurityConfig;\r\n  private configHistory: { timestamp: number; config: APISecurityConfig; reason: string }[] = [];\r\n\r\n  constructor(initialConfig: APISecurityConfig = DEFAULT_SECURITY_CONFIG) {\r\n    this.currentConfig = this.validateConfig(initialConfig);\r\n    this.addToHistory(this.currentConfig, 'Initial configuration');\r\n  }\r\n\r\n  // Get current configuration\r\n  getConfig(): APISecurityConfig {\r\n    return { ...this.currentConfig };\r\n  }\r\n\r\n  // Update configuration\r\n  updateConfig(newConfig: Partial<APISecurityConfig>, reason = 'Manual update'): APISecurityConfig {\r\n    const mergedConfig = this.mergeConfigs(this.currentConfig, newConfig);\r\n    const validatedConfig = this.validateConfig(mergedConfig);\r\n\r\n    this.addToHistory(this.currentConfig, `Before: ${reason}`);\r\n    this.currentConfig = validatedConfig;\r\n    this.addToHistory(this.currentConfig, reason);\r\n\r\n    return { ...this.currentConfig };\r\n  }\r\n\r\n  // Load preset configuration\r\n  loadPreset(preset: keyof typeof SECURITY_PRESETS, reason?: string): APISecurityConfig {\r\n    const presetConfig = SECURITY_PRESETS[preset];\r\n    if (!presetConfig) {\r\n      throw new ServiceError(\r\n        ServiceErrorCode.VALIDATION_ERROR,\r\n        `Unknown security preset: ${preset}`,\r\n        { availablePresets: Object.keys(SECURITY_PRESETS) },\r\n      );\r\n    }\r\n\r\n    this.addToHistory(this.currentConfig, `Before loading preset: ${preset}`);\r\n    this.currentConfig = this.validateConfig(presetConfig);\r\n    this.addToHistory(this.currentConfig, reason || `Loaded preset: ${preset}`);\r\n\r\n    return { ...this.currentConfig };\r\n  }\r\n\r\n  // Validate configuration\r\n  private validateConfig(config: APISecurityConfig): APISecurityConfig {\r\n    try {\r\n      return apiSecurityConfigSchema.parse(config);\r\n    } catch (error) {\r\n      if (error instanceof z.ZodError) {\r\n        const messages = error.issues.map((issue) => `${issue.path.join('.')}: ${issue.message}`);\r\n        throw new ServiceError(\r\n          ServiceErrorCode.VALIDATION_ERROR,\r\n          `Invalid security configuration: ${messages.join(', ')}`,\r\n          { validationErrors: error.issues },\r\n        );\r\n      }\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Merge configurations\r\n  private mergeConfigs(\r\n    current: APISecurityConfig,\r\n    update: Partial<APISecurityConfig>,\r\n  ): APISecurityConfig {\r\n    return {\r\n      rateLimiting: {\r\n        ...current.rateLimiting,\r\n        ...update.rateLimiting,\r\n        perEndpoint: {\r\n          ...current.rateLimiting.perEndpoint,\r\n          ...update.rateLimiting?.perEndpoint,\r\n        },\r\n      },\r\n      inputValidation: {\r\n        ...current.inputValidation,\r\n        ...update.inputValidation,\r\n      },\r\n      xssProtection: {\r\n        ...current.xssProtection,\r\n        ...update.xssProtection,\r\n        allowedAttributes: {\r\n          ...current.xssProtection.allowedAttributes,\r\n          ...update.xssProtection?.allowedAttributes,\r\n        },\r\n      },\r\n      csrfProtection: {\r\n        ...current.csrfProtection,\r\n        ...update.csrfProtection,\r\n      },\r\n      apiVersioning: {\r\n        ...current.apiVersioning,\r\n        ...update.apiVersioning,\r\n      },\r\n    };\r\n  }\r\n\r\n  // Add configuration to history\r\n  private addToHistory(config: APISecurityConfig, reason: string): void {\r\n    this.configHistory.push({\r\n      timestamp: Date.now(),\r\n      config: { ...config },\r\n      reason,\r\n    });\r\n\r\n    // Keep only last 50 configurations\r\n    if (this.configHistory.length > 50) {\r\n      this.configHistory = this.configHistory.slice(-50);\r\n    }\r\n  }\r\n\r\n  // Get configuration history\r\n  getConfigHistory(): { timestamp: number; reason: string; date: string }[] {\r\n    return this.configHistory.map((entry) => ({\r\n      timestamp: entry.timestamp,\r\n      reason: entry.reason,\r\n      date: new Date(entry.timestamp).toISOString(),\r\n    }));\r\n  }\r\n\r\n  // Rollback to previous configuration\r\n  rollback(steps = 1): APISecurityConfig {\r\n    if (this.configHistory.length < steps + 1) {\r\n      throw new ServiceError(\r\n        ServiceErrorCode.VALIDATION_ERROR,\r\n        `Cannot rollback ${steps} steps. Only ${this.configHistory.length - 1} configurations available.`,\r\n      );\r\n    }\r\n\r\n    const targetConfig = this.configHistory[this.configHistory.length - steps - 1];\r\n    this.currentConfig = { ...targetConfig.config };\r\n    this.addToHistory(this.currentConfig, `Rolled back ${steps} steps`);\r\n\r\n    return { ...this.currentConfig };\r\n  }\r\n\r\n  // Export configuration\r\n  exportConfig(): string {\r\n    return JSON.stringify(this.currentConfig, null, 2);\r\n  }\r\n\r\n  // Import configuration\r\n  importConfig(configJson: string, reason = 'Imported configuration'): APISecurityConfig {\r\n    try {\r\n      const config = JSON.parse(configJson) as APISecurityConfig;\r\n      const validatedConfig = this.validateConfig(config);\r\n\r\n      this.addToHistory(this.currentConfig, `Before: ${reason}`);\r\n      this.currentConfig = validatedConfig;\r\n      this.addToHistory(this.currentConfig, reason);\r\n\r\n      return { ...this.currentConfig };\r\n    } catch (error) {\r\n      throw new ServiceError(ServiceErrorCode.VALIDATION_ERROR, 'Failed to import configuration', {\r\n        originalError: error,\r\n      });\r\n    }\r\n  }\r\n\r\n  // Get configuration diff\r\n  getConfigDiff(otherConfig: APISecurityConfig): Record<string, any> {\r\n    const diff: Record<string, any> = {};\r\n\r\n    // Simple diff implementation - can be enhanced\r\n    const compareObjects = (obj1: any, obj2: any, path = ''): void => {\r\n      for (const key in obj1) {\r\n        const currentPath = path ? `${path}.${key}` : key;\r\n\r\n        if (typeof obj1[key] === 'object' && obj1[key] !== null && !Array.isArray(obj1[key])) {\r\n          if (typeof obj2[key] === 'object' && obj2[key] !== null) {\r\n            compareObjects(obj1[key], obj2[key], currentPath);\r\n          } else {\r\n            diff[currentPath] = { current: obj1[key], other: obj2[key] };\r\n          }\r\n        } else if (JSON.stringify(obj1[key]) !== JSON.stringify(obj2[key])) {\r\n          diff[currentPath] = { current: obj1[key], other: obj2[key] };\r\n        }\r\n      }\r\n    };\r\n\r\n    compareObjects(this.currentConfig, otherConfig);\r\n    return diff;\r\n  }\r\n\r\n  // Validate rate limit configuration\r\n  validateRateLimitConfig(config: RateLimitConfig): boolean {\r\n    try {\r\n      rateLimitConfigSchema.parse(config);\r\n      return true;\r\n    } catch {\r\n      return false;\r\n    }\r\n  }\r\n\r\n  // Get recommended configuration for environment\r\n  getRecommendedConfig(\r\n    environment: 'development' | 'testing' | 'production' | 'high-security',\r\n  ): APISecurityConfig {\r\n    switch (environment) {\r\n      case 'development':\r\n        return SECURITY_PRESETS.development;\r\n      case 'testing':\r\n        return SECURITY_PRESETS.testing;\r\n      case 'production':\r\n        return SECURITY_PRESETS.production;\r\n      case 'high-security':\r\n        return SECURITY_PRESETS.highSecurity;\r\n      default:\r\n        return DEFAULT_SECURITY_CONFIG;\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const securityConfigManager = new SecurityConfigManager();\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\lib\\security\\testSecrets.ts","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":58,"column":17,"nodeType":"MemberExpression","endLine":58,"endColumn":33}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview testSecrets Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { logger } from '../logging/logger';\r\n/**\r\n * Test ortam─▒ i├ğin g├╝venli secret ├╝retimi\r\n * Production'da environment variables kullan─▒lmal─▒\r\n */\r\n\r\n/**\r\n * G├╝venli test CSRF token'i ├╝ret\r\n */\r\n/**\r\n * generateTestCSRFToken function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function generateTestCSRFToken(): string {\r\n  if (process.env.NODE_ENV === 'production') {\r\n    throw new Error('Test tokens cannot be used in production');\r\n  }\r\n  \r\n  return `test-csrf-token-${Date.now()}-${Math.random().toString(36).substring(2, 11)}`;\r\n}\r\n\r\n/**\r\n * G├╝venli test secret ├╝ret\r\n */\r\n/**\r\n * generateTestSecret function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function generateTestSecret(prefix = 'test'): string {\r\n  if (process.env.NODE_ENV === 'production') {\r\n    throw new Error('Test secrets cannot be used in production');\r\n  }\r\n  \r\n  return `${prefix}-secret-${Date.now()}-${Math.random().toString(36).substring(2, 11)}`;\r\n}\r\n\r\n/**\r\n * Environment variable kontrol├╝ ile secret al\r\n */\r\n/**\r\n * getSecureSecret function\r\n * \r\n * @param {Object} params - Function parameters\r\n * @returns {void} Nothing\r\n */\r\nexport function getSecureSecret(key: string, fallback?: string): string {\r\n  const value = process.env[key];\r\n  \r\n  if (value) {\r\n    return value;\r\n  }\r\n  \r\n  if (process.env.NODE_ENV === 'production') {\r\n    throw new Error(`Missing required environment variable: ${key}`);\r\n  }\r\n  \r\n  if (fallback) {\r\n    logger.warn(`Warning: Using fallback for ${key}. Set environment variable for security.`);\r\n    return fallback;\r\n  }\r\n  \r\n  return generateTestSecret(key.toLowerCase().replace(/_/g, '-'));\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\lib\\supabase.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":29,"column":18,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":29,"endColumn":41},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":29,"column":33,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":29,"endColumn":35,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[848,850],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":1,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":30,"column":21,"nodeType":null,"messageId":"preferOptionalChain","endLine":30,"endColumn":66,"suggestions":[{"fix":{"range":[884,929],"text":"supabaseUrl?.startsWith('http')"},"messageId":"optionalChainSuggest","desc":"Change to an optional chain."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":32,"column":36,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":32,"endColumn":38,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[987,989],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":32,"column":41,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":32,"endColumn":43,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[992,994],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":32,"column":62,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":32,"endColumn":64,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1013,1015],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":33,"column":42,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":33,"endColumn":44,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[1089,1091],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":33,"column":47,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":33,"endColumn":49,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[1094,1096],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":1,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":39,"column":22,"nodeType":null,"messageId":"preferOptionalChain","endLine":39,"endColumn":75,"suggestions":[{"fix":{"range":[1332,1385],"text":"import.meta?.env"},"messageId":"optionalChainSuggest","desc":"Change to an optional chain."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":39,"column":60,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":39,"endColumn":75},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":125,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":128,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1435,1438],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1435,1438],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":41,"column":36,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":41,"endColumn":38,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[1547,1549],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":41,"column":41,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":41,"endColumn":43,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[1552,1554],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":41,"column":62,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":41,"endColumn":64,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1573,1575],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":42,"column":41,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":42,"endColumn":43,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[1648,1650],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":42,"column":46,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":42,"endColumn":48,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[1653,1655],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":42,"column":72,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":42,"endColumn":74,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1679,1681],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":47,"column":17,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":47,"endColumn":19,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[1784,1786],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":79,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":79,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2884,2886],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":19,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview supabase Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { createClient } from '@supabase/supabase-js';\r\nimport { environment } from './environment';\r\n\r\nimport { logger } from './logging/logger';\r\n// Shared table name constants for hooks/services\r\nexport const TABLES = {\r\n  DONATIONS: 'donations',\r\n  MEMBERS: 'members',\r\n  BENEFICIARIES: 'beneficiaries',\r\n  AID_REQUESTS: 'aid_requests',\r\n  CAMPAIGNS: 'campaigns',\r\n} as const;\r\n\r\n// Supabase configuration using centralized environment management\r\nconst supabaseUrl = environment.supabase.url;\r\nconst supabaseAnonKey = environment.supabase.anonKey;\r\n\r\n// Debug environment variables\r\nlogger.info('Supabase Configuration Debug:', {\r\n  supabaseUrl,\r\n  hasAnonKey: !!supabaseAnonKey,\r\n  anonKeyLength: supabaseAnonKey?.length ?? 0,\r\n  supabaseUrlValid: supabaseUrl && supabaseUrl.startsWith('http'),\r\n  importMetaEnv: {\r\n    VITE_SUPABASE_URL: (import.meta?.env?.VITE_SUPABASE_URL) || process.env.VITE_SUPABASE_URL,\r\n    VITE_SUPABASE_ANON_KEY: ((import.meta?.env?.VITE_SUPABASE_ANON_KEY) || process.env.VITE_SUPABASE_ANON_KEY) ? 'SET' : 'NOT_SET',\r\n  },\r\n  environment: {\r\n    url: environment.supabase.url,\r\n    anonKey: environment.supabase.anonKey ? 'SET' : 'NOT_SET',\r\n  },\r\n  allImportMetaEnv: (typeof import.meta !== 'undefined' && import.meta.env) ? Object.keys(import.meta.env as Record<string, any>).filter((key) => key.startsWith('VITE_')) : [],\r\n  rawImportMetaEnv: {\r\n    VITE_SUPABASE_URL: (import.meta?.env?.VITE_SUPABASE_URL) || process.env.VITE_SUPABASE_URL,\r\n    VITE_SUPABASE_ANON_KEY: (import.meta?.env?.VITE_SUPABASE_ANON_KEY) || process.env.VITE_SUPABASE_ANON_KEY,\r\n  },\r\n});\r\n\r\n// Validate Supabase configuration\r\nif (!supabaseUrl?.startsWith('http')) {\r\n  logger.warn('Invalid or missing VITE_SUPABASE_URL. Supabase features will be disabled.');\r\n}\r\n\r\nif (!supabaseAnonKey) {\r\n  logger.warn('Missing VITE_SUPABASE_ANON_KEY. Supabase features will be disabled.');\r\n}\r\n\r\n// Create a safe Supabase client - use dummy values if environment is not configured\r\nconst normalizedUrl = (supabaseUrl || '').trim();\r\nconst normalizedKey = (supabaseAnonKey || '').trim();\r\nconst safeSupabaseUrl = normalizedUrl.startsWith('http') ? normalizedUrl : 'https://placeholder.supabase.co';\r\nconst safeSupabaseKey = normalizedKey ? normalizedKey : 'placeholder-key';\r\n\r\n// Supabase client instance olu┼ştur\r\nexport const supabase = createClient(safeSupabaseUrl, safeSupabaseKey, {\r\n  auth: {\r\n    autoRefreshToken: true,\r\n    persistSession: true,\r\n    detectSessionInUrl: true,\r\n    flowType: 'pkce',\r\n  },\r\n  realtime: {\r\n    params: {\r\n      eventsPerSecond: 10,\r\n    },\r\n  },\r\n});\r\n\r\n// Admin client (service role key ile) - RLS bypass i├ğin\r\nexport const supabaseAdmin = createClient(\r\n  safeSupabaseUrl,\r\n  ((environment.supabase.serviceRoleKey || '').trim()) || safeSupabaseKey,\r\n  {\r\n    auth: {\r\n      autoRefreshToken: false,\r\n      persistSession: false,\r\n    },\r\n  },\r\n);\r\n\r\n// Type definitions for TypeScript\r\n/**\r\n * Database Interface\r\n * \r\n * @interface Database\r\n */\r\nexport interface Database {\r\n  public: {\r\n    Tables: {\r\n      users: {\r\n        Row: {\r\n          id: string;\r\n          email: string;\r\n          name: string;\r\n          role: string;\r\n          created_at: string;\r\n          updated_at: string;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          email: string;\r\n          name: string;\r\n          role?: string;\r\n          created_at?: string;\r\n          updated_at?: string;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          email?: string;\r\n          name?: string;\r\n          role?: string;\r\n          updated_at?: string;\r\n        };\r\n      };\r\n    };\r\n  };\r\n}\r\n\r\n// Typed supabase client\r\nexport type SupabaseClient = typeof supabase;\r\n\r\n// Helper function to check if Supabase is properly configured\r\nexport const isSupabaseConfigured = (): boolean => {\r\n  return !!(\r\n    supabaseUrl &&\r\n    supabaseUrl.startsWith('http') &&\r\n    supabaseAnonKey &&\r\n    supabaseAnonKey !== 'placeholder-key'\r\n  );\r\n};\r\n\r\n// Helper function to get Supabase configuration status\r\nexport const getSupabaseStatus = () => {\r\n  return {\r\n    configured: isSupabaseConfigured(),\r\n    url: supabaseUrl,\r\n    hasKey: !!supabaseAnonKey,\r\n    isPlaceholder: safeSupabaseUrl === 'https://placeholder.supabase.co',\r\n  };\r\n};\r\n\r\nexport default supabase;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\lib\\utils.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\lib\\validation.ts","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":302,"column":19,"nodeType":"MemberExpression","endLine":302,"endColumn":34},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":317,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":317,"endColumn":34},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":331,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":331,"endColumn":34},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":339,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":339,"endColumn":34},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":354,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":354,"endColumn":34},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":469,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":469,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12197,12199],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":485,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":485,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12661,12663],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":500,"column":26,"nodeType":"Literal","endLine":500,"endColumn":79}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview validation Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\n// Comprehensive validation utilities for forms and data\r\n/**\r\n * ValidationResult Interface\r\n * \r\n * @interface ValidationResult\r\n */\r\nexport interface ValidationResult {\r\n  isValid: boolean;\r\n  errors: string[];\r\n}\r\n\r\n/**\r\n * FieldValidationResult Interface\r\n * \r\n * @interface FieldValidationResult\r\n */\r\nexport interface FieldValidationResult {\r\n  isValid: boolean;\r\n  error?: string;\r\n}\r\n\r\n// Common validation patterns\r\nexport const VALIDATION_PATTERNS = {\r\n  email: /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/,\r\n  phone: /^(\\+90|0)?[5][0-9]{9}$/,\r\n  tcKimlik: /^[1-9][0-9]{10}$/,\r\n  iban: /^TR[0-9]{2}[0-9]{4}[0-9]{16}$/,\r\n  postalCode: /^[0-9]{5}$/,\r\n  url: /^https?:\\/\\/.+/,\r\n  strongPassword: /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@$!%*?&])[A-Za-z\\d@$!%*?&]{8,}$/,\r\n} as const;\r\n\r\n// Sanitization functions\r\nexport const sanitizeInput = {\r\n  // Remove HTML tags and dangerous characters\r\n  html: (input: string): string => {\r\n    return input\r\n      .replace(/<[^>]*>/g, '') // Remove HTML tags\r\n      .replace(/[<>'\"&]/g, '') // Remove dangerous characters\r\n      .trim();\r\n  },\r\n\r\n  // Sanitize for database storage\r\n  database: (input: string): string => {\r\n    return input\r\n      .replace(/['\";\\\\]/g, '') // Remove SQL injection characters\r\n      .replace(/\\0/g, '') // Remove null bytes\r\n      .trim();\r\n  },\r\n\r\n  // Sanitize phone numbers\r\n  phone: (input: string): string => {\r\n    return input.replace(/[^\\d+]/g, '');\r\n  },\r\n\r\n  // Sanitize numbers\r\n  number: (input: string): string => {\r\n    return input.replace(/[^\\d.,]/g, '');\r\n  },\r\n\r\n  // Sanitize email\r\n  email: (input: string): string => {\r\n    return input.toLowerCase().trim();\r\n  },\r\n};\r\n\r\n// Field validation functions\r\nexport const validateField = {\r\n  required: (\r\n    value: string | number | undefined | null,\r\n    fieldName: string,\r\n  ): FieldValidationResult => {\r\n    if (!value || (typeof value === 'string' && value.trim() === '')) {\r\n      return {\r\n        isValid: false,\r\n        error: `${fieldName} alan─▒ zorunludur`,\r\n      };\r\n    }\r\n    return { isValid: true };\r\n  },\r\n\r\n  minLength: (value: string, min: number, fieldName: string): FieldValidationResult => {\r\n    if (value.length < min) {\r\n      return {\r\n        isValid: false,\r\n        error: `${fieldName} en az ${min} karakter olmal─▒d─▒r`,\r\n      };\r\n    }\r\n    return { isValid: true };\r\n  },\r\n\r\n  maxLength: (value: string, max: number, fieldName: string): FieldValidationResult => {\r\n    if (value.length > max) {\r\n      return {\r\n        isValid: false,\r\n        error: `${fieldName} en fazla ${max} karakter olabilir`,\r\n      };\r\n    }\r\n    return { isValid: true };\r\n  },\r\n\r\n  email: (value: string): FieldValidationResult => {\r\n    if (!VALIDATION_PATTERNS.email.test(value)) {\r\n      return {\r\n        isValid: false,\r\n        error: 'Ge├ğerli bir e-posta adresi giriniz',\r\n      };\r\n    }\r\n    return { isValid: true };\r\n  },\r\n\r\n  phone: (value: string): FieldValidationResult => {\r\n    if (!VALIDATION_PATTERNS.phone.test(value)) {\r\n      return {\r\n        isValid: false,\r\n        error: 'Ge├ğerli bir telefon numaras─▒ giriniz (5XXXXXXXXX)',\r\n      };\r\n    }\r\n    return { isValid: true };\r\n  },\r\n\r\n  tcKimlik: (value: string): FieldValidationResult => {\r\n    if (!VALIDATION_PATTERNS.tcKimlik.test(value)) {\r\n      return {\r\n        isValid: false,\r\n        error: 'Ge├ğerli bir TC Kimlik numaras─▒ giriniz',\r\n      };\r\n    }\r\n\r\n    // TC Kimlik validation algorithm\r\n    const digits = value.split('').map(Number);\r\n    const sum1 = digits[0] + digits[2] + digits[4] + digits[6] + digits[8];\r\n    const sum2 = digits[1] + digits[3] + digits[5] + digits[7];\r\n\r\n    if ((sum1 * 7 - sum2) % 10 !== digits[9]) {\r\n      return {\r\n        isValid: false,\r\n        error: 'Ge├ğersiz TC Kimlik numaras─▒',\r\n      };\r\n    }\r\n\r\n    return { isValid: true };\r\n  },\r\n\r\n  iban: (value: string): FieldValidationResult => {\r\n    const cleanValue = value.replace(/\\s/g, '').toUpperCase();\r\n    if (!VALIDATION_PATTERNS.iban.test(cleanValue)) {\r\n      return {\r\n        isValid: false,\r\n        error: 'Ge├ğerli bir IBAN numaras─▒ giriniz',\r\n      };\r\n    }\r\n    return { isValid: true };\r\n  },\r\n\r\n  number: (\r\n    value: string | number,\r\n    min?: number,\r\n    max?: number,\r\n    fieldName?: string,\r\n  ): FieldValidationResult => {\r\n    const numValue = typeof value === 'string' ? parseFloat(value) : value;\r\n\r\n    if (isNaN(numValue)) {\r\n      return {\r\n        isValid: false,\r\n        error: `${fieldName ?? 'De─şer'} ge├ğerli bir say─▒ olmal─▒d─▒r`,\r\n      };\r\n    }\r\n\r\n    if (min !== undefined && numValue < min) {\r\n      return {\r\n        isValid: false,\r\n        error: `${fieldName ?? 'De─şer'} en az ${min} olmal─▒d─▒r`,\r\n      };\r\n    }\r\n\r\n    if (max !== undefined && numValue > max) {\r\n      return {\r\n        isValid: false,\r\n        error: `${fieldName ?? 'De─şer'} en fazla ${max} olabilir`,\r\n      };\r\n    }\r\n\r\n    return { isValid: true };\r\n  },\r\n\r\n  positiveNumber: (value: string | number, fieldName?: string): FieldValidationResult => {\r\n    const numValue = typeof value === 'string' ? parseFloat(value) : value;\r\n\r\n    if (isNaN(numValue) || numValue <= 0) {\r\n      return {\r\n        isValid: false,\r\n        error: `${fieldName ?? 'De─şer'} pozitif bir say─▒ olmal─▒d─▒r`,\r\n      };\r\n    }\r\n\r\n    return { isValid: true };\r\n  },\r\n\r\n  date: (value: string, fieldName?: string): FieldValidationResult => {\r\n    const date = new Date(value);\r\n    if (isNaN(date.getTime())) {\r\n      return {\r\n        isValid: false,\r\n        error: `${fieldName ?? 'Tarih'} ge├ğerli bir tarih olmal─▒d─▒r`,\r\n      };\r\n    }\r\n    return { isValid: true };\r\n  },\r\n\r\n  futureDate: (value: string, fieldName?: string): FieldValidationResult => {\r\n    const date = new Date(value);\r\n    const now = new Date();\r\n\r\n    if (isNaN(date.getTime())) {\r\n      return {\r\n        isValid: false,\r\n        error: `${fieldName ?? 'Tarih'} ge├ğerli bir tarih olmal─▒d─▒r`,\r\n      };\r\n    }\r\n\r\n    if (date <= now) {\r\n      return {\r\n        isValid: false,\r\n        error: `${fieldName ?? 'Tarih'} gelecek bir tarih olmal─▒d─▒r`,\r\n      };\r\n    }\r\n\r\n    return { isValid: true };\r\n  },\r\n\r\n  pastDate: (value: string, fieldName?: string): FieldValidationResult => {\r\n    const date = new Date(value);\r\n    const now = new Date();\r\n\r\n    if (isNaN(date.getTime())) {\r\n      return {\r\n        isValid: false,\r\n        error: `${fieldName ?? 'Tarih'} ge├ğerli bir tarih olmal─▒d─▒r`,\r\n      };\r\n    }\r\n\r\n    if (date >= now) {\r\n      return {\r\n        isValid: false,\r\n        error: `${fieldName ?? 'Tarih'} ge├ğmi┼ş bir tarih olmal─▒d─▒r`,\r\n      };\r\n    }\r\n\r\n    return { isValid: true };\r\n  },\r\n\r\n  url: (value: string): FieldValidationResult => {\r\n    if (!VALIDATION_PATTERNS.url.test(value)) {\r\n      return {\r\n        isValid: false,\r\n        error: 'Ge├ğerli bir URL giriniz',\r\n      };\r\n    }\r\n    return { isValid: true };\r\n  },\r\n\r\n  oneOf: (value: string, options: string[], fieldName?: string): FieldValidationResult => {\r\n    if (!options.includes(value)) {\r\n      return {\r\n        isValid: false,\r\n        error: `${fieldName ?? 'De─şer'} ge├ğerli se├ğeneklerden biri olmal─▒d─▒r`,\r\n      };\r\n    }\r\n    return { isValid: true };\r\n  },\r\n};\r\n\r\n// Form validation schemas\r\nexport type ValidationSchema = Record<\r\n  string,\r\n  {\r\n    required?: boolean;\r\n    minLength?: number;\r\n    maxLength?: number;\r\n    pattern?: RegExp;\r\n    custom?: (value: string | number | boolean) => FieldValidationResult;\r\n    sanitize?: (value: string) => string;\r\n  }\r\n>;\r\n\r\nexport const validateForm = (\r\n  data: Record<string, string | number | boolean>,\r\n  schema: ValidationSchema,\r\n): ValidationResult => {\r\n  const errors: string[] = [];\r\n\r\n  for (const [fieldName, rules] of Object.entries(schema)) {\r\n    const value = data[fieldName];\r\n\r\n    // Sanitize input if specified\r\n    let sanitizedValue = value;\r\n    if (rules.sanitize && typeof value === 'string') {\r\n      sanitizedValue = rules.sanitize(value);\r\n    }\r\n\r\n    // Required validation\r\n    if (rules.required) {\r\n      const result = validateField.required(\r\n        typeof sanitizedValue === 'boolean' ? sanitizedValue.toString() : sanitizedValue,\r\n        fieldName,\r\n      );\r\n      if (!result.isValid) {\r\n        errors.push(result.error!);\r\n        continue;\r\n      }\r\n    }\r\n\r\n    // Skip other validations if value is empty and not required\r\n    if (!sanitizedValue && !rules.required) {\r\n      continue;\r\n    }\r\n\r\n    // Min length validation\r\n    if (rules.minLength && typeof sanitizedValue === 'string') {\r\n      const result = validateField.minLength(sanitizedValue, rules.minLength, fieldName);\r\n      if (!result.isValid) {\r\n        errors.push(result.error!);\r\n      }\r\n    }\r\n\r\n    // Max length validation\r\n    if (rules.maxLength && typeof sanitizedValue === 'string') {\r\n      const result = validateField.maxLength(sanitizedValue, rules.maxLength, fieldName);\r\n      if (!result.isValid) {\r\n        errors.push(result.error!);\r\n      }\r\n    }\r\n\r\n    // Pattern validation\r\n    if (rules.pattern && typeof sanitizedValue === 'string') {\r\n      if (!rules.pattern.test(sanitizedValue)) {\r\n        errors.push(`${fieldName} format─▒ ge├ğersiz`);\r\n      }\r\n    }\r\n\r\n    // Custom validation\r\n    if (rules.custom) {\r\n      const result = rules.custom(sanitizedValue);\r\n      if (!result.isValid) {\r\n        errors.push(result.error!);\r\n      }\r\n    }\r\n  }\r\n\r\n  return {\r\n    isValid: errors.length === 0,\r\n    errors,\r\n  };\r\n};\r\n\r\n// Common validation schemas\r\nexport const VALIDATION_SCHEMAS = {\r\n  donation: {\r\n    donor_name: {\r\n      required: true,\r\n      minLength: 2,\r\n      maxLength: 255,\r\n      sanitize: sanitizeInput.html,\r\n    },\r\n    donor_email: {\r\n      pattern: VALIDATION_PATTERNS.email,\r\n      sanitize: sanitizeInput.email,\r\n    },\r\n    donor_phone: {\r\n      pattern: VALIDATION_PATTERNS.phone,\r\n      sanitize: sanitizeInput.phone,\r\n    },\r\n    amount: {\r\n      required: true,\r\n      custom: (value: string | number) => validateField.positiveNumber(value, 'Miktar'),\r\n    },\r\n    description: {\r\n      maxLength: 1000,\r\n      sanitize: sanitizeInput.html,\r\n    },\r\n  } as ValidationSchema,\r\n\r\n  member: {\r\n    name: {\r\n      required: true,\r\n      minLength: 2,\r\n      maxLength: 255,\r\n      sanitize: sanitizeInput.html,\r\n    },\r\n    email: {\r\n      required: true,\r\n      pattern: VALIDATION_PATTERNS.email,\r\n      sanitize: sanitizeInput.email,\r\n    },\r\n    phone: {\r\n      pattern: VALIDATION_PATTERNS.phone,\r\n      sanitize: sanitizeInput.phone,\r\n    },\r\n    address: {\r\n      maxLength: 500,\r\n      sanitize: sanitizeInput.html,\r\n    },\r\n    annual_fee: {\r\n      custom: (value: string | number) => validateField.number(value, 0, undefined, 'Y─▒ll─▒k Aidat'),\r\n    },\r\n  } as ValidationSchema,\r\n\r\n  beneficiary: {\r\n    ad_soyad: {\r\n      required: true,\r\n      minLength: 2,\r\n      maxLength: 255,\r\n      sanitize: sanitizeInput.html,\r\n    },\r\n    kimlik_no: {\r\n      required: true,\r\n      custom: (value: string) => validateField.tcKimlik(value),\r\n    },\r\n    telefon_no: {\r\n      pattern: VALIDATION_PATTERNS.phone,\r\n      sanitize: sanitizeInput.phone,\r\n    },\r\n    email: {\r\n      pattern: VALIDATION_PATTERNS.email,\r\n      sanitize: sanitizeInput.email,\r\n    },\r\n    adres: {\r\n      maxLength: 500,\r\n      sanitize: sanitizeInput.html,\r\n    },\r\n    toplam_tutar: {\r\n      custom: (value: string | number) => validateField.number(value, 0, undefined, 'Toplam Tutar'),\r\n    },\r\n    iban: {\r\n      custom: (value: string) => validateField.iban(value),\r\n    },\r\n  } as ValidationSchema,\r\n};\r\n\r\n// Rate limiting for API calls\r\n/**\r\n * RateLimiter Service\r\n * \r\n * Service class for handling ratelimiter operations\r\n * \r\n * @class RateLimiter\r\n */\r\nexport class RateLimiter {\r\n  private readonly requests = new Map<string, number[]>();\r\n  private readonly windowMs: number;\r\n  private readonly maxRequests: number;\r\n\r\n  constructor(windowMs = 60000, maxRequests = 100) {\r\n    this.windowMs = windowMs;\r\n    this.maxRequests = maxRequests;\r\n  }\r\n\r\n  isAllowed(identifier: string): boolean {\r\n    const now = Date.now();\r\n    const requests = this.requests.get(identifier) || [];\r\n\r\n    // Remove old requests outside the window\r\n    const validRequests = requests.filter((time) => now - time < this.windowMs);\r\n\r\n    if (validRequests.length >= this.maxRequests) {\r\n      return false;\r\n    }\r\n\r\n    validRequests.push(now);\r\n    this.requests.set(identifier, validRequests);\r\n    return true;\r\n  }\r\n\r\n  getRemainingRequests(identifier: string): number {\r\n    const now = Date.now();\r\n    const requests = this.requests.get(identifier) || [];\r\n    const validRequests = requests.filter((time) => now - time < this.windowMs);\r\n    return Math.max(0, this.maxRequests - validRequests.length);\r\n  }\r\n}\r\n\r\n// XSS Protection\r\nexport const xssProtection = {\r\n  escape: (input: string): string => {\r\n    const div = document.createElement('div');\r\n    div.textContent = input;\r\n    return div.innerHTML;\r\n  },\r\n\r\n  strip: (input: string): string => {\r\n    return input.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '');\r\n  },\r\n};\r\n\r\n// CSRF Protection\r\nexport const generateCSRFToken = (): string => {\r\n  const array = new Uint8Array(32);\r\n  crypto.getRandomValues(array);\r\n  return Array.from(array, (byte) => byte.toString(16).padStart(2, '0')).join('');\r\n};\r\n\r\nexport const validateCSRFToken = (token: string, sessionToken: string): boolean => {\r\n  return token === sessionToken;\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\__tests__\\databaseOptimization.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":137,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":137,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3769,3772],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3769,3772],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview Database Optimization Services Tests\r\n * @description Integration tests for all database optimization services\r\n */\r\n\r\nimport { describe, it, expect, beforeEach, vi, afterEach } from 'vitest';\r\n\r\n// Mock services to avoid actual database calls\r\nvi.mock('../queryOptimizationService', () => ({\r\n  queryOptimizationService: {\r\n    getQueryAnalytics: vi.fn(() => ({\r\n      totalQueries: 100,\r\n      slowQueries: 5,\r\n      avgExecutionTime: 150,\r\n      preparedStatements: [],\r\n      topSlowQueries: [],\r\n      queryAnalysis: [],\r\n    })),\r\n    executePreparedStatement: vi.fn(),\r\n    executeOptimizedQuery: vi.fn(),\r\n  },\r\n}));\r\n\r\nvi.mock('../indexManagementService', () => ({\r\n  indexManagementService: {\r\n    getDatabaseIndexes: vi.fn(() => Promise.resolve([])),\r\n    analyzeIndexUsage: vi.fn(() =>\r\n      Promise.resolve({\r\n        tableName: 'test',\r\n        totalIndexes: 5,\r\n        usedIndexes: 4,\r\n        unusedIndexes: 1,\r\n        duplicateIndexes: [],\r\n        missingIndexes: [],\r\n        oversizedIndexes: [],\r\n        scanEfficiency: {\r\n          seqScans: 10,\r\n          indexScans: 90,\r\n          bitmapScans: 5,\r\n          efficiency: 0.9,\r\n        },\r\n      }),\r\n    ),\r\n  },\r\n}));\r\n\r\nvi.mock('../connectionPoolingService', () => ({\r\n  connectionPoolingService: {\r\n    getConnectionStats: vi.fn(() =>\r\n      Promise.resolve({\r\n        activeConnections: 3,\r\n        idleConnections: 2,\r\n        totalConnections: 5,\r\n        waitingClients: 0,\r\n        connectionTime: 50,\r\n        queryCount: 1000,\r\n        errorCount: 0,\r\n        lastHealthCheck: new Date(),\r\n      }),\r\n    ),\r\n    getConnectionHealth: vi.fn(() => ({\r\n      status: 'healthy',\r\n      responseTime: 150,\r\n      errorRate: 0.01,\r\n      uptime: 3600000,\r\n      recommendations: [],\r\n    })),\r\n  },\r\n}));\r\n\r\nvi.mock('../cachingService', () => ({\r\n  cachingService: {\r\n    getStats: vi.fn(() => ({\r\n      totalEntries: 50,\r\n      totalSize: 2048000,\r\n      hitRate: 85,\r\n      missRate: 15,\r\n      evictions: 2,\r\n      hits: 850,\r\n      misses: 150,\r\n      avgAccessTime: 5,\r\n      oldestEntry: Date.now() - 3600000,\r\n      newestEntry: Date.now(),\r\n    })),\r\n    set: vi.fn(),\r\n    get: vi.fn(),\r\n    has: vi.fn(() => true),\r\n  },\r\n}));\r\n\r\nvi.mock('../performanceMonitoringService', () => ({\r\n  performanceMonitoringService: {\r\n    getActiveAlerts: vi.fn(() => []),\r\n    generateReport: vi.fn(() =>\r\n      Promise.resolve({\r\n        period: { start: new Date(), end: new Date(), duration: 24 },\r\n        summary: { overallHealth: 'good', score: 75, totalAlerts: 0, activeAlerts: 0 },\r\n        metrics: {\r\n          database: {\r\n            activeConnections: 3,\r\n            totalConnections: 5,\r\n            connectionUtilization: 0.6,\r\n            avgQueryTime: 150,\r\n            slowQueries: 5,\r\n            deadlockCount: 0,\r\n            cacheHitRatio: 0.9,\r\n            indexUsage: 0.8,\r\n          },\r\n          application: {\r\n            responseTime: 800,\r\n            throughput: 50,\r\n            errorRate: 0.02,\r\n            memoryUsage: 0.6,\r\n            cpuUsage: 0.4,\r\n            activeUsers: 10,\r\n          },\r\n          cache: {\r\n            hitRate: 0.85,\r\n            missRate: 0.15,\r\n            evictionRate: 0.04,\r\n            totalSize: 2048000,\r\n            entriesCount: 50,\r\n          },\r\n        },\r\n        alerts: [],\r\n        recommendations: { immediate: [], shortTerm: [], longTerm: [] },\r\n        trends: {\r\n          database: { queryTime: 'stable', connectionUsage: 'stable', cacheEfficiency: 'stable' },\r\n          application: { responseTime: 'stable', errorRate: 'stable', throughput: 'stable' },\r\n        },\r\n      }),\r\n    ),\r\n  },\r\n}));\r\n\r\ndescribe('Database Optimization Services Integration', () => {\r\n  let mockServices: any;\r\n\r\n  beforeEach(async () => {\r\n    mockServices = {\r\n      queryOptimization: (await import('../queryOptimizationService')).queryOptimizationService,\r\n      indexManagement: (await import('../indexManagementService')).indexManagementService,\r\n      connectionPooling: (await import('../connectionPoolingService')).connectionPoolingService,\r\n      caching: (await import('../cachingService')).cachingService,\r\n      performanceMonitoring: (await import('../performanceMonitoringService'))\r\n        .performanceMonitoringService,\r\n    };\r\n  });\r\n\r\n  afterEach(() => {\r\n    vi.clearAllMocks();\r\n  });\r\n\r\n  describe('Service Integration', () => {\r\n    it('should import all database optimization services', () => {\r\n      expect(mockServices.queryOptimization).toBeDefined();\r\n      expect(mockServices.indexManagement).toBeDefined();\r\n      expect(mockServices.connectionPooling).toBeDefined();\r\n      expect(mockServices.caching).toBeDefined();\r\n      expect(mockServices.performanceMonitoring).toBeDefined();\r\n    });\r\n\r\n    it('should have all required methods on services', () => {\r\n      // Query Optimization Service\r\n      expect(typeof mockServices.queryOptimization.getQueryAnalytics).toBe('function');\r\n      expect(typeof mockServices.queryOptimization.executePreparedStatement).toBe('function');\r\n      expect(typeof mockServices.queryOptimization.executeOptimizedQuery).toBe('function');\r\n\r\n      // Index Management Service\r\n      expect(typeof mockServices.indexManagement.getDatabaseIndexes).toBe('function');\r\n      expect(typeof mockServices.indexManagement.analyzeIndexUsage).toBe('function');\r\n\r\n      // Connection Pooling Service\r\n      expect(typeof mockServices.connectionPooling.getConnectionStats).toBe('function');\r\n      expect(typeof mockServices.connectionPooling.getConnectionHealth).toBe('function');\r\n\r\n      // Caching Service\r\n      expect(typeof mockServices.caching.getStats).toBe('function');\r\n      expect(typeof mockServices.caching.set).toBe('function');\r\n      expect(typeof mockServices.caching.get).toBe('function');\r\n      expect(typeof mockServices.caching.has).toBe('function');\r\n\r\n      // Performance Monitoring Service\r\n      expect(typeof mockServices.performanceMonitoring.getActiveAlerts).toBe('function');\r\n      expect(typeof mockServices.performanceMonitoring.generateReport).toBe('function');\r\n    });\r\n  });\r\n\r\n  describe('Service Functionality', () => {\r\n    it('should get query analytics', async () => {\r\n      const analytics = mockServices.queryOptimization.getQueryAnalytics();\r\n\r\n      expect(analytics).toHaveProperty('totalQueries');\r\n      expect(analytics).toHaveProperty('slowQueries');\r\n      expect(analytics).toHaveProperty('avgExecutionTime');\r\n      expect(analytics).toHaveProperty('preparedStatements');\r\n      expect(analytics).toHaveProperty('topSlowQueries');\r\n      expect(analytics).toHaveProperty('queryAnalysis');\r\n\r\n      expect(typeof analytics.totalQueries).toBe('number');\r\n      expect(typeof analytics.avgExecutionTime).toBe('number');\r\n    });\r\n\r\n    it('should analyze index usage', async () => {\r\n      const analysis = await mockServices.indexManagement.analyzeIndexUsage();\r\n\r\n      expect(analysis).toHaveProperty('tableName');\r\n      expect(analysis).toHaveProperty('totalIndexes');\r\n      expect(analysis).toHaveProperty('usedIndexes');\r\n      expect(analysis).toHaveProperty('unusedIndexes');\r\n      expect(analysis).toHaveProperty('scanEfficiency');\r\n\r\n      expect(analysis.scanEfficiency).toHaveProperty('efficiency');\r\n      expect(typeof analysis.scanEfficiency.efficiency).toBe('number');\r\n    });\r\n\r\n    it('should get connection statistics', async () => {\r\n      const stats = await mockServices.connectionPooling.getConnectionStats();\r\n\r\n      expect(stats).toHaveProperty('activeConnections');\r\n      expect(stats).toHaveProperty('totalConnections');\r\n      expect(stats).toHaveProperty('connectionTime');\r\n      expect(stats).toHaveProperty('queryCount');\r\n      expect(stats).toHaveProperty('errorCount');\r\n\r\n      expect(typeof stats.activeConnections).toBe('number');\r\n      expect(typeof stats.totalConnections).toBe('number');\r\n    });\r\n\r\n    it('should get connection health status', () => {\r\n      const health = mockServices.connectionPooling.getConnectionHealth();\r\n\r\n      expect(health).toHaveProperty('status');\r\n      expect(health).toHaveProperty('responseTime');\r\n      expect(health).toHaveProperty('errorRate');\r\n      expect(health).toHaveProperty('uptime');\r\n      expect(health).toHaveProperty('recommendations');\r\n\r\n      expect(['healthy', 'degraded', 'unhealthy']).toContain(health.status);\r\n    });\r\n\r\n    it('should get cache statistics', () => {\r\n      const stats = mockServices.caching.getStats();\r\n\r\n      expect(stats).toHaveProperty('totalEntries');\r\n      expect(stats).toHaveProperty('totalSize');\r\n      expect(stats).toHaveProperty('hitRate');\r\n      expect(stats).toHaveProperty('missRate');\r\n      expect(stats).toHaveProperty('evictions');\r\n      expect(stats).toHaveProperty('hits');\r\n      expect(stats).toHaveProperty('misses');\r\n\r\n      expect(typeof stats.hitRate).toBe('number');\r\n      expect(typeof stats.totalSize).toBe('number');\r\n    });\r\n\r\n    it('should generate performance report', async () => {\r\n      const report = await mockServices.performanceMonitoring.generateReport(24);\r\n\r\n      expect(report).toHaveProperty('period');\r\n      expect(report).toHaveProperty('summary');\r\n      expect(report).toHaveProperty('metrics');\r\n      expect(report).toHaveProperty('alerts');\r\n      expect(report).toHaveProperty('recommendations');\r\n      expect(report).toHaveProperty('trends');\r\n\r\n      expect(report.summary).toHaveProperty('overallHealth');\r\n      expect(report.summary).toHaveProperty('score');\r\n      expect(report.metrics).toHaveProperty('database');\r\n      expect(report.metrics).toHaveProperty('application');\r\n      expect(report.metrics).toHaveProperty('cache');\r\n    });\r\n\r\n    it('should have realistic performance metrics', async () => {\r\n      const report = await mockServices.performanceMonitoring.generateReport();\r\n\r\n      // Check database metrics\r\n      expect(report.metrics.database.avgQueryTime).toBeGreaterThan(0);\r\n      expect(report.metrics.database.connectionUtilization).toBeGreaterThanOrEqual(0);\r\n      expect(report.metrics.database.connectionUtilization).toBeLessThanOrEqual(1);\r\n\r\n      // Check application metrics\r\n      expect(report.metrics.application.responseTime).toBeGreaterThan(0);\r\n      expect(report.metrics.application.errorRate).toBeGreaterThanOrEqual(0);\r\n      expect(report.metrics.application.errorRate).toBeLessThanOrEqual(1);\r\n\r\n      // Check cache metrics\r\n      expect(report.metrics.cache.hitRate).toBeGreaterThanOrEqual(0);\r\n      expect(report.metrics.cache.hitRate).toBeLessThanOrEqual(1);\r\n      expect(report.metrics.cache.totalSize).toBeGreaterThanOrEqual(0);\r\n    });\r\n  });\r\n\r\n  describe('Service Health Checks', () => {\r\n    it('should have healthy services by default', () => {\r\n      // Mock services should return healthy status by default\r\n      const alerts = mockServices.performanceMonitoring.getActiveAlerts();\r\n      expect(Array.isArray(alerts)).toBe(true);\r\n      expect(alerts.length).toBe(0); // No active alerts in mock\r\n    });\r\n\r\n    it('should provide performance insights', async () => {\r\n      const report = await mockServices.performanceMonitoring.generateReport();\r\n\r\n      // Should have meaningful health assessment\r\n      expect(['excellent', 'good', 'fair', 'poor', 'critical']).toContain(\r\n        report.summary.overallHealth,\r\n      );\r\n      expect(report.summary.score).toBeGreaterThanOrEqual(0);\r\n      expect(report.summary.score).toBeLessThanOrEqual(100);\r\n    });\r\n  });\r\n\r\n  describe('Optimization Capabilities', () => {\r\n    it('should support cache operations', () => {\r\n      // Test basic cache operations\r\n      mockServices.caching.set('test_key', { data: 'test' });\r\n      expect(mockServices.caching.set).toHaveBeenCalledWith('test_key', { data: 'test' });\r\n\r\n      mockServices.caching.get('test_key');\r\n      expect(mockServices.caching.get).toHaveBeenCalledWith('test_key');\r\n\r\n      const hasKey = mockServices.caching.has('test_key');\r\n      expect(mockServices.caching.has).toHaveBeenCalledWith('test_key');\r\n      expect(hasKey).toBe(true);\r\n    });\r\n\r\n    it('should provide cache statistics', () => {\r\n      const stats = mockServices.caching.getStats();\r\n\r\n      expect(stats.hitRate).toBeGreaterThanOrEqual(0);\r\n      expect(stats.hitRate).toBeLessThanOrEqual(100);\r\n      expect(stats.totalEntries).toBeGreaterThanOrEqual(0);\r\n      expect(stats.totalSize).toBeGreaterThanOrEqual(0);\r\n    });\r\n\r\n    it('should support query optimization', async () => {\r\n      const analytics = mockServices.queryOptimization.getQueryAnalytics();\r\n\r\n      expect(analytics.totalQueries).toBeGreaterThanOrEqual(0);\r\n      expect(analytics.slowQueries).toBeGreaterThanOrEqual(0);\r\n      expect(analytics.avgExecutionTime).toBeGreaterThanOrEqual(0);\r\n    });\r\n\r\n    it('should support index analysis', async () => {\r\n      const analysis = await mockServices.indexManagement.analyzeIndexUsage();\r\n\r\n      expect(analysis.totalIndexes).toBeGreaterThanOrEqual(0);\r\n      expect(analysis.usedIndexes).toBeGreaterThanOrEqual(0);\r\n      expect(analysis.scanEfficiency.efficiency).toBeGreaterThanOrEqual(0);\r\n      expect(analysis.scanEfficiency.efficiency).toBeLessThanOrEqual(1);\r\n    });\r\n  });\r\n\r\n  describe('Integration Scenarios', () => {\r\n    it('should handle concurrent service calls', async () => {\r\n      // Test multiple services being called concurrently\r\n      const promises = [\r\n        mockServices.connectionPooling.getConnectionStats(),\r\n        mockServices.indexManagement.analyzeIndexUsage(),\r\n        mockServices.performanceMonitoring.generateReport(1),\r\n      ];\r\n\r\n      const results = await Promise.all(promises);\r\n\r\n      expect(results).toHaveLength(3);\r\n      expect(results[0]).toHaveProperty('activeConnections');\r\n      expect(results[1]).toHaveProperty('totalIndexes');\r\n      expect(results[2]).toHaveProperty('summary');\r\n    });\r\n\r\n    it('should maintain service consistency', () => {\r\n      // Test that services maintain consistent state\r\n      const cacheStats1 = mockServices.caching.getStats();\r\n      const cacheStats2 = mockServices.caching.getStats();\r\n\r\n      expect(cacheStats1.totalEntries).toBe(cacheStats2.totalEntries);\r\n      expect(cacheStats1.hitRate).toBe(cacheStats2.hitRate);\r\n    });\r\n\r\n    it('should provide actionable insights', async () => {\r\n      const report = await mockServices.performanceMonitoring.generateReport();\r\n\r\n      // Should have recommendations structure\r\n      expect(report.recommendations).toHaveProperty('immediate');\r\n      expect(report.recommendations).toHaveProperty('shortTerm');\r\n      expect(report.recommendations).toHaveProperty('longTerm');\r\n\r\n      // Should have trends\r\n      expect(report.trends).toHaveProperty('database');\r\n      expect(report.trends).toHaveProperty('application');\r\n\r\n      // Trends should have valid values\r\n      expect(['improving', 'stable', 'degrading']).toContain(report.trends.database.queryTime);\r\n      expect(['improving', 'stable', 'degrading']).toContain(\r\n        report.trends.application.responseTime,\r\n      );\r\n    });\r\n  });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\__tests__\\emailSMSService.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":39,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":39,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1086,1089],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1086,1089],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":72,"column":24,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":72,"endColumn":65},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":132,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":132,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4290,4293],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4290,4293],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":178,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":178,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5684,5687],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5684,5687],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":196,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":196,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6217,6220],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6217,6220],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":208,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":208,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6566,6569],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6566,6569],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":222,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":222,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6984,6987],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6984,6987],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":234,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":234,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7318,7321],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7318,7321],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":259,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":259,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8121,8124],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8121,8124],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":260,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":260,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8216,8219],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8216,8219],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":287,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":287,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9166,9169],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9166,9169],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":300,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":300,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9570,9573],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9570,9573],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":315,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":315,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9996,9999],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9996,9999],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview EmailSMS Service Tests\r\n * @description Unit tests for Email/SMS notification service\r\n */\r\n\r\nimport { describe, it, expect, beforeEach, vi, afterEach } from 'vitest';\r\nimport { EmailSMSService, sendEmail, sendSMS, sendWithTemplate } from '../emailSMSService';\r\n\r\n// Mock monitoring service\r\nvi.mock('../../services/monitoringService', () => ({\r\n  monitoring: {\r\n    trackApiCall: vi.fn(),\r\n    trackEvent: vi.fn(),\r\n  },\r\n}));\r\n\r\ndescribe('EmailSMSService', () => {\r\n  let service: EmailSMSService;\r\n\r\n  beforeEach(() => {\r\n    service = EmailSMSService.getInstance();\r\n    vi.clearAllMocks();\r\n  });\r\n\r\n  afterEach(() => {\r\n    vi.restoreAllMocks();\r\n  });\r\n\r\n  describe('Service Initialization', () => {\r\n    it('should create singleton instance', () => {\r\n      const instance1 = EmailSMSService.getInstance();\r\n      const instance2 = EmailSMSService.getInstance();\r\n\r\n      expect(instance1).toBe(instance2);\r\n      expect(instance1).toBeDefined();\r\n    });\r\n\r\n    it('should initialize with default configuration', () => {\r\n      const config = (service as any).emailConfig;\r\n\r\n      expect(config.provider).toBe('smtp');\r\n      expect(config.from.email).toBe('noreply@kafkasder.com');\r\n      expect(config.from.name).toBe('Kafkas Derne─şi Y├Ânetim Sistemi');\r\n    });\r\n\r\n    it('should load templates on initialization', () => {\r\n      const templates = service.getTemplates();\r\n\r\n      expect(templates.length).toBeGreaterThan(0);\r\n      expect(templates.some((t) => t.id === 'welcome-member')).toBe(true);\r\n      expect(templates.some((t) => t.id === 'verification-code')).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('Template Management', () => {\r\n    it('should get template by ID', () => {\r\n      const template = service.getTemplate('welcome-member');\r\n\r\n      expect(template).toBeDefined();\r\n      expect(template?.id).toBe('welcome-member');\r\n      expect(template?.variables).toContain('name');\r\n      expect(template?.variables).toContain('memberNumber');\r\n    });\r\n\r\n    it('should return null for non-existent template', () => {\r\n      const template = service.getTemplate('non-existent');\r\n\r\n      expect(template).toBeNull();\r\n    });\r\n\r\n    it('should render template with variables', () => {\r\n      const template = service.getTemplate('verification-code')!;\r\n      const rendered = service.renderTemplate(template, { code: '123456' });\r\n\r\n      expect(rendered).toContain('123456');\r\n      expect(rendered).toContain('Kafkas Derne─şi');\r\n    });\r\n\r\n    it('should get templates by category', () => {\r\n      const userTemplates = service.getTemplates('user');\r\n      const systemTemplates = service.getTemplates('system');\r\n\r\n      expect(userTemplates.length).toBeGreaterThan(0);\r\n      expect(systemTemplates.length).toBeGreaterThan(0);\r\n      expect(userTemplates.every((t) => t.category === 'user')).toBe(true);\r\n      expect(systemTemplates.every((t) => t.category === 'system')).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('Email Operations', () => {\r\n    it('should send email successfully', async () => {\r\n      const emailData = {\r\n        to: 'test@example.com',\r\n        subject: 'Test Email',\r\n        text: 'This is a test email',\r\n        priority: 'normal' as const,\r\n      };\r\n\r\n      const result = await service.sendEmail(emailData);\r\n\r\n      expect(result.success).toBe(true);\r\n      expect(result.messageId).toBeDefined();\r\n      expect(result.timestamp).toBeInstanceOf(Date);\r\n      expect(result.provider).toBe('smtp');\r\n    });\r\n\r\n    it('should send email with template', async () => {\r\n      const variables = {\r\n        name: 'Test User',\r\n        memberNumber: '12345',\r\n        verificationLink: 'https://example.com/verify',\r\n      };\r\n\r\n      const result = await service.sendWithTemplate(\r\n        'welcome-member',\r\n        'test@example.com',\r\n        variables,\r\n      );\r\n\r\n      expect(result.success).toBe(true);\r\n      expect(result.messageId).toBeDefined();\r\n    });\r\n\r\n    it('should throw error for invalid template', async () => {\r\n      await expect(\r\n        service.sendWithTemplate('invalid-template', 'test@example.com', {}),\r\n      ).rejects.toThrow('Template not found');\r\n    });\r\n\r\n    it('should handle email errors gracefully', async () => {\r\n      // Mock SMTP failure\r\n      vi.spyOn(service as any, 'sendWithSMTP').mockRejectedValueOnce(\r\n        new Error('SMTP connection failed'),\r\n      );\r\n\r\n      const emailData = {\r\n        to: 'test@example.com',\r\n        subject: 'Test Email',\r\n        text: 'This is a test email',\r\n        priority: 'normal' as const,\r\n      };\r\n\r\n      await expect(service.sendEmail(emailData)).rejects.toThrow('SMTP connection failed');\r\n    });\r\n  });\r\n\r\n  describe('SMS Operations', () => {\r\n    it('should send SMS successfully', async () => {\r\n      const smsData = {\r\n        to: '+1234567890',\r\n        subject: 'Test SMS',\r\n        text: 'This is a test SMS',\r\n        priority: 'normal' as const,\r\n      };\r\n\r\n      const result = await service.sendSMS(smsData);\r\n\r\n      expect(result.success).toBe(true);\r\n      expect(result.messageId).toBeDefined();\r\n      expect(result.timestamp).toBeInstanceOf(Date);\r\n      expect(result.provider).toBe('twilio');\r\n      expect(result.cost).toBe(0.0075);\r\n    });\r\n\r\n    it('should send SMS with template', async () => {\r\n      const variables = {\r\n        code: '123456',\r\n      };\r\n\r\n      const result = await service.sendWithTemplate('verification-code', '+1234567890', variables);\r\n\r\n      expect(result.success).toBe(true);\r\n      expect(result.messageId).toBeDefined();\r\n    });\r\n\r\n    it('should handle SMS errors gracefully', async () => {\r\n      // Mock Twilio failure\r\n      vi.spyOn(service as any, 'sendWithTwilio').mockRejectedValueOnce(\r\n        new Error('SMS service unavailable'),\r\n      );\r\n\r\n      const smsData = {\r\n        to: '+1234567890',\r\n        subject: 'Test SMS',\r\n        text: 'This is a test SMS',\r\n        priority: 'normal' as const,\r\n      };\r\n\r\n      await expect(service.sendSMS(smsData)).rejects.toThrow('SMS service unavailable');\r\n    });\r\n  });\r\n\r\n  describe('Provider Switching', () => {\r\n    it('should support multiple email providers', async () => {\r\n      // Test SendGrid\r\n      (service as any).emailConfig.provider = 'sendgrid';\r\n      const result1 = await service.sendEmail({\r\n        to: 'test@example.com',\r\n        subject: 'Test',\r\n        text: 'Test',\r\n        priority: 'normal',\r\n      });\r\n\r\n      expect(result1.provider).toBe('sendgrid');\r\n      expect(result1.cost).toBe(0.0001);\r\n\r\n      // Test Mailgun\r\n      (service as any).emailConfig.provider = 'mailgun';\r\n      const result2 = await service.sendEmail({\r\n        to: 'test@example.com',\r\n        subject: 'Test',\r\n        text: 'Test',\r\n        priority: 'normal',\r\n      });\r\n\r\n      expect(result2.provider).toBe('mailgun');\r\n      expect(result2.cost).toBe(0.0001);\r\n    });\r\n\r\n    it('should support multiple SMS providers', async () => {\r\n      // Test NetGSM\r\n      (service as any).smsConfig.provider = 'netgsm';\r\n      const result1 = await service.sendSMS({\r\n        to: '+1234567890',\r\n        subject: 'Test',\r\n        text: 'Test',\r\n        priority: 'normal',\r\n      });\r\n\r\n      expect(result1.provider).toBe('netgsm');\r\n      expect(result1.cost).toBe(0.005);\r\n\r\n      // Test Twilio\r\n      (service as any).smsConfig.provider = 'twilio';\r\n      const result2 = await service.sendSMS({\r\n        to: '+1234567890',\r\n        subject: 'Test',\r\n        text: 'Test',\r\n        priority: 'normal',\r\n      });\r\n\r\n      expect(result2.provider).toBe('twilio');\r\n      expect(result2.cost).toBe(0.0075);\r\n    });\r\n  });\r\n\r\n  describe('Configuration Testing', () => {\r\n    it('should test configuration successfully', async () => {\r\n      const result = await service.testConfiguration();\r\n\r\n      expect(result).toHaveProperty('email');\r\n      expect(result).toHaveProperty('sms');\r\n      expect(result).toHaveProperty('errors');\r\n      expect(Array.isArray(result.errors)).toBe(true);\r\n    });\r\n\r\n    it('should handle configuration test failures', async () => {\r\n      // Mock failures\r\n      vi.spyOn(service as any, 'sendEmail').mockRejectedValueOnce(new Error('Email failed'));\r\n      vi.spyOn(service as any, 'sendSMS').mockRejectedValueOnce(new Error('SMS failed'));\r\n\r\n      const result = await service.testConfiguration();\r\n\r\n      expect(result.email).toBe(false);\r\n      expect(result.sms).toBe(false);\r\n      expect(result.errors).toContain('Email test failed');\r\n      expect(result.errors).toContain('SMS test failed');\r\n    });\r\n  });\r\n\r\n  describe('Utility Functions', () => {\r\n    it('should export utility functions', () => {\r\n      expect(typeof sendEmail).toBe('function');\r\n      expect(typeof sendSMS).toBe('function');\r\n      expect(typeof sendWithTemplate).toBe('function');\r\n      expect(typeof service.getTemplates).toBe('function');\r\n    });\r\n\r\n    it('should provide service instance', () => {\r\n      expect(service).toBeDefined();\r\n      expect(service instanceof EmailSMSService).toBe(true);\r\n    });\r\n  });\r\n\r\n  describe('Error Handling', () => {\r\n    it('should handle network errors', async () => {\r\n      vi.spyOn(service as any, 'sendWithSMTP').mockRejectedValueOnce(new Error('Network timeout'));\r\n\r\n      await expect(\r\n        service.sendEmail({\r\n          to: 'test@example.com',\r\n          subject: 'Test',\r\n          text: 'Test',\r\n          priority: 'normal',\r\n        }),\r\n      ).rejects.toThrow('Network timeout');\r\n    });\r\n\r\n    it('should handle invalid email addresses', async () => {\r\n      vi.spyOn(service as any, 'sendWithSMTP').mockRejectedValueOnce(\r\n        new Error('Invalid email address'),\r\n      );\r\n\r\n      await expect(\r\n        service.sendEmail({\r\n          to: 'invalid-email',\r\n          subject: 'Test',\r\n          text: 'Test',\r\n          priority: 'normal',\r\n        }),\r\n      ).rejects.toThrow('Invalid email address');\r\n    });\r\n\r\n    it('should handle SMS rate limiting', async () => {\r\n      vi.spyOn(service as any, 'sendWithTwilio').mockRejectedValueOnce(\r\n        new Error('Rate limit exceeded'),\r\n      );\r\n\r\n      await expect(\r\n        service.sendSMS({\r\n          to: '+1234567890',\r\n          subject: 'Test',\r\n          text: 'Test',\r\n          priority: 'normal',\r\n        }),\r\n      ).rejects.toThrow('Rate limit exceeded');\r\n    });\r\n  });\r\n\r\n  describe('Performance', () => {\r\n    it('should handle concurrent requests', async () => {\r\n      const promises = Array.from({ length: 5 }, (_, i) =>\r\n        service.sendEmail({\r\n          to: `test${i}@example.com`,\r\n          subject: 'Concurrent Test',\r\n          text: `Test message ${i}`,\r\n          priority: 'normal',\r\n        }),\r\n      );\r\n\r\n      const results = await Promise.all(promises);\r\n\r\n      expect(results).toHaveLength(5);\r\n      expect(results.every((r) => r.success)).toBe(true);\r\n    });\r\n\r\n    it('should process requests within reasonable time', async () => {\r\n      const startTime = Date.now();\r\n\r\n      await service.sendEmail({\r\n        to: 'test@example.com',\r\n        subject: 'Performance Test',\r\n        text: 'Testing performance',\r\n        priority: 'normal',\r\n      });\r\n\r\n      const duration = Date.now() - startTime;\r\n      expect(duration).toBeLessThan(1000); // Should complete within 1 second\r\n    });\r\n  });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\__tests__\\environmentService.test.ts","messages":[],"suppressedMessages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_removedUrl' is assigned a value but never used.","line":107,"column":34,"nodeType":null,"messageId":"unusedVar","endLine":107,"endColumn":45,"suppressions":[{"kind":"directive","justification":""}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_envWithoutUrl' is assigned a value but never used.","line":107,"column":50,"nodeType":null,"messageId":"unusedVar","endLine":107,"endColumn":64,"suppressions":[{"kind":"directive","justification":""}]}],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\__tests__\\fileStorageService.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\advancedPerformanceService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":117,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":117,"endColumn":21},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":117,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":117,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":126,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":126,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3516,3519],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3516,3519],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":135,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":135,"endColumn":21},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":135,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":135,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":145,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":145,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4183,4186],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4183,4186],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":157,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":157,"endColumn":21},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":157,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":157,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":202,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":202,"endColumn":21},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":202,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":202,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":214,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":214,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6263,6266],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6263,6266],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":234,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":234,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6845,6848],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6845,6848],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":246,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":246,"endColumn":21},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":246,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":246,"endColumn":21},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":258,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":258,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[7666,7669],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[7666,7669],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":268,"column":71,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":268,"endColumn":73,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8010,8012],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":269,"column":5,"nodeType":"MemberExpression","endLine":269,"endColumn":24},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":320,"column":71,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":320,"endColumn":73,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9243,9245],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":418,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":418,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12216,12219],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12216,12219],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":428,"column":71,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":428,"endColumn":73,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12555,12557],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":556,"column":71,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":556,"endColumn":73,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[15841,15843],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview Advanced Performance Service\r\n * @description Geli┼şmi┼ş performans izleme ve optimizasyon servisi\r\n */\r\n\r\nimport React from 'react';\r\nimport { monitoring } from './monitoringService';\r\nimport { logger } from '../lib/logging/logger';\r\n\r\n// Declare gtag for analytics (if available)\r\ndeclare global {\r\n  function gtag(...args: unknown[]): void;\r\n}\r\n\r\n// Performans metrikleri\r\ninterface PerformanceMetrics {\r\n  // Core Web Vitals\r\n  lcp: number; // Largest Contentful Paint\r\n  fid: number; // First Input Delay\r\n  cls: number; // Cumulative Layout Shift\r\n  fcp: number; // First Contentful Paint\r\n  ttfb: number; // Time to First Byte\r\n\r\n  // Custom metrics\r\n  componentRenderTime: number;\r\n  apiResponseTime: number;\r\n  bundleSize: number;\r\n  memoryUsage: number;\r\n  cpuUsage: number;\r\n\r\n  // User experience\r\n  pageLoadTime: number;\r\n  interactionTime: number;\r\n  errorRate: number;\r\n  bounceRate: number;\r\n}\r\n\r\n// Performans raporu\r\ninterface PerformanceReport {\r\n  timestamp: Date;\r\n  url: string;\r\n  userAgent: string;\r\n  connection: string;\r\n  metrics: PerformanceMetrics;\r\n  recommendations: string[];\r\n  score: number; // 0-100\r\n}\r\n\r\n// Performans optimizasyon ├Ânerileri\r\ninterface OptimizationSuggestion {\r\n  type: 'critical' | 'warning' | 'info';\r\n  category: 'performance' | 'accessibility' | 'seo' | 'best-practices';\r\n  title: string;\r\n  description: string;\r\n  impact: 'high' | 'medium' | 'low';\r\n  effort: 'low' | 'medium' | 'high';\r\n  code?: string;\r\n  resources?: string[];\r\n}\r\n\r\nclass AdvancedPerformanceService {\r\n  private readonly metrics = new Map<string, PerformanceMetrics>();\r\n  private readonly reports: PerformanceReport[] = [];\r\n  private observers: PerformanceObserver[] = [];\r\n  private isMonitoring = false;\r\n\r\n  constructor() {\r\n    this.initializePerformanceMonitoring();\r\n  }\r\n\r\n  /**\r\n   * Performans izlemeyi ba┼şlat\r\n   */\r\n  private initializePerformanceMonitoring(): void {\r\n    if (typeof window === 'undefined') return;\r\n\r\n    try {\r\n      // Core Web Vitals izleme\r\n      this.observeCoreWebVitals();\r\n\r\n      // Custom metrikler izleme\r\n      this.observeCustomMetrics();\r\n\r\n      // Memory kullan─▒m─▒ izleme\r\n      this.observeMemoryUsage();\r\n\r\n      // Network performans─▒ izleme\r\n      this.observeNetworkPerformance();\r\n\r\n      // Component render s├╝releri izleme\r\n      this.observeComponentPerformance();\r\n\r\n      this.isMonitoring = true;\r\n      logger.info('[Performance] Advanced monitoring initialized');\r\n    } catch (error) {\r\n      logger.error('[Performance] Failed to initialize monitoring:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Core Web Vitals metriklerini izle\r\n   */\r\n  private observeCoreWebVitals(): void {\r\n    // LCP (Largest Contentful Paint)\r\n    if ('PerformanceObserver' in window) {\r\n      const lcpObserver = new PerformanceObserver((list) => {\r\n        const entries = list.getEntries();\r\n        const lastEntry = entries[entries.length - 1];\r\n\r\n        this.updateMetric('lcp', lastEntry.startTime);\r\n        this.reportMetric('lcp', lastEntry.startTime);\r\n      });\r\n\r\n      try {\r\n        lcpObserver.observe({ entryTypes: ['largest-contentful-paint'] });\r\n        this.observers.push(lcpObserver);\r\n      } catch (error) {\r\n        logger.warn('[Performance] LCP observer not supported');\r\n      }\r\n    }\r\n\r\n    // FID (First Input Delay)\r\n    if ('PerformanceObserver' in window) {\r\n      const fidObserver = new PerformanceObserver((list) => {\r\n        const entries = list.getEntries();\r\n        entries.forEach((entry: any) => {\r\n          this.updateMetric('fid', entry.processingStart - entry.startTime);\r\n          this.reportMetric('fid', entry.processingStart - entry.startTime);\r\n        });\r\n      });\r\n\r\n      try {\r\n        fidObserver.observe({ entryTypes: ['first-input'] });\r\n        this.observers.push(fidObserver);\r\n      } catch (error) {\r\n        logger.warn('[Performance] FID observer not supported');\r\n      }\r\n    }\r\n\r\n    // CLS (Cumulative Layout Shift)\r\n    if ('PerformanceObserver' in window) {\r\n      let clsValue = 0;\r\n      const clsObserver = new PerformanceObserver((list) => {\r\n        const entries = list.getEntries();\r\n        entries.forEach((entry: any) => {\r\n          if (!entry.hadRecentInput) {\r\n            clsValue += entry.value;\r\n            this.updateMetric('cls', clsValue);\r\n            this.reportMetric('cls', clsValue);\r\n          }\r\n        });\r\n      });\r\n\r\n      try {\r\n        clsObserver.observe({ entryTypes: ['layout-shift'] });\r\n        this.observers.push(clsObserver);\r\n      } catch (error) {\r\n        logger.warn('[Performance] CLS observer not supported');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Custom metrikleri izle\r\n   */\r\n  private observeCustomMetrics(): void {\r\n    // Sayfa y├╝kleme s├╝resi\r\n    window.addEventListener('load', () => {\r\n      const navigation = performance.getEntriesByType(\r\n        'navigation',\r\n      )[0] as PerformanceNavigationTiming;\r\n      const loadTime = navigation.loadEventEnd - navigation.fetchStart;\r\n\r\n      this.updateMetric('pageLoadTime', loadTime);\r\n      this.reportMetric('pageLoadTime', loadTime);\r\n    });\r\n\r\n    // TTFB (Time to First Byte)\r\n    window.addEventListener('load', () => {\r\n      const navigation = performance.getEntriesByType(\r\n        'navigation',\r\n      )[0] as PerformanceNavigationTiming;\r\n      const ttfb = navigation.responseStart - navigation.fetchStart;\r\n\r\n      this.updateMetric('ttfb', ttfb);\r\n      this.reportMetric('ttfb', ttfb);\r\n    });\r\n\r\n    // FCP (First Contentful Paint)\r\n    if ('PerformanceObserver' in window) {\r\n      const fcpObserver = new PerformanceObserver((list) => {\r\n        const entries = list.getEntries();\r\n        entries.forEach((entry) => {\r\n          this.updateMetric('fcp', entry.startTime);\r\n          this.reportMetric('fcp', entry.startTime);\r\n        });\r\n      });\r\n\r\n      try {\r\n        fcpObserver.observe({ entryTypes: ['paint'] });\r\n        this.observers.push(fcpObserver);\r\n      } catch (error) {\r\n        logger.warn('[Performance] FCP observer not supported');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Memory kullan─▒m─▒n─▒ izle\r\n   */\r\n  private observeMemoryUsage(): void {\r\n    if ('memory' in performance) {\r\n      const checkMemory = () => {\r\n        const {memory} = (performance as any);\r\n        this.updateMetric('memoryUsage', memory.usedJSHeapSize);\r\n        this.reportMetric('memoryUsage', memory.usedJSHeapSize);\r\n      };\r\n\r\n      // ─░lk kontrol\r\n      checkMemory();\r\n\r\n      // Periyodik kontrol (her 30 saniyede bir)\r\n      setInterval(checkMemory, 30000);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Network performans─▒n─▒ izle\r\n   */\r\n  private observeNetworkPerformance(): void {\r\n    if ('PerformanceObserver' in window) {\r\n      const networkObserver = new PerformanceObserver((list) => {\r\n        const entries = list.getEntries();\r\n        entries.forEach((entry: any) => {\r\n          if (entry.entryType === 'resource') {\r\n            const responseTime = entry.responseEnd - entry.requestStart;\r\n            this.updateMetric('apiResponseTime', responseTime);\r\n            this.reportMetric('apiResponseTime', responseTime);\r\n          }\r\n        });\r\n      });\r\n\r\n      try {\r\n        networkObserver.observe({ entryTypes: ['resource'] });\r\n        this.observers.push(networkObserver);\r\n      } catch (error) {\r\n        logger.warn('[Performance] Network observer not supported');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Component performans─▒n─▒ izle\r\n   */\r\n  private observeComponentPerformance(): void {\r\n    // React component render s├╝relerini izlemek i├ğin\r\n    // Bu k─▒s─▒m React DevTools Profiler API'si ile entegre edilebilir\r\n    if (typeof window !== 'undefined' && (window as any).React) {\r\n      // React Profiler entegrasyonu burada yap─▒labilir\r\n      logger.info('[Performance] React component monitoring available');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Metrik g├╝ncelle\r\n   */\r\n  private updateMetric(key: keyof PerformanceMetrics, value: number): void {\r\n    const currentMetrics = this.metrics.get(window.location.pathname) || this.getDefaultMetrics();\r\n    currentMetrics[key] = value;\r\n    this.metrics.set(window.location.pathname, currentMetrics);\r\n  }\r\n\r\n  /**\r\n   * Metrik raporla\r\n   */\r\n  private reportMetric(key: keyof PerformanceMetrics, value: number): void {\r\n    // Monitor with tracking\r\n    monitoring.trackEvent('performance_metric', {\r\n      metric: key,\r\n      value,\r\n      url: window.location.pathname,\r\n    });\r\n\r\n    // Analytics'e g├Ânder\r\n    if (typeof gtag !== 'undefined') {\r\n      gtag('event', 'performance_metric', {\r\n        metric_name: key,\r\n        metric_value: value,\r\n        page_path: window.location.pathname,\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Varsay─▒lan metrikler\r\n   */\r\n  private getDefaultMetrics(): PerformanceMetrics {\r\n    return {\r\n      lcp: 0,\r\n      fid: 0,\r\n      cls: 0,\r\n      fcp: 0,\r\n      ttfb: 0,\r\n      componentRenderTime: 0,\r\n      apiResponseTime: 0,\r\n      bundleSize: 0,\r\n      memoryUsage: 0,\r\n      cpuUsage: 0,\r\n      pageLoadTime: 0,\r\n      interactionTime: 0,\r\n      errorRate: 0,\r\n      bounceRate: 0,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Performans raporu olu┼ştur\r\n   */\r\n  public generateReport(): PerformanceReport {\r\n    const currentMetrics = this.metrics.get(window.location.pathname) || this.getDefaultMetrics();\r\n    const score = this.calculatePerformanceScore(currentMetrics);\r\n    const recommendations = this.generateRecommendations(currentMetrics);\r\n\r\n    const report: PerformanceReport = {\r\n      timestamp: new Date(),\r\n      url: window.location.pathname,\r\n      userAgent: navigator.userAgent,\r\n      connection: this.getConnectionInfo(),\r\n      metrics: currentMetrics,\r\n      recommendations,\r\n      score,\r\n    };\r\n\r\n    this.reports.push(report);\r\n    return report;\r\n  }\r\n\r\n  /**\r\n   * Performans skoru hesapla (0-100)\r\n   */\r\n  private calculatePerformanceScore(metrics: PerformanceMetrics): number {\r\n    let score = 100;\r\n\r\n    // LCP scoring (0-2.5s = 100, 2.5-4s = 50, >4s = 0)\r\n    if (metrics.lcp > 4000) score -= 30;\r\n    else if (metrics.lcp > 2500) score -= 15;\r\n\r\n    // FID scoring (0-100ms = 100, 100-300ms = 50, >300ms = 0)\r\n    if (metrics.fid > 300) score -= 25;\r\n    else if (metrics.fid > 100) score -= 10;\r\n\r\n    // CLS scoring (0-0.1 = 100, 0.1-0.25 = 50, >0.25 = 0)\r\n    if (metrics.cls > 0.25) score -= 20;\r\n    else if (metrics.cls > 0.1) score -= 10;\r\n\r\n    // Page load time scoring\r\n    if (metrics.pageLoadTime > 5000) score -= 15;\r\n    else if (metrics.pageLoadTime > 3000) score -= 8;\r\n\r\n    // Memory usage scoring\r\n    if (metrics.memoryUsage > 100 * 1024 * 1024)\r\n      score -= 10; // >100MB\r\n    else if (metrics.memoryUsage > 50 * 1024 * 1024) score -= 5; // >50MB\r\n\r\n    return Math.max(0, score);\r\n  }\r\n\r\n  /**\r\n   * Optimizasyon ├Ânerileri olu┼ştur\r\n   */\r\n  private generateRecommendations(metrics: PerformanceMetrics): string[] {\r\n    const recommendations: string[] = [];\r\n\r\n    if (metrics.lcp > 2500) {\r\n      recommendations.push(\r\n        'Largest Contentful Paint s├╝resini optimize edin. G├Ârsel s─▒k─▒┼şt─▒rma ve lazy loading kullan─▒n.',\r\n      );\r\n    }\r\n\r\n    if (metrics.fid > 100) {\r\n      recommendations.push(\r\n        \"First Input Delay'i azalt─▒n. JavaScript bundle'─▒n─▒ optimize edin ve code splitting uygulay─▒n.\",\r\n      );\r\n    }\r\n\r\n    if (metrics.cls > 0.1) {\r\n      recommendations.push(\r\n        \"Cumulative Layout Shift'i azalt─▒n. G├Ârsel boyutlar─▒n─▒ ├Ânceden tan─▒mlay─▒n.\",\r\n      );\r\n    }\r\n\r\n    if (metrics.pageLoadTime > 3000) {\r\n      recommendations.push(\r\n        'Sayfa y├╝kleme s├╝resini optimize edin. Critical CSS inline yap─▒n ve gereksiz kaynaklar─▒ kald─▒r─▒n.',\r\n      );\r\n    }\r\n\r\n    if (metrics.memoryUsage > 50 * 1024 * 1024) {\r\n      recommendations.push(\r\n        \"Memory kullan─▒m─▒n─▒ optimize edin. Memory leak'leri kontrol edin ve garbage collection'─▒ iyile┼ştirin.\",\r\n      );\r\n    }\r\n\r\n    if (metrics.apiResponseTime > 1000) {\r\n      recommendations.push(\r\n        'API yan─▒t s├╝relerini optimize edin. Caching ve database query optimizasyonu uygulay─▒n.',\r\n      );\r\n    }\r\n\r\n    return recommendations;\r\n  }\r\n\r\n  /**\r\n   * Ba─şlant─▒ bilgisi al\r\n   */\r\n  private getConnectionInfo(): string {\r\n    if ('connection' in navigator) {\r\n      const {connection} = (navigator as any);\r\n      return `${connection.effectiveType ?? 'unknown'} (${connection.downlink ?? 'unknown'} Mbps)`;\r\n    }\r\n    return 'unknown';\r\n  }\r\n\r\n  /**\r\n   * Performans optimizasyon ├Ânerileri al\r\n   */\r\n  public getOptimizationSuggestions(): OptimizationSuggestion[] {\r\n    const currentMetrics = this.metrics.get(window.location.pathname) || this.getDefaultMetrics();\r\n    const suggestions: OptimizationSuggestion[] = [];\r\n\r\n    // LCP optimizasyonlar─▒\r\n    if (currentMetrics.lcp > 2500) {\r\n      suggestions.push({\r\n        type: 'critical',\r\n        category: 'performance',\r\n        title: 'Largest Contentful Paint Optimizasyonu',\r\n        description: 'LCP s├╝resini 2.5s alt─▒na d├╝┼ş├╝r├╝n',\r\n        impact: 'high',\r\n        effort: 'medium',\r\n        code: `\r\n// G├Ârsel optimizasyonu\r\n<img \r\n  src=\"image.jpg\" \r\n  loading=\"lazy\" \r\n  decoding=\"async\"\r\n  width=\"800\" \r\n  height=\"600\"\r\n  alt=\"Description\"\r\n/>\r\n\r\n// Critical CSS inline\r\n<style dangerouslySetInnerHTML={{__html: criticalCSS}} />\r\n        `,\r\n        resources: ['https://web.dev/lcp/', 'https://web.dev/optimize-lcp/'],\r\n      });\r\n    }\r\n\r\n    // Bundle size optimizasyonlar─▒\r\n    if (currentMetrics.bundleSize > 500 * 1024) {\r\n      // >500KB\r\n      suggestions.push({\r\n        type: 'warning',\r\n        category: 'performance',\r\n        title: 'Bundle Size Optimizasyonu',\r\n        description: 'JavaScript bundle boyutunu azalt─▒n',\r\n        impact: 'high',\r\n        effort: 'high',\r\n        code: `\r\n// Code splitting\r\nconst LazyComponent = React.lazy(() => import('./LazyComponent'));\r\n\r\n// Tree shaking\r\nimport { specificFunction } from 'large-library';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\n// Bundle analyzer\r\nnpm install --save-dev webpack-bundle-analyzer\r\n        `,\r\n        resources: [\r\n          'https://web.dev/reduce-javascript-payloads-with-code-splitting/',\r\n          'https://webpack.js.org/guides/tree-shaking/',\r\n        ],\r\n      });\r\n    }\r\n\r\n    // Memory optimizasyonlar─▒\r\n    if (currentMetrics.memoryUsage > 100 * 1024 * 1024) {\r\n      suggestions.push({\r\n        type: 'warning',\r\n        category: 'performance',\r\n        title: 'Memory Leak Kontrol├╝',\r\n        description: 'Memory kullan─▒m─▒n─▒ optimize edin',\r\n        impact: 'medium',\r\n        effort: 'medium',\r\n        code: `\r\n// Event listener cleanup\r\nuseEffect(() => {\r\n  const handleResize = () => {};\r\n  window.addEventListener('resize', handleResize);\r\n  \r\n  return () => {\r\n    window.removeEventListener('resize', handleResize);\r\n  };\r\n}, []);\r\n\r\n// WeakMap kullan─▒m─▒\r\nconst cache = new WeakMap();\r\n        `,\r\n        resources: [\r\n          'https://web.dev/memory-leaks/',\r\n          'https://developer.mozilla.org/en-US/docs/Web/API/WeakMap',\r\n        ],\r\n      });\r\n    }\r\n\r\n    return suggestions;\r\n  }\r\n\r\n  /**\r\n   * Performans raporlar─▒n─▒ al\r\n   */\r\n  public getReports(): PerformanceReport[] {\r\n    return [...this.reports];\r\n  }\r\n\r\n  /**\r\n   * Performans metriklerini al\r\n   */\r\n  public getMetrics(): Map<string, PerformanceMetrics> {\r\n    return new Map(this.metrics);\r\n  }\r\n\r\n  /**\r\n   * ─░zlemeyi durdur\r\n   */\r\n  public stopMonitoring(): void {\r\n    this.observers.forEach((observer) => {\r\n      observer.disconnect();\r\n    });\r\n    this.observers = [];\r\n    this.isMonitoring = false;\r\n    logger.info('[Performance] Monitoring stopped');\r\n  }\r\n\r\n  /**\r\n   * ─░zleme durumunu kontrol et\r\n   */\r\n  public isMonitoringActive(): boolean {\r\n    return this.isMonitoring;\r\n  }\r\n\r\n  /**\r\n   * Real-time performans dashboard verisi\r\n   */\r\n  public getDashboardData() {\r\n    const currentMetrics = this.metrics.get(window.location.pathname) || this.getDefaultMetrics();\r\n    const score = this.calculatePerformanceScore(currentMetrics);\r\n\r\n    return {\r\n      score,\r\n      metrics: currentMetrics,\r\n      recommendations: this.generateRecommendations(currentMetrics),\r\n      suggestions: this.getOptimizationSuggestions(),\r\n      isMonitoring: this.isMonitoring,\r\n      lastUpdate: new Date(),\r\n    };\r\n  }\r\n}\r\n\r\n// Singleton instance\r\nexport const advancedPerformanceService = new AdvancedPerformanceService();\r\n\r\n// React hook for performance monitoring\r\nexport const usePerformanceMonitoring = () => {\r\n  const [dashboardData, setDashboardData] = React.useState(\r\n    advancedPerformanceService.getDashboardData(),\r\n  );\r\n\r\n  React.useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setDashboardData(advancedPerformanceService.getDashboardData());\r\n    }, 5000); // Her 5 saniyede g├╝ncelle\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    ...dashboardData,\r\n    generateReport: () => advancedPerformanceService.generateReport(),\r\n    getOptimizationSuggestions: () => advancedPerformanceService.getOptimizationSuggestions(),\r\n  };\r\n};\r\n\r\nexport default advancedPerformanceService;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\advancedSecurityService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":49,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":49,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1139,1142],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1139,1142],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":81,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":81,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1882,1885],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1882,1885],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":85,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":85,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1995,1998],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1995,1998],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":317,"column":91,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":317,"endColumn":94,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8356,8359],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8356,8359],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":392,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":392,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10261,10264],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10261,10264],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":452,"column":24,"nodeType":"Identifier","messageId":"neverNullish","endLine":452,"endColumn":30},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":460,"column":19,"nodeType":"Identifier","messageId":"neverNullish","endLine":460,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":477,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":477,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12598,12601],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12598,12601],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'context' is defined but never used.","line":477,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":477,"endColumn":43},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'context' is defined but never used. Allowed unused args must match /^_/u.","line":477,"column":36,"nodeType":null,"messageId":"unusedVar","endLine":477,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":477,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":477,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12612,12615],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12612,12615],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":478,"column":62,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":478,"endColumn":64,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12687,12689],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":559,"column":24,"nodeType":"MemberExpression","endLine":559,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":628,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":628,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17035,17038],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17035,17038],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":640,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":640,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17384,17387],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17384,17387],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":640,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":640,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17405,17408],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17405,17408],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":645,"column":15,"nodeType":"MemberExpression","endLine":645,"endColumn":25},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":654,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":654,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17642,17645],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17642,17645],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":654,"column":69,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":654,"endColumn":72,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17675,17678],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17675,17678],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-non-literal-regexp","severity":1,"message":"Found non-literal argument to RegExp Constructor","line":661,"column":16,"nodeType":"NewExpression","endLine":661,"endColumn":36},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":760,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":760,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[20667,20669],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":763,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":763,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20747,20750],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20747,20750],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":777,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":777,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21075,21078],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21075,21078],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":778,"column":64,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":778,"endColumn":67,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21144,21147],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21144,21147],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":811,"column":67,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":811,"endColumn":70,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22197,22200],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22197,22200],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":832,"column":11,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":832,"endColumn":28},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":832,"column":12,"nodeType":"MemberExpression","endLine":832,"endColumn":28},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":833,"column":9,"nodeType":"MemberExpression","endLine":833,"endColumn":25},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":835,"column":7,"nodeType":"MemberExpression","endLine":835,"endColumn":23},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":836,"column":7,"nodeType":"MemberExpression","endLine":836,"endColumn":23},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":881,"column":7,"nodeType":"MemberExpression","endLine":881,"endColumn":28},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":882,"column":12,"nodeType":"MemberExpression","endLine":882,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":935,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":935,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25879,25882],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25879,25882],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":938,"column":47,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":938,"endColumn":50,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25998,26001],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25998,26001],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":33,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview Advanced Security Service\r\n * @description Geli┼şmi┼ş g├╝venlik ve tehdit alg─▒lama servisi\r\n */\r\n\r\nimport React from 'react';\r\nimport { monitoring } from './monitoringService';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\n// G├╝venlik olay t├╝rleri\r\nexport type SecurityEventType =\r\n  | 'authentication_failure'\r\n  | 'authorization_violation'\r\n  | 'suspicious_activity'\r\n  | 'data_breach_attempt'\r\n  | 'malicious_request'\r\n  | 'rate_limit_exceeded'\r\n  | 'sql_injection_attempt'\r\n  | 'xss_attempt'\r\n  | 'csrf_attempt'\r\n  | 'brute_force_attack'\r\n  | 'privilege_escalation'\r\n  | 'data_exfiltration';\r\n\r\n// G├╝venlik seviyeleri\r\nexport type SecurityLevel = 'low' | 'medium' | 'high' | 'critical';\r\n\r\n// G├╝venlik olay─▒\r\n/**\r\n * SecurityEvent Interface\r\n * \r\n * @interface SecurityEvent\r\n */\r\nexport interface SecurityEvent {\r\n  id: string;\r\n  type: SecurityEventType;\r\n  level: SecurityLevel;\r\n  timestamp: Date;\r\n  source: {\r\n    ip: string;\r\n    userAgent: string;\r\n    userId?: string;\r\n    sessionId?: string;\r\n  };\r\n  details: {\r\n    description: string;\r\n    endpoint?: string;\r\n    method?: string;\r\n    payload?: any;\r\n    headers?: Record<string, string>;\r\n    userRole?: string;\r\n    attemptedAction?: string;\r\n  };\r\n  response: {\r\n    action: 'blocked' | 'allowed' | 'monitored' | 'escalated';\r\n    reason: string;\r\n    additionalMeasures?: string[];\r\n  };\r\n  metadata: {\r\n    riskScore: number; // 0-100\r\n    confidence: number; // 0-100\r\n    falsePositive: boolean;\r\n    tags: string[];\r\n  };\r\n}\r\n\r\n// G├╝venlik kural─▒\r\n/**\r\n * SecurityRule Interface\r\n * \r\n * @interface SecurityRule\r\n */\r\nexport interface SecurityRule {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  type: SecurityEventType;\r\n  conditions: {\r\n    field: string;\r\n    operator: 'equals' | 'contains' | 'regex' | 'greater_than' | 'less_than' | 'in' | 'not_in';\r\n    value: any;\r\n  }[];\r\n  actions: {\r\n    type: 'block' | 'alert' | 'log' | 'rate_limit' | 'captcha' | '2fa';\r\n    config: any;\r\n  }[];\r\n  enabled: boolean;\r\n  priority: number;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\n// G├╝venlik istatistikleri\r\n/**\r\n * SecurityStats Interface\r\n * \r\n * @interface SecurityStats\r\n */\r\nexport interface SecurityStats {\r\n  totalEvents: number;\r\n  eventsByType: Record<SecurityEventType, number>;\r\n  eventsByLevel: Record<SecurityLevel, number>;\r\n  blockedRequests: number;\r\n  allowedRequests: number;\r\n  riskScore: number;\r\n  topThreats: {\r\n    type: SecurityEventType;\r\n    count: number;\r\n    trend: 'up' | 'down' | 'stable';\r\n  }[];\r\n  topSources: {\r\n    ip: string;\r\n    count: number;\r\n    riskScore: number;\r\n  }[];\r\n}\r\n\r\nclass AdvancedSecurityService {\r\n  private readonly events: SecurityEvent[] = [];\r\n  private rules: SecurityRule[] = [];\r\n  private readonly blockedIPs = new Set<string>();\r\n  private readonly rateLimitMap = new Map<string, { count: number; resetTime: number }>();\r\n  private suspiciousPatterns: RegExp[] = [];\r\n  private isMonitoring = false;\r\n\r\n  constructor() {\r\n    this.initializeSecurityRules();\r\n    this.initializeSuspiciousPatterns();\r\n    this.startMonitoring();\r\n  }\r\n\r\n  /**\r\n   * G├╝venlik kurallar─▒n─▒ ba┼şlat\r\n   */\r\n  private initializeSecurityRules(): void {\r\n    // SQL Injection korumas─▒\r\n    this.rules.push({\r\n      id: 'sql-injection-001',\r\n      name: 'SQL Injection Korumas─▒',\r\n      description: 'SQL injection sald─▒r─▒lar─▒n─▒ tespit eder ve engeller',\r\n      type: 'sql_injection_attempt',\r\n      conditions: [\r\n        {\r\n          field: 'payload',\r\n          operator: 'regex',\r\n          value:\r\n            /(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION|SCRIPT)\\b)|(\\b(OR|AND)\\s+\\d+\\s*=\\s*\\d+)|(\\b(OR|AND)\\s+['\"]\\s*=\\s*['\"])/i,\r\n        },\r\n      ],\r\n      actions: [\r\n        { type: 'block', config: { duration: 3600000 } }, // 1 saat\r\n        { type: 'alert', config: { level: 'critical' } },\r\n        { type: 'log', config: { detailed: true } },\r\n      ],\r\n      enabled: true,\r\n      priority: 1,\r\n      createdAt: new Date(),\r\n      updatedAt: new Date(),\r\n    });\r\n\r\n    // XSS korumas─▒\r\n    this.rules.push({\r\n      id: 'xss-protection-001',\r\n      name: 'XSS Korumas─▒',\r\n      description: 'Cross-site scripting sald─▒r─▒lar─▒n─▒ tespit eder',\r\n      type: 'xss_attempt',\r\n      conditions: [\r\n        {\r\n          field: 'payload',\r\n          operator: 'regex',\r\n          value: /<script[^>]*>.*?<\\/script>|<iframe[^>]*>.*?<\\/iframe>|javascript:|on\\w+\\s*=/i,\r\n        },\r\n      ],\r\n      actions: [\r\n        { type: 'block', config: { duration: 1800000 } }, // 30 dakika\r\n        { type: 'alert', config: { level: 'high' } },\r\n      ],\r\n      enabled: true,\r\n      priority: 2,\r\n      createdAt: new Date(),\r\n      updatedAt: new Date(),\r\n    });\r\n\r\n    // Brute Force korumas─▒\r\n    this.rules.push({\r\n      id: 'brute-force-001',\r\n      name: 'Brute Force Korumas─▒',\r\n      description: 'Brute force sald─▒r─▒lar─▒n─▒ tespit eder',\r\n      type: 'brute_force_attack',\r\n      conditions: [\r\n        {\r\n          field: 'failed_attempts',\r\n          operator: 'greater_than',\r\n          value: 5,\r\n        },\r\n        {\r\n          field: 'time_window',\r\n          operator: 'less_than',\r\n          value: 300000, // 5 dakika\r\n        },\r\n      ],\r\n      actions: [\r\n        { type: 'block', config: { duration: 1800000 } }, // 30 dakika\r\n        { type: 'rate_limit', config: { requests: 1, window: 60000 } }, // 1 dakikada 1 istek\r\n        { type: 'alert', config: { level: 'high' } },\r\n      ],\r\n      enabled: true,\r\n      priority: 3,\r\n      createdAt: new Date(),\r\n      updatedAt: new Date(),\r\n    });\r\n\r\n    // Rate Limiting\r\n    this.rules.push({\r\n      id: 'rate-limit-001',\r\n      name: 'Rate Limiting',\r\n      description: 'A┼ş─▒r─▒ istek oran─▒n─▒ s─▒n─▒rlar',\r\n      type: 'rate_limit_exceeded',\r\n      conditions: [\r\n        {\r\n          field: 'request_count',\r\n          operator: 'greater_than',\r\n          value: 100,\r\n        },\r\n        {\r\n          field: 'time_window',\r\n          operator: 'less_than',\r\n          value: 60000, // 1 dakika\r\n        },\r\n      ],\r\n      actions: [\r\n        { type: 'rate_limit', config: { requests: 10, window: 60000 } },\r\n        { type: 'captcha', config: { required: true } },\r\n      ],\r\n      enabled: true,\r\n      priority: 4,\r\n      createdAt: new Date(),\r\n      updatedAt: new Date(),\r\n    });\r\n  }\r\n\r\n  /**\r\n   * ┼Ş├╝pheli desenleri ba┼şlat\r\n   */\r\n  private initializeSuspiciousPatterns(): void {\r\n    this.suspiciousPatterns = [\r\n      // SQL Injection patterns\r\n      /(\\b(SELECT|INSERT|UPDATE|DELETE|DROP|CREATE|ALTER|EXEC|UNION|SCRIPT)\\b)/i,\r\n      /(\\b(OR|AND)\\s+\\d+\\s*=\\s*\\d+)/i,\r\n      /(\\b(OR|AND)\\s+['\"]\\s*=\\s*['\"])/i,\r\n\r\n      // XSS patterns\r\n      /<script[^>]*>.*?<\\/script>/i,\r\n      /<iframe[^>]*>.*?<\\/iframe>/i,\r\n      /javascript:/i,\r\n      /on\\w+\\s*=/i,\r\n\r\n      // Path traversal\r\n      /\\.\\.\\//g,\r\n      /\\.\\.\\\\/g,\r\n\r\n      // Command injection\r\n      /[;&|`$(){}[\\]]/,\r\n\r\n      // LDAP injection\r\n      /[()=*!&|]/,\r\n\r\n      // NoSQL injection\r\n      /\\$where|\\$ne|\\$gt|\\$lt|\\$regex/i,\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * G├╝venlik izlemeyi ba┼şlat\r\n   */\r\n  private startMonitoring(): void {\r\n    if (typeof window === 'undefined') return;\r\n\r\n    // Request interceptor\r\n    this.interceptRequests();\r\n\r\n    // Error monitoring\r\n    this.monitorErrors();\r\n\r\n    // User behavior monitoring\r\n    this.monitorUserBehavior();\r\n\r\n    this.isMonitoring = true;\r\n    logger.info('[Security] Advanced security monitoring initialized');\r\n  }\r\n\r\n  /**\r\n   * HTTP isteklerini yakala\r\n   */\r\n  private interceptRequests(): void {\r\n    const originalFetch = window.fetch;\r\n    const originalXHR = XMLHttpRequest.prototype.open;\r\n\r\n    // Fetch API interceptor\r\n    window.fetch = async (input: RequestInfo | URL, init?: RequestInit) => {\r\n      const request = new Request(input, init);\r\n      const securityCheck = await this.analyzeRequest({\r\n        url: request.url,\r\n        method: request.method,\r\n        headers: Object.fromEntries(request.headers.entries()),\r\n        body: await this.getRequestBody(request),\r\n      });\r\n\r\n      if (securityCheck.blocked) {\r\n        throw new Error('Request blocked by security policy');\r\n      }\r\n\r\n      return originalFetch(input, init);\r\n    };\r\n\r\n    // XMLHttpRequest interceptor\r\n    XMLHttpRequest.prototype.open = function (method: string, url: string | URL, ...args: any[]) {\r\n      // Security check burada yap─▒labilir\r\n      originalXHR.call(this, method, url, ...args);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Hatalar─▒ izle\r\n   */\r\n  private monitorErrors(): void {\r\n    // Global error handler\r\n    window.addEventListener('error', (event) => {\r\n      this.analyzeError(event.error, {\r\n        message: event.message,\r\n        filename: event.filename,\r\n        lineno: event.lineno,\r\n        colno: event.colno,\r\n      });\r\n    });\r\n\r\n    // Unhandled promise rejection\r\n    window.addEventListener('unhandledrejection', (event) => {\r\n      this.analyzeError(event.reason, {\r\n        type: 'unhandled_promise_rejection',\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Kullan─▒c─▒ davran─▒┼ş─▒n─▒ izle\r\n   */\r\n  private monitorUserBehavior(): void {\r\n    let mouseMovements: { x: number; y: number; timestamp: number }[] = [];\r\n    let keystrokes: { key: string; timestamp: number }[] = [];\r\n\r\n    // Mouse movement tracking\r\n    document.addEventListener('mousemove', (event) => {\r\n      mouseMovements.push({\r\n        x: event.clientX,\r\n        y: event.clientY,\r\n        timestamp: Date.now(),\r\n      });\r\n\r\n      // Son 100 hareketi sakla\r\n      if (mouseMovements.length > 100) {\r\n        mouseMovements = mouseMovements.slice(-100);\r\n      }\r\n    });\r\n\r\n    // Keystroke tracking\r\n    document.addEventListener('keydown', (event) => {\r\n      keystrokes.push({\r\n        key: event.key,\r\n        timestamp: Date.now(),\r\n      });\r\n\r\n      // Son 50 tu┼ş vuru┼şunu sakla\r\n      if (keystrokes.length > 50) {\r\n        keystrokes = keystrokes.slice(-50);\r\n      }\r\n    });\r\n\r\n    // Periyodik analiz\r\n    setInterval(() => {\r\n      this.analyzeUserBehavior(mouseMovements, keystrokes);\r\n    }, 30000); // Her 30 saniyede\r\n  }\r\n\r\n  /**\r\n   * ─░stek analizi\r\n   */\r\n  private async analyzeRequest(request: {\r\n    url: string;\r\n    method: string;\r\n    headers: Record<string, string>;\r\n    body?: any;\r\n  }): Promise<{ blocked: boolean; reason?: string; riskScore: number }> {\r\n    let riskScore = 0;\r\n    let blocked = false;\r\n    let reason = '';\r\n\r\n    // URL analizi\r\n    if (this.containsSuspiciousPattern(request.url)) {\r\n      riskScore += 50;\r\n      blocked = true;\r\n      reason = 'Suspicious URL pattern detected';\r\n    }\r\n\r\n    // Method analizi\r\n    if (request.method === 'DELETE' || request.method === 'PUT') {\r\n      riskScore += 10;\r\n    }\r\n\r\n    // Header analizi\r\n    if (this.analyzeHeaders(request.headers)) {\r\n      riskScore += 30;\r\n    }\r\n\r\n    // Body analizi\r\n    if (request.body && this.containsSuspiciousPattern(JSON.stringify(request.body))) {\r\n      riskScore += 40;\r\n      blocked = true;\r\n      reason = 'Suspicious payload detected';\r\n    }\r\n\r\n    // Rate limiting kontrol├╝\r\n    const clientIP = this.getClientIP();\r\n    if (this.isRateLimited(clientIP)) {\r\n      riskScore += 60;\r\n      blocked = true;\r\n      reason = 'Rate limit exceeded';\r\n    }\r\n\r\n    // G├╝venlik kurallar─▒n─▒ kontrol et\r\n    for (const rule of this.rules) {\r\n      if (this.evaluateRule(rule, request)) {\r\n        riskScore += rule.priority * 10;\r\n        blocked = true;\r\n        reason = rule.description;\r\n        break;\r\n      }\r\n    }\r\n\r\n    // G├╝venlik olay─▒ kaydet\r\n    if (riskScore > 30) {\r\n      await this.recordSecurityEvent({\r\n        type: blocked ? 'malicious_request' : 'suspicious_activity',\r\n        level: this.getRiskLevel(riskScore),\r\n        timestamp: new Date(),\r\n        source: {\r\n          ip: clientIP,\r\n          userAgent: navigator.userAgent,\r\n          sessionId: this.getSessionId(),\r\n        },\r\n        details: {\r\n          description: reason ?? 'Suspicious request detected',\r\n          endpoint: request.url,\r\n          method: request.method,\r\n          payload: request.body,\r\n          headers: request.headers,\r\n        },\r\n        response: {\r\n          action: blocked ? 'blocked' : 'monitored',\r\n          reason: reason ?? 'Risk score threshold exceeded',\r\n        },\r\n        metadata: {\r\n          riskScore,\r\n          confidence: Math.min(riskScore, 100),\r\n          falsePositive: false,\r\n          tags: ['automated_detection'],\r\n        },\r\n      });\r\n    }\r\n\r\n    return { blocked, reason, riskScore };\r\n  }\r\n\r\n  /**\r\n   * Hata analizi\r\n   */\r\n  private analyzeError(error: any, context: any): void {\r\n    const errorMessage = error?.message ?? error?.toString() || 'Unknown error';\r\n\r\n    // G├╝venlik a├ğ─▒─ş─▒ g├Âsterebilecek hatalar\r\n    if (this.containsSuspiciousPattern(errorMessage)) {\r\n      this.recordSecurityEvent({\r\n        type: 'data_breach_attempt',\r\n        level: 'high',\r\n        timestamp: new Date(),\r\n        source: {\r\n          ip: this.getClientIP(),\r\n          userAgent: navigator.userAgent,\r\n          sessionId: this.getSessionId(),\r\n        },\r\n        details: {\r\n          description: 'Suspicious error pattern detected',\r\n          attemptedAction: 'error_exploitation',\r\n          payload: errorMessage,\r\n        },\r\n        response: {\r\n          action: 'monitored',\r\n          reason: 'Potential security vulnerability exploitation',\r\n        },\r\n        metadata: {\r\n          riskScore: 70,\r\n          confidence: 80,\r\n          falsePositive: false,\r\n          tags: ['error_analysis'],\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Kullan─▒c─▒ davran─▒┼ş analizi\r\n   */\r\n  private analyzeUserBehavior(\r\n    mouseMovements: { x: number; y: number; timestamp: number }[],\r\n    keystrokes: { key: string; timestamp: number }[],\r\n  ): void {\r\n    // Bot davran─▒┼ş─▒ tespiti\r\n    const isBotBehavior = this.detectBotBehavior(mouseMovements, keystrokes);\r\n\r\n    if (isBotBehavior) {\r\n      this.recordSecurityEvent({\r\n        type: 'suspicious_activity',\r\n        level: 'medium',\r\n        timestamp: new Date(),\r\n        source: {\r\n          ip: this.getClientIP(),\r\n          userAgent: navigator.userAgent,\r\n          sessionId: this.getSessionId(),\r\n        },\r\n        details: {\r\n          description: 'Bot-like behavior detected',\r\n          attemptedAction: 'automated_interaction',\r\n        },\r\n        response: {\r\n          action: 'monitored',\r\n          reason: 'Suspicious user behavior pattern',\r\n        },\r\n        metadata: {\r\n          riskScore: 40,\r\n          confidence: 60,\r\n          falsePositive: true, // Y├╝ksek false positive oran─▒\r\n          tags: ['behavior_analysis'],\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Bot davran─▒┼ş─▒ tespiti\r\n   */\r\n  private detectBotBehavior(\r\n    mouseMovements: { x: number; y: number; timestamp: number }[],\r\n    keystrokes: { key: string; timestamp: number }[],\r\n  ): boolean {\r\n    // ├çok d├╝zenli mouse hareketleri\r\n    if (mouseMovements.length > 10) {\r\n      const intervals = [];\r\n      for (let i = 1; i < mouseMovements.length; i++) {\r\n        intervals.push(mouseMovements[i].timestamp - mouseMovements[i - 1].timestamp);\r\n      }\r\n\r\n      const avgInterval = intervals.reduce((a, b) => a + b, 0) / intervals.length;\r\n      const variance =\r\n        intervals.reduce((sum, interval) => sum + Math.pow(interval - avgInterval, 2), 0) /\r\n        intervals.length;\r\n\r\n      // ├çok d├╝┼ş├╝k varyans = bot davran─▒┼ş─▒\r\n      if (variance < 100) return true;\r\n    }\r\n\r\n    // ├çok h─▒zl─▒ tu┼ş vuru┼şlar─▒\r\n    if (keystrokes.length > 5) {\r\n      const avgKeystrokeInterval =\r\n        (keystrokes[keystrokes.length - 1].timestamp - keystrokes[0].timestamp) / keystrokes.length;\r\n      if (avgKeystrokeInterval < 50) return true; // 50ms'den h─▒zl─▒\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * ┼Ş├╝pheli desen kontrol├╝\r\n   */\r\n  private containsSuspiciousPattern(text: string): boolean {\r\n    return this.suspiciousPatterns.some((pattern) => pattern.test(text));\r\n  }\r\n\r\n  /**\r\n   * Header analizi\r\n   */\r\n  private analyzeHeaders(headers: Record<string, string>): boolean {\r\n    // ┼Ş├╝pheli header'lar\r\n    const suspiciousHeaders = [\r\n      'x-forwarded-for',\r\n      'x-real-ip',\r\n      'x-originating-ip',\r\n      'x-remote-ip',\r\n      'x-remote-addr',\r\n    ];\r\n\r\n    return Object.keys(headers).some((header) => suspiciousHeaders.includes(header.toLowerCase()));\r\n  }\r\n\r\n  /**\r\n   * Rate limiting kontrol├╝\r\n   */\r\n  private isRateLimited(ip: string): boolean {\r\n    const now = Date.now();\r\n    const rateLimitData = this.rateLimitMap.get(ip);\r\n\r\n    if (!rateLimitData) {\r\n      this.rateLimitMap.set(ip, { count: 1, resetTime: now + 60000 });\r\n      return false;\r\n    }\r\n\r\n    if (now > rateLimitData.resetTime) {\r\n      this.rateLimitMap.set(ip, { count: 1, resetTime: now + 60000 });\r\n      return false;\r\n    }\r\n\r\n    rateLimitData.count++;\r\n    return rateLimitData.count > 100; // 100 istek/dakika limit\r\n  }\r\n\r\n  /**\r\n   * G├╝venlik kural─▒ de─şerlendirme\r\n   */\r\n  private evaluateRule(rule: SecurityRule, request: any): boolean {\r\n    if (!rule.enabled) return false;\r\n\r\n    return rule.conditions.every((condition) => {\r\n      const fieldValue = this.getFieldValue(request, condition.field);\r\n      return this.evaluateCondition(fieldValue, condition.operator, condition.value);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Alan de─şeri alma\r\n   */\r\n  private getFieldValue(obj: any, field: string): any {\r\n    const fields = field.split('.');\r\n    let value = obj;\r\n\r\n    for (const f of fields) {\r\n      value = value?.[f];\r\n    }\r\n\r\n    return value;\r\n  }\r\n\r\n  /**\r\n   * Ko┼şul de─şerlendirme\r\n   */\r\n  private evaluateCondition(value: any, operator: string, expected: any): boolean {\r\n    switch (operator) {\r\n      case 'equals':\r\n        return value === expected;\r\n      case 'contains':\r\n        return String(value).includes(String(expected));\r\n      case 'regex':\r\n        return new RegExp(expected).test(String(value));\r\n      case 'greater_than':\r\n        return Number(value) > Number(expected);\r\n      case 'less_than':\r\n        return Number(value) < Number(expected);\r\n      case 'in':\r\n        return Array.isArray(expected) && expected.includes(value);\r\n      case 'not_in':\r\n        return Array.isArray(expected) && !expected.includes(value);\r\n      default:\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * G├╝venlik olay─▒ kaydet\r\n   */\r\n  private async recordSecurityEvent(eventData: Omit<SecurityEvent, 'id'>): Promise<void> {\r\n    const event: SecurityEvent = {\r\n      id: this.generateEventId(),\r\n      ...eventData,\r\n    };\r\n\r\n    this.events.push(event);\r\n\r\n    // Monitor security event\r\n    monitoring.trackEvent('security_event', {\r\n      event_type: event.type,\r\n      severity_level: event.level,\r\n      risk_score: event.metadata.riskScore,\r\n      source_ip: event.source.ip,\r\n      timestamp: event.timestamp.toISOString(),\r\n    });\r\n\r\n    // Kritik olaylar i├ğin ek ├Ânlemler\r\n    if (event.level === 'critical') {\r\n      await this.handleCriticalEvent(event);\r\n    }\r\n\r\n    logger.info('[Security] Event recorded:', event);\r\n  }\r\n\r\n  /**\r\n   * Kritik olay i┼şleme\r\n   */\r\n  private async handleCriticalEvent(event: SecurityEvent): Promise<void> {\r\n    // IP'yi engelle\r\n    this.blockedIPs.add(event.source.ip);\r\n\r\n    // Admin'e bildirim g├Ânder\r\n    await this.sendSecurityAlert(event);\r\n\r\n    // Otomatik ├Ânlemler\r\n    if (event.type === 'brute_force_attack') {\r\n      // Kullan─▒c─▒ hesab─▒n─▒ ge├ğici olarak kilitle\r\n      await this.lockUserAccount(event.source.userId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * G├╝venlik uyar─▒s─▒ g├Ânder\r\n   */\r\n  private async sendSecurityAlert(event: SecurityEvent): Promise<void> {\r\n    // Bu k─▒s─▒m ger├ğek uygulamada e-posta, SMS, Slack vb. entegrasyonlar─▒ i├ğerebilir\r\n    logger.info('[Security] Critical security alert:', event);\r\n  }\r\n\r\n  /**\r\n   * Kullan─▒c─▒ hesab─▒n─▒ kilitle\r\n   */\r\n  private async lockUserAccount(userId?: string): Promise<void> {\r\n    if (userId) {\r\n      // Kullan─▒c─▒ hesab─▒n─▒ kilitleme i┼şlemi\r\n      logger.info('[Security] User account locked:', userId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Yard─▒mc─▒ fonksiyonlar\r\n   */\r\n  private generateEventId(): string {\r\n    return `sec_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  private getRiskLevel(riskScore: number): SecurityLevel {\r\n    if (riskScore >= 80) return 'critical';\r\n    if (riskScore >= 60) return 'high';\r\n    if (riskScore >= 40) return 'medium';\r\n    return 'low';\r\n  }\r\n\r\n\r\n  private getClientIP(): string {\r\n    // Ger├ğek uygulamada bu bilgi server-side'dan gelir\r\n    return '127.0.0.1';\r\n  }\r\n\r\n  private getSessionId(): string {\r\n    // Session ID'yi al\r\n    return sessionStorage.getItem('sessionId') || 'unknown';\r\n  }\r\n\r\n  private async getRequestBody(request: Request): Promise<any> {\r\n    try {\r\n      const clone = request.clone();\r\n      return await clone.text();\r\n    } catch {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Public API\r\n   */\r\n  public getSecurityStats(): SecurityStats {\r\n    const totalEvents = this.events.length;\r\n    const eventsByType: Record<SecurityEventType, number> = {} as any;\r\n    const eventsByLevel: Record<SecurityLevel, number> = {} as any;\r\n\r\n    // ─░statistikleri hesapla\r\n    this.events.forEach((event) => {\r\n      eventsByType[event.type] = (eventsByType[event.type] || 0) + 1;\r\n      eventsByLevel[event.level] = (eventsByLevel[event.level] || 0) + 1;\r\n    });\r\n\r\n    const blockedRequests = this.events.filter((e) => e.response.action === 'blocked').length;\r\n    const allowedRequests = this.events.filter((e) => e.response.action === 'allowed').length;\r\n\r\n    const avgRiskScore =\r\n      this.events.length > 0\r\n        ? this.events.reduce((sum, e) => sum + e.metadata.riskScore, 0) / this.events.length\r\n        : 0;\r\n\r\n    return {\r\n      totalEvents,\r\n      eventsByType,\r\n      eventsByLevel,\r\n      blockedRequests,\r\n      allowedRequests,\r\n      riskScore: Math.round(avgRiskScore),\r\n      topThreats: this.getTopThreats(),\r\n      topSources: this.getTopSources(),\r\n    };\r\n  }\r\n\r\n  private getTopThreats(): {\r\n    type: SecurityEventType;\r\n    count: number;\r\n    trend: 'up' | 'down' | 'stable';\r\n  }[] {\r\n    const threatCounts: Record<SecurityEventType, number> = {} as any;\r\n\r\n    this.events.forEach((event) => {\r\n      threatCounts[event.type] = (threatCounts[event.type] || 0) + 1;\r\n    });\r\n\r\n    return Object.entries(threatCounts)\r\n      .map(([type, count]) => ({\r\n        type: type as SecurityEventType,\r\n        count,\r\n        trend: 'stable' as const, // Basit implementasyon\r\n      }))\r\n      .sort((a, b) => b.count - a.count)\r\n      .slice(0, 5);\r\n  }\r\n\r\n  private getTopSources(): { ip: string; count: number; riskScore: number }[] {\r\n    const sourceCounts: Record<string, { count: number; totalRisk: number }> = {};\r\n\r\n    this.events.forEach((event) => {\r\n      const {ip} = event.source;\r\n      if (!sourceCounts[ip]) {\r\n        sourceCounts[ip] = { count: 0, totalRisk: 0 };\r\n      }\r\n      sourceCounts[ip].count++;\r\n      sourceCounts[ip].totalRisk += event.metadata.riskScore;\r\n    });\r\n\r\n    return Object.entries(sourceCounts)\r\n      .map(([ip, data]) => ({\r\n        ip,\r\n        count: data.count,\r\n        riskScore: Math.round(data.totalRisk / data.count),\r\n      }))\r\n      .sort((a, b) => b.count - a.count)\r\n      .slice(0, 10);\r\n  }\r\n\r\n  public getRecentEvents(limit = 50): SecurityEvent[] {\r\n    return this.events\r\n      .sort((a, b) => b.timestamp.getTime() - a.timestamp.getTime())\r\n      .slice(0, limit);\r\n  }\r\n\r\n  public isIPBlocked(ip: string): boolean {\r\n    return this.blockedIPs.has(ip);\r\n  }\r\n\r\n  public unblockIP(ip: string): void {\r\n    this.blockedIPs.delete(ip);\r\n  }\r\n\r\n  public getBlockedIPs(): string[] {\r\n    return Array.from(this.blockedIPs);\r\n  }\r\n\r\n  public addSecurityRule(rule: Omit<SecurityRule, 'id' | 'createdAt' | 'updatedAt'>): void {\r\n    const newRule: SecurityRule = {\r\n      ...rule,\r\n      id: `rule_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`,\r\n      createdAt: new Date(),\r\n      updatedAt: new Date(),\r\n    };\r\n\r\n    this.rules.push(newRule);\r\n  }\r\n\r\n  public updateSecurityRule(ruleId: string, updates: Partial<SecurityRule>): void {\r\n    const ruleIndex = this.rules.findIndex((r) => r.id === ruleId);\r\n    if (ruleIndex !== -1) {\r\n      this.rules[ruleIndex] = {\r\n        ...this.rules[ruleIndex],\r\n        ...updates,\r\n        updatedAt: new Date(),\r\n      };\r\n    }\r\n  }\r\n\r\n  public deleteSecurityRule(ruleId: string): void {\r\n    this.rules = this.rules.filter((r) => r.id !== ruleId);\r\n  }\r\n\r\n  public getSecurityRules(): SecurityRule[] {\r\n    return [...this.rules];\r\n  }\r\n\r\n  public stopMonitoring(): void {\r\n    this.isMonitoring = false;\r\n    logger.info('[Security] Security monitoring stopped');\r\n  }\r\n\r\n  public isMonitoringActive(): boolean {\r\n    return this.isMonitoring;\r\n  }\r\n}\r\n\r\n// Singleton instance\r\nexport const advancedSecurityService = new AdvancedSecurityService();\r\n\r\n// React hook for security monitoring\r\nexport const useSecurityMonitoring = () => {\r\n  const [stats, setStats] = React.useState(advancedSecurityService.getSecurityStats());\r\n  const [recentEvents, setRecentEvents] = React.useState(advancedSecurityService.getRecentEvents());\r\n\r\n  React.useEffect(() => {\r\n    const interval = setInterval(() => {\r\n      setStats(advancedSecurityService.getSecurityStats());\r\n      setRecentEvents(advancedSecurityService.getRecentEvents());\r\n    }, 10000); // Her 10 saniyede g├╝ncelle\r\n\r\n    return () => {\r\n      clearInterval(interval);\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    stats,\r\n    recentEvents,\r\n    isIPBlocked: (ip: string) => advancedSecurityService.isIPBlocked(ip),\r\n    unblockIP: (ip: string) => {\r\n      advancedSecurityService.unblockIP(ip);\r\n    },\r\n    getBlockedIPs: () => advancedSecurityService.getBlockedIPs(),\r\n    getSecurityRules: () => advancedSecurityService.getSecurityRules(),\r\n    addSecurityRule: (rule: any) => {\r\n      advancedSecurityService.addSecurityRule(rule);\r\n    },\r\n    updateSecurityRule: (id: string, updates: any) => {\r\n      advancedSecurityService.updateSecurityRule(id, updates);\r\n    },\r\n    deleteSecurityRule: (id: string) => {\r\n      advancedSecurityService.deleteSecurityRule(id);\r\n    },\r\n  };\r\n};\r\n\r\nexport default advancedSecurityService;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\aidRequestsService.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":124,"column":15,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":124,"endColumn":19},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":401,"column":22,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":401,"endColumn":26},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":423,"column":22,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":423,"endColumn":26},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":445,"column":22,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":445,"endColumn":26}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview aidRequestsService Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { supabase, TABLES } from '../lib/supabase';\r\nimport { logger } from '../lib/logging/logger';\r\nimport type {\r\n  AidRequest,\r\n  AidRequestInsert,\r\n  AidRequestUpdate,\r\n  PaginatedResponse,\r\n  ApiResponse,\r\n} from '../types/database';\r\n\r\n/**\r\n * AidRequestFilters Interface\r\n * \r\n * @interface AidRequestFilters\r\n */\r\nexport interface AidRequestFilters {\r\n  status?: string;\r\n  aidType?: string;\r\n  urgency?: string;\r\n  assignedTo?: string;\r\n  searchTerm?: string;\r\n  dateFrom?: string;\r\n  dateTo?: string;\r\n  minAmount?: number;\r\n  maxAmount?: number;\r\n}\r\n\r\n/**\r\n * AidRequestStats Interface\r\n * \r\n * @interface AidRequestStats\r\n */\r\nexport interface AidRequestStats {\r\n  total: number;\r\n  pending: number;\r\n  underReview: number;\r\n  approved: number;\r\n  rejected: number;\r\n  completed: number;\r\n  totalRequestedAmount: number;\r\n  totalApprovedAmount: number;\r\n  byAidType: Record<string, number>;\r\n  byUrgency: Record<string, number>;\r\n  avgProcessingDays?: number;\r\n}\r\n\r\nclass AidRequestsService {\r\n  // Get all aid requests with pagination and filters\r\n  async getAidRequests(\r\n    page = 1,\r\n    pageSize = 10,\r\n    filters: AidRequestFilters = {},\r\n  ): Promise<PaginatedResponse<AidRequest>> {\r\n    try {\r\n      let query = supabase\r\n        .from(TABLES.AID_REQUESTS)\r\n        .select('*', { count: 'exact' })\r\n        .order('created_at', { ascending: false });\r\n\r\n      // Apply filters\r\n      if (filters.status) {\r\n        query = query.eq('status', filters.status);\r\n      }\r\n\r\n      if (filters.aidType) {\r\n        query = query.eq('aid_type', filters.aidType);\r\n      }\r\n\r\n      if (filters.urgency) {\r\n        query = query.eq('urgency', filters.urgency);\r\n      }\r\n\r\n      if (filters.assignedTo) {\r\n        query = query.eq('assigned_to', filters.assignedTo);\r\n      }\r\n\r\n      if (filters.searchTerm) {\r\n        query = query.or(`\r\n          applicant_name.ilike.%${filters.searchTerm}%,\r\n          applicant_email.ilike.%${filters.searchTerm}%,\r\n          applicant_phone.ilike.%${filters.searchTerm}%,\r\n          description.ilike.%${filters.searchTerm}%\r\n        `);\r\n      }\r\n\r\n      if (filters.dateFrom) {\r\n        query = query.gte('created_at', filters.dateFrom);\r\n      }\r\n\r\n      if (filters.dateTo) {\r\n        query = query.lte('created_at', filters.dateTo);\r\n      }\r\n\r\n      if (filters.minAmount) {\r\n        query = query.gte('requested_amount', filters.minAmount);\r\n      }\r\n\r\n      if (filters.maxAmount) {\r\n        query = query.lte('requested_amount', filters.maxAmount);\r\n      }\r\n\r\n      // Apply pagination\r\n      const from = (page - 1) * pageSize;\r\n      const to = from + pageSize - 1;\r\n      query = query.range(from, to);\r\n\r\n      const { data, error, count } = await query;\r\n\r\n      if (error) {\r\n        logger.error('Error fetching aid requests:', error);\r\n        throw new Error(`Aid requests fetch failed: ${error.message}`);\r\n      }\r\n\r\n      const totalPages = Math.ceil((count ?? 0) / pageSize);\r\n\r\n      return {\r\n        data: data || [],\r\n        count: count ?? 0,\r\n        page,\r\n        pageSize,\r\n        totalPages,\r\n        hasNextPage: page < totalPages,\r\n        hasPreviousPage: page > 1,\r\n      };\r\n    } catch (error) {\r\n      logger.error('AidRequestsService.getAidRequests error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // Get single aid request by ID\r\n  async getAidRequest(id: string): Promise<ApiResponse<AidRequest>> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from(TABLES.AID_REQUESTS)\r\n        .select('*')\r\n        .eq('id', id)\r\n        .single();\r\n\r\n      if (error) {\r\n        logger.error('Error fetching aid request:', error);\r\n        return { data: null, error: error.message };\r\n      }\r\n\r\n      return { data, error: null };\r\n    } catch (error) {\r\n      logger.error('AidRequestsService.getAidRequest error:', error);\r\n      return { data: null, error: 'Aid request fetch failed' };\r\n    }\r\n  }\r\n\r\n  // Create new aid request\r\n  async createAidRequest(aidRequest: AidRequestInsert): Promise<ApiResponse<AidRequest>> {\r\n    try {\r\n      const now = new Date().toISOString();\r\n      const { data, error } = await supabase\r\n        .from(TABLES.AID_REQUESTS)\r\n        .insert({\r\n          ...aidRequest,\r\n          created_at: now,\r\n          updated_at: now,\r\n          status: aidRequest.status ?? 'pending',\r\n          urgency: aidRequest.urgency ?? 'medium',\r\n          currency: aidRequest.currency ?? 'TRY',\r\n          follow_up_required: aidRequest.follow_up_required ?? false,\r\n        })\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        logger.error('Error creating aid request:', error);\r\n        return { data: null, error: `Yard─▒m talebi olu┼şturulamad─▒: ${error.message}` };\r\n      }\r\n\r\n      return { data, error: null };\r\n    } catch (error) {\r\n      logger.error('AidRequestsService.createAidRequest error:', error);\r\n      return { data: null, error: 'Aid request creation failed' };\r\n    }\r\n  }\r\n\r\n  // Update aid request\r\n  async updateAidRequest(id: string, updates: AidRequestUpdate): Promise<ApiResponse<AidRequest>> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from(TABLES.AID_REQUESTS)\r\n        .update({\r\n          ...updates,\r\n          updated_at: new Date().toISOString(),\r\n        })\r\n        .eq('id', id)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        logger.error('Error updating aid request:', error);\r\n        return { data: null, error: `G├╝ncelleme ba┼şar─▒s─▒z: ${error.message}` };\r\n      }\r\n\r\n      return { data, error: null };\r\n    } catch (error) {\r\n      logger.error('AidRequestsService.updateAidRequest error:', error);\r\n      return { data: null, error: 'Aid request update failed' };\r\n    }\r\n  }\r\n\r\n  // Assign aid request to user\r\n  async assignAidRequest(\r\n    id: string,\r\n    assignedTo: string,\r\n    assignedBy: string,\r\n  ): Promise<ApiResponse<AidRequest>> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from(TABLES.AID_REQUESTS)\r\n        .update({\r\n          assigned_to: assignedTo,\r\n          status: 'under_review',\r\n          updated_by: assignedBy,\r\n          updated_at: new Date().toISOString(),\r\n        })\r\n        .eq('id', id)\r\n        .is('deleted_at', null)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        logger.error('Error assigning aid request:', error);\r\n        return { data: null, error: `Atama ba┼şar─▒s─▒z: ${error.message}` };\r\n      }\r\n\r\n      return { data, error: null };\r\n    } catch (error) {\r\n      logger.error('AidRequestsService.assignAidRequest error:', error);\r\n      return { data: null, error: 'Aid request assignment failed' };\r\n    }\r\n  }\r\n\r\n  // Approve aid request\r\n  async approveAidRequest(\r\n    id: string,\r\n    approvedAmount: number,\r\n    approvedBy: string,\r\n    disbursementMethod?: string,\r\n  ): Promise<ApiResponse<AidRequest>> {\r\n    try {\r\n      const now = new Date().toISOString();\r\n      const { data, error } = await supabase\r\n        .from(TABLES.AID_REQUESTS)\r\n        .update({\r\n          status: 'approved',\r\n          approved_amount: approvedAmount,\r\n          approved_by: approvedBy,\r\n          approval_date: now.split('T')[0],\r\n          disbursement_method: disbursementMethod,\r\n          updated_by: approvedBy,\r\n          updated_at: now,\r\n        })\r\n        .eq('id', id)\r\n        .is('deleted_at', null)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        logger.error('Error approving aid request:', error);\r\n        return { data: null, error: `Onaylama ba┼şar─▒s─▒z: ${error.message}` };\r\n      }\r\n\r\n      return { data, error: null };\r\n    } catch (error) {\r\n      logger.error('AidRequestsService.approveAidRequest error:', error);\r\n      return { data: null, error: 'Aid request approval failed' };\r\n    }\r\n  }\r\n\r\n  // Reject aid request\r\n  async rejectAidRequest(\r\n    id: string,\r\n    rejectedBy: string,\r\n    reason?: string,\r\n  ): Promise<ApiResponse<AidRequest>> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from(TABLES.AID_REQUESTS)\r\n        .update({\r\n          status: 'rejected',\r\n          internal_notes: reason,\r\n          updated_by: rejectedBy,\r\n          updated_at: new Date().toISOString(),\r\n        })\r\n        .eq('id', id)\r\n        .is('deleted_at', null)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        logger.error('Error rejecting aid request:', error);\r\n        return { data: null, error: `Reddetme ba┼şar─▒s─▒z: ${error.message}` };\r\n      }\r\n\r\n      return { data, error: null };\r\n    } catch (error) {\r\n      logger.error('AidRequestsService.rejectAidRequest error:', error);\r\n      return { data: null, error: 'Aid request rejection failed' };\r\n    }\r\n  }\r\n\r\n  // Complete aid request (disbursement done)\r\n  async completeAidRequest(id: string, completedBy: string): Promise<ApiResponse<AidRequest>> {\r\n    try {\r\n      const now = new Date().toISOString();\r\n      const { data, error } = await supabase\r\n        .from(TABLES.AID_REQUESTS)\r\n        .update({\r\n          status: 'completed',\r\n          disbursement_date: now.split('T')[0],\r\n          updated_by: completedBy,\r\n          updated_at: now,\r\n        })\r\n        .eq('id', id)\r\n        .is('deleted_at', null)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        logger.error('Error completing aid request:', error);\r\n        return { data: null, error: `Tamamlama ba┼şar─▒s─▒z: ${error.message}` };\r\n      }\r\n\r\n      return { data, error: null };\r\n    } catch (error) {\r\n      logger.error('AidRequestsService.completeAidRequest error:', error);\r\n      return { data: null, error: 'Aid request completion failed' };\r\n    }\r\n  }\r\n\r\n  // Get aid request statistics - safe count-only approach\r\n  async getAidRequestStats(): Promise<ApiResponse<AidRequestStats>> {\r\n    try {\r\n      // Just get count to avoid column errors\r\n      const { count, error } = await supabase\r\n        .from(TABLES.AID_REQUESTS)\r\n        .select('*', { count: 'exact', head: true });\r\n\r\n      if (error) {\r\n        logger.error('Error fetching aid request stats:', error);\r\n        return { data: null, error: error.message };\r\n      }\r\n\r\n      const total = count ?? 0;\r\n      const stats: AidRequestStats = {\r\n        total,\r\n        pending: Math.round(total * 0.4), // Estimate 40% pending\r\n        underReview: Math.round(total * 0.3), // Estimate 30% under review\r\n        approved: Math.round(total * 0.2), // Estimate 20% approved\r\n        rejected: Math.round(total * 0.05), // Estimate 5% rejected\r\n        completed: Math.round(total * 0.05), // Estimate 5% completed\r\n        totalRequestedAmount: 0, // Will be populated when columns exist\r\n        totalApprovedAmount: 0, // Will be populated when columns exist\r\n        byAidType: {},\r\n        byUrgency: {},\r\n      };\r\n\r\n      return { data: stats, error: null };\r\n    } catch (error) {\r\n      logger.error('AidRequestsService.getAidRequestStats error:', error);\r\n      return { data: null, error: 'Stats fetch failed' };\r\n    }\r\n  }\r\n\r\n  // Search aid requests\r\n  async searchAidRequests(searchTerm: string, limit = 10): Promise<ApiResponse<AidRequest[]>> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from(TABLES.AID_REQUESTS)\r\n        .select('*')\r\n        .or(\r\n          `\r\n          applicant_name.ilike.%${searchTerm}%,\r\n          applicant_email.ilike.%${searchTerm}%,\r\n          applicant_phone.ilike.%${searchTerm}%,\r\n          description.ilike.%${searchTerm}%\r\n        `,\r\n        )\r\n        .is('deleted_at', null)\r\n        .order('created_at', { ascending: false })\r\n        .limit(limit);\r\n\r\n      if (error) {\r\n        logger.error('Error searching aid requests:', error);\r\n        return { data: null, error: error.message };\r\n      }\r\n\r\n      return { data: data || [], error: null };\r\n    } catch (error) {\r\n      logger.error('AidRequestsService.searchAidRequests error:', error);\r\n      return { data: null, error: 'Search failed' };\r\n    }\r\n  }\r\n\r\n  // Get aid requests assigned to user\r\n  async getMyAidRequests(userId: string): Promise<ApiResponse<AidRequest[]>> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from(TABLES.AID_REQUESTS)\r\n        .select('*')\r\n        .eq('assigned_to', userId)\r\n        .is('deleted_at', null)\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) {\r\n        logger.error('Error fetching user aid requests:', error);\r\n        return { data: null, error: error.message };\r\n      }\r\n\r\n      return { data: data || [], error: null };\r\n    } catch (error) {\r\n      logger.error('AidRequestsService.getMyAidRequests error:', error);\r\n      return { data: null, error: 'My aid requests fetch failed' };\r\n    }\r\n  }\r\n\r\n  // Get recent aid requests\r\n  async getRecentAidRequests(limit = 5): Promise<ApiResponse<AidRequest[]>> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from(TABLES.AID_REQUESTS)\r\n        .select('*')\r\n        .is('deleted_at', null)\r\n        .order('created_at', { ascending: false })\r\n        .limit(limit);\r\n\r\n      if (error) {\r\n        logger.error('Error fetching recent aid requests:', error);\r\n        return { data: null, error: error.message };\r\n      }\r\n\r\n      return { data: data || [], error: null };\r\n    } catch (error) {\r\n      logger.error('AidRequestsService.getRecentAidRequests error:', error);\r\n      return { data: null, error: 'Recent aid requests fetch failed' };\r\n    }\r\n  }\r\n\r\n  // Soft delete aid request\r\n  async deleteAidRequest(id: string, deletedBy: string): Promise<ApiResponse<boolean>> {\r\n    try {\r\n      const { error } = await supabase\r\n        .from(TABLES.AID_REQUESTS)\r\n        .update({\r\n          deleted_at: new Date().toISOString(),\r\n          updated_by: deletedBy,\r\n        })\r\n        .eq('id', id);\r\n\r\n      if (error) {\r\n        logger.error('Error deleting aid request:', error);\r\n        return { data: null, error: `Silme i┼şlemi ba┼şar─▒s─▒z: ${error.message}` };\r\n      }\r\n\r\n      return { data: true, error: null };\r\n    } catch (error) {\r\n      logger.error('AidRequestsService.deleteAidRequest error:', error);\r\n      return { data: null, error: 'Aid request deletion failed' };\r\n    }\r\n  }\r\n\r\n  // Bulk operations\r\n  async bulkUpdateStatus(\r\n    requestIds: string[],\r\n    status: string,\r\n    updatedBy: string,\r\n  ): Promise<ApiResponse<boolean>> {\r\n    try {\r\n      const { error } = await supabase\r\n        .from(TABLES.AID_REQUESTS)\r\n        .update({\r\n          status,\r\n          updated_by: updatedBy,\r\n          updated_at: new Date().toISOString(),\r\n        })\r\n        .in('id', requestIds)\r\n        .is('deleted_at', null);\r\n\r\n      if (error) {\r\n        logger.error('Error bulk updating aid request status:', error);\r\n        return { data: null, error: `Toplu g├╝ncelleme ba┼şar─▒s─▒z: ${error.message}` };\r\n      }\r\n\r\n      return { data: true, error: null };\r\n    } catch (error) {\r\n      logger.error('AidRequestsService.bulkUpdateStatus error:', error);\r\n      return { data: null, error: 'Bulk update failed' };\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const aidRequestsService = new AidRequestsService();\r\nexport default aidRequestsService;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\backgroundSyncService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":23,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":23,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[456,459],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[456,459],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":11,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":14,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2403,2406],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2403,2406],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":212,"column":9,"nodeType":"UnaryExpression","messageId":"constantShortCircuit","endLine":212,"endColumn":23},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":212,"column":9,"nodeType":"UnaryExpression","messageId":"neverNullish","endLine":212,"endColumn":23},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":295,"column":7,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":295,"endColumn":32,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[7373,7374],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":333,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":333,"endColumn":21},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":333,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":333,"endColumn":21}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview backgroundSyncService Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { logger } from '../lib/logging/logger';\r\n/**\r\n * Background Sync Service\r\n * Handles offline data synchronization for PWA\r\n */\r\n\r\n/**\r\n * SyncTask Interface\r\n * \r\n * @interface SyncTask\r\n */\r\nexport interface SyncTask {\r\n  id: string;\r\n  type: 'CREATE' | 'UPDATE' | 'DELETE';\r\n  entity: string;\r\n  data: any;\r\n  timestamp: number;\r\n  retryCount: number;\r\n  maxRetries: number;\r\n  status: 'pending' | 'syncing' | 'completed' | 'failed';\r\n}\r\n\r\n/**\r\n * SyncOptions Interface\r\n * \r\n * @interface SyncOptions\r\n */\r\nexport interface SyncOptions {\r\n  maxRetries?: number;\r\n  retryDelay?: number;\r\n  batchSize?: number;\r\n  priority?: 'low' | 'normal' | 'high';\r\n}\r\n\r\n/**\r\n * SyncResult Interface\r\n * \r\n * @interface SyncResult\r\n */\r\nexport interface SyncResult {\r\n  success: boolean;\r\n  syncedTasks: SyncTask[];\r\n  failedTasks: SyncTask[];\r\n  errors: string[];\r\n}\r\n\r\nclass BackgroundSyncService {\r\n  private syncTasks = new Map<string, SyncTask>();\r\n  private isOnline: boolean = navigator.onLine;\r\n  private syncInProgress = false;\r\n  private registration: ServiceWorkerRegistration | null = null;\r\n\r\n  constructor() {\r\n    this.initialize();\r\n  }\r\n\r\n  /**\r\n   * Initialize background sync service\r\n   */\r\n  private async initialize(): Promise<void> {\r\n    try {\r\n      // Load existing sync tasks from localStorage\r\n      this.loadSyncTasks();\r\n\r\n      // Listen for online/offline events\r\n      window.addEventListener('online', this.handleOnline.bind(this));\r\n      window.addEventListener('offline', this.handleOffline.bind(this));\r\n\r\n      // Get service worker registration for background sync\r\n      if ('serviceWorker' in navigator && 'sync' in window.ServiceWorkerRegistration.prototype) {\r\n        this.registration = await navigator.serviceWorker.ready;\r\n        logger.info('Background sync service initialized');\r\n      } else {\r\n        logger.warn('Background sync not supported');\r\n      }\r\n\r\n      // Initial sync if online\r\n      if (this.isOnline) {\r\n        await this.syncPendingTasks();\r\n      }\r\n    } catch (error) {\r\n      logger.error('Failed to initialize background sync service:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Add task to sync queue\r\n   */\r\n  async addSyncTask(\r\n    entity: string,\r\n    type: SyncTask['type'],\r\n    data: any,\r\n    options: SyncOptions = {},\r\n  ): Promise<string> {\r\n    const taskId = `${entity}_${type}_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n    const task: SyncTask = {\r\n      id: taskId,\r\n      type,\r\n      entity,\r\n      data,\r\n      timestamp: Date.now(),\r\n      retryCount: 0,\r\n      maxRetries: options.maxRetries ?? 3,\r\n      status: 'pending',\r\n    };\r\n\r\n    this.syncTasks.set(taskId, task);\r\n    this.saveSyncTasks();\r\n\r\n    logger.info(`Sync task added: ${taskId}`, task);\r\n\r\n    // Try immediate sync if online\r\n    if (this.isOnline && !this.syncInProgress) {\r\n      await this.syncPendingTasks();\r\n    } else if (this.registration) {\r\n      // Register background sync\r\n      try {\r\n        await this.registration.sync.register('background-sync');\r\n      } catch (error) {\r\n        logger.error('Failed to register background sync:', error);\r\n      }\r\n    }\r\n\r\n    return taskId;\r\n  }\r\n\r\n  /**\r\n   * Remove sync task\r\n   */\r\n  removeSyncTask(taskId: string): boolean {\r\n    const removed = this.syncTasks.delete(taskId);\r\n    if (removed) {\r\n      this.saveSyncTasks();\r\n    }\r\n    return removed;\r\n  }\r\n\r\n  /**\r\n   * Get all sync tasks\r\n   */\r\n  getSyncTasks(): SyncTask[] {\r\n    return Array.from(this.syncTasks.values());\r\n  }\r\n\r\n  /**\r\n   * Get pending sync tasks\r\n   */\r\n  getPendingSyncTasks(): SyncTask[] {\r\n    return this.getSyncTasks().filter((task) => task.status === 'pending');\r\n  }\r\n\r\n  /**\r\n   * Get failed sync tasks\r\n   */\r\n  getFailedSyncTasks(): SyncTask[] {\r\n    return this.getSyncTasks().filter((task) => task.status === 'failed');\r\n  }\r\n\r\n  /**\r\n   * Retry failed tasks\r\n   */\r\n  async retryFailedTasks(): Promise<SyncResult> {\r\n    const failedTasks = this.getFailedSyncTasks();\r\n\r\n    // Reset failed tasks to pending\r\n    failedTasks.forEach((task) => {\r\n      task.status = 'pending';\r\n      task.retryCount = 0;\r\n    });\r\n\r\n    this.saveSyncTasks();\r\n\r\n    return await this.syncPendingTasks();\r\n  }\r\n\r\n  /**\r\n   * Clear all sync tasks\r\n   */\r\n  clearAllTasks(): void {\r\n    this.syncTasks.clear();\r\n    this.saveSyncTasks();\r\n  }\r\n\r\n  /**\r\n   * Clear completed tasks\r\n   */\r\n  clearCompletedTasks(): void {\r\n    const pendingTasks = new Map();\r\n\r\n    this.syncTasks.forEach((task, id) => {\r\n      if (task.status !== 'completed') {\r\n        pendingTasks.set(id, task);\r\n      }\r\n    });\r\n\r\n    this.syncTasks = pendingTasks;\r\n    this.saveSyncTasks();\r\n  }\r\n\r\n  /**\r\n   * Sync pending tasks\r\n   */\r\n  async syncPendingTasks(): Promise<SyncResult> {\r\n    if (!this.isOnline ?? this.syncInProgress) {\r\n      return {\r\n        success: false,\r\n        syncedTasks: [],\r\n        failedTasks: [],\r\n        errors: ['Sync already in progress or offline'],\r\n      };\r\n    }\r\n\r\n    this.syncInProgress = true;\r\n    const syncedTasks: SyncTask[] = [];\r\n    const failedTasks: SyncTask[] = [];\r\n    const errors: string[] = [];\r\n\r\n    try {\r\n      const pendingTasks = this.getPendingSyncTasks();\r\n      logger.info(`Starting sync of ${pendingTasks.length} tasks`);\r\n\r\n      // Group tasks by entity for batch processing\r\n      const tasksByEntity = this.groupTasksByEntity(pendingTasks);\r\n\r\n      for (const [entity, tasks] of tasksByEntity) {\r\n        try {\r\n          const result = await this.syncEntityTasks(entity, tasks);\r\n          syncedTasks.push(...result.synced);\r\n          failedTasks.push(...result.failed);\r\n          errors.push(...result.errors);\r\n        } catch (error) {\r\n          const errorMessage = `Failed to sync ${entity}: ${error instanceof Error ? error.message : 'Unknown error'}`;\r\n          errors.push(errorMessage);\r\n          logger.error(errorMessage);\r\n\r\n          // Mark all tasks as failed\r\n          tasks.forEach((task) => {\r\n            task.status = 'failed';\r\n            task.retryCount++;\r\n            failedTasks.push(task);\r\n          });\r\n        }\r\n      }\r\n\r\n      // Clean up completed tasks\r\n      syncedTasks.forEach((task) => {\r\n        this.syncTasks.delete(task.id);\r\n      });\r\n\r\n      this.saveSyncTasks();\r\n\r\n      const result: SyncResult = {\r\n        success: errors.length === 0,\r\n        syncedTasks,\r\n        failedTasks,\r\n        errors,\r\n      };\r\n\r\n      logger.info('Sync completed:', result);\r\n      return result;\r\n    } catch (error) {\r\n      const errorMessage = `Sync process failed: ${error instanceof Error ? error.message : 'Unknown error'}`;\r\n      errors.push(errorMessage);\r\n      logger.error(errorMessage);\r\n\r\n      return {\r\n        success: false,\r\n        syncedTasks,\r\n        failedTasks,\r\n        errors,\r\n      };\r\n    } finally {\r\n      this.syncInProgress = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Group tasks by entity for batch processing\r\n   */\r\n  private groupTasksByEntity(tasks: SyncTask[]): Map<string, SyncTask[]> {\r\n    const grouped = new Map<string, SyncTask[]>();\r\n\r\n    tasks.forEach((task) => {\r\n      if (!grouped.has(task.entity)) {\r\n        grouped.set(task.entity, []);\r\n      }\r\n      grouped.get(task.entity)!.push(task);\r\n    });\r\n\r\n    return grouped;\r\n  }\r\n\r\n  /**\r\n   * Sync tasks for a specific entity\r\n   */\r\n  private async syncEntityTasks(\r\n    entity: string,\r\n    tasks: SyncTask[],\r\n  ): Promise<{\r\n    synced: SyncTask[];\r\n    failed: SyncTask[];\r\n    errors: string[];\r\n  }> {\r\n    const synced: SyncTask[] = [];\r\n    const failed: SyncTask[] = [];\r\n    const errors: string[] = [];\r\n\r\n    // Sort tasks by timestamp to maintain order\r\n    tasks.sort((a, b) => a.timestamp - b.timestamp);\r\n\r\n    for (const task of tasks) {\r\n      try {\r\n        task.status = 'syncing';\r\n\r\n        // Simulate API call based on entity and type\r\n        const success = await this.performSyncOperation(task);\r\n\r\n        if (success) {\r\n          task.status = 'completed';\r\n          synced.push(task);\r\n          logger.info(`Task synced successfully: ${task.id}`);\r\n        } else {\r\n          throw new Error('Sync operation returned false');\r\n        }\r\n      } catch (error) {\r\n        task.retryCount++;\r\n\r\n        if (task.retryCount >= task.maxRetries) {\r\n          task.status = 'failed';\r\n          failed.push(task);\r\n          const errorMessage = `Task failed after ${task.maxRetries} retries: ${task.id}`;\r\n          errors.push(errorMessage);\r\n          logger.error(errorMessage);\r\n        } else {\r\n          task.status = 'pending';\r\n          const errorMessage = `Task retry ${task.retryCount}/${task.maxRetries}: ${task.id}`;\r\n          errors.push(errorMessage);\r\n          logger.warn(errorMessage);\r\n        }\r\n      }\r\n    }\r\n\r\n    return { synced, failed, errors };\r\n  }\r\n\r\n  /**\r\n   * Perform actual sync operation (mock implementation)\r\n   */\r\n  private async performSyncOperation(task: SyncTask): Promise<boolean> {\r\n    // Simulate network delay\r\n    await new Promise((resolve) => setTimeout(resolve, 100 + Math.random() * 500));\r\n\r\n    // Mock API calls based on entity\r\n    switch (task.entity) {\r\n      case 'beneficiaries':\r\n        return this.syncBeneficiary(task);\r\n      case 'donations':\r\n        return this.syncDonation(task);\r\n      case 'members':\r\n        return this.syncMember(task);\r\n      case 'activities':\r\n        return this.syncActivity(task);\r\n      default:\r\n        logger.warn(`Unknown entity type for sync: ${task.entity}`);\r\n        return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sync beneficiary data (mock implementation)\r\n   */\r\n  private async syncBeneficiary(task: SyncTask): Promise<boolean> {\r\n    logger.info(`Syncing beneficiary ${task.type}:`, task.data);\r\n\r\n    // Mock success/failure (90% success rate)\r\n    return Math.random() > 0.1;\r\n  }\r\n\r\n  /**\r\n   * Sync donation data (mock implementation)\r\n   */\r\n  private async syncDonation(task: SyncTask): Promise<boolean> {\r\n    logger.info(`Syncing donation ${task.type}:`, task.data);\r\n\r\n    // Mock success/failure (95% success rate)\r\n    return Math.random() > 0.05;\r\n  }\r\n\r\n  /**\r\n   * Sync member data (mock implementation)\r\n   */\r\n  private async syncMember(task: SyncTask): Promise<boolean> {\r\n    logger.info(`Syncing member ${task.type}:`, task.data);\r\n\r\n    // Mock success/failure (85% success rate)\r\n    return Math.random() > 0.15;\r\n  }\r\n\r\n  /**\r\n   * Sync activity data (mock implementation)\r\n   */\r\n  private async syncActivity(task: SyncTask): Promise<boolean> {\r\n    logger.info(`Syncing activity ${task.type}:`, task.data);\r\n\r\n    // Mock success/failure (98% success rate)\r\n    return Math.random() > 0.02;\r\n  }\r\n\r\n  /**\r\n   * Handle online event\r\n   */\r\n  private async handleOnline(): Promise<void> {\r\n    logger.info('Device came online - starting sync');\r\n    this.isOnline = true;\r\n\r\n    // Start syncing pending tasks\r\n    await this.syncPendingTasks();\r\n  }\r\n\r\n  /**\r\n   * Handle offline event\r\n   */\r\n  private handleOffline(): void {\r\n    logger.info('Device went offline');\r\n    this.isOnline = false;\r\n  }\r\n\r\n  /**\r\n   * Save sync tasks to localStorage\r\n   */\r\n  private saveSyncTasks(): void {\r\n    try {\r\n      const tasks = Array.from(this.syncTasks.values());\r\n      localStorage.setItem('backgroundSyncTasks', JSON.stringify(tasks));\r\n    } catch (error) {\r\n      logger.error('Failed to save sync tasks:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Load sync tasks from localStorage\r\n   */\r\n  private loadSyncTasks(): void {\r\n    try {\r\n      const stored = localStorage.getItem('backgroundSyncTasks');\r\n      if (stored) {\r\n        const tasks: SyncTask[] = JSON.parse(stored);\r\n        this.syncTasks.clear();\r\n\r\n        tasks.forEach((task) => {\r\n          // Reset syncing tasks to pending on app restart\r\n          if (task.status === 'syncing') {\r\n            task.status = 'pending';\r\n          }\r\n          this.syncTasks.set(task.id, task);\r\n        });\r\n\r\n        logger.info(`Loaded ${tasks.length} sync tasks from storage`);\r\n      }\r\n    } catch (error) {\r\n      logger.error('Failed to load sync tasks:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get sync statistics\r\n   */\r\n  getSyncStats(): {\r\n    total: number;\r\n    pending: number;\r\n    completed: number;\r\n    failed: number;\r\n    syncing: number;\r\n  } {\r\n    const tasks = this.getSyncTasks();\r\n\r\n    return {\r\n      total: tasks.length,\r\n      pending: tasks.filter((t) => t.status === 'pending').length,\r\n      completed: tasks.filter((t) => t.status === 'completed').length,\r\n      failed: tasks.filter((t) => t.status === 'failed').length,\r\n      syncing: tasks.filter((t) => t.status === 'syncing').length,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Check if sync is available\r\n   */\r\n  isSyncAvailable(): boolean {\r\n    return 'serviceWorker' in navigator && 'sync' in window.ServiceWorkerRegistration.prototype;\r\n  }\r\n\r\n  /**\r\n   * Check if device is online\r\n   */\r\n  isDeviceOnline(): boolean {\r\n    return this.isOnline;\r\n  }\r\n\r\n  /**\r\n   * Check if sync is in progress\r\n   */\r\n  isSyncInProgress(): boolean {\r\n    return this.syncInProgress;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const backgroundSyncService = new BackgroundSyncService();\r\nexport default backgroundSyncService;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\baseService.ts","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'./config' import is duplicated.","line":9,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":9,"endColumn":43},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":113,"column":23,"nodeType":"MemberExpression","endLine":113,"endColumn":34},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":129,"column":21,"nodeType":"MemberExpression","endLine":129,"endColumn":32},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":161,"column":28,"nodeType":"MemberExpression","endLine":161,"endColumn":43},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":167,"column":28,"nodeType":"MemberExpression","endLine":167,"endColumn":43},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":227,"column":42,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":227,"endColumn":59}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview baseService Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport type { ApiResponse, PaginatedResponse } from './config';\r\nimport { SERVICE_CONFIG } from './config';\r\n\r\n/**\r\n * Base entity interface that all database entities should extend\r\n * @interface BaseEntity\r\n */\r\n/**\r\n * BaseEntity Interface\r\n * \r\n * @interface BaseEntity\r\n */\r\nexport interface BaseEntity {\r\n  /** Unique identifier for the entity */\r\n  id: number;\r\n  /** ISO timestamp when the entity was created */\r\n  created_at: string;\r\n  /** ISO timestamp when the entity was last updated */\r\n  updated_at: string;\r\n  /** ID of the user who created this entity */\r\n  created_by?: string;\r\n  /** ID of the user who last updated this entity */\r\n  updated_by?: string;\r\n}\r\n\r\n/**\r\n * Base filters interface for search and filtering operations\r\n * @interface BaseFilters\r\n */\r\n/**\r\n * BaseFilters Interface\r\n * \r\n * @interface BaseFilters\r\n */\r\nexport interface BaseFilters {\r\n  /** Search term for text-based filtering */\r\n  searchTerm?: string;\r\n  /** Start date for date range filtering (ISO format) */\r\n  dateFrom?: string;\r\n  /** End date for date range filtering (ISO format) */\r\n  dateTo?: string;\r\n  /** Additional filter properties */\r\n  [key: string]: unknown;\r\n}\r\n\r\n/**\r\n * Abstract base service class providing common CRUD operations and utilities\r\n * @template T - The entity type that extends BaseEntity\r\n * @template TInsert - The type for creating new entities\r\n * @template TUpdate - The type for updating existing entities\r\n * @template TFilters - The type for filtering entities (defaults to BaseFilters)\r\n */\r\nexport abstract class BaseService<\r\n  T extends BaseEntity,\r\n  TInsert,\r\n  TUpdate,\r\n  TFilters extends BaseFilters = BaseFilters,\r\n> {\r\n  /** Next available ID for entity creation */\r\n  protected nextId = 1;\r\n\r\n  /**\r\n   * Simulates network delay for realistic API behavior\r\n   * @param ms - Delay in milliseconds (defaults to SERVICE_CONFIG.DEFAULT_DELAY_MS)\r\n   * @returns Promise that resolves after the specified delay\r\n   */\r\n  protected delay(ms: number = SERVICE_CONFIG.DEFAULT_DELAY_MS): Promise<void> {\r\n    return new Promise((resolve) => setTimeout(resolve, ms));\r\n  }\r\n\r\n  /**\r\n   * Generic pagination utility for slicing data arrays\r\n   * @template TData - The type of data being paginated\r\n   * @param data - Array of data to paginate\r\n   * @param page - Current page number (1-based)\r\n   * @param pageSize - Number of items per page\r\n   * @returns Paginated response with data, metadata, and navigation info\r\n   */\r\n  protected paginateResults<TData>(\r\n    data: TData[],\r\n    page: number,\r\n    pageSize: number,\r\n  ): PaginatedResponse<TData> {\r\n    const totalCount = data.length;\r\n    const totalPages = Math.ceil(totalCount / pageSize);\r\n    const startIndex = (page - 1) * pageSize;\r\n    const endIndex = startIndex + pageSize;\r\n    const paginatedData = data.slice(startIndex, endIndex);\r\n\r\n    return {\r\n      data: paginatedData,\r\n      count: totalCount,\r\n      page,\r\n      pageSize,\r\n      totalPages,\r\n      hasNextPage: page < totalPages,\r\n      hasPreviousPage: page > 1,\r\n    };\r\n  }\r\n\r\n  // Generic search filter\r\n  protected applySearchFilter(data: T[], searchTerm: string, searchFields: (keyof T)[]): T[] {\r\n    const searchLower = searchTerm.toLowerCase();\r\n    return data.filter((item) =>\r\n      searchFields.some((field) => {\r\n        const value = item[field];\r\n        return value && String(value).toLowerCase().includes(searchLower);\r\n      }),\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Extracts unique values for a specific field from an array of entities\r\n   * @param field - The field to extract unique values from\r\n   * @param data - Array of entities to process\r\n   * @returns Sorted array of unique values (strings or numbers)\r\n   */\r\n  protected getUniqueValues(field: keyof T, data: T[]): (string | number)[] {\r\n    const values: (string | number)[] = [];\r\n\r\n    for (const item of data) {\r\n      const value = item[field];\r\n      if (\r\n        value !== null &&\r\n        value !== undefined &&\r\n        value !== '' &&\r\n        (typeof value === 'string' || typeof value === 'number')\r\n      ) {\r\n        values.push(value);\r\n      }\r\n    }\r\n\r\n    return Array.from(new Set(values)).sort((a, b) => a.localeCompare(b));\r\n  }\r\n\r\n  /**\r\n   * Applies date range filtering to an array of entities\r\n   * @param data - Array of entities to filter\r\n   * @param dateFrom - Start date for filtering (ISO format)\r\n   * @param dateTo - End date for filtering (ISO format)\r\n   * @param dateField - Field to use for date comparison (defaults to 'created_at')\r\n   * @returns Filtered array of entities within the date range\r\n   */\r\n  protected applyDateRangeFilter(\r\n    data: T[],\r\n    dateFrom?: string,\r\n    dateTo?: string,\r\n    dateField: keyof T = 'created_at' as keyof T,\r\n  ): T[] {\r\n    let filteredData = data;\r\n\r\n    if (dateFrom) {\r\n      filteredData = filteredData.filter(\r\n        (item) => new Date(item[dateField] as string) >= new Date(dateFrom),\r\n      );\r\n    }\r\n\r\n    if (dateTo) {\r\n      filteredData = filteredData.filter(\r\n        (item) => new Date(item[dateField] as string) <= new Date(dateTo),\r\n      );\r\n    }\r\n\r\n    return filteredData;\r\n  }\r\n\r\n  /**\r\n   * Retrieves all entities with pagination and filtering\r\n   * @param page - Page number (1-based)\r\n   * @param pageSize - Number of items per page\r\n   * @param filters - Filtering criteria\r\n   * @returns Promise resolving to paginated response\r\n   */\r\n  abstract getAll(\r\n    page?: number,\r\n    pageSize?: number,\r\n    filters?: TFilters,\r\n  ): Promise<PaginatedResponse<T>>;\r\n\r\n  /**\r\n   * Retrieves a single entity by its ID\r\n   * @param id - Unique identifier of the entity\r\n   * @returns Promise resolving to API response with entity data\r\n   */\r\n  abstract getById(id: string): Promise<ApiResponse<T>>;\r\n\r\n  /**\r\n   * Creates a new entity\r\n   * @param data - Data for creating the new entity\r\n   * @returns Promise resolving to API response with created entity\r\n   */\r\n  abstract create(data: TInsert): Promise<ApiResponse<T>>;\r\n\r\n  /**\r\n   * Updates an existing entity\r\n   * @param id - Unique identifier of the entity to update\r\n   * @param data - Data for updating the entity\r\n   * @returns Promise resolving to API response with updated entity\r\n   */\r\n  abstract update(id: string, data: TUpdate): Promise<ApiResponse<T>>;\r\n\r\n  /**\r\n   * Deletes an entity by its ID\r\n   * @param id - Unique identifier of the entity to delete\r\n   * @param deletedBy - ID of the user performing the deletion\r\n   * @returns Promise resolving to API response indicating success\r\n   */\r\n  abstract delete(id: string, deletedBy: string): Promise<ApiResponse<boolean>>;\r\n\r\n  // Abstract filter method that subclasses must implement\r\n  protected abstract applyFilters(data: T[], filters: TFilters): T[];\r\n\r\n  // Common utility methods\r\n  protected findById(id: string, data: T[]): T | undefined {\r\n    return data.find((item) => item.id.toString() === id);\r\n  }\r\n\r\n  protected generateId(): string {\r\n    // Use crypto.randomUUID() for robust unique ID generation\r\n    if (typeof crypto !== 'undefined' && crypto.randomUUID) {\r\n      return crypto.randomUUID();\r\n    }\r\n\r\n    // Fallback for environments without crypto.randomUUID()\r\n    return `id_${  Date.now()  }_${  Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  protected updateTimestamp(data: Partial<T>): Partial<T> {\r\n    return {\r\n      ...data,\r\n      updated_at: new Date().toISOString(),\r\n    };\r\n  }\r\n}\r\n\r\n// Default export\r\nexport default BaseService;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\beneficiariesService.ts","messages":[{"ruleId":"no-duplicate-imports","severity":2,"message":"'../lib/supabase' import is duplicated.","line":10,"column":1,"nodeType":"ImportDeclaration","messageId":"import","endLine":10,"endColumn":42},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":50,"column":47,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":50,"endColumn":49,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[1450,1452],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":51,"column":22,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":51,"endColumn":26},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":80,"column":47,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":80,"endColumn":49,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[2448,2450],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":81,"column":22,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":81,"endColumn":26},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":110,"column":47,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":110,"endColumn":49,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[3513,3515],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":111,"column":22,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":111,"endColumn":26},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":139,"column":47,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":139,"endColumn":49,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[4493,4495],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":140,"column":22,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":140,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":186,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":186,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5975,5978],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5975,5978],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":200,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":200,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6401,6404],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6401,6404],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":201,"column":20,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":201,"endColumn":22,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[6429,6431],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":202,"column":21,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":202,"endColumn":23,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[6465,6467],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":203,"column":24,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":203,"endColumn":26,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[6539,6541],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":204,"column":21,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":204,"endColumn":23,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[6613,6615],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":210,"column":11,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":210,"endColumn":13,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[6823,6825],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":212,"column":76,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":212,"endColumn":78,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6959,6961],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":217,"column":11,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":217,"endColumn":13,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[7050,7052],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":220,"column":13,"nodeType":"MemberExpression","endLine":220,"endColumn":39},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":220,"column":43,"nodeType":"MemberExpression","endLine":220,"endColumn":69},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":220,"column":70,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":220,"endColumn":72,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7283,7285],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview Beneficiaries Service - ─░htiya├ğ sahipleri y├Ânetimi\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { logger } from '../lib/logging/logger';\r\nimport { supabase } from '../lib/supabase';\r\nimport { TABLES } from '../lib/supabase';\r\nimport type { Beneficiary, BeneficiaryInsert, BeneficiaryUpdate } from '../types/beneficiary';\r\nimport type { ApiResponse } from './config';\r\nimport { BaseService } from './baseService';\r\n\r\n/**\r\n * BeneficiariesService s─▒n─▒f─▒ - ─░htiya├ğ sahipleri i├ğin CRUD operasyonlar─▒\r\n * \r\n * @class BeneficiariesService\r\n * @extends BaseService\r\n */\r\nexport class BeneficiariesService extends BaseService<\r\n  Beneficiary,\r\n  BeneficiaryInsert,\r\n  BeneficiaryUpdate\r\n> {\r\n  constructor() {\r\n    super(TABLES.BENEFICIARIES);\r\n  }\r\n\r\n  /**\r\n   * Aktif ihtiya├ğ sahiplerini getirir\r\n   * \r\n   * @returns Promise<ApiResponse<Beneficiary[]>>\r\n   */\r\n  async getActiveBeneficiaries(): Promise<ApiResponse<Beneficiary[]>> {\r\n    try {\r\n      logger.info('Fetching active beneficiaries');\r\n\r\n      const { data, error } = await supabase\r\n        .from(TABLES.BENEFICIARIES)\r\n        .select('*')\r\n        .eq('status', 'active')\r\n        .order('created_at', { ascending: false });\r\n      \r\n      if (error) {\r\n        logger.error('Error fetching active beneficiaries', error);\r\n        return { data: null, error: error.message };\r\n      }\r\n\r\n      logger.info(`Successfully fetched ${data?.length || 0} active beneficiaries`);\r\n      return { data: data || [], error: null };\r\n    } catch (error) {\r\n      logger.error('Unexpected error in getActiveBeneficiaries', error);\r\n      return { data: null, error: 'Beklenmeyen bir hata olu┼ştu' };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ┼Şehre g├Âre ihtiya├ğ sahiplerini getirir\r\n   * \r\n   * @param city - ┼Şehir ad─▒\r\n   * @returns Promise<ApiResponse<Beneficiary[]>>\r\n   */\r\n  async getBeneficiariesByCity(city: string): Promise<ApiResponse<Beneficiary[]>> {\r\n    try {\r\n      logger.info('Fetching beneficiaries by city', { city });\r\n\r\n      const { data, error } = await supabase\r\n        .from(TABLES.BENEFICIARIES)\r\n        .select('*')\r\n        .eq('city', city)\r\n        .eq('status', 'active')\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) {\r\n        logger.error('Error fetching beneficiaries by city', error);\r\n        return { data: null, error: error.message };\r\n      }\r\n\r\n      logger.info(`Successfully fetched ${data?.length || 0} beneficiaries for city: ${city}`);\r\n      return { data: data || [], error: null };\r\n    } catch (error) {\r\n      logger.error('Unexpected error in getBeneficiariesByCity', error);\r\n      return { data: null, error: 'Beklenmeyen bir hata olu┼ştu' };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ─░htiya├ğ t├╝r├╝ne g├Âre ihtiya├ğ sahiplerini getirir\r\n   * \r\n   * @param needType - ─░htiya├ğ t├╝r├╝\r\n   * @returns Promise<ApiResponse<Beneficiary[]>>\r\n   */\r\n  async getBeneficiariesByNeedType(needType: string): Promise<ApiResponse<Beneficiary[]>> {\r\n    try {\r\n      logger.info('Fetching beneficiaries by need type', { needType });\r\n\r\n      const { data, error } = await supabase\r\n        .from(TABLES.BENEFICIARIES)\r\n        .select('*')\r\n        .contains('need_types', [needType])\r\n        .eq('status', 'active')\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) {\r\n        logger.error('Error fetching beneficiaries by need type', error);\r\n        return { data: null, error: error.message };\r\n      }\r\n\r\n      logger.info(`Successfully fetched ${data?.length || 0} beneficiaries for need type: ${needType}`);\r\n      return { data: data || [], error: null };\r\n    } catch (error) {\r\n      logger.error('Unexpected error in getBeneficiariesByNeedType', error);\r\n      return { data: null, error: 'Beklenmeyen bir hata olu┼ştu' };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Acil durumdaki ihtiya├ğ sahiplerini getirir\r\n   * \r\n   * @returns Promise<ApiResponse<Beneficiary[]>>\r\n   */\r\n  async getUrgentBeneficiaries(): Promise<ApiResponse<Beneficiary[]>> {\r\n    try {\r\n      logger.info('Fetching urgent beneficiaries');\r\n\r\n      const { data, error } = await supabase\r\n        .from(TABLES.BENEFICIARIES)\r\n        .select('*')\r\n        .eq('priority', 'urgent')\r\n        .eq('status', 'active')\r\n        .order('created_at', { ascending: false });\r\n\r\n      if (error) {\r\n        logger.error('Error fetching urgent beneficiaries', error);\r\n        return { data: null, error: error.message };\r\n      }\r\n\r\n      logger.info(`Successfully fetched ${data?.length || 0} urgent beneficiaries`);\r\n      return { data: data || [], error: null };\r\n    } catch (error) {\r\n      logger.error('Unexpected error in getUrgentBeneficiaries', error);\r\n      return { data: null, error: 'Beklenmeyen bir hata olu┼ştu' };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ─░htiya├ğ sahibinin durumunu g├╝nceller\r\n   * \r\n   * @param id - ─░htiya├ğ sahibi ID'si\r\n   * @param status - Yeni durum\r\n   * @returns Promise<ApiResponse<Beneficiary>>\r\n   */\r\n  async updateBeneficiaryStatus(id: number, status: string): Promise<ApiResponse<Beneficiary>> {\r\n    try {\r\n      logger.info('Updating beneficiary status', { id, status });\r\n\r\n      const { data, error } = await supabase\r\n        .from(TABLES.BENEFICIARIES)\r\n        .update({ \r\n          status,\r\n          updated_at: new Date().toISOString()\r\n        })\r\n        .eq('id', id)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        logger.error('Error updating beneficiary status', error);\r\n        return { data: null, error: error.message };\r\n      }\r\n\r\n      logger.info(`Successfully updated beneficiary status for ID: ${id}`);\r\n      return { data, error: null };\r\n    } catch (error) {\r\n      logger.error('Unexpected error in updateBeneficiaryStatus', error);\r\n      return { data: null, error: 'Beklenmeyen bir hata olu┼ştu' };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ─░htiya├ğ sahibi istatistiklerini getirir\r\n   * \r\n   * @returns Promise<ApiResponse<any>>\r\n   */\r\n  async getBeneficiaryStats(): Promise<ApiResponse<any>> {\r\n    try {\r\n      logger.info('Fetching beneficiary statistics');\r\n\r\n      const { data, error } = await supabase\r\n        .from(TABLES.BENEFICIARIES)\r\n        .select('status, priority, city, need_types');\r\n\r\n      if (error) {\r\n        logger.error('Error fetching beneficiary statistics', error);\r\n        return { data: null, error: error.message };\r\n      }\r\n\r\n      // ─░statistikleri hesapla\r\n      const stats: any = {\r\n        total: data?.length || 0,\r\n        active: data?.filter(b => b.status === 'active').length || 0,\r\n        completed: data?.filter(b => b.status === 'completed').length || 0,\r\n        urgent: data?.filter(b => b.priority === 'urgent').length || 0,\r\n        byCity: {} as Record<string, number>,\r\n        byNeedType: {} as Record<string, number>\r\n      };\r\n\r\n      // ┼Şehir baz─▒nda istatistikler\r\n      data?.forEach(beneficiary => {\r\n        if (beneficiary.city) {\r\n          stats.byCity[beneficiary.city] = (stats.byCity[beneficiary.city] || 0) + 1;\r\n        }\r\n      });\r\n\r\n      // ─░htiya├ğ t├╝r├╝ baz─▒nda istatistikler\r\n      data?.forEach(beneficiary => {\r\n        if (beneficiary.need_types && Array.isArray(beneficiary.need_types)) {\r\n          beneficiary.need_types.forEach(needType => {\r\n            stats.byNeedType[needType] = (stats.byNeedType[needType] || 0) + 1;\r\n          });\r\n        }\r\n      });\r\n\r\n      logger.info('Successfully calculated beneficiary statistics');\r\n      return { data: stats, error: null };\r\n    } catch (error) {\r\n      logger.error('Unexpected error in getBeneficiaryStats', error);\r\n      return { data: null, error: 'Beklenmeyen bir hata olu┼ştu' };\r\n    }\r\n  }\r\n}\r\n\r\n// Singleton instance\r\nexport const beneficiariesService = new BeneficiariesService();","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\cachingService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[529,532],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[529,532],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":26,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":26,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[761,764],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[761,764],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":165,"column":9,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":165,"endColumn":33},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":185,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":185,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4535,4538],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4535,4538],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":191,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":191,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4803,4805],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":201,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":201,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5045,5047],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":498,"column":50,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":498,"endColumn":52,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[12232,12234],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":510,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":510,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12594,12597],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12594,12597],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":533,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":533,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13375,13378],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13375,13378],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is defined but never used.","line":539,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":539,"endColumn":23},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'data' is defined but never used. Allowed unused args must match /^_/u.","line":539,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":539,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":539,"column":25,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":539,"endColumn":28,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13626,13629],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13626,13629],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":585,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":585,"endColumn":23},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":585,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":585,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":711,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":711,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18600,18603],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18600,18603],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":715,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":715,"endColumn":19},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":715,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":715,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":723,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":723,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18922,18925],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18922,18925],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":723,"column":36,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":723,"endColumn":39,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18928,18931],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18928,18931],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":732,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":732,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19141,19144],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19141,19144],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":732,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":732,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19147,19150],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19147,19150],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":882,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":882,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23510,23513],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23510,23513],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":882,"column":60,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":882,"endColumn":63,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23525,23528],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23525,23528],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":885,"column":30,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":885,"endColumn":33,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23612,23615],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23612,23615],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":895,"column":63,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":895,"endColumn":66,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24233,24236],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24233,24236],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":897,"column":66,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":897,"endColumn":69,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24363,24366],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24363,24366],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":23,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview Caching Service\r\n * @description Advanced caching strategies with React Query and local storage integration\r\n */\r\n\r\nimport { monitoring } from './monitoringService';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\n// =============================================================================\r\n// TYPES AND INTERFACES\r\n// =============================================================================\r\n\r\n/**\r\n * CacheEntry Interface\r\n * \r\n * @interface CacheEntry\r\n */\r\nexport interface CacheEntry<T = any> {\r\n  data: T;\r\n  timestamp: number;\r\n  ttl: number; // Time to live in milliseconds\r\n  accessCount: number;\r\n  lastAccessed: number;\r\n  tags: string[];\r\n  size: number; // Approximate size in bytes\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n/**\r\n * CacheConfig Interface\r\n * \r\n * @interface CacheConfig\r\n */\r\nexport interface CacheConfig {\r\n  defaultTTL: number;\r\n  maxSize: number; // Maximum cache size in bytes\r\n  cleanupInterval: number;\r\n  enableCompression: boolean;\r\n  enableEncryption: boolean;\r\n  persistenceEnabled: boolean;\r\n  syncEnabled: boolean;\r\n}\r\n\r\n/**\r\n * CacheStats Interface\r\n * \r\n * @interface CacheStats\r\n */\r\nexport interface CacheStats {\r\n  totalEntries: number;\r\n  totalSize: number;\r\n  hitRate: number;\r\n  missRate: number;\r\n  evictions: number;\r\n  hits: number;\r\n  misses: number;\r\n  avgAccessTime: number;\r\n  oldestEntry: number;\r\n  newestEntry: number;\r\n}\r\n\r\n/**\r\n * CacheStrategy Interface\r\n * \r\n * @interface CacheStrategy\r\n */\r\nexport interface CacheStrategy {\r\n  name: string;\r\n  description: string;\r\n  ttl: number;\r\n  priority: 'low' | 'normal' | 'high';\r\n  tags: string[];\r\n  conditions?: {\r\n    userRole?: string;\r\n    dataFreshness?: number;\r\n    networkStatus?: 'online' | 'offline';\r\n  };\r\n}\r\n\r\n/**\r\n * ReactQueryConfig Interface\r\n * \r\n * @interface ReactQueryConfig\r\n */\r\nexport interface ReactQueryConfig {\r\n  defaultOptions: {\r\n    queries: {\r\n      staleTime: number;\r\n      gcTime: number;\r\n      retry: number;\r\n      retryDelay: number;\r\n      refetchOnWindowFocus: boolean;\r\n      refetchOnReconnect: boolean;\r\n      refetchInterval: number;\r\n    };\r\n    mutations: {\r\n      retry: number;\r\n      retryDelay: number;\r\n    };\r\n  };\r\n  strategies: Record<string, CacheStrategy>;\r\n}\r\n\r\n// =============================================================================\r\n// CACHING SERVICE CLASS\r\n// =============================================================================\r\n\r\n/**\r\n * CachingService Service\r\n * \r\n * Service class for handling cachingservice operations\r\n * \r\n * @class CachingService\r\n */\r\nexport class CachingService {\r\n  private static instance: CachingService;\r\n  private readonly memoryCache = new Map<string, CacheEntry>();\r\n  private readonly config: CacheConfig;\r\n  private readonly stats: CacheStats;\r\n  private cleanupTimer: NodeJS.Timeout | null = null;\r\n  private readonly strategies = new Map<string, CacheStrategy>();\r\n  private reactQueryConfig: ReactQueryConfig;\r\n\r\n  private constructor() {\r\n    this.config = {\r\n      defaultTTL: 300000, // 5 minutes\r\n      maxSize: 50 * 1024 * 1024, // 50MB\r\n      cleanupInterval: 300000, // 5 minutes\r\n      enableCompression: true,\r\n      enableEncryption: false,\r\n      persistenceEnabled: true,\r\n      syncEnabled: true,\r\n    };\r\n\r\n    this.stats = {\r\n      totalEntries: 0,\r\n      totalSize: 0,\r\n      hitRate: 0,\r\n      missRate: 0,\r\n      evictions: 0,\r\n      hits: 0,\r\n      misses: 0,\r\n      avgAccessTime: 0,\r\n      oldestEntry: Date.now(),\r\n      newestEntry: Date.now(),\r\n    };\r\n\r\n    this.reactQueryConfig = this.getDefaultReactQueryConfig();\r\n    this.initializeStrategies();\r\n    this.loadPersistentCache();\r\n    this.startCleanupTimer();\r\n\r\n    monitoring.trackEvent({\r\n      type: 'caching_service_initialized',\r\n      category: 'cache',\r\n      action: 'initialize',\r\n      metadata: {\r\n        config: this.config,\r\n        strategies: this.strategies.size,\r\n      },\r\n    });\r\n  }\r\n\r\n  public static getInstance(): CachingService {\r\n    if (!CachingService.instance) {\r\n      CachingService.instance = new CachingService();\r\n    }\r\n    return CachingService.instance;\r\n  }\r\n\r\n  // =============================================================================\r\n  // CACHE MANAGEMENT\r\n  // =============================================================================\r\n\r\n  /**\r\n   * Set cache entry\r\n   */\r\n  set<T>(\r\n    key: string,\r\n    data: T,\r\n    options: {\r\n      ttl?: number;\r\n      tags?: string[];\r\n      strategy?: string;\r\n      metadata?: Record<string, any>;\r\n      compress?: boolean;\r\n    } = {},\r\n  ): void {\r\n    const strategy = options.strategy ? this.strategies.get(options.strategy) : null;\r\n    const ttl = options.ttl ?? strategy?.ttl ?? this.config.defaultTTL;\r\n    const tags = options.tags ?? strategy?.tags || [];\r\n\r\n    const entry: CacheEntry<T> = {\r\n      data,\r\n      timestamp: Date.now(),\r\n      ttl,\r\n      accessCount: 0,\r\n      lastAccessed: Date.now(),\r\n      tags,\r\n      size: this.calculateSize(data),\r\n      metadata: options.metadata || {},\r\n    };\r\n\r\n    // Check if we need to evict entries to make room\r\n    this.ensureCapacity(entry.size);\r\n\r\n    // Compress if enabled and requested\r\n    if (this.config.enableCompression && options.compress !== false) {\r\n      entry.data = this.compressData(data);\r\n      entry.size = this.calculateSize(entry.data);\r\n      entry.metadata = { ...entry.metadata, compressed: true };\r\n    }\r\n\r\n    this.memoryCache.set(key, entry);\r\n    this.updateStats();\r\n\r\n    // Persist if enabled\r\n    if (this.config.persistenceEnabled) {\r\n      this.persistEntry(key, entry);\r\n    }\r\n\r\n    // Track cache write\r\n    monitoring.trackEvent({\r\n      type: 'cache_entry_set',\r\n      category: 'cache',\r\n      action: 'write',\r\n      metadata: {\r\n        key,\r\n        size: entry.size,\r\n        ttl,\r\n        tags: tags.length,\r\n        strategy: options.strategy,\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get cache entry\r\n   */\r\n  get<T>(key: string): T | null {\r\n    const startTime = Date.now();\r\n    const entry = this.memoryCache.get(key) as CacheEntry<T> | undefined;\r\n\r\n    if (!entry) {\r\n      this.stats.misses++;\r\n      this.updateStats();\r\n      return null;\r\n    }\r\n\r\n    // Check if entry has expired\r\n    if (Date.now() - entry.timestamp > entry.ttl) {\r\n      this.memoryCache.delete(key);\r\n      this.stats.misses++;\r\n      this.updateStats();\r\n      this.removePersistentEntry(key);\r\n      return null;\r\n    }\r\n\r\n    // Update access statistics\r\n    entry.accessCount++;\r\n    entry.lastAccessed = Date.now();\r\n\r\n    // Decompress if needed\r\n    let {data} = entry;\r\n    if (entry.metadata?.compressed) {\r\n      data = this.decompressData(data);\r\n    }\r\n\r\n    const accessTime = Date.now() - startTime;\r\n    this.stats.hits++;\r\n    this.updateStats();\r\n\r\n    // Track cache hit\r\n    monitoring.trackEvent({\r\n      type: 'cache_hit',\r\n      category: 'cache',\r\n      action: 'read',\r\n      metadata: {\r\n        key,\r\n        accessTime,\r\n        accessCount: entry.accessCount,\r\n        age: Date.now() - entry.timestamp,\r\n      },\r\n    });\r\n\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Check if key exists in cache\r\n   */\r\n  has(key: string): boolean {\r\n    const entry = this.memoryCache.get(key);\r\n    if (!entry) return false;\r\n\r\n    // Check expiration\r\n    if (Date.now() - entry.timestamp > entry.ttl) {\r\n      this.memoryCache.delete(key);\r\n      this.removePersistentEntry(key);\r\n      return false;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  /**\r\n   * Delete cache entry\r\n   */\r\n  delete(key: string): boolean {\r\n    const existed = this.memoryCache.delete(key);\r\n\r\n    if (existed) {\r\n      this.updateStats();\r\n      this.removePersistentEntry(key);\r\n\r\n      monitoring.trackEvent({\r\n      type: 'cache',\r\n      category: 'cache',\r\n      action: 'cache_entry_deleted',\r\n      metadata: { key }\r\n    });\r\n    }\r\n\r\n    return existed;\r\n  }\r\n\r\n  /**\r\n   * Clear all cache entries\r\n   */\r\n  clear(): void {\r\n    const entryCount = this.memoryCache.size;\r\n    this.memoryCache.clear();\r\n    this.updateStats();\r\n\r\n    // Clear persistent storage\r\n    this.clearPersistentCache();\r\n\r\n    monitoring.trackEvent({\r\n      type: 'cache',\r\n      category: 'cache',\r\n      action: 'cache_cleared',\r\n      metadata: { entriesRemoved: entryCount }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Clear cache entries by tags\r\n   */\r\n  clearByTags(tags: string[]): number {\r\n    let removed = 0;\r\n\r\n    for (const [key, entry] of this.memoryCache.entries()) {\r\n      if (tags.some((tag) => entry.tags.includes(tag))) {\r\n        this.memoryCache.delete(key);\r\n        this.removePersistentEntry(key);\r\n        removed++;\r\n      }\r\n    }\r\n\r\n    if (removed > 0) {\r\n      this.updateStats();\r\n      monitoring.trackEvent({\r\n      type: 'cache',\r\n      category: 'cache',\r\n      action: 'cache_cleared_by_tags',\r\n      metadata: { tags, entriesRemoved: removed }\r\n    });\r\n    }\r\n\r\n    return removed;\r\n  }\r\n\r\n  /**\r\n   * Get cache statistics\r\n   */\r\n  getStats(): CacheStats {\r\n    return { ...this.stats };\r\n  }\r\n\r\n  // =============================================================================\r\n  // CACHE STRATEGIES\r\n  // =============================================================================\r\n\r\n  /**\r\n   * Initialize default caching strategies\r\n   */\r\n  private initializeStrategies(): void {\r\n    // User data strategy\r\n    this.strategies.set('user_data', {\r\n      name: 'User Data',\r\n      description: 'Cache user profile and preferences',\r\n      ttl: 600000, // 10 minutes\r\n      priority: 'high',\r\n      tags: ['user', 'profile'],\r\n      conditions: {\r\n        userRole: 'any',\r\n      },\r\n    });\r\n\r\n    // Static data strategy\r\n    this.strategies.set('static_data', {\r\n      name: 'Static Data',\r\n      description: 'Cache static reference data',\r\n      ttl: 3600000, // 1 hour\r\n      priority: 'high',\r\n      tags: ['static', 'reference'],\r\n      conditions: {\r\n        dataFreshness: 3600000,\r\n      },\r\n    });\r\n\r\n    // API responses strategy\r\n    this.strategies.set('api_responses', {\r\n      name: 'API Responses',\r\n      description: 'Cache API responses with short TTL',\r\n      ttl: 300000, // 5 minutes\r\n      priority: 'normal',\r\n      tags: ['api', 'response'],\r\n      conditions: {\r\n        networkStatus: 'online',\r\n      },\r\n    });\r\n\r\n    // Reports strategy\r\n    this.strategies.set('reports', {\r\n      name: 'Reports',\r\n      description: 'Cache generated reports',\r\n      ttl: 1800000, // 30 minutes\r\n      priority: 'normal',\r\n      tags: ['report', 'analytics'],\r\n      conditions: {\r\n        dataFreshness: 900000, // 15 minutes\r\n      },\r\n    });\r\n\r\n    // Offline strategy\r\n    this.strategies.set('offline', {\r\n      name: 'Offline Data',\r\n      description: 'Cache data for offline use',\r\n      ttl: 86400000, // 24 hours\r\n      priority: 'high',\r\n      tags: ['offline', 'persistent'],\r\n      conditions: {\r\n        networkStatus: 'offline',\r\n      },\r\n    });\r\n\r\n    // Search results strategy\r\n    this.strategies.set('search', {\r\n      name: 'Search Results',\r\n      description: 'Cache search query results',\r\n      ttl: 600000, // 10 minutes\r\n      priority: 'low',\r\n      tags: ['search', 'query'],\r\n      conditions: {\r\n        dataFreshness: 300000,\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add custom caching strategy\r\n   */\r\n  addStrategy(name: string, strategy: CacheStrategy): void {\r\n    this.strategies.set(name, strategy);\r\n    monitoring.trackEvent({\r\n      type: 'cache',\r\n      category: 'cache',\r\n      action: 'cache_strategy_added',\r\n      metadata: { name, ttl: strategy.ttl }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get all strategies\r\n   */\r\n  getStrategies(): CacheStrategy[] {\r\n    return Array.from(this.strategies.values());\r\n  }\r\n\r\n  /**\r\n   * Get React Query configuration\r\n   */\r\n  getReactQueryConfig(): ReactQueryConfig {\r\n    return this.reactQueryConfig;\r\n  }\r\n\r\n  /**\r\n   * Update React Query configuration\r\n   */\r\n  updateReactQueryConfig(config: Partial<ReactQueryConfig>): void {\r\n    this.reactQueryConfig = { ...this.reactQueryConfig, ...config };\r\n    monitoring.trackEvent({\r\n      type: 'user_action',\r\n      category: 'cache',\r\n      action: 'react_query_config_updated',\r\n      metadata: {\r\n        staleTime: config.defaultOptions?.queries?.staleTime,\r\n      },\r\n    });\r\n  }\r\n\r\n  // =============================================================================\r\n  // REACT QUERY INTEGRATION\r\n  // =============================================================================\r\n\r\n  /**\r\n   * Create React Query options for a specific strategy\r\n   */\r\n  getQueryOptions(strategyName: string, overrides: any = {}) {\r\n    const strategy = this.strategies.get(strategyName);\r\n    if (!strategy) {\r\n      logger.warn(`Cache strategy '${strategyName}' not found, using default`);\r\n    }\r\n\r\n    const baseOptions = {\r\n      staleTime: strategy?.ttl ?? this.config.defaultTTL,\r\n      gcTime: (strategy?.ttl ?? this.config.defaultTTL) * 2,\r\n      retry: 2,\r\n      retryDelay: (attemptIndex: number) => Math.min(1000 * 2 ** attemptIndex, 30000),\r\n      refetchOnWindowFocus: strategy?.priority === 'high',\r\n      refetchOnReconnect: true,\r\n      refetchInterval: strategy?.priority === 'high' ? 60000 : false,\r\n      ...overrides,\r\n    };\r\n\r\n    return baseOptions;\r\n  }\r\n\r\n  /**\r\n   * Get mutation options for a specific strategy\r\n   */\r\n  getMutationOptions(strategyName: string, overrides: any = {}) {\r\n    const strategy = this.strategies.get(strategyName);\r\n\r\n    return {\r\n      retry: strategy?.priority === 'high' ? 3 : 1,\r\n      retryDelay: (attemptIndex: number) => Math.min(1000 * 2 ** attemptIndex, 30000),\r\n      onSuccess: (data: any) => {\r\n        // Invalidate related cache entries\r\n        if (strategy?.tags) {\r\n          this.clearByTags(strategy.tags);\r\n        }\r\n\r\n        monitoring.trackEvent({\r\n          type: 'user_action',\r\n          category: 'cache',\r\n          action: 'cache_invalidation_on_mutation',\r\n          metadata: {\r\n            strategy: strategyName,\r\n            tags: strategy?.tags,\r\n          },\r\n        });\r\n      },\r\n      ...overrides,\r\n    };\r\n  }\r\n\r\n  // =============================================================================\r\n  // PERSISTENCE\r\n  // =============================================================================\r\n\r\n  /**\r\n   * Load persistent cache entries\r\n   */\r\n  private loadPersistentCache(): void {\r\n    if (!this.config.persistenceEnabled) return;\r\n\r\n    try {\r\n      const keys = Object.keys(localStorage).filter((key) => key.startsWith('cache_'));\r\n\r\n      for (const key of keys) {\r\n        try {\r\n          const data = localStorage.getItem(key);\r\n          if (data) {\r\n            const entry: CacheEntry = JSON.parse(data);\r\n\r\n            // Check if entry is still valid\r\n            if (Date.now() - entry.timestamp < entry.ttl) {\r\n              this.memoryCache.set(key.replace('cache_', ''), entry);\r\n            } else {\r\n              localStorage.removeItem(key);\r\n            }\r\n          }\r\n        } catch (error) {\r\n          // Remove corrupted entries\r\n          localStorage.removeItem(key);\r\n        }\r\n      }\r\n\r\n      this.updateStats();\r\n\r\n      monitoring.trackEvent({\r\n        type: 'performance',\r\n        category: 'cache',\r\n        action: 'persistent_cache_loaded',\r\n        metadata: {\r\n          entriesLoaded: this.memoryCache.size,\r\n        },\r\n      });\r\n    } catch (error) {\r\n      logger.warn('Failed to load persistent cache:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Persist cache entry\r\n   */\r\n  private persistEntry(key: string, entry: CacheEntry): void {\r\n    if (!this.config.persistenceEnabled) return;\r\n\r\n    try {\r\n      localStorage.setItem(`cache_${key}`, JSON.stringify(entry));\r\n    } catch (error) {\r\n      logger.warn('Failed to persist cache entry:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Remove persistent cache entry\r\n   */\r\n  private removePersistentEntry(key: string): void {\r\n    if (!this.config.persistenceEnabled) return;\r\n\r\n    try {\r\n      localStorage.removeItem(`cache_${key}`);\r\n    } catch (error) {\r\n      logger.warn('Failed to remove persistent cache entry:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear all persistent cache\r\n   */\r\n  private clearPersistentCache(): void {\r\n    if (!this.config.persistenceEnabled) return;\r\n\r\n    const keys = Object.keys(localStorage).filter((key) => key.startsWith('cache_'));\r\n    keys.forEach((key) => {\r\n      localStorage.removeItem(key);\r\n    });\r\n  }\r\n\r\n  // =============================================================================\r\n  // CACHE OPTIMIZATION\r\n  // =============================================================================\r\n\r\n  /**\r\n   * Ensure cache capacity by evicting old entries\r\n   */\r\n  private ensureCapacity(requiredSize: number): void {\r\n    while (this.stats.totalSize + requiredSize > this.config.maxSize && this.memoryCache.size > 0) {\r\n      // Find the oldest entry to evict\r\n      let oldestKey = '';\r\n      let oldestTime = Date.now();\r\n\r\n      for (const [key, entry] of this.memoryCache.entries()) {\r\n        if (entry.lastAccessed < oldestTime) {\r\n          oldestTime = entry.lastAccessed;\r\n          oldestKey = key;\r\n        }\r\n      }\r\n\r\n      if (oldestKey) {\r\n        const entry = this.memoryCache.get(oldestKey);\r\n        if (entry) {\r\n          this.stats.totalSize -= entry.size;\r\n          this.stats.evictions++;\r\n        }\r\n        this.memoryCache.delete(oldestKey);\r\n        this.removePersistentEntry(oldestKey);\r\n\r\n        monitoring.trackEvent({\r\n          type: 'performance',\r\n          category: 'cache',\r\n          action: 'cache_eviction',\r\n          metadata: {\r\n            key: oldestKey,\r\n            reason: 'capacity_limit',\r\n          },\r\n        });\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update cache statistics\r\n   */\r\n  private updateStats(): void {\r\n    this.stats.totalEntries = this.memoryCache.size;\r\n    this.stats.totalSize = Array.from(this.memoryCache.values()).reduce(\r\n      (sum, entry) => sum + entry.size,\r\n      0,\r\n    );\r\n\r\n    const totalRequests = this.stats.hits + this.stats.misses;\r\n    this.stats.hitRate = totalRequests > 0 ? (this.stats.hits / totalRequests) * 100 : 0;\r\n    this.stats.missRate = totalRequests > 0 ? (this.stats.misses / totalRequests) * 100 : 0;\r\n\r\n    // Update timestamps\r\n    if (this.memoryCache.size > 0) {\r\n      const timestamps = Array.from(this.memoryCache.values()).map((e) => e.timestamp);\r\n      this.stats.oldestEntry = Math.min(...timestamps);\r\n      this.stats.newestEntry = Math.max(...timestamps);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Calculate approximate size of data\r\n   */\r\n  private calculateSize(data: any): number {\r\n    try {\r\n      const jsonString = JSON.stringify(data);\r\n      return jsonString.length * 2; // Rough estimate: 2 bytes per character\r\n    } catch (error) {\r\n      return 1000; // Default size estimate\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Compress data (simple implementation)\r\n   */\r\n  private compressData(data: any): any {\r\n    // In a real implementation, you would use a compression library\r\n    // For now, just return the data as-is\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Decompress data\r\n   */\r\n  private decompressData(data: any): any {\r\n    // In a real implementation, you would decompress the data\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Start cleanup timer\r\n   */\r\n  private startCleanupTimer(): void {\r\n    if (this.cleanupTimer) {\r\n      clearInterval(this.cleanupTimer);\r\n    }\r\n\r\n    this.cleanupTimer = setInterval(() => {\r\n      this.performCleanup();\r\n    }, this.config.cleanupInterval);\r\n  }\r\n\r\n  /**\r\n   * Perform cache cleanup\r\n   */\r\n  private performCleanup(): void {\r\n    let expiredCount = 0;\r\n    const now = Date.now();\r\n\r\n    for (const [key, entry] of this.memoryCache.entries()) {\r\n      if (now - entry.timestamp > entry.ttl) {\r\n        this.memoryCache.delete(key);\r\n        this.removePersistentEntry(key);\r\n        expiredCount++;\r\n      }\r\n    }\r\n\r\n    if (expiredCount > 0) {\r\n      this.updateStats();\r\n      monitoring.trackEvent({\r\n        type: 'performance',\r\n        category: 'cache',\r\n        action: 'cache_cleanup',\r\n        metadata: {\r\n          expiredEntries: expiredCount,\r\n          remainingEntries: this.memoryCache.size,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get default React Query configuration\r\n   */\r\n  private getDefaultReactQueryConfig(): ReactQueryConfig {\r\n    return {\r\n      defaultOptions: {\r\n        queries: {\r\n          staleTime: 5 * 60 * 1000, // 5 minutes\r\n          gcTime: 10 * 60 * 1000, // 10 minutes\r\n          retry: 2,\r\n          retryDelay: 1000, // 1 second default delay\r\n          refetchOnWindowFocus: false,\r\n          refetchOnReconnect: true,\r\n          refetchInterval: 0, // 0 means no automatic refetch\r\n        },\r\n        mutations: {\r\n          retry: 1,\r\n          retryDelay: 1000, // 1 second default delay\r\n        },\r\n      },\r\n      strategies: {\r\n        user: {\r\n          name: 'User Data',\r\n          description: 'User-specific data caching',\r\n          ttl: 10 * 60 * 1000,\r\n          priority: 'high',\r\n          tags: ['user'],\r\n        },\r\n        static: {\r\n          name: 'Static Data',\r\n          description: 'Static reference data',\r\n          ttl: 60 * 60 * 1000,\r\n          priority: 'high',\r\n          tags: ['static'],\r\n        },\r\n        api: {\r\n          name: 'API Responses',\r\n          description: 'API response caching',\r\n          ttl: 5 * 60 * 1000,\r\n          priority: 'normal',\r\n          tags: ['api'],\r\n        },\r\n      },\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get cache optimization recommendations\r\n   */\r\n  async getOptimizationRecommendations(): Promise<{\r\n    recommendations: string[];\r\n    suggestedConfig: Partial<CacheConfig>;\r\n    performance: {\r\n      hitRate: number;\r\n      avgSize: number;\r\n      evictionRate: number;\r\n    };\r\n  }> {\r\n    const recommendations: string[] = [];\r\n    const suggestedConfig: Partial<CacheConfig> = {};\r\n\r\n    // Analyze hit rate\r\n    if (this.stats.hitRate < 50) {\r\n      recommendations.push('Low cache hit rate - consider increasing TTL or improving cache keys');\r\n    } else if (this.stats.hitRate > 90) {\r\n      recommendations.push('High cache hit rate - consider increasing cache size');\r\n      suggestedConfig.maxSize = Math.min(this.config.maxSize * 1.5, 200 * 1024 * 1024); // Max 200MB\r\n    }\r\n\r\n    // Analyze evictions\r\n    const evictionRate = this.stats.evictions / Math.max(this.stats.totalEntries, 1);\r\n    if (evictionRate > 0.1) {\r\n      recommendations.push('High eviction rate - consider increasing cache size or reducing TTL');\r\n      suggestedConfig.maxSize = Math.min(this.config.maxSize * 1.2, 100 * 1024 * 1024); // Max 100MB\r\n    }\r\n\r\n    // Analyze average entry size\r\n    const avgSize = this.stats.totalSize / Math.max(this.stats.totalEntries, 1);\r\n    if (avgSize > 1024 * 1024) {\r\n      // > 1MB per entry\r\n      recommendations.push('Large average entry size - consider enabling compression');\r\n      suggestedConfig.enableCompression = true;\r\n    }\r\n\r\n    return {\r\n      recommendations,\r\n      suggestedConfig,\r\n      performance: {\r\n        hitRate: this.stats.hitRate,\r\n        avgSize,\r\n        evictionRate,\r\n      },\r\n    };\r\n  }\r\n}\r\n\r\n// =============================================================================\r\n// GLOBAL INSTANCE AND UTILITIES\r\n// =============================================================================\r\n\r\nexport const cachingService = CachingService.getInstance();\r\n\r\n// Utility functions for easy access\r\nexport const cacheSet = (key: string, data: any, options?: any) => {\r\n  cachingService.set(key, data, options);\r\n};\r\nexport const cacheGet = <T = any>(key: string) => cachingService.get<T>(key);\r\nexport const cacheHas = (key: string) => cachingService.has(key);\r\nexport const cacheDelete = (key: string) => cachingService.delete(key);\r\nexport const cacheClear = () => {\r\n  cachingService.clear();\r\n};\r\nexport const cacheClearByTags = (tags: string[]) => cachingService.clearByTags(tags);\r\nexport const getCacheStats = () => cachingService.getStats();\r\nexport const getCacheStrategies = () => cachingService.getStrategies();\r\nexport const getReactQueryConfig = () => cachingService.getReactQueryConfig();\r\nexport const getQueryOptions = (strategy: string, overrides?: any) =>\r\n  cachingService.getQueryOptions(strategy, overrides);\r\nexport const getMutationOptions = (strategy: string, overrides?: any) =>\r\n  cachingService.getMutationOptions(strategy, overrides);\r\nexport const getCacheOptimizationRecommendations = () =>\r\n  cachingService.getOptimizationRecommendations();\r\n\r\nexport default CachingService;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\config.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\connectionPoolingService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":67,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":67,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1643,1646],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1643,1646],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":127,"column":9,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":127,"endColumn":43},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'startTime' is assigned a value but never used.","line":187,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":187,"endColumn":20},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'startTime' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":187,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":187,"endColumn":20},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'data' is assigned a value but never used.","line":199,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":199,"endColumn":19},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'data' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":199,"column":15,"nodeType":null,"messageId":"unusedVar","endLine":199,"endColumn":19},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":220,"column":18,"nodeType":"BinaryExpression","messageId":"constantShortCircuit","endLine":220,"endColumn":38},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":220,"column":18,"nodeType":"BinaryExpression","messageId":"neverNullish","endLine":220,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":306,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":306,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8954,8957],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8954,8957],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":307,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":307,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9015,9018],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9015,9018],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":325,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":325,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9534,9537],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9534,9537],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":348,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":348,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10392,10395],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10392,10395],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":403,"column":25,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":403,"endColumn":54},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":403,"column":45,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":403,"endColumn":47,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[12213,12215],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":422,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":422,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12779,12782],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12779,12782],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":423,"column":19,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":423,"endColumn":22,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12804,12807],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12804,12807],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":440,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":440,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13261,13264],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13261,13264],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":442,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":442,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13298,13301],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13298,13301],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":712,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":712,"endColumn":19},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":712,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":712,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":791,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":791,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24796,24799],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24796,24799],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":792,"column":53,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":792,"endColumn":56,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24855,24858],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24855,24858],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":793,"column":13,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":793,"endColumn":16,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24876,24879],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24876,24879],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":796,"column":42,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":796,"endColumn":45,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24990,24993],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24990,24993],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":796,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":796,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25009,25012],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25009,25012],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":796,"column":76,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":796,"endColumn":79,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25024,25027],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25024,25027],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":799,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":799,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25145,25148],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25145,25148],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":799,"column":62,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":799,"endColumn":65,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25172,25175],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25172,25175],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":799,"column":79,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":799,"endColumn":82,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[25189,25192],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[25189,25192],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":25,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview Connection Pooling Service\r\n * @description Database connection management, health monitoring, and optimization\r\n */\r\n\r\nimport { supabase } from '../lib/supabase';\r\nimport { environment } from '../lib/environment';\r\nimport { monitoring } from './monitoringService';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\n// =============================================================================\r\n// TYPES AND INTERFACES\r\n// =============================================================================\r\n\r\n/**\r\n * ConnectionStats Interface\r\n * \r\n * @interface ConnectionStats\r\n */\r\nexport interface ConnectionStats {\r\n  activeConnections: number;\r\n  idleConnections: number;\r\n  totalConnections: number;\r\n  waitingClients: number;\r\n  connectionTime: number;\r\n  queryCount: number;\r\n  errorCount: number;\r\n  lastHealthCheck: Date;\r\n}\r\n\r\n/**\r\n * ConnectionHealth Interface\r\n * \r\n * @interface ConnectionHealth\r\n */\r\nexport interface ConnectionHealth {\r\n  status: 'healthy' | 'degraded' | 'unhealthy';\r\n  responseTime: number;\r\n  errorRate: number;\r\n  uptime: number;\r\n  lastError?: string;\r\n  recommendations: string[];\r\n  timestamp?: Date;\r\n}\r\n\r\n/**\r\n * ConnectionConfig Interface\r\n * \r\n * @interface ConnectionConfig\r\n */\r\nexport interface ConnectionConfig {\r\n  maxConnections: number;\r\n  minConnections: number;\r\n  connectionTimeout: number; // milliseconds\r\n  idleTimeout: number; // milliseconds\r\n  retryAttempts: number;\r\n  retryDelay: number;\r\n  healthCheckInterval: number;\r\n  slowQueryThreshold: number;\r\n}\r\n\r\n/**\r\n * QueryResult Interface\r\n * \r\n * @interface QueryResult\r\n */\r\nexport interface QueryResult<T = any> {\r\n  data: T | null;\r\n  error: string | null;\r\n  executionTime: number;\r\n  connectionUsed: string;\r\n  cached: boolean;\r\n}\r\n\r\n/**\r\n * ConnectionMetrics Interface\r\n * \r\n * @interface ConnectionMetrics\r\n */\r\nexport interface ConnectionMetrics {\r\n  timestamp: Date;\r\n  totalQueries: number;\r\n  successfulQueries: number;\r\n  failedQueries: number;\r\n  avgResponseTime: number;\r\n  maxResponseTime: number;\r\n  minResponseTime: number;\r\n  connectionPoolSize: number;\r\n  activeConnections: number;\r\n}\r\n\r\n// =============================================================================\r\n// CONNECTION POOLING SERVICE CLASS\r\n// =============================================================================\r\n\r\n/**\r\n * ConnectionPoolingService Service\r\n * \r\n * Service class for handling connectionpoolingservice operations\r\n * \r\n * @class ConnectionPoolingService\r\n */\r\nexport class ConnectionPoolingService {\r\n  private static instance: ConnectionPoolingService;\r\n  private readonly config: ConnectionConfig;\r\n  private readonly metrics: ConnectionMetrics[] = [];\r\n  private readonly healthHistory: ConnectionHealth[] = [];\r\n  private isMonitoring = false;\r\n  private healthCheckTimer: NodeJS.Timeout | null = null;\r\n\r\n  private constructor() {\r\n    this.config = {\r\n      maxConnections: 20,\r\n      minConnections: 2,\r\n      connectionTimeout: 30000, // 30 seconds\r\n      idleTimeout: 600000, // 10 minutes\r\n      retryAttempts: 3,\r\n      retryDelay: 1000, // 1 second\r\n      healthCheckInterval: 60000, // 1 minute\r\n      slowQueryThreshold: 5000, // 5 seconds\r\n    };\r\n\r\n    this.startHealthMonitoring();\r\n  }\r\n\r\n  public static getInstance(): ConnectionPoolingService {\r\n    if (!ConnectionPoolingService.instance) {\r\n      ConnectionPoolingService.instance = new ConnectionPoolingService();\r\n    }\r\n    return ConnectionPoolingService.instance;\r\n  }\r\n\r\n  // =============================================================================\r\n  // CONNECTION HEALTH MONITORING\r\n  // =============================================================================\r\n\r\n  /**\r\n   * Start health monitoring\r\n   */\r\n  private startHealthMonitoring(): void {\r\n    if (this.isMonitoring || !environment.features.monitoring) {\r\n      return;\r\n    }\r\n\r\n    this.isMonitoring = true;\r\n\r\n    // Initial health check\r\n    this.performHealthCheck();\r\n\r\n    // Set up periodic health checks\r\n    this.healthCheckTimer = setInterval(() => {\r\n      this.performHealthCheck();\r\n    }, this.config.healthCheckInterval);\r\n\r\n    monitoring.trackEvent({\r\n      type: 'connection_monitoring_started',\r\n      category: 'database',\r\n      action: 'start_monitoring',\r\n      metadata: {\r\n        interval: this.config.healthCheckInterval,\r\n        config: this.config,\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Stop health monitoring\r\n   */\r\n  stopHealthMonitoring(): void {\r\n    if (this.healthCheckTimer) {\r\n      clearInterval(this.healthCheckTimer);\r\n      this.healthCheckTimer = null;\r\n    }\r\n    this.isMonitoring = false;\r\n\r\n    monitoring.trackEvent({\r\n      type: 'connection',\r\n      category: 'connection',\r\n      action: 'connection_monitoring_stopped'\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Perform health check\r\n   */\r\n  private async performHealthCheck(): Promise<void> {\r\n    const startTime = Date.now();\r\n    const health: ConnectionHealth = {\r\n      status: 'healthy',\r\n      responseTime: 0,\r\n      errorRate: 0,\r\n      uptime: Date.now() - (this.healthHistory[0]?.timestamp?.getTime() ?? Date.now()),\r\n      recommendations: [],\r\n    };\r\n\r\n    try {\r\n      // Test basic connection\r\n      const connectionStart = Date.now();\r\n      const { data, error } = await supabase\r\n        .from('members')\r\n        .select('count', { count: 'exact', head: true });\r\n\r\n      health.responseTime = Date.now() - connectionStart;\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      // Get recent metrics for error rate calculation\r\n      const recentMetrics = this.metrics.slice(-10); // Last 10 metrics\r\n      const totalQueries = recentMetrics.reduce((sum, m) => sum + m.totalQueries, 0);\r\n      const failedQueries = recentMetrics.reduce((sum, m) => sum + m.failedQueries, 0);\r\n\r\n      health.errorRate = totalQueries > 0 ? (failedQueries / totalQueries) * 100 : 0;\r\n\r\n      // Determine health status\r\n      if (health.errorRate > 20) {\r\n        health.status = 'unhealthy';\r\n        health.recommendations.push('High error rate detected - check database connectivity');\r\n      } else if (health.errorRate > 5 ?? health.responseTime > 5000) {\r\n        health.status = 'degraded';\r\n        health.recommendations.push('Performance degradation detected');\r\n      }\r\n\r\n      // Add recommendations based on response time\r\n      if (health.responseTime > 10000) {\r\n        health.recommendations.push('Connection response time is very slow');\r\n      } else if (health.responseTime > 5000) {\r\n        health.recommendations.push('Connection response time is elevated');\r\n      }\r\n\r\n      // Add recommendations based on uptime\r\n      if (health.uptime < 300000) {\r\n        // Less than 5 minutes\r\n        health.recommendations.push('Service recently started - monitor closely');\r\n      }\r\n    } catch (error) {\r\n      health.status = 'unhealthy';\r\n      health.lastError = (error as Error).message;\r\n      health.recommendations.push('Connection failed - check database configuration');\r\n      health.recommendations.push('Verify Supabase credentials and network connectivity');\r\n\r\n      monitoring.trackError('connection_health_check_failed', {\r\n        error: (error as Error).message,\r\n        timestamp: new Date(),\r\n      });\r\n    }\r\n\r\n    // Store health history (keep last 100 entries)\r\n    this.healthHistory.push(health);\r\n    if (this.healthHistory.length > 100) {\r\n      this.healthHistory.shift();\r\n    }\r\n\r\n    // Track health metrics\r\n    monitoring.trackEvent({\r\n      type: 'connection_health_check',\r\n      category: 'database',\r\n      action: 'health_check',\r\n      metadata: {\r\n        status: health.status,\r\n        responseTime: health.responseTime,\r\n        errorRate: health.errorRate,\r\n        recommendations: health.recommendations.length,\r\n      },\r\n    });\r\n\r\n    // Alert on unhealthy status\r\n    if (health.status === 'unhealthy') {\r\n      monitoring.trackEvent({\r\n        type: 'connection_unhealthy_alert',\r\n        category: 'database',\r\n        action: 'alert',\r\n        metadata: {\r\n          responseTime: health.responseTime,\r\n          errorRate: health.errorRate,\r\n          lastError: health.lastError,\r\n          recommendations: health.recommendations,\r\n        },\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current health status\r\n   */\r\n  getHealthStatus(): ConnectionHealth | null {\r\n    return this.healthHistory[this.healthHistory.length - 1] || null;\r\n  }\r\n\r\n  /**\r\n   * Get health history\r\n   */\r\n  getHealthHistory(hours = 24): ConnectionHealth[] {\r\n    const cutoff = Date.now() - hours * 60 * 60 * 1000;\r\n    return this.healthHistory.filter((h) => h.timestamp && h.timestamp.getTime() >= cutoff);\r\n  }\r\n\r\n  // =============================================================================\r\n  // CONNECTION MANAGEMENT\r\n  // =============================================================================\r\n\r\n  /**\r\n   * Execute query with connection management\r\n   */\r\n  async executeQuery<T = any>(\r\n    operation: () => Promise<{ data: T | null; error: any }>,\r\n    options: {\r\n      retryOnFailure?: boolean;\r\n      timeout?: number;\r\n      priority?: 'low' | 'normal' | 'high';\r\n      description?: string;\r\n    } = {},\r\n  ): Promise<QueryResult<T>> {\r\n    const startTime = Date.now();\r\n    const queryResult: QueryResult<T> = {\r\n      data: null,\r\n      error: null,\r\n      executionTime: 0,\r\n      connectionUsed: 'default',\r\n      cached: false,\r\n    };\r\n\r\n    const maxRetries = options.retryOnFailure !== false ? this.config.retryAttempts : 1;\r\n    let lastError: any = null;\r\n\r\n    for (let attempt = 1; attempt <= maxRetries; attempt++) {\r\n      try {\r\n        // Check connection health before query\r\n        const health = this.getHealthStatus();\r\n        if (health?.status === 'unhealthy' && attempt === 1) {\r\n          // Wait a bit for potential recovery\r\n          await new Promise((resolve) => setTimeout(resolve, 1000));\r\n        }\r\n\r\n        // Set timeout for the operation\r\n        const timeout = options.timeout ?? this.config.connectionTimeout;\r\n        const timeoutPromise = new Promise((_, reject) => {\r\n          setTimeout(() => {\r\n            reject(new Error('Query timeout'));\r\n          }, timeout);\r\n        });\r\n\r\n        const operationPromise = operation();\r\n\r\n        const result = (await Promise.race([operationPromise, timeoutPromise])) as {\r\n          data: T | null;\r\n          error: any;\r\n        };\r\n\r\n        queryResult.executionTime = Date.now() - startTime;\r\n        queryResult.data = result.data;\r\n        queryResult.error = result.error;\r\n\r\n        // Track successful query\r\n        this.trackQueryMetrics(true, queryResult.executionTime, options.description);\r\n\r\n        // Check for slow queries\r\n        if (queryResult.executionTime > this.config.slowQueryThreshold) {\r\n          monitoring.trackEvent({\r\n            type: 'slow_query_detected',\r\n            category: 'database',\r\n            action: 'performance_alert',\r\n            metadata: {\r\n              executionTime: queryResult.executionTime,\r\n              threshold: this.config.slowQueryThreshold,\r\n              attempt,\r\n            },\r\n            description: options.description,\r\n          });\r\n        }\r\n\r\n        return queryResult;\r\n      } catch (error) {\r\n        lastError = error;\r\n        queryResult.executionTime = Date.now() - startTime;\r\n\r\n        // Track failed attempt\r\n        this.trackQueryMetrics(false, queryResult.executionTime, options.description);\r\n\r\n        // If this is not the last attempt, wait before retrying\r\n        if (attempt < maxRetries) {\r\n          const delay = this.config.retryDelay * Math.pow(2, attempt - 1); // Exponential backoff\r\n          await new Promise((resolve) => setTimeout(resolve, delay));\r\n\r\n          monitoring.trackEvent({\r\n            type: 'query_retry',\r\n            category: 'database',\r\n            action: 'retry_attempt',\r\n            metadata: {\r\n              attempt,\r\n              maxRetries,\r\n              delay,\r\n              error: (error as Error).message,\r\n              description: options.description,\r\n            },\r\n          });\r\n        }\r\n      }\r\n    }\r\n\r\n    // All retries failed\r\n    queryResult.error = (lastError as Error)?.message ?? 'Query execution failed';\r\n    queryResult.executionTime = Date.now() - startTime;\r\n\r\n    // Track final failure\r\n    this.trackQueryMetrics(false, queryResult.executionTime, options.description);\r\n\r\n    monitoring.trackError('query_execution_failed', {\r\n      attempts: maxRetries,\r\n      executionTime: queryResult.executionTime,\r\n      error: queryResult.error,\r\n      description: options.description,\r\n    });\r\n\r\n    return queryResult;\r\n  }\r\n\r\n  /**\r\n   * Execute Supabase query with connection management\r\n   */\r\n  async executeSupabaseQuery<T = any>(\r\n    queryBuilder: any,\r\n    options: {\r\n      retryOnFailure?: boolean;\r\n      timeout?: number;\r\n      priority?: 'low' | 'normal' | 'high';\r\n      description?: string;\r\n    } = {},\r\n  ): Promise<QueryResult<T>> {\r\n    return this.executeQuery(async () => {\r\n      const result = await queryBuilder;\r\n      return { data: result.data, error: result.error };\r\n    }, options);\r\n  }\r\n\r\n  /**\r\n   * Execute raw SQL with connection management\r\n   */\r\n  async executeRawSQL<T = any>(\r\n    sql: string,\r\n    params: any[] = [],\r\n    options: {\r\n      retryOnFailure?: boolean;\r\n      timeout?: number;\r\n      priority?: 'low' | 'normal' | 'high';\r\n      description?: string;\r\n    } = {},\r\n  ): Promise<QueryResult<T>> {\r\n    return this.executeQuery(async () => {\r\n      const { data, error } = await supabase.rpc('execute_raw_sql', {\r\n        sql_query: sql,\r\n        parameters: params,\r\n      });\r\n      return { data, error };\r\n    }, options);\r\n  }\r\n\r\n  // =============================================================================\r\n  // CONNECTION STATISTICS AND METRICS\r\n  // =============================================================================\r\n\r\n  /**\r\n   * Get connection statistics\r\n   */\r\n  async getConnectionStats(): Promise<ConnectionStats> {\r\n    try {\r\n      const { data, error } = await supabase.rpc('get_connection_stats');\r\n\r\n      if (error || !data) {\r\n        // Fallback data\r\n        return {\r\n          activeConnections: 5,\r\n          idleConnections: 3,\r\n          totalConnections: 8,\r\n          waitingClients: 0,\r\n          connectionTime: 150,\r\n          queryCount: 1000,\r\n          errorCount: 5,\r\n          lastHealthCheck: new Date(),\r\n        };\r\n      }\r\n\r\n      return {\r\n        activeConnections: data.active_connections ?? 0,\r\n        idleConnections: data.idle_connections ?? 0,\r\n        totalConnections: data.total_connections ?? 0,\r\n        waitingClients: data.waiting_clients ?? 0,\r\n        connectionTime: data.connection_time ?? 0,\r\n        queryCount: data.query_count ?? 0,\r\n        errorCount: data.error_count ?? 0,\r\n        lastHealthCheck: new Date(),\r\n      };\r\n    } catch (error) {\r\n      logger.warn('Failed to get connection stats:', error);\r\n\r\n      // Return basic fallback stats\r\n      return {\r\n        activeConnections: 0,\r\n        idleConnections: 0,\r\n        totalConnections: 0,\r\n        waitingClients: 0,\r\n        connectionTime: 0,\r\n        queryCount: 0,\r\n        errorCount: 1,\r\n        lastHealthCheck: new Date(),\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Track query metrics\r\n   */\r\n  private trackQueryMetrics(success: boolean, executionTime: number, description?: string): void {\r\n    const now = new Date();\r\n    const existing = this.metrics.find(\r\n      (m) => m.timestamp.getTime() > now.getTime() - 60000, // Same minute\r\n    );\r\n\r\n    if (existing) {\r\n      existing.totalQueries++;\r\n      if (success) {\r\n        existing.successfulQueries++;\r\n      } else {\r\n        existing.failedQueries++;\r\n      }\r\n\r\n      // Update response time statistics\r\n      const totalResponseTime =\r\n        existing.avgResponseTime * (existing.totalQueries - 1) + executionTime;\r\n      existing.avgResponseTime = totalResponseTime / existing.totalQueries;\r\n      existing.maxResponseTime = Math.max(existing.maxResponseTime, executionTime);\r\n      existing.minResponseTime = Math.min(existing.minResponseTime, executionTime);\r\n    } else {\r\n      this.metrics.push({\r\n        timestamp: now,\r\n        totalQueries: 1,\r\n        successfulQueries: success ? 1 : 0,\r\n        failedQueries: success ? 0 : 1,\r\n        avgResponseTime: executionTime,\r\n        maxResponseTime: executionTime,\r\n        minResponseTime: executionTime,\r\n        connectionPoolSize: 10, // Mock value\r\n        activeConnections: 3, // Mock value\r\n      });\r\n    }\r\n\r\n    // Keep only last 1000 metrics\r\n    if (this.metrics.length > 1000) {\r\n      this.metrics.shift();\r\n    }\r\n\r\n    // Track to monitoring service\r\n    monitoring.trackApiCall(\r\n      success ? 'query_success' : 'query_failure',\r\n      'POST',\r\n      executionTime,\r\n      success ? 200 : 500,\r\n      {\r\n        description,\r\n        connectionPoolSize: 10,\r\n        activeConnections: 3,\r\n      },\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get performance metrics\r\n   */\r\n  getPerformanceMetrics(hours = 1): {\r\n    totalQueries: number;\r\n    successRate: number;\r\n    avgResponseTime: number;\r\n    errorRate: number;\r\n    peakResponseTime: number;\r\n    queriesPerMinute: number;\r\n  } {\r\n    const cutoff = Date.now() - hours * 60 * 60 * 1000;\r\n    const recentMetrics = this.metrics.filter((m) => m.timestamp.getTime() >= cutoff);\r\n\r\n    if (recentMetrics.length === 0) {\r\n      return {\r\n        totalQueries: 0,\r\n        successRate: 0,\r\n        avgResponseTime: 0,\r\n        errorRate: 0,\r\n        peakResponseTime: 0,\r\n        queriesPerMinute: 0,\r\n      };\r\n    }\r\n\r\n    const totalQueries = recentMetrics.reduce((sum, m) => sum + m.totalQueries, 0);\r\n    const successfulQueries = recentMetrics.reduce((sum, m) => sum + m.successfulQueries, 0);\r\n    const avgResponseTime =\r\n      recentMetrics.reduce((sum, m) => sum + m.avgResponseTime, 0) / recentMetrics.length;\r\n    const peakResponseTime = Math.max(...recentMetrics.map((m) => m.maxResponseTime));\r\n    const queriesPerMinute = totalQueries / (hours * 60);\r\n\r\n    return {\r\n      totalQueries,\r\n      successRate: totalQueries > 0 ? (successfulQueries / totalQueries) * 100 : 0,\r\n      avgResponseTime,\r\n      errorRate: totalQueries > 0 ? ((totalQueries - successfulQueries) / totalQueries) * 100 : 0,\r\n      peakResponseTime,\r\n      queriesPerMinute,\r\n    };\r\n  }\r\n\r\n  // =============================================================================\r\n  // CONNECTION OPTIMIZATION\r\n  // =============================================================================\r\n\r\n  /**\r\n   * Optimize connection pool settings\r\n   */\r\n  async optimizeConnectionPool(): Promise<{\r\n    recommendations: string[];\r\n    suggestedConfig: Partial<ConnectionConfig>;\r\n  }> {\r\n    const stats = await this.getConnectionStats();\r\n    const metrics = this.getPerformanceMetrics(1);\r\n    const health = this.getHealthStatus();\r\n\r\n    const recommendations: string[] = [];\r\n    const suggestedConfig: Partial<ConnectionConfig> = {};\r\n\r\n    // Analyze connection utilization\r\n    const utilizationRate =\r\n      stats.totalConnections > 0 ? stats.activeConnections / stats.totalConnections : 0;\r\n\r\n    if (utilizationRate > 0.8) {\r\n      recommendations.push('High connection utilization - consider increasing max connections');\r\n      suggestedConfig.maxConnections = Math.min(this.config.maxConnections * 1.5, 50);\r\n    } else if (utilizationRate < 0.2 && stats.totalConnections > this.config.minConnections) {\r\n      recommendations.push('Low connection utilization - consider decreasing max connections');\r\n      suggestedConfig.maxConnections = Math.max(\r\n        this.config.maxConnections * 0.8,\r\n        this.config.minConnections,\r\n      );\r\n    }\r\n\r\n    // Analyze response times\r\n    if (metrics.avgResponseTime > 2000) {\r\n      recommendations.push('High average response time - check query optimization');\r\n      suggestedConfig.connectionTimeout = Math.max(this.config.connectionTimeout, 60000);\r\n    }\r\n\r\n    // Analyze error rates\r\n    if (metrics.errorRate > 10) {\r\n      recommendations.push('High error rate - check connection stability');\r\n      suggestedConfig.retryAttempts = Math.min(this.config.retryAttempts + 1, 5);\r\n    }\r\n\r\n    // Analyze health status\r\n    if (health?.status === 'unhealthy') {\r\n      recommendations.push('Connection health is poor - check database connectivity');\r\n      suggestedConfig.healthCheckInterval = Math.max(this.config.healthCheckInterval / 2, 30000);\r\n    }\r\n\r\n    return { recommendations, suggestedConfig };\r\n  }\r\n\r\n  /**\r\n   * Test connection quality\r\n   */\r\n  async testConnectionQuality(): Promise<{\r\n    quality: 'excellent' | 'good' | 'fair' | 'poor';\r\n    score: number;\r\n    factors: { name: string; score: number; weight: number }[];\r\n  }> {\r\n    const tests = [\r\n      { name: 'Response Time', weight: 0.4, test: async () => await this.testResponseTime() },\r\n      { name: 'Error Rate', weight: 0.3, test: async () => await this.testErrorRate() },\r\n      { name: 'Connection Stability', weight: 0.2, test: async () => await this.testStability() },\r\n      { name: 'Throughput', weight: 0.1, test: async () => await this.testThroughput() },\r\n    ];\r\n\r\n    const results = await Promise.all(\r\n      tests.map(async ({ name, weight, test }) => ({\r\n        name,\r\n        score: await test(),\r\n        weight,\r\n      })),\r\n    );\r\n\r\n    const totalScore = results.reduce((sum, result) => sum + result.score * result.weight, 0);\r\n\r\n    let quality: 'excellent' | 'good' | 'fair' | 'poor';\r\n    if (totalScore >= 0.8) quality = 'excellent';\r\n    else if (totalScore >= 0.6) quality = 'good';\r\n    else if (totalScore >= 0.4) quality = 'fair';\r\n    else quality = 'poor';\r\n\r\n    return { quality, score: totalScore, factors: results };\r\n  }\r\n\r\n  /**\r\n   * Test response time\r\n   */\r\n  private async testResponseTime(): Promise<number> {\r\n    const startTime = Date.now();\r\n\r\n    try {\r\n      await supabase.from('members').select('count', { count: 'exact', head: true });\r\n      const responseTime = Date.now() - startTime;\r\n\r\n      // Score: 1.0 for < 500ms, 0.5 for < 2000ms, 0.0 for > 5000ms\r\n      if (responseTime < 500) return 1.0;\r\n      if (responseTime < 2000) return 0.7;\r\n      if (responseTime < 5000) return 0.4;\r\n      return 0.1;\r\n    } catch (error) {\r\n      return 0.0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Test error rate\r\n   */\r\n  private async testErrorRate(): Promise<number> {\r\n    const metrics = this.getPerformanceMetrics(0.1); // Last 6 minutes\r\n    const errorRate = metrics.errorRate / 100; // Convert to 0-1 scale\r\n\r\n    // Score: 1.0 for < 1% errors, 0.5 for < 5% errors, 0.0 for > 10% errors\r\n    if (errorRate < 0.01) return 1.0;\r\n    if (errorRate < 0.05) return 0.7;\r\n    if (errorRate < 0.1) return 0.4;\r\n    return 0.1;\r\n  }\r\n\r\n  /**\r\n   * Test connection stability\r\n   */\r\n  private async testStability(): Promise<number> {\r\n    const healthHistory = this.getHealthHistory(1); // Last hour\r\n    const unhealthyCount = healthHistory.filter((h) => h.status === 'unhealthy').length;\r\n    const stability = 1 - unhealthyCount / healthHistory.length;\r\n\r\n    return Math.max(0, stability);\r\n  }\r\n\r\n  /**\r\n   * Test throughput\r\n   */\r\n  private async testThroughput(): Promise<number> {\r\n    const metrics = this.getPerformanceMetrics(0.1); // Last 6 minutes\r\n    const {queriesPerMinute} = metrics;\r\n\r\n    // Score based on queries per minute\r\n    if (queriesPerMinute > 100) return 1.0;\r\n    if (queriesPerMinute > 50) return 0.8;\r\n    if (queriesPerMinute > 20) return 0.6;\r\n    if (queriesPerMinute > 10) return 0.4;\r\n    return 0.2;\r\n  }\r\n\r\n  /**\r\n   * Force connection refresh\r\n   */\r\n  async refreshConnections(): Promise<{ success: boolean; message: string }> {\r\n    try {\r\n      // This is a conceptual operation - Supabase handles connection pooling internally\r\n      // In a real implementation, you might want to close idle connections or refresh the pool\r\n\r\n      monitoring.trackEvent({\r\n      type: 'connection',\r\n      category: 'connection',\r\n      action: 'connection_refresh_requested'\r\n    });\r\n\r\n      return {\r\n        success: true,\r\n        message: 'Connection refresh completed (Supabase handles connection pooling automatically)',\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        message: `Connection refresh failed: ${(error as Error).message}`,\r\n      };\r\n    }\r\n  }\r\n}\r\n\r\n// =============================================================================\r\n// GLOBAL INSTANCE AND UTILITIES\r\n// =============================================================================\r\n\r\nexport const connectionPoolingService = ConnectionPoolingService.getInstance();\r\n\r\n// Utility functions for easy access\r\nexport const executeQuery = <T = any>(\r\n  operation: () => Promise<{ data: T | null; error: any }>,\r\n  options?: any,\r\n) => connectionPoolingService.executeQuery(operation, options);\r\n\r\nexport const executeSupabaseQuery = <T = any>(queryBuilder: any, options?: any) =>\r\n  connectionPoolingService.executeSupabaseQuery<T>(queryBuilder, options);\r\n\r\nexport const executeRawSQL = <T = any>(sql: string, params?: any[], options?: any) =>\r\n  connectionPoolingService.executeRawSQL<T>(sql, params, options);\r\n\r\nexport const getConnectionStats = () => connectionPoolingService.getConnectionStats();\r\nexport const getConnectionHealth = () => connectionPoolingService.getHealthStatus();\r\nexport const getConnectionMetrics = (hours?: number) =>\r\n  connectionPoolingService.getPerformanceMetrics(hours);\r\nexport const optimizeConnectionPool = () => connectionPoolingService.optimizeConnectionPool();\r\nexport const testConnectionQuality = () => connectionPoolingService.testConnectionQuality();\r\nexport const refreshConnections = () => connectionPoolingService.refreshConnections();\r\n\r\nexport default ConnectionPoolingService;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\dataProcessor.ts","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":46,"column":29,"nodeType":"MemberExpression","endLine":46,"endColumn":40},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'field' is defined but never used.","line":113,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":113,"endColumn":60},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'field' is defined but never used. Allowed unused args must match /^_/u.","line":113,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":113,"endColumn":60},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":123,"column":39,"nodeType":"MemberExpression","endLine":123,"endColumn":50},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":260,"column":24,"nodeType":"MemberExpression","endLine":260,"endColumn":67},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":262,"column":11,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":262,"endColumn":20},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":273,"column":11,"nodeType":"MemberExpression","endLine":273,"endColumn":22},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":274,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":274,"endColumn":23},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":274,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":274,"endColumn":23},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":276,"column":11,"nodeType":"MemberExpression","endLine":276,"endColumn":22},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":288,"column":26,"nodeType":"MemberExpression","endLine":288,"endColumn":68},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":288,"column":69,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":288,"endColumn":71,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8614,8616],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":289,"column":11,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":289,"endColumn":20},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":289,"column":12,"nodeType":"MemberExpression","endLine":289,"endColumn":20},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":290,"column":9,"nodeType":"MemberExpression","endLine":290,"endColumn":17},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":292,"column":7,"nodeType":"MemberExpression","endLine":292,"endColumn":15},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":310,"column":42,"nodeType":"MemberExpression","endLine":310,"endColumn":57},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":317,"column":36,"nodeType":"MemberExpression","endLine":317,"endColumn":51},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":318,"column":11,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":318,"endColumn":21},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":318,"column":12,"nodeType":"MemberExpression","endLine":318,"endColumn":21},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":319,"column":9,"nodeType":"MemberExpression","endLine":319,"endColumn":18},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":321,"column":7,"nodeType":"MemberExpression","endLine":321,"endColumn":16},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":331,"column":25,"nodeType":"MemberExpression","endLine":331,"endColumn":38},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":332,"column":53,"nodeType":"MemberExpression","endLine":332,"endColumn":69},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":362,"column":69,"nodeType":"MemberExpression","endLine":362,"endColumn":114},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":363,"column":71,"nodeType":"MemberExpression","endLine":363,"endColumn":116},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":386,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":386,"endColumn":21},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":386,"column":16,"nodeType":null,"messageId":"unusedVar","endLine":386,"endColumn":21},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":408,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":408,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12332,12334],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":428,"column":9,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":428,"endColumn":17},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":435,"column":57,"nodeType":"MemberExpression","endLine":435,"endColumn":68},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":437,"column":57,"nodeType":"MemberExpression","endLine":437,"endColumn":68},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":441,"column":54,"nodeType":"MemberExpression","endLine":441,"endColumn":65},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":443,"column":54,"nodeType":"MemberExpression","endLine":443,"endColumn":65},{"ruleId":"@typescript-eslint/switch-exhaustiveness-check","severity":2,"message":"Switch is not exhaustive. Cases not matched: \"stable\"","line":463,"column":13,"nodeType":"Identifier","messageId":"switchIsNotExhaustive","endLine":463,"endColumn":18,"suggestions":[{"messageId":"addMissingCases","fix":{"range":[14411,14411],"text":"case \"stable\": { throw new Error('Not implemented yet: \"stable\" case') }\n      "},"desc":"Add branches for missing cases."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":477,"column":16,"nodeType":"TSAsExpression","messageId":"alwaysTruthy","endLine":477,"endColumn":75},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":489,"column":9,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":489,"endColumn":17},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":520,"column":54,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":520,"endColumn":56,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16533,16535],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":525,"column":63,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":525,"endColumn":65,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16845,16847],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":558,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":558,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[18122,18124],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":559,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":559,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[18198,18200],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":568,"column":55,"nodeType":"MemberExpression","endLine":568,"endColumn":66},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":570,"column":56,"nodeType":"MemberExpression","endLine":570,"endColumn":67},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":579,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":579,"endColumn":19},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":579,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":579,"endColumn":19},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":601,"column":12,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":601,"endColumn":82},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":606,"column":12,"nodeType":"MemberExpression","endLine":606,"endColumn":43},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":610,"column":48,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":610,"endColumn":51,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[19922,19925],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[19922,19925],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":638,"column":11,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":638,"endColumn":16},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":642,"column":35,"nodeType":"MemberExpression","endLine":642,"endColumn":46},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":642,"column":59,"nodeType":"MemberExpression","endLine":642,"endColumn":70},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":673,"column":7,"nodeType":"MemberExpression","endLine":673,"endColumn":17},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":673,"column":20,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":673,"endColumn":28},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":673,"column":20,"nodeType":"MemberExpression","endLine":673,"endColumn":27},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":680,"column":9,"nodeType":"MemberExpression","endLine":680,"endColumn":19},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":680,"column":22,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":680,"endColumn":30},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":680,"column":22,"nodeType":"MemberExpression","endLine":680,"endColumn":29},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":689,"column":46,"nodeType":"MemberExpression","endLine":689,"endColumn":57},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":698,"column":39,"nodeType":"MemberExpression","endLine":698,"endColumn":50},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":698,"column":74,"nodeType":"MemberExpression","endLine":698,"endColumn":85},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":723,"column":31,"nodeType":"MemberExpression","endLine":723,"endColumn":42},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":737,"column":18,"nodeType":"MemberExpression","endLine":737,"endColumn":33},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":738,"column":18,"nodeType":"MemberExpression","endLine":738,"endColumn":33},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":739,"column":20,"nodeType":"Identifier","messageId":"neverNullish","endLine":739,"endColumn":22},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":739,"column":32,"nodeType":"Identifier","messageId":"neverNullish","endLine":739,"endColumn":34},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":740,"column":27,"nodeType":"Identifier","messageId":"neverNullish","endLine":740,"endColumn":29},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":741,"column":27,"nodeType":"Identifier","messageId":"neverNullish","endLine":741,"endColumn":29},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":747,"column":23,"nodeType":"MemberExpression","endLine":747,"endColumn":34},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":759,"column":15,"nodeType":"Identifier","messageId":"neverNullish","endLine":759,"endColumn":17},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":760,"column":15,"nodeType":"Identifier","messageId":"neverNullish","endLine":760,"endColumn":17},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":768,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":768,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24784,24787],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24784,24787],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":66,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Veri ─░┼şleme Motoru - Raporlama Sistemi\r\n\r\nimport type {\r\n  MetricData,\r\n  TimeSeriesData,\r\n  CategoryData,\r\n  ComparisonData,\r\n  ReportFilters,\r\n  DateRange,\r\n} from '../types/reporting';\r\n\r\n// Enhanced Strategy pattern for aggregation operations\r\ninterface AggregationStrategy<T = Record<string, unknown>> {\r\n  aggregate: (items: T[], field?: string) => number;\r\n  validate: (items: T[], field?: string) => boolean;\r\n  getName: () => string;\r\n  getDescription: () => string;\r\n  getSupportedTypes: () => string[];\r\n}\r\n\r\nabstract class BaseAggregationStrategy implements AggregationStrategy {\r\n  abstract aggregate(items: Record<string, unknown>[], field?: string): number;\r\n  abstract getName(): string;\r\n  abstract getDescription(): string;\r\n\r\n  getSupportedTypes(): string[] {\r\n    return ['number'];\r\n  }\r\n\r\n  validate(items: Record<string, unknown>[], field?: string): boolean {\r\n    if (!Array.isArray(items) || items.length === 0) {\r\n      return false;\r\n    }\r\n\r\n    // For numeric strategies, validate that we have numeric values\r\n    if (this.getSupportedTypes().includes('number')) {\r\n      const values = this.extractValues(items, field);\r\n      return values.length > 0;\r\n    }\r\n\r\n    return true;\r\n  }\r\n\r\n  protected extractValues(items: Record<string, unknown>[], field?: string): number[] {\r\n    const values: (number | null)[] = items.map((item) => {\r\n      const value = field ? item[field] : item.value;\r\n      return typeof value === 'number' && !isNaN(value) ? value : null;\r\n    });\r\n\r\n    return values.filter((val): val is number => val !== null);\r\n  }\r\n\r\n  protected handleError(operation: string, error: unknown): never {\r\n    const message = error instanceof Error ? error.message : 'Unknown error';\r\n    throw new Error(`${this.getName()} strategy failed during ${operation}: ${message}`);\r\n  }\r\n}\r\n\r\nclass SumStrategy extends BaseAggregationStrategy {\r\n  getName(): string {\r\n    return 'sum';\r\n  }\r\n\r\n  getDescription(): string {\r\n    return 'Calculates the sum of all values';\r\n  }\r\n\r\n  aggregate(items: Record<string, unknown>[], field?: string): number {\r\n    try {\r\n      if (!this.validate(items, field)) return 0;\r\n      const values = this.extractValues(items, field);\r\n      return values.reduce((sum, value) => sum + value, 0);\r\n    } catch (error) {\r\n      this.handleError('aggregate', error);\r\n    }\r\n  }\r\n}\r\n\r\nclass AverageStrategy extends BaseAggregationStrategy {\r\n  getName(): string {\r\n    return 'avg';\r\n  }\r\n\r\n  getDescription(): string {\r\n    return 'Calculates the average of all values';\r\n  }\r\n\r\n  aggregate(items: Record<string, unknown>[], field?: string): number {\r\n    try {\r\n      if (!this.validate(items, field)) return 0;\r\n      const values = this.extractValues(items, field);\r\n      if (values.length === 0) return 0;\r\n      return values.reduce((sum, value) => sum + value, 0) / values.length;\r\n    } catch (error) {\r\n      this.handleError('aggregate', error);\r\n    }\r\n  }\r\n}\r\n\r\nclass CountStrategy extends BaseAggregationStrategy {\r\n  getName(): string {\r\n    return 'count';\r\n  }\r\n\r\n  getDescription(): string {\r\n    return 'Counts the number of items';\r\n  }\r\n\r\n  override getSupportedTypes(): string[] {\r\n    return ['any']; // Count works with any data type\r\n  }\r\n\r\n  override validate(items: Record<string, unknown>[], field?: string): boolean {\r\n    return Array.isArray(items);\r\n  }\r\n\r\n  aggregate(items: Record<string, unknown>[], field?: string): number {\r\n    try {\r\n      if (!this.validate(items, field)) return 0;\r\n\r\n      // If field is specified, count non-null values for that field\r\n      if (field) {\r\n        return items.filter((item) => item[field] != null).length;\r\n      }\r\n\r\n      return items.length;\r\n    } catch (error) {\r\n      this.handleError('aggregate', error);\r\n    }\r\n  }\r\n}\r\n\r\nclass MinStrategy extends BaseAggregationStrategy {\r\n  getName(): string {\r\n    return 'min';\r\n  }\r\n\r\n  getDescription(): string {\r\n    return 'Finds the minimum value';\r\n  }\r\n\r\n  aggregate(items: Record<string, unknown>[], field?: string): number {\r\n    try {\r\n      if (!this.validate(items, field)) return 0;\r\n      const values = this.extractValues(items, field);\r\n      return values.length > 0 ? Math.min(...values) : 0;\r\n    } catch (error) {\r\n      this.handleError('aggregate', error);\r\n    }\r\n  }\r\n}\r\n\r\nclass MaxStrategy extends BaseAggregationStrategy {\r\n  getName(): string {\r\n    return 'max';\r\n  }\r\n\r\n  getDescription(): string {\r\n    return 'Finds the maximum value';\r\n  }\r\n\r\n  aggregate(items: Record<string, unknown>[], field?: string): number {\r\n    try {\r\n      if (!this.validate(items, field)) return 0;\r\n      const values = this.extractValues(items, field);\r\n      return values.length > 0 ? Math.max(...values) : 0;\r\n    } catch (error) {\r\n      this.handleError('aggregate', error);\r\n    }\r\n  }\r\n}\r\n\r\nexport class DataProcessor {\r\n  // Configuration constants\r\n  private static readonly CONFIG = {\r\n    TREND_THRESHOLD: 5, // Percentage change threshold for trend detection\r\n    DEFAULT_SAMPLE_SIZE: 1000,\r\n    IQR_MULTIPLIER: 1.5,\r\n    MIN_OUTLIER_DETECTION_SIZE: 4, // Minimum data points needed for outlier detection\r\n    MIN_TREND_CALCULATION_SIZE: 2, // Minimum data points needed for trend calculation\r\n    COLOR_PALETTE: [\r\n      '#3B82F6',\r\n      '#EF4444',\r\n      '#10B981',\r\n      '#F59E0B',\r\n      '#8B5CF6',\r\n      '#EC4899',\r\n      '#06B6D4',\r\n      '#84CC16',\r\n    ],\r\n    METRIC_ICONS: {\r\n      total_donations: 'heart',\r\n      total_members: 'users',\r\n      total_beneficiaries: 'user-check',\r\n      total_aid: 'hand-heart',\r\n      revenue: 'dollar-sign',\r\n      expenses: 'credit-card',\r\n      profit: 'trending-up',\r\n    },\r\n    TREND_COLORS: {\r\n      up: '#10B981',\r\n      down: '#EF4444',\r\n      stable: '#6B7280',\r\n    },\r\n  } as const;\r\n\r\n  // Centralized error handling\r\n  private static handleError(context: string, error: unknown, fallback?: unknown): never | unknown {\r\n    const message = error instanceof Error ? error.message : 'Unknown error';\r\n    // Error logging removed for production\r\n\r\n    if (fallback !== undefined) {\r\n      // Warning logging removed for production\r\n      return fallback;\r\n    }\r\n\r\n    throw new Error(`${context} failed: ${message}`);\r\n  }\r\n\r\n  private static validateInput<T extends Record<string, unknown>>(data: T[], context: string): void {\r\n    if (!Array.isArray(data)) {\r\n      throw new Error(`${context}: Data must be an array`);\r\n    }\r\n  }\r\n\r\n  private static readonly aggregationStrategies = {\r\n    sum: new SumStrategy(),\r\n    avg: new AverageStrategy(),\r\n    count: new CountStrategy(),\r\n    min: new MinStrategy(),\r\n    max: new MaxStrategy(),\r\n  } as const;\r\n\r\n  // Veri aggregation i┼şlemleri with improved type safety\r\n  static aggregateData<T extends Record<string, unknown>>(\r\n    data: T[],\r\n    groupBy: keyof T,\r\n    aggregationType: keyof typeof DataProcessor.aggregationStrategies = 'sum',\r\n    valueField?: keyof T,\r\n  ): Record<string, number> {\r\n    try {\r\n      // Use validateInput helper\r\n      this.validateInput(data, 'aggregateData');\r\n\r\n      if (data.length === 0) {\r\n        return {};\r\n      }\r\n\r\n      if (!groupBy || typeof groupBy !== 'string') {\r\n        throw new Error('GroupBy field is required and must be a string');\r\n      }\r\n\r\n      // Validate that groupBy field exists in data\r\n      const hasGroupByField = data.some((item) => item.hasOwnProperty(groupBy));\r\n      if (!hasGroupByField) {\r\n        throw new Error(`GroupBy field '${String(groupBy)}' not found in data`);\r\n      }\r\n\r\n      const grouped = this.groupDataBy(data, String(groupBy));\r\n      const strategy = this.aggregationStrategies[aggregationType];\r\n\r\n      if (!strategy) {\r\n        throw new Error(\r\n          `Unsupported aggregation type: ${aggregationType}. Supported types: ${Object.keys(this.aggregationStrategies).join(', ')}`,\r\n        );\r\n      }\r\n\r\n      const result: Record<string, number> = {};\r\n      const valueFieldStr = valueField ? String(valueField) : undefined;\r\n\r\n      Object.entries(grouped).forEach(([key, items]) => {\r\n        try {\r\n          result[key] = strategy.aggregate(items, valueFieldStr);\r\n        } catch (error) {\r\n          // Warning logging removed for production\r\n          result[key] = 0; // Default value for failed aggregations\r\n        }\r\n      });\r\n\r\n      return result;\r\n    } catch (error) {\r\n      return this.handleError('Data aggregation', error, {});\r\n    }\r\n  }\r\n\r\n  private static groupDataBy<T>(data: T[], groupBy: string): Record<string, T[]> {\r\n    return data.reduce<Record<string, T[]>>((acc, item) => {\r\n      const key = String((item as Record<string, unknown>)[groupBy] || 'unknown');\r\n      if (!acc[key]) {\r\n        acc[key] = [];\r\n      }\r\n      acc[key].push(item);\r\n      return acc;\r\n    }, {});\r\n  }\r\n\r\n  // Zaman serisi verisi olu┼şturma\r\n  static generateTimeSeries<T extends Record<string, unknown>>(\r\n    data: T[],\r\n    dateField: string,\r\n    valueField: string,\r\n    dateRange?: DateRange,\r\n  ): TimeSeriesData[] {\r\n    this.validateInput(data, 'generateTimeSeries');\r\n    let filteredData = data;\r\n\r\n    // Tarih filtresi uygula\r\n    if (dateRange) {\r\n      filteredData = data.filter((item) => {\r\n        const itemDate = new Date(String(item[dateField]));\r\n        return itemDate >= dateRange.start && itemDate <= dateRange.end;\r\n      });\r\n    }\r\n\r\n    // Tarihe g├Âre grupla\r\n    const grouped = filteredData.reduce((acc: Record<string, T[]>, item) => {\r\n      const date = new Date(String(item[dateField])).toISOString().split('T')[0];\r\n      if (!acc[date]) {\r\n        acc[date] = [];\r\n      }\r\n      acc[date].push(item);\r\n      return acc;\r\n    }, {});\r\n\r\n    // Zaman serisi format─▒na d├Ân├╝┼şt├╝r\r\n    return Object.keys(grouped)\r\n      .sort((a, b) => a.localeCompare(b))\r\n      .map((date) => ({\r\n        date,\r\n        values: {\r\n          [valueField]: grouped[date].reduce(\r\n            (sum: number, item: T) => sum + (Number(item[valueField]) || 0),\r\n            0,\r\n          ),\r\n        },\r\n      }));\r\n  }\r\n\r\n  // Kategori verisi olu┼şturma\r\n  static generateCategoryData<T extends Record<string, unknown>>(\r\n    data: T[],\r\n    categoryField: string,\r\n    valueField: string,\r\n  ): CategoryData[] {\r\n    const grouped = this.aggregateData(data, categoryField, 'sum', valueField);\r\n    const total = Object.values(grouped).reduce((sum, value) => sum + value, 0);\r\n\r\n    return Object.entries(grouped).map(([name, value]) => ({\r\n      name,\r\n      value,\r\n      percentage: total > 0 ? (value / total) * 100 : 0,\r\n      color: this.generateColor(name),\r\n    }));\r\n  }\r\n\r\n  // Kar┼ş─▒la┼şt─▒rma verisi olu┼şturma\r\n  static generateComparisonData<T extends Record<string, unknown>>(\r\n    currentData: T[],\r\n    previousData: T[],\r\n    valueField: string,\r\n  ): ComparisonData {\r\n    const current = currentData.reduce((sum, item) => sum + (Number((item as Record<string, unknown>)[valueField]) || 0), 0);\r\n    const previous = previousData.reduce((sum, item) => sum + (Number((item as Record<string, unknown>)[valueField]) || 0), 0);\r\n    const change = current - previous;\r\n    const changePercent = previous > 0 ? (change / previous) * 100 : 0;\r\n\r\n    return {\r\n      current,\r\n      previous,\r\n      change,\r\n      changePercent,\r\n    };\r\n  }\r\n\r\n  // Metrik verisi olu┼şturma\r\n  static generateMetrics<T extends Record<string, unknown>>(data: T[], config: { key: string; field?: string; aggregationType?: string; format?: string }[]): MetricData[] {\r\n    this.validateInput(data, 'generateMetrics');\r\n\r\n    if (!Array.isArray(config)) {\r\n      throw new Error('Config must be an array');\r\n    }\r\n\r\n    return config.map((metricConfig) => {\r\n      try {\r\n        return this.generateSingleMetric(data, metricConfig);\r\n      } catch (error) {\r\n        // Warning logging removed for production\r\n        return this.createErrorMetric(metricConfig);\r\n      }\r\n    });\r\n  }\r\n\r\n  private static generateSingleMetric<T extends Record<string, unknown>>(\r\n    data: T[], \r\n    metricConfig: { \r\n      key: string; \r\n      field?: string; \r\n      aggregationType?: string; \r\n      format?: 'number' | 'currency' | 'percentage' \r\n    }\r\n  ): MetricData {\r\n    const { key, field, aggregationType = 'sum', format = 'number' } = metricConfig;\r\n\r\n    if (!key) {\r\n      throw new Error('Metric key is required');\r\n    }\r\n\r\n    const value = this.calculateMetricValue(data, field || 'value', aggregationType);\r\n    const trend = field ? this.calculateTrend(data, field) : 'stable';\r\n    const change = this.calculateMetricChange(trend);\r\n\r\n    return {\r\n      key,\r\n      value: this.formatMetricValue(value, format),\r\n      format,\r\n      trend,\r\n      change,\r\n      icon: this.getMetricIcon(key),\r\n      color: this.getMetricColor(trend),\r\n    };\r\n  }\r\n\r\n  private static calculateMetricValue<T extends Record<string, unknown>>(data: T[], field: string, aggregationType: string): number {\r\n    if (!data.length) return 0;\r\n\r\n    const strategy =\r\n      this.aggregationStrategies[aggregationType as keyof typeof this.aggregationStrategies];\r\n    if (strategy) {\r\n      return strategy.aggregate(data as Record<string, unknown>[], field);\r\n    }\r\n\r\n    // Fallback for unknown aggregation types\r\n    switch (aggregationType) {\r\n      case 'sum':\r\n        return data.reduce((sum, item) => sum + (Number(item[field]) || 0), 0);\r\n      case 'avg':\r\n        return data.reduce((sum, item) => sum + (Number(item[field]) || 0), 0) / data.length;\r\n      case 'count':\r\n        return data.length;\r\n      case 'min':\r\n        return Math.min(...data.map((item) => Number(item[field]) || 0));\r\n      case 'max':\r\n        return Math.max(...data.map((item) => Number(item[field]) || 0));\r\n      default:\r\n        return 0;\r\n    }\r\n  }\r\n\r\n  private static formatMetricValue(value: number, format: string): number {\r\n    // Apply any format-specific transformations\r\n    switch (format) {\r\n      case 'currency':\r\n        return Math.round(value * 100) / 100; // Round to 2 decimal places\r\n      case 'percentage':\r\n        return Math.round(value * 100) / 100;\r\n      default:\r\n        return Math.round(value);\r\n    }\r\n  }\r\n\r\n  private static calculateMetricChange(trend: 'up' | 'down' | 'stable'): number {\r\n    // Replace mock calculation with more realistic change calculation\r\n    switch (trend) {\r\n      case 'up':\r\n        return Math.random() * 15 + 5; // 5-20% increase\r\n      case 'down':\r\n        return -(Math.random() * 15 + 5); // 5-20% decrease\r\n      default:\r\n        return Math.random() * 4 - 2; // -2% to +2% for stable\r\n    }\r\n  }\r\n\r\n  private static createErrorMetric(metricConfig: { key: string; format?: string }): MetricData {\r\n    return {\r\n      key: metricConfig.key || 'unknown',\r\n      value: 0,\r\n      format: (metricConfig.format as 'number' | 'currency' | 'percentage') || 'number',\r\n      trend: 'stable',\r\n      change: 0,\r\n      icon: 'alert-circle',\r\n      color: '#EF4444', // Red color for errors\r\n    };\r\n  }\r\n\r\n  // Filtreleme i┼şlemi - Optimized single-pass filtering\r\n  static applyFilters<T extends Record<string, unknown>>(data: T[], filters: ReportFilters): T[] {\r\n    this.validateInput(data, 'applyFilters');\r\n\r\n    if (!filters || Object.keys(filters).length === 0) {\r\n      return data;\r\n    }\r\n\r\n    const filterContext = this.prepareFilterContext(filters);\r\n    return data.filter((item) => this.itemPassesFilters(item, filterContext));\r\n  }\r\n\r\n  private static prepareFilterContext(filters: ReportFilters) {\r\n    return {\r\n      dateRange: filters.dateRange,\r\n      categories: filters.categories ? new Set(filters.categories) : null,\r\n      statusSet: filters.status ? new Set(filters.status) : null,\r\n      amountRange: filters.amountRange,\r\n      searchTerm: filters.searchTerm?.toLowerCase(),\r\n    };\r\n  }\r\n\r\n  private static itemPassesFilters<T extends Record<string, unknown>>(item: T, context: { dateRange?: DateRange; categories?: Set<string> | null | undefined; statusSet?: Set<string> | null | undefined; amountRange?: { min: number; max: number }; searchTerm?: string }): boolean {\r\n    return (\r\n      this.passesDateFilter(item, context.dateRange) &&\r\n      this.passesCategoryFilter(item, context.categories ?? null) &&\r\n      this.passesStatusFilter(item, context.statusSet ?? null) &&\r\n      this.passesAmountFilter(item, context.amountRange) &&\r\n      this.passesSearchFilter(item, context.searchTerm)\r\n    );\r\n  }\r\n\r\n  private static passesDateFilter<T extends Record<string, unknown>>(item: T, dateRange?: DateRange): boolean {\r\n    if (!dateRange) return true;\r\n\r\n    const itemDate = new Date(String(item.created_at || item.date));\r\n    return !isNaN(itemDate.getTime()) && itemDate >= dateRange.start && itemDate <= dateRange.end;\r\n  }\r\n\r\n  private static passesCategoryFilter<T extends Record<string, unknown>>(item: T, categories: Set<string> | null): boolean {\r\n    return !categories || categories.has(String(item.category || item.type));\r\n  }\r\n\r\n  private static passesStatusFilter<T extends Record<string, unknown>>(item: T, statusSet: Set<string> | null): boolean {\r\n    return !statusSet || statusSet.has(String(item.status));\r\n  }\r\n\r\n  private static passesAmountFilter<T extends Record<string, unknown>>(\r\n    item: T,\r\n    amountRange?: { min: number; max: number },\r\n  ): boolean {\r\n    if (!amountRange) return true;\r\n\r\n    const amount = typeof item.amount === 'number' ? item.amount : 0;\r\n    return amount >= amountRange.min && amount <= amountRange.max;\r\n  }\r\n\r\n  private static passesSearchFilter<T extends Record<string, unknown>>(item: T, searchTerm?: string): boolean {\r\n    if (!searchTerm) return true;\r\n\r\n    const searchableValues = Object.values(item)\r\n      .filter((value) => value != null)\r\n      .map((value) => String(value).toLowerCase());\r\n\r\n    return searchableValues.some((value) => value.includes(searchTerm));\r\n  }\r\n\r\n  // Basit trend hesaplama\r\n  private static calculateTrend<T extends Record<string, unknown>>(data: T[], field: string): 'up' | 'down' | 'stable' {\r\n    if (data.length < this.CONFIG.MIN_TREND_CALCULATION_SIZE) return 'stable';\r\n\r\n    try {\r\n      const sortedData = [...data].sort((a, b) => {\r\n         const dateA = new Date(String(a.created_at || a.date)).getTime();\r\n         const dateB = new Date(String(b.created_at || b.date)).getTime();\r\n         return dateA - dateB;\r\n       });\r\n\r\n      const midPoint = Math.floor(sortedData.length / 2);\r\n      const firstHalf = sortedData.slice(0, midPoint);\r\n      const secondHalf = sortedData.slice(midPoint);\r\n\r\n      const firstAvg =\r\n        firstHalf.reduce((sum, item) => sum + (Number(item[field]) || 0), 0) / firstHalf.length;\r\n      const secondAvg =\r\n        secondHalf.reduce((sum, item) => sum + (Number(item[field]) || 0), 0) / secondHalf.length;\r\n\r\n      if (firstAvg === 0) return 'stable';\r\n\r\n      const changePercent = ((secondAvg - firstAvg) / firstAvg) * 100;\r\n\r\n      if (changePercent > this.CONFIG.TREND_THRESHOLD) return 'up';\r\n      if (changePercent < -this.CONFIG.TREND_THRESHOLD) return 'down';\r\n      return 'stable';\r\n    } catch (error) {\r\n      // Warning logging removed for production\r\n      return 'stable';\r\n    }\r\n  }\r\n\r\n  // Renk olu┼şturma\r\n  private static generateColor(name: string): string {\r\n    if (!name || typeof name !== 'string') {\r\n      return this.CONFIG.COLOR_PALETTE[0];\r\n    }\r\n\r\n    let hash = 0;\r\n    for (let i = 0; i < name.length; i++) {\r\n      hash = name.charCodeAt(i) + ((hash << 5) - hash);\r\n    }\r\n\r\n    return this.CONFIG.COLOR_PALETTE[Math.abs(hash) % this.CONFIG.COLOR_PALETTE.length] || '#3B82F6';\r\n  }\r\n\r\n  // Metrik ikonu\r\n  private static getMetricIcon(key: string): string {\r\n    return this.CONFIG.METRIC_ICONS[key as keyof typeof this.CONFIG.METRIC_ICONS] || 'bar-chart';\r\n  }\r\n\r\n  // Metrik rengi\r\n  private static getMetricColor(trend: 'up' | 'down' | 'stable'): string {\r\n    return this.CONFIG.TREND_COLORS[trend];\r\n  }\r\n\r\n  // Veri validasyonu with improved type safety\r\n  static validateData<T extends Record<string, any>>(\r\n    data: T[],\r\n    requiredFields: (keyof T)[],\r\n  ): { isValid: boolean; errors: string[]; validItems: T[] } {\r\n    const errors: string[] = [];\r\n    const validItems: T[] = [];\r\n\r\n    try {\r\n      this.validateInput(data, 'validateData');\r\n    } catch (error) {\r\n      errors.push(error instanceof Error ? error.message : 'Data validation failed');\r\n      return { isValid: false, errors, validItems: [] };\r\n    }\r\n\r\n    if (data.length === 0) {\r\n      errors.push('Data array is empty');\r\n      return { isValid: false, errors, validItems: [] };\r\n    }\r\n\r\n    if (!Array.isArray(requiredFields) || requiredFields.length === 0) {\r\n      errors.push('Required fields must be a non-empty array');\r\n      return { isValid: false, errors, validItems: [] };\r\n    }\r\n\r\n    // Validate each item and collect valid ones\r\n    data.forEach((item, index) => {\r\n      const itemErrors: string[] = [];\r\n\r\n      if (!item || typeof item !== 'object') {\r\n        itemErrors.push(`Item ${index} is not a valid object`);\r\n      } else {\r\n        requiredFields.forEach((field) => {\r\n          if (!(field in item) || item[field] === null || item[field] === undefined) {\r\n            itemErrors.push(`Missing required field '${String(field)}' in item ${index}`);\r\n          }\r\n        });\r\n      }\r\n\r\n      if (itemErrors.length === 0) {\r\n        validItems.push(item);\r\n      } else {\r\n        errors.push(...itemErrors);\r\n      }\r\n    });\r\n\r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors,\r\n      validItems,\r\n    };\r\n  }\r\n\r\n  // Performance optimization through data sampling using reservoir sampling\r\n  static sampleData<T extends Record<string, unknown>>(data: T[], maxSize: number = DataProcessor.CONFIG.DEFAULT_SAMPLE_SIZE): T[] {\r\n    if (data.length <= maxSize) {\r\n      return [...data]; // Return copy to avoid mutations\r\n    }\r\n\r\n    // Use reservoir sampling for better distribution\r\n    const sampled: T[] = [];\r\n\r\n    // Fill reservoir array with first maxSize elements\r\n    for (let i = 0; i < maxSize; i++) {\r\n      sampled[i] = data[i]!;\r\n    }\r\n\r\n    // Replace elements with gradually decreasing probability\r\n    for (let i = maxSize; i < data.length; i++) {\r\n      const j = Math.floor(Math.random() * (i + 1));\r\n      if (j < maxSize) {\r\n        sampled[j] = data[i]!;\r\n      }\r\n    }\r\n\r\n    return sampled;\r\n  }\r\n\r\n  // Veri normalizasyonu\r\n  static normalizeData<T extends Record<string, unknown>>(data: T[], field: string): T[] {\r\n    const values = data.map((item) => Number(item[field]) || 0).filter((val) => typeof val === 'number');\r\n    const min = Math.min(...values);\r\n    const max = Math.max(...values);\r\n    const range = max - min;\r\n\r\n    if (range === 0) return data;\r\n\r\n    return data.map((item) => ({\r\n      ...item,\r\n      [`${field}_normalized`]: typeof item[field] === 'number' ? (Number(item[field]) - min) / range : 0,\r\n    }));\r\n  }\r\n\r\n  // Outlier detection using IQR method\r\n  static detectOutliers<T extends Record<string, unknown>>(\r\n    data: T[],\r\n    field: string,\r\n  ): {\r\n    outliers: T[];\r\n    cleaned: T[];\r\n    statistics: { q1: number; q3: number; iqr: number; bounds: { lower: number; upper: number } };\r\n  } {\r\n    try {\r\n      this.validateInput(data, 'detectOutliers');\r\n\r\n      if (data.length === 0) {\r\n        return {\r\n          outliers: [],\r\n          cleaned: [],\r\n          statistics: { q1: 0, q3: 0, iqr: 0, bounds: { lower: 0, upper: 0 } },\r\n        };\r\n      }\r\n\r\n      const values = data\r\n        .map((item) => Number(item[field]))\r\n        .filter((val): val is number => typeof val === 'number' && !isNaN(val))\r\n        .sort((a, b) => a - b);\r\n\r\n      if (values.length < this.CONFIG.MIN_OUTLIER_DETECTION_SIZE) {\r\n        return {\r\n          outliers: [],\r\n          cleaned: data,\r\n          statistics: { q1: 0, q3: 0, iqr: 0, bounds: { lower: 0, upper: 0 } },\r\n        };\r\n      }\r\n\r\n      const q1Index = Math.floor(values.length * 0.25);\r\n      const q3Index = Math.floor(values.length * 0.75);\r\n      const q1 = values[q1Index];\r\n      const q3 = values[q3Index];\r\n      const iqr = (q3 ?? 0) - (q1 ?? 0);\r\n      const lowerBound = (q1 ?? 0) - this.CONFIG.IQR_MULTIPLIER * iqr;\r\n      const upperBound = (q3 ?? 0) + this.CONFIG.IQR_MULTIPLIER * iqr;\r\n\r\n      const outliers: T[] = [];\r\n      const cleaned: T[] = [];\r\n\r\n      data.forEach((item) => {\r\n        const value = item[field];\r\n        if (typeof value === 'number' && (value < lowerBound || value > upperBound)) {\r\n          outliers.push(item);\r\n        } else {\r\n          cleaned.push(item);\r\n        }\r\n      });\r\n\r\n      return {\r\n        outliers,\r\n        cleaned,\r\n        statistics: {\r\n          q1: q1 ?? 0,\r\n          q3: q3 ?? 0,\r\n          iqr,\r\n          bounds: {\r\n            lower: lowerBound,\r\n            upper: upperBound,\r\n          },\r\n        },\r\n      };\r\n    } catch (error: any) {\r\n      return this.handleError('Outlier detection', error, {\r\n        outliers: [],\r\n        cleaned: data,\r\n        statistics: {\r\n          q1: 0,\r\n          q3: 0,\r\n          iqr: 0,\r\n          bounds: { lower: 0, upper: 0 },\r\n        },\r\n      }) as { outliers: T[]; cleaned: T[]; statistics: { q1: number; q3: number; iqr: number; bounds: { lower: number; upper: number } } };\r\n    }\r\n  }\r\n}\r\n\r\nexport default DataProcessor;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\donationsService.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":156,"column":49,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":156,"endColumn":51,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[4590,4592],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":159,"column":15,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":159,"endColumn":19},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":160,"column":22,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":160,"endColumn":24,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4686,4688],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":161,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":161,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4730,4732],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":163,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":163,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[4780,4783],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[4780,4783],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":165,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":165,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4891,4893],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":183,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5476,5479],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5476,5479],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":185,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":185,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5586,5588],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":204,"column":25,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":204,"endColumn":34},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":208,"column":72,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":208,"endColumn":74,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6366,6368],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":223,"column":9,"nodeType":"MemberExpression","endLine":223,"endColumn":31},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, the types have no overlap.","line":230,"column":15,"nodeType":"BinaryExpression","messageId":"noOverlapBooleanExpression","endLine":230,"endColumn":51},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":230,"column":15,"nodeType":"MemberExpression","endLine":230,"endColumn":37},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":231,"column":13,"nodeType":"MemberExpression","endLine":231,"endColumn":35},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":231,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":231,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7347,7349],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":257,"column":18,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":257,"endColumn":38},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":258,"column":19,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":258,"endColumn":40},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":259,"column":19,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":259,"endColumn":40},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":274,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":274,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8643,8646],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8643,8646],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":276,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":276,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8759,8761],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":289,"column":25,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":289,"endColumn":49},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":292,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":292,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9334,9336],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":293,"column":21,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":293,"endColumn":41},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":294,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":294,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9439,9441],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":295,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":295,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9504,9506],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":298,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":298,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9670,9672],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":302,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":302,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9907,9909],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":305,"column":71,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":305,"endColumn":73,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10104,10106],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":306,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":306,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10171,10173],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":307,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":307,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10238,10240],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":312,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":312,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10529,10531],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":329,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":329,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11114,11117],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11114,11117],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":331,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":331,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11227,11229],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":360,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":360,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11979,11982],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11979,11982],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":362,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":362,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12092,12094],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":380,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":380,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12624,12627],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12624,12627],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":382,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":382,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12737,12739],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":400,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":400,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13287,13290],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13287,13290],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":401,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":401,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13331,13333],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":419,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":419,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13914,13917],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13914,13917],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":420,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":420,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13958,13960],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":438,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":438,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14546,14549],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14546,14549],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":439,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":439,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14590,14592],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":464,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":464,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15354,15357],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15354,15357],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":466,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":466,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[15473,15475],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":517,"column":50,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":517,"endColumn":52,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[17154,17156],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":518,"column":22,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":518,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":519,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":519,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17240,17243],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17240,17243],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":521,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":521,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[17354,17356],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":49,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '../lib/supabase';\r\nimport { logger } from '../lib/logging/logger';\r\n\r\n// Donation interface\r\nexport interface Donation {\r\n  id: number;\r\n  donor_name: string;\r\n  donor_email?: string;\r\n  donor_phone?: string;\r\n  donor_type: 'individual' | 'corporate' | 'foundation' | 'government';\r\n  amount: number;\r\n  currency: string;\r\n  donation_type: 'cash' | 'in_kind' | 'services' | 'other';\r\n  category?: string;\r\n  description?: string;\r\n  payment_method: 'bank_transfer' | 'credit_card' | 'cash' | 'check' | 'online' | 'other';\r\n  payment_reference?: string;\r\n  bank_account?: string;\r\n  transaction_id?: string;\r\n  status: 'pending' | 'approved' | 'rejected' | 'processing' | 'completed';\r\n  approval_date?: string;\r\n  processed_by?: string;\r\n  rejection_reason?: string;\r\n  allocated_to?: string;\r\n  beneficiary_id?: number;\r\n  allocation_percentage: number;\r\n  receipt_issued: boolean;\r\n  receipt_number?: string;\r\n  receipt_date?: string;\r\n  tax_deductible: boolean;\r\n  tax_certificate_number?: string;\r\n  campaign_id?: number;\r\n  source?: string;\r\n  referral_code?: string;\r\n  thank_you_sent: boolean;\r\n  thank_you_date?: string;\r\n  communication_preference?: 'email' | 'phone' | 'mail' | 'none';\r\n  is_recurring: boolean;\r\n  recurring_frequency?: 'monthly' | 'quarterly' | 'yearly';\r\n  recurring_end_date?: string;\r\n  recurring_amount?: number;\r\n  created_at: string;\r\n  updated_at: string;\r\n  created_by?: string;\r\n  updated_by?: string;\r\n  ip_address?: string;\r\n  user_agent?: string;\r\n  notes?: string;\r\n}\r\n\r\n// API response type\r\nexport interface DonationsApiResponse<T> {\r\n  data?: T;\r\n  error?: string;\r\n  count?: number;\r\n  totalPages?: number;\r\n}\r\n\r\n// Filters interface\r\nexport interface DonationsFilters {\r\n  searchTerm?: string;\r\n  status?: string;\r\n  donationType?: string;\r\n  paymentMethod?: string;\r\n  donorType?: string;\r\n  dateFrom?: string;\r\n  dateTo?: string;\r\n  minAmount?: number;\r\n  maxAmount?: number;\r\n}\r\n\r\n// Donation statistics interface\r\nexport interface DonationStats {\r\n  total: number;\r\n  totalAmount: number;\r\n  pending: number;\r\n  approved: number;\r\n  rejected: number;\r\n  averageAmount: number;\r\n  monthlyTrend: Record<string, number>;\r\n  donorTypes: Record<string, number>;\r\n  donationTypes: Record<string, number>;\r\n  paymentMethods: Record<string, number>;\r\n}\r\n\r\nexport class DonationsService {\r\n  // Get all donations with pagination and filters\r\n  async getDonations(\r\n    page = 1,\r\n    pageSize = 10,\r\n    filters: DonationsFilters = {},\r\n  ): Promise<DonationsApiResponse<Donation[]>> {\r\n    try {\r\n      logger.info('­şöä Fetching donations with filters:', filters);\r\n\r\n      let query = supabase.from('donations').select('*', { count: 'exact' });\r\n\r\n      // Search filter\r\n      if (filters.searchTerm) {\r\n        const term = filters.searchTerm.toLowerCase();\r\n        query = query.or(\r\n          `donor_name.ilike.%${term}%,donor_email.ilike.%${term}%,payment_reference.ilike.%${term}%`,\r\n        );\r\n      }\r\n\r\n      // Status filter\r\n      if (filters.status && filters.status !== 'all') {\r\n        query = query.eq('status', filters.status);\r\n      }\r\n\r\n      // Donation type filter\r\n      if (filters.donationType && filters.donationType !== 'all') {\r\n        query = query.eq('donation_type', filters.donationType);\r\n      }\r\n\r\n      // Payment method filter\r\n      if (filters.paymentMethod && filters.paymentMethod !== 'all') {\r\n        query = query.eq('payment_method', filters.paymentMethod);\r\n      }\r\n\r\n      // Donor type filter\r\n      if (filters.donorType && filters.donorType !== 'all') {\r\n        query = query.eq('donor_type', filters.donorType);\r\n      }\r\n\r\n      // Date range filter\r\n      if (filters.dateFrom) {\r\n        query = query.gte('created_at', filters.dateFrom);\r\n      }\r\n      if (filters.dateTo) {\r\n        query = query.lte('created_at', filters.dateTo);\r\n      }\r\n\r\n      // Amount range filter\r\n      if (filters.minAmount) {\r\n        query = query.gte('amount', filters.minAmount);\r\n      }\r\n      if (filters.maxAmount) {\r\n        query = query.lte('amount', filters.maxAmount);\r\n      }\r\n\r\n      // Pagination\r\n      const startIndex = (page - 1) * pageSize;\r\n      query = query.range(startIndex, startIndex + pageSize - 1);\r\n\r\n      // Order by creation date (newest first)\r\n      query = query.order('created_at', { ascending: false });\r\n\r\n      const { data, error, count } = await query;\r\n\r\n      if (error) {\r\n        logger.error('ÔØî Error fetching donations:', error);\r\n        return { error: error.message };\r\n      }\r\n\r\n      logger.info('Ô£à Successfully fetched', data?.length || 0, 'donations');\r\n\r\n      return {\r\n        data: data || [],\r\n        count: count || 0,\r\n        totalPages: Math.ceil((count || 0) / pageSize),\r\n      };\r\n    } catch (error: any) {\r\n      logger.error('ÔØî Unexpected error in getDonations:', error);\r\n      return { error: error.message || 'Beklenmeyen hata olu┼ştu' };\r\n    }\r\n  }\r\n\r\n  // Get single donation\r\n  async getDonation(id: number): Promise<DonationsApiResponse<Donation>> {\r\n    try {\r\n      logger.info('­şöä Fetching single donation with id:', id);\r\n\r\n      const { data, error } = await supabase.from('donations').select('*').eq('id', id).single();\r\n\r\n      if (error) {\r\n        logger.error('ÔØî Error fetching single donation:', error);\r\n        return { error: error.message };\r\n      }\r\n\r\n      logger.info('Ô£à Successfully fetched donation:', data?.donor_name);\r\n      return { data };\r\n    } catch (error: any) {\r\n      logger.error('ÔØî Unexpected error in getDonation:', error);\r\n      return { error: error.message || 'Ba─ş─▒┼ş bulunamad─▒' };\r\n    }\r\n  }\r\n\r\n  // Get donation statistics\r\n  async getDonationStats(): Promise<DonationsApiResponse<DonationStats>> {\r\n    try {\r\n      logger.info('­şöä Fetching donation statistics');\r\n\r\n      // Get total count and amount\r\n      const { data: totalData, error: totalError } = await supabase\r\n        .from('donations')\r\n        .select('amount, status, donor_type, donation_type, payment_method, created_at');\r\n\r\n      if (totalError) {\r\n        logger.error('ÔØî Error fetching donation stats:', totalError);\r\n        return { error: totalError.message };\r\n      }\r\n\r\n      const donations = totalData || [];\r\n\r\n      // Calculate statistics\r\n      const total = donations.length;\r\n      const totalAmount = donations.reduce((sum, d) => sum + (d.amount || 0), 0);\r\n      const averageAmount = total > 0 ? totalAmount / total : 0;\r\n\r\n      // Status breakdown\r\n      const statusCounts = donations.reduce<Record<string, number>>((acc, d) => {\r\n        acc[d.status] = (acc[d.status] || 0) + 1;\r\n        return acc;\r\n      }, {});\r\n\r\n      // Monthly trend (last 12 months)\r\n      const monthlyTrend: Record<string, number> = {};\r\n      const now = new Date();\r\n      for (let i = 11; i >= 0; i--) {\r\n        const date = new Date(now.getFullYear(), now.getMonth() - i, 1);\r\n        const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n        monthlyTrend[monthKey] = 0;\r\n      }\r\n\r\n      donations.forEach((d) => {\r\n        if (d.created_at) {\r\n          const date = new Date(d.created_at);\r\n          const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n          if (monthlyTrend[monthKey] !== undefined) {\r\n            monthlyTrend[monthKey] += d.amount || 0;\r\n          }\r\n        }\r\n      });\r\n\r\n      // Donor types breakdown\r\n      const donorTypes = donations.reduce<Record<string, number>>((acc, d) => {\r\n        acc[d.donor_type] = (acc[d.donor_type] || 0) + 1;\r\n        return acc;\r\n      }, {});\r\n\r\n      // Donation types breakdown\r\n      const donationTypes = donations.reduce<Record<string, number>>((acc, d) => {\r\n        acc[d.donation_type] = (acc[d.donation_type] || 0) + 1;\r\n        return acc;\r\n      }, {});\r\n\r\n      // Payment methods breakdown\r\n      const paymentMethods = donations.reduce<Record<string, number>>((acc, d) => {\r\n        acc[d.payment_method] = (acc[d.payment_method] || 0) + 1;\r\n        return acc;\r\n      }, {});\r\n\r\n      const stats: DonationStats = {\r\n        total,\r\n        totalAmount,\r\n        pending: statusCounts.pending ?? 0,\r\n        approved: statusCounts.approved ?? 0,\r\n        rejected: statusCounts.rejected ?? 0,\r\n        averageAmount,\r\n        monthlyTrend,\r\n        donorTypes,\r\n        donationTypes,\r\n        paymentMethods,\r\n      };\r\n\r\n      logger.info('Ô£à Successfully calculated donation statistics:', {\r\n        total: stats.total,\r\n        totalAmount: stats.totalAmount,\r\n        averageAmount: stats.averageAmount,\r\n      });\r\n\r\n      return { data: stats };\r\n    } catch (error: any) {\r\n      logger.error('ÔØî Error calculating donation statistics:', error);\r\n      return { error: error.message || '─░statistikler hesaplanamad─▒' };\r\n    }\r\n  }\r\n\r\n  // Create new donation\r\n  async createDonation(donationData: Partial<Donation>): Promise<DonationsApiResponse<Donation>> {\r\n    try {\r\n      logger.info('­şöä Creating new donation:', donationData);\r\n\r\n      const { data: newDonation, error } = await supabase\r\n        .from('donations')\r\n        .insert([\r\n          {\r\n            donor_name: donationData.donor_name!,\r\n            donor_email: donationData.donor_email,\r\n            donor_phone: donationData.donor_phone,\r\n            donor_type: donationData.donor_type || 'individual',\r\n            amount: donationData.amount!,\r\n            currency: donationData.currency || 'TRY',\r\n            donation_type: donationData.donation_type || 'cash',\r\n            category: donationData.category,\r\n            description: donationData.description,\r\n            payment_method: donationData.payment_method || 'bank_transfer',\r\n            payment_reference: donationData.payment_reference,\r\n            bank_account: donationData.bank_account,\r\n            transaction_id: donationData.transaction_id,\r\n            status: donationData.status || 'pending',\r\n            allocated_to: donationData.allocated_to,\r\n            beneficiary_id: donationData.beneficiary_id,\r\n            allocation_percentage: donationData.allocation_percentage || 100.0,\r\n            receipt_issued: donationData.receipt_issued || false,\r\n            tax_deductible: donationData.tax_deductible || false,\r\n            campaign_id: donationData.campaign_id,\r\n            source: donationData.source,\r\n            referral_code: donationData.referral_code,\r\n            communication_preference: donationData.communication_preference,\r\n            is_recurring: donationData.is_recurring || false,\r\n            recurring_frequency: donationData.recurring_frequency,\r\n            recurring_end_date: donationData.recurring_end_date,\r\n            recurring_amount: donationData.recurring_amount,\r\n            notes: donationData.notes,\r\n          },\r\n        ])\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        logger.error('ÔØî Error creating donation:', error);\r\n        return { error: error.message };\r\n      }\r\n\r\n      logger.info('Ô£à Successfully created donation:', newDonation?.donor_name);\r\n      return { data: newDonation };\r\n    } catch (error: any) {\r\n      logger.error('ÔØî Unexpected error in createDonation:', error);\r\n      return { error: error.message || 'Ba─ş─▒┼ş olu┼şturulamad─▒' };\r\n    }\r\n  }\r\n\r\n  // Update donation\r\n  async updateDonation(\r\n    id: number,\r\n    updates: Partial<Donation>,\r\n  ): Promise<DonationsApiResponse<Donation>> {\r\n    try {\r\n      logger.info('­şöä Updating donation:', id, updates);\r\n\r\n      const { data, error } = await supabase\r\n        .from('donations')\r\n        .update({\r\n          ...updates,\r\n          updated_at: new Date().toISOString(),\r\n        })\r\n        .eq('id', id)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        logger.error('ÔØî Error updating donation:', error);\r\n        return { error: error.message };\r\n      }\r\n\r\n      logger.info('Ô£à Successfully updated donation:', data?.donor_name);\r\n      return { data };\r\n    } catch (error: any) {\r\n      logger.error('ÔØî Unexpected error in updateDonation:', error);\r\n      return { error: error.message || 'Ba─ş─▒┼ş g├╝ncellenemedi' };\r\n    }\r\n  }\r\n\r\n  // Delete donation\r\n  async deleteDonation(id: number): Promise<DonationsApiResponse<boolean>> {\r\n    try {\r\n      logger.info('­şöä Deleting donation:', id);\r\n\r\n      const { error } = await supabase.from('donations').delete().eq('id', id);\r\n\r\n      if (error) {\r\n        logger.error('ÔØî Error deleting donation:', error);\r\n        return { error: error.message };\r\n      }\r\n\r\n      logger.info('Ô£à Successfully deleted donation:', id);\r\n      return { data: true };\r\n    } catch (error: any) {\r\n      logger.error('ÔØî Unexpected error in deleteDonation:', error);\r\n      return { error: error.message || 'Ba─ş─▒┼ş silinemedi' };\r\n    }\r\n  }\r\n\r\n  // Get donor types for filter dropdown\r\n  async getDonorTypes(): Promise<DonationsApiResponse<string[]>> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('donations')\r\n        .select('donor_type')\r\n        .not('donor_type', 'is', null);\r\n\r\n      if (error) {\r\n        return { error: error.message };\r\n      }\r\n\r\n      const donorTypes = [...new Set(data.map((item) => item.donor_type))].sort((a, b) => a.localeCompare(b));\r\n      return { data: donorTypes };\r\n    } catch (error: any) {\r\n      return { error: error.message || 'Ba─ş─▒┼ş├ğ─▒ t├╝rleri getirilemedi' };\r\n    }\r\n  }\r\n\r\n  // Get donation types for filter dropdown\r\n  async getDonationTypes(): Promise<DonationsApiResponse<string[]>> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('donations')\r\n        .select('donation_type')\r\n        .not('donation_type', 'is', null);\r\n\r\n      if (error) {\r\n        return { error: error.message };\r\n      }\r\n\r\n      const donationTypes = [...new Set(data.map((item) => item.donation_type))].sort((a, b) => a.localeCompare(b));\r\n      return { data: donationTypes };\r\n    } catch (error: any) {\r\n      return { error: error.message || 'Ba─ş─▒┼ş t├╝rleri getirilemedi' };\r\n    }\r\n  }\r\n\r\n  // Get payment methods for filter dropdown\r\n  async getPaymentMethods(): Promise<DonationsApiResponse<string[]>> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('donations')\r\n        .select('payment_method')\r\n        .not('payment_method', 'is', null);\r\n\r\n      if (error) {\r\n        return { error: error.message };\r\n      }\r\n\r\n      const paymentMethods = [...new Set(data.map((item) => item.payment_method))].sort((a, b) => a.localeCompare(b));\r\n      return { data: paymentMethods };\r\n    } catch (error: any) {\r\n      return { error: error.message || '├ûdeme y├Ântemleri getirilemedi' };\r\n    }\r\n  }\r\n\r\n  // Bulk approve donations\r\n  async bulkApproveDonations(ids: number[]): Promise<DonationsApiResponse<boolean>> {\r\n    try {\r\n      logger.info('­şöä Bulk approving donations:', ids);\r\n\r\n      const { error } = await supabase\r\n        .from('donations')\r\n        .update({\r\n          status: 'approved',\r\n          approval_date: new Date().toISOString(),\r\n          updated_at: new Date().toISOString(),\r\n        })\r\n        .in('id', ids);\r\n\r\n      if (error) {\r\n        logger.error('ÔØî Error bulk approving donations:', error);\r\n        return { error: error.message };\r\n      }\r\n\r\n      logger.info('Ô£à Successfully bulk approved', ids.length, 'donations');\r\n      return { data: true };\r\n    } catch (error: any) {\r\n      logger.error('ÔØî Unexpected error in bulkApproveDonations:', error);\r\n      return { error: error.message || 'Toplu onay i┼şlemi ba┼şar─▒s─▒z' };\r\n    }\r\n  }\r\n\r\n  // Export donations to CSV\r\n  async exportDonations(filters: DonationsFilters = {}): Promise<DonationsApiResponse<Donation[]>> {\r\n    try {\r\n      logger.info('­şöä Exporting donations with filters:', filters);\r\n\r\n      let query = supabase.from('donations').select('*');\r\n\r\n      // Apply same filters as getDonations but without pagination\r\n      if (filters.searchTerm) {\r\n        const term = filters.searchTerm.toLowerCase();\r\n        query = query.or(\r\n          `donor_name.ilike.%${term}%,donor_email.ilike.%${term}%,payment_reference.ilike.%${term}%`,\r\n        );\r\n      }\r\n\r\n      if (filters.status && filters.status !== 'all') {\r\n        query = query.eq('status', filters.status);\r\n      }\r\n\r\n      if (filters.donationType && filters.donationType !== 'all') {\r\n        query = query.eq('donation_type', filters.donationType);\r\n      }\r\n\r\n      if (filters.paymentMethod && filters.paymentMethod !== 'all') {\r\n        query = query.eq('payment_method', filters.paymentMethod);\r\n      }\r\n\r\n      if (filters.donorType && filters.donorType !== 'all') {\r\n        query = query.eq('donor_type', filters.donorType);\r\n      }\r\n\r\n      if (filters.dateFrom) {\r\n        query = query.gte('created_at', filters.dateFrom);\r\n      }\r\n      if (filters.dateTo) {\r\n        query = query.lte('created_at', filters.dateTo);\r\n      }\r\n\r\n      query = query.order('created_at', { ascending: false });\r\n\r\n      const { data, error } = await query;\r\n\r\n      if (error) {\r\n        logger.error('ÔØî Error exporting donations:', error);\r\n        return { error: error.message };\r\n      }\r\n\r\n      logger.info('Ô£à Successfully exported', data?.length || 0, 'donations');\r\n      return { data: data || [] };\r\n    } catch (error: any) {\r\n      logger.error('ÔØî Unexpected error in exportDonations:', error);\r\n      return { error: error.message || 'D─▒┼şa aktarma ba┼şar─▒s─▒z' };\r\n    }\r\n  }\r\n}\r\n\r\n// Singleton instance\r\nexport const donationsService = new DonationsService();\r\n\r\n// Default export\r\nexport default donationsService;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\emailSMSService.ts","messages":[{"ruleId":"@typescript-eslint/no-empty-function","severity":1,"message":"Unexpected empty constructor.","line":20,"column":25,"nodeType":"FunctionExpression","messageId":"unexpected","endLine":20,"endColumn":27,"suggestions":[{"messageId":"suggestComment","data":{"name":"constructor"},"fix":{"range":[450,450],"text":" /* empty */ "},"desc":"Add comment inside empty constructor."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":23,"column":9,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":23,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'body' is defined but never used.","line":29,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":52},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'body' is defined but never used. Allowed unused args must match /^_/u.","line":29,"column":48,"nodeType":null,"messageId":"unusedVar","endLine":29,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'body' is defined but never used.","line":41,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":66},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'body' is defined but never used. Allowed unused args must match /^_/u.","line":41,"column":62,"nodeType":null,"messageId":"unusedVar","endLine":41,"endColumn":66}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview emailSMSService Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { logger } from '../lib/logging/logger';\r\n// Email and SMS Service\r\n/**\r\n * EmailSMSService Service\r\n * \r\n * Service class for handling emailsmsservice operations\r\n * \r\n * @class EmailSMSService\r\n */\r\nexport class EmailSMSService {\r\n  private static instance: EmailSMSService;\r\n\r\n  private constructor() {}\r\n\r\n  static getInstance(): EmailSMSService {\r\n    if (!EmailSMSService.instance) {\r\n      EmailSMSService.instance = new EmailSMSService();\r\n    }\r\n    return EmailSMSService.instance;\r\n  }\r\n\r\n  async sendEmail(to: string, subject: string, body: string): Promise<boolean> {\r\n    // Mock implementation for testing\r\n    logger.info(`Sending email to ${to}: ${subject}`);\r\n    return true;\r\n  }\r\n\r\n  async sendSMS(to: string, message: string): Promise<boolean> {\r\n    // Mock implementation for testing\r\n    logger.info(`Sending SMS to ${to}: ${message}`);\r\n    return true;\r\n  }\r\n\r\n  async sendBulkEmail(recipients: string[], subject: string, body: string): Promise<boolean> {\r\n    // Mock implementation for testing\r\n    logger.info(`Sending bulk email to ${recipients.length} recipients: ${subject}`);\r\n    return true;\r\n  }\r\n\r\n  async sendBulkSMS(recipients: string[], message: string): Promise<boolean> {\r\n    // Mock implementation for testing\r\n    logger.info(`Sending bulk SMS to ${recipients.length} recipients: ${message}`);\r\n    return true;\r\n  }\r\n}\r\n\r\n// Placeholder service for backward compatibility\r\nconst emailSMSService = {\r\n  // Add methods as needed\r\n};\r\n\r\nexport default emailSMSService;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\errorHandler.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\exportService.ts","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":204,"column":32,"nodeType":"MemberExpression","endLine":204,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_needsOptimization' is defined but never used.","line":307,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":307,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_optimizationOptions' is defined but never used.","line":308,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":308,"endColumn":25},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":317,"column":43,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":317,"endColumn":54},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":327,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":327,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9628,9630],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":371,"column":43,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":371,"endColumn":54},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":375,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":375,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10977,10979],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":427,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":427,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12359,12361],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":465,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":465,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13306,13308],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":496,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":496,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14205,14207],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":514,"column":14,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":514,"endColumn":16,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[14699,14701],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":518,"column":9,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":518,"endColumn":23},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":629,"column":14,"nodeType":"Literal","messageId":"alwaysTruthy","endLine":629,"endColumn":18}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview exportService Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\n// Geli┼şmi┼ş Raporlama Sistemi - Export Servisi\r\n\r\nimport type {\r\n  ExportConfig,\r\n  ReportResponse,\r\n  AnalyticsData,\r\n  FinancialData,\r\n  ExportFormat,\r\n} from '../types/reporting';\r\n\r\nimport {\r\n  ChartExportUtils,\r\n  DataFormattingUtils,\r\n  OptimizationUtils,\r\n  ExportTemplateUtils,\r\n  type ExportDataOptions,\r\n  type OptimizationOptions,\r\n} from './exportUtils';\r\n\r\n/**\r\n * ExportProgress Interface\r\n * \r\n * @interface ExportProgress\r\n */\r\nexport interface ExportProgress {\r\n  stage: 'preparing' | 'processing' | 'formatting' | 'finalizing' | 'completed' | 'error';\r\n  progress: number;\r\n  message: string;\r\n  estimatedTimeRemaining?: number;\r\n}\r\n\r\n/**\r\n * ExportResult Interface\r\n * \r\n * @interface ExportResult\r\n */\r\nexport interface ExportResult {\r\n  success: boolean;\r\n  downloadUrl?: string;\r\n  filename?: string;\r\n  fileSize?: number;\r\n  format: ExportFormat;\r\n  error?: string;\r\n  metadata?: {\r\n    recordCount: number;\r\n    processingTime: number;\r\n    compressionRatio?: number;\r\n  };\r\n}\r\n\r\n/**\r\n * ExportService Service\r\n * \r\n * Service class for handling exportservice operations\r\n * \r\n * @class ExportService\r\n */\r\nexport class ExportService {\r\n  private readonly progressCallbacks = new Map<string, (progress: ExportProgress) => void>();\r\n\r\n  /**\r\n   * Export report data to specified format\r\n   */\r\n  async exportReport(\r\n    data: ReportResponse,\r\n    config: ExportConfig,\r\n    progressCallback?: (progress: ExportProgress) => void,\r\n  ): Promise<ExportResult> {\r\n    const exportId = this.generateExportId();\r\n    const startTime = Date.now();\r\n\r\n    if (progressCallback) {\r\n      this.progressCallbacks.set(exportId, progressCallback);\r\n    }\r\n\r\n    try {\r\n      // Validate inputs\r\n      this.validateExportInputs(data, config);\r\n\r\n      // Update progress\r\n      this.updateProgress(exportId, {\r\n        stage: 'preparing',\r\n        progress: 10,\r\n        message: 'Export haz─▒rlan─▒yor...',\r\n      });\r\n\r\n      // Apply template if specified\r\n      let processedData = data.data;\r\n      if (config.template) {\r\n        processedData = ExportTemplateUtils.applyTemplate(processedData, config.template);\r\n      }\r\n\r\n      // Determine if we need optimization for large datasets\r\n      const needsOptimization = this.needsOptimization(processedData);\r\n      const optimizationOptions: OptimizationOptions = {\r\n        chunkSize: 1000,\r\n        maxMemoryUsage: 100 * 1024 * 1024, // 100MB\r\n        compressionLevel: config.options?.compression ? 6 : 0,\r\n        streamingThreshold: 10000,\r\n      };\r\n\r\n      // Update progress\r\n      this.updateProgress(exportId, {\r\n        stage: 'processing',\r\n        progress: 30,\r\n        message: 'Veri i┼şleniyor...',\r\n      });\r\n\r\n      // Process export based on format\r\n      let result: ExportResult;\r\n\r\n      switch (config.format) {\r\n        case ExportFormat.PDF:\r\n          result = await this.exportToPDF(\r\n            processedData,\r\n            config,\r\n            exportId,\r\n            needsOptimization,\r\n            optimizationOptions,\r\n          );\r\n          break;\r\n        case ExportFormat.EXCEL:\r\n          result = await this.exportToExcel(\r\n            processedData,\r\n            config,\r\n            exportId,\r\n            needsOptimization,\r\n            optimizationOptions,\r\n          );\r\n          break;\r\n        case ExportFormat.CSV:\r\n          result = await this.exportToCSV(\r\n            processedData,\r\n            config,\r\n            exportId,\r\n            needsOptimization,\r\n            optimizationOptions,\r\n          );\r\n          break;\r\n        case ExportFormat.PNG:\r\n          result = await this.exportToPNG(processedData, config, exportId);\r\n          break;\r\n        case ExportFormat.SVG:\r\n          result = await this.exportToSVG(processedData, config, exportId);\r\n          break;\r\n        case 'pdf':\r\n        case 'excel':\r\n        case 'csv':\r\n        case 'png':\r\n        case 'svg':\r\n        default:\r\n          throw new Error(`Desteklenmeyen export format─▒: ${config.format}`);\r\n      }\r\n\r\n      // Add metadata\r\n      result.metadata = {\r\n        recordCount: this.getRecordCount(processedData),\r\n        processingTime: Date.now() - startTime,\r\n        compressionRatio: config.options?.compression ? 0.7 : 1.0,\r\n      };\r\n\r\n      // Final progress update\r\n      this.updateProgress(exportId, {\r\n        stage: 'completed',\r\n        progress: 100,\r\n        message: 'Export tamamland─▒',\r\n      });\r\n\r\n      return result;\r\n    } catch (error) {\r\n      this.updateProgress(exportId, {\r\n        stage: 'error',\r\n        progress: 0,\r\n        message: 'Export ba┼şar─▒s─▒z',\r\n      });\r\n\r\n      return {\r\n        success: false,\r\n        format: config.format as ExportFormat,\r\n        error: error instanceof Error ? error.message : 'Bilinmeyen hata',\r\n      };\r\n    } finally {\r\n      this.progressCallbacks.delete(exportId);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Export multiple reports in batch\r\n   */\r\n  async exportBatch(\r\n    exports: { data: ReportResponse; config: ExportConfig }[],\r\n    progressCallback?: (overall: number, current: string) => void,\r\n  ): Promise<ExportResult[]> {\r\n    const results: ExportResult[] = [];\r\n\r\n    for (let i = 0; i < exports.length; i++) {\r\n      const { data, config } = exports[i] || { data: null, config: null };\r\n\r\n      progressCallback?.(\r\n        (i / exports.length) * 100,\r\n        `Export ${i + 1}/${exports.length}: ${config.filename ?? 'report'}`,\r\n      );\r\n\r\n      const result = await this.exportReport(data, config);\r\n      results.push(result);\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Export analytics data with specialized formatting\r\n   */\r\n  async exportAnalyticsData(\r\n    analyticsData: AnalyticsData,\r\n    config: ExportConfig,\r\n    progressCallback?: (progress: ExportProgress) => void,\r\n  ): Promise<ExportResult> {\r\n    // Format analytics data for export\r\n    const formattedData = DataFormattingUtils.formatAnalyticsData(analyticsData, {\r\n      includeHeaders: true,\r\n      dateFormat: 'DD/MM/YYYY',\r\n      numberFormat: '0.00',\r\n      currencySymbol: 'Ôé║',\r\n    });\r\n\r\n    // Create report response structure\r\n    const reportResponse: ReportResponse = {\r\n      data: formattedData,\r\n      metadata: {\r\n        total_records:\r\n          analyticsData.metrics.length +\r\n          analyticsData.timeSeries.length +\r\n          analyticsData.categories.length,\r\n        page: 1,\r\n        page_size: 1000,\r\n        execution_time: 0,\r\n        generated_at: new Date(),\r\n      },\r\n    };\r\n\r\n    return this.exportReport(reportResponse, config, progressCallback);\r\n  }\r\n\r\n  /**\r\n   * Export financial data with specialized formatting\r\n   */\r\n  async exportFinancialData(\r\n    financialData: FinancialData,\r\n    config: ExportConfig,\r\n    progressCallback?: (progress: ExportProgress) => void,\r\n  ): Promise<ExportResult> {\r\n    // Format financial data for export\r\n    const formattedData = {\r\n      gelir_ozeti: [\r\n        { kategori: 'Ba─ş─▒┼şlar', tutar: financialData.income.donations },\r\n        { kategori: '├£yelik Aidatlar─▒', tutar: financialData.income.membership_fees },\r\n        { kategori: 'Hibeler', tutar: financialData.income.grants },\r\n        { kategori: 'Di─şer', tutar: financialData.income.other },\r\n        { kategori: 'TOPLAM', tutar: financialData.income.total },\r\n      ],\r\n      gider_ozeti: [\r\n        { kategori: 'Yard─▒m ├ûdemeleri', tutar: financialData.expenses.aid_payments },\r\n        { kategori: 'Operasyonel', tutar: financialData.expenses.operational },\r\n        { kategori: 'Personel', tutar: financialData.expenses.staff },\r\n        { kategori: 'Pazarlama', tutar: financialData.expenses.marketing },\r\n        { kategori: 'Di─şer', tutar: financialData.expenses.other },\r\n        { kategori: 'TOPLAM', tutar: financialData.expenses.total },\r\n      ],\r\n      butce_analizi: [\r\n        { metrik: 'Planlanan Gelir', tutar: financialData.budget.planned_income },\r\n        { metrik: 'Ger├ğekle┼şen Gelir', tutar: financialData.budget.actual_income },\r\n        { metrik: 'Planlanan Gider', tutar: financialData.budget.planned_expenses },\r\n        { metrik: 'Ger├ğekle┼şen Gider', tutar: financialData.budget.actual_expenses },\r\n        { metrik: 'Varyans', tutar: financialData.budget.variance },\r\n        { metrik: 'Varyans %', tutar: financialData.budget.variance_percent },\r\n      ],\r\n      nakit_akis: financialData.cashFlow.monthly_trend,\r\n    };\r\n\r\n    const reportResponse: ReportResponse = {\r\n      data: formattedData,\r\n      metadata: {\r\n        total_records: Object.keys(formattedData).length,\r\n        page: 1,\r\n        page_size: 1000,\r\n        execution_time: 0,\r\n        generated_at: new Date(),\r\n      },\r\n    };\r\n\r\n    return this.exportReport(reportResponse, config, progressCallback);\r\n  }\r\n\r\n  // Private methods for specific export formats\r\n  private async exportToPDF<T>(\r\n    data: T,\r\n    config: ExportConfig,\r\n    exportId: string,\r\n    _needsOptimization: boolean,\r\n    _optimizationOptions: OptimizationOptions,\r\n  ): Promise<ExportResult> {\r\n    this.updateProgress(exportId, {\r\n      stage: 'formatting',\r\n      progress: 50,\r\n      message: 'PDF formatlan─▒yor...',\r\n    });\r\n\r\n    // Simulate PDF generation (only in non-production)\r\n    if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV !== 'production') {\r\n      await this.simulateProcessing(1500);\r\n    }\r\n\r\n    this.updateProgress(exportId, {\r\n      stage: 'finalizing',\r\n      progress: 90,\r\n      message: 'PDF haz─▒rlan─▒yor...',\r\n    });\r\n\r\n    const filename = config.filename || `report_${Date.now()}.pdf`;\r\n    const fileSize = this.estimateFileSize(data, ExportFormat.PDF);\r\n\r\n    return {\r\n      success: true,\r\n      downloadUrl: `/api/exports/${filename}`,\r\n      filename,\r\n      fileSize,\r\n      format: ExportFormat.PDF,\r\n    };\r\n  }\r\n\r\n  private async exportToExcel<T>(\r\n    data: T,\r\n    config: ExportConfig,\r\n    exportId: string,\r\n    needsOptimization: boolean,\r\n    optimizationOptions: OptimizationOptions,\r\n  ): Promise<ExportResult> {\r\n    this.updateProgress(exportId, {\r\n      stage: 'formatting',\r\n      progress: 40,\r\n      message: 'Excel formatlan─▒yor...',\r\n    });\r\n\r\n    // Format data for Excel\r\n    const excelData = this.formatDataForExcel(data);\r\n\r\n    if (needsOptimization) {\r\n      // Process in chunks for large datasets\r\n      await OptimizationUtils.processInChunks(\r\n        excelData,\r\n        async (chunk) => this.processExcelChunk(chunk),\r\n        optimizationOptions,\r\n      );\r\n    }\r\n\r\n    this.updateProgress(exportId, {\r\n      stage: 'finalizing',\r\n      progress: 85,\r\n      message: 'Excel dosyas─▒ olu┼şturuluyor...',\r\n    });\r\n\r\n    // Simulate Excel generation (only in non-production)\r\n    if (typeof process !== 'undefined' && process.env && process.env.NODE_ENV !== 'production') {\r\n      await this.simulateProcessing(1200);\r\n    }\r\n\r\n    const filename = config.filename || `report_${Date.now()}.xlsx`;\r\n    const fileSize = this.estimateFileSize(data, ExportFormat.EXCEL);\r\n\r\n    return {\r\n      success: true,\r\n      downloadUrl: `/api/exports/${filename}`,\r\n      filename,\r\n      fileSize,\r\n      format: ExportFormat.EXCEL,\r\n    };\r\n  }\r\n\r\n  private async exportToCSV<T>(\r\n    data: T,\r\n    config: ExportConfig,\r\n    exportId: string,\r\n    needsOptimization: boolean,\r\n    optimizationOptions: OptimizationOptions,\r\n  ): Promise<ExportResult> {\r\n    this.updateProgress(exportId, {\r\n      stage: 'formatting',\r\n      progress: 60,\r\n      message: 'CSV formatlan─▒yor...',\r\n    });\r\n\r\n    const csvOptions: ExportDataOptions = {\r\n      includeHeaders: true,\r\n      delimiter: ',',\r\n      dateFormat: 'DD/MM/YYYY',\r\n      numberFormat: '0.00',\r\n    };\r\n\r\n    let csvContent: string;\r\n\r\n    if (needsOptimization) {\r\n      // Use streaming for large datasets\r\n      const stream = await OptimizationUtils.streamExport(\r\n        data,\r\n        ExportFormat.CSV,\r\n        optimizationOptions,\r\n      );\r\n      csvContent = await this.streamToString(stream);\r\n    } else {\r\n      csvContent = DataFormattingUtils.formatForCSV(this.flattenData(data), csvOptions);\r\n    }\r\n\r\n    this.updateProgress(exportId, {\r\n      stage: 'finalizing',\r\n      progress: 95,\r\n      message: 'CSV dosyas─▒ haz─▒rlan─▒yor...',\r\n    });\r\n\r\n    const filename = config.filename || `report_${Date.now()}.csv`;\r\n    const fileSize = new Blob([csvContent]).size;\r\n\r\n    return {\r\n      success: true,\r\n      downloadUrl: `/api/exports/${filename}`,\r\n      filename,\r\n      fileSize,\r\n      format: ExportFormat.CSV,\r\n    };\r\n  }\r\n\r\n  private async exportToPNG<T>(\r\n    data: T,\r\n    config: ExportConfig,\r\n    exportId: string,\r\n  ): Promise<ExportResult> {\r\n    this.updateProgress(exportId, {\r\n      stage: 'formatting',\r\n      progress: 50,\r\n      message: 'PNG olu┼şturuluyor...',\r\n    });\r\n\r\n    // This would typically convert charts to PNG\r\n    const pngData = await ChartExportUtils.chartToPNG('mock-chart-element', {\r\n      width: 1200,\r\n      height: 800,\r\n      backgroundColor: '#ffffff',\r\n      quality: 0.9,\r\n      format: 'png',\r\n    });\r\n\r\n    this.updateProgress(exportId, {\r\n      stage: 'finalizing',\r\n      progress: 90,\r\n      message: 'PNG haz─▒rlan─▒yor...',\r\n    });\r\n\r\n    const filename = config.filename || `chart_${Date.now()}.png`;\r\n    const fileSize = this.estimateFileSize(pngData, ExportFormat.PNG);\r\n\r\n    return {\r\n      success: true,\r\n      downloadUrl: `/api/exports/${filename}`,\r\n      filename,\r\n      fileSize,\r\n      format: ExportFormat.PNG,\r\n    };\r\n  }\r\n\r\n  private async exportToSVG<T>(\r\n    data: T,\r\n    config: ExportConfig,\r\n    exportId: string,\r\n  ): Promise<ExportResult> {\r\n    this.updateProgress(exportId, {\r\n      stage: 'formatting',\r\n      progress: 50,\r\n      message: 'SVG olu┼şturuluyor...',\r\n    });\r\n\r\n    // Mock SVG generation\r\n    const svgContent = `<svg width=\"800\" height=\"600\" xmlns=\"http://www.w3.org/2000/svg\">\r\n      <rect width=\"100%\" height=\"100%\" fill=\"#ffffff\"/>\r\n      <text x=\"50%\" y=\"50%\" text-anchor=\"middle\" font-family=\"Arial\" font-size=\"16\">\r\n        Chart Export Placeholder\r\n      </text>\r\n    </svg>`;\r\n\r\n    const filename = config.filename || `chart_${Date.now()}.svg`;\r\n    const fileSize = new Blob([svgContent]).size;\r\n\r\n    return {\r\n      success: true,\r\n      downloadUrl: `/api/exports/${filename}`,\r\n      filename,\r\n      fileSize,\r\n      format: ExportFormat.SVG,\r\n    };\r\n  }\r\n\r\n  // Helper methods\r\n  private generateExportId(): string {\r\n    return `export_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\r\n  }\r\n\r\n  private validateExportInputs(data: ReportResponse, config: ExportConfig): void {\r\n    if (!data?.data) {\r\n      throw new Error('Export edilecek veri bulunamad─▒');\r\n    }\r\n\r\n    if (!config.format || !Object.values(ExportFormat).includes(config.format as ExportFormat)) {\r\n      throw new Error('Ge├ğersiz export format─▒');\r\n    }\r\n  }\r\n\r\n  private needsOptimization<T>(data: T): boolean {\r\n    if (Array.isArray(data)) {\r\n      return data.length > 5000;\r\n    }\r\n\r\n    if (typeof data === 'object' && data !== null) {\r\n      const totalItems = Object.values(data).reduce((total: number, value) => {\r\n        if (Array.isArray(value)) {\r\n          return total + value.length;\r\n        }\r\n        return total + 1;\r\n      }, 0);\r\n      return totalItems > 5000;\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  private updateProgress(exportId: string, progress: ExportProgress): void {\r\n    const callback = this.progressCallbacks.get(exportId);\r\n    if (callback) {\r\n      callback(progress);\r\n    }\r\n  }\r\n\r\n  private async simulateProcessing(duration: number): Promise<void> {\r\n    return new Promise((resolve) => setTimeout(resolve, duration));\r\n  }\r\n\r\n  private estimateFileSize<T>(data: T, format: ExportFormat): number {\r\n    const dataSize = JSON.stringify(data).length;\r\n\r\n    switch (format) {\r\n      case ExportFormat.PDF:\r\n        return dataSize * 2; // PDF is typically larger\r\n      case ExportFormat.EXCEL:\r\n        return dataSize * 1.5; // Excel has some compression\r\n      case ExportFormat.CSV:\r\n        return dataSize * 0.8; // CSV is more compact\r\n      case ExportFormat.PNG:\r\n        return 50000; // Typical chart PNG size\r\n      case ExportFormat.SVG:\r\n        return dataSize * 0.5; // SVG is text-based\r\n      default:\r\n        return dataSize;\r\n    }\r\n  }\r\n\r\n  private formatDataForExcel<T>(data: T): { sheet: string; data: unknown[] }[] {\r\n    if (Array.isArray(data)) {\r\n      return data as { sheet: string; data: unknown[] }[];\r\n    }\r\n\r\n    // Convert object to array format suitable for Excel\r\n    const result: { sheet: string; data: unknown[] }[] = [];\r\n\r\n    if (data && typeof data === 'object') {\r\n      Object.entries(data).forEach(([key, value]) => {\r\n        if (Array.isArray(value)) {\r\n          result.push({ sheet: key, data: value });\r\n        } else {\r\n          result.push({ sheet: key, data: [value] });\r\n        }\r\n      });\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  private async processExcelChunk(chunk: { sheet: string; data: unknown[] }[]): Promise<{ sheet: string; data: unknown[]; processed: boolean; timestamp: Date }[]> {\r\n    // Process Excel chunk - format and validate data\r\n    return chunk.map((item) => ({\r\n      ...item,\r\n      processed: true,\r\n      timestamp: new Date(),\r\n    }));\r\n  }\r\n\r\n  private flattenData<T>(data: T): unknown[] {\r\n    if (Array.isArray(data)) {\r\n      return data;\r\n    }\r\n\r\n    const flattened: unknown[] = [];\r\n\r\n    if (data && typeof data === 'object') {\r\n      Object.entries(data).forEach(([key, value]) => {\r\n        if (Array.isArray(value)) {\r\n          flattened.push(...value.map((item: unknown) => ({ category: key, ...(typeof item === 'object' && item !== null ? item : { value: item }) })));\r\n        } else if (typeof value === 'object' && value !== null) {\r\n          flattened.push({ category: key, ...value });\r\n        } else {\r\n          flattened.push({ category: key, value });\r\n        }\r\n      });\r\n    }\r\n\r\n    return flattened;\r\n  }\r\n\r\n  private async streamToString(stream: ReadableStream): Promise<string> {\r\n    const reader = stream.getReader();\r\n    const decoder = new TextDecoder();\r\n    let result = '';\r\n\r\n    try {\r\n      while (true) {\r\n        const { done, value } = await reader.read();\r\n        if (done) break;\r\n        result += decoder.decode(value, { stream: true });\r\n      }\r\n    } finally {\r\n      reader.releaseLock();\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  private getRecordCount<T>(data: T): number {\r\n    if (Array.isArray(data)) {\r\n      return data.length;\r\n    }\r\n\r\n    if (typeof data === 'object' && data !== null) {\r\n      return Object.values(data).reduce((total: number, value) => {\r\n        if (Array.isArray(value)) {\r\n          return total + value.length;\r\n        }\r\n        return total + 1;\r\n      }, 0);\r\n    }\r\n\r\n    return 1;\r\n  }\r\n}\r\n\r\n// Singleton instance\r\nexport const exportService = new ExportService();\r\nexport default exportService;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\exportUtils.ts","messages":[{"ruleId":"@typescript-eslint/switch-exhaustiveness-check","severity":2,"message":"Switch is not exhaustive. Cases not matched: ChartType.BAR | ChartType.LINE | ChartType.PIE | ChartType.DOUGHNUT | ChartType.AREA | ChartType.SCATTER | ChartType.HEATMAP | ChartType.TREEMAP","line":147,"column":15,"nodeType":"MemberExpression","messageId":"switchIsNotExhaustive","endLine":147,"endColumn":31,"suggestions":[{"messageId":"addMissingCases","fix":{"range":[4753,4753],"text":"case ChartType.BAR: { throw new Error('Not implemented yet: ChartType.BAR case') }\n        case ChartType.LINE: { throw new Error('Not implemented yet: ChartType.LINE case') }\n        case ChartType.PIE: { throw new Error('Not implemented yet: ChartType.PIE case') }\n        case ChartType.DOUGHNUT: { throw new Error('Not implemented yet: ChartType.DOUGHNUT case') }\n        case ChartType.AREA: { throw new Error('Not implemented yet: ChartType.AREA case') }\n        case ChartType.SCATTER: { throw new Error('Not implemented yet: ChartType.SCATTER case') }\n        case ChartType.HEATMAP: { throw new Error('Not implemented yet: ChartType.HEATMAP case') }\n        case ChartType.TREEMAP: { throw new Error('Not implemented yet: ChartType.TREEMAP case') }\n        "},"desc":"Add branches for missing cases."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_width' is defined but never used.","line":205,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":205,"endColumn":11},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_height' is defined but never used.","line":206,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":206,"endColumn":12},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":296,"column":79,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":296,"endColumn":81,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8854,8856],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":332,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":332,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10106,10108],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":375,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":375,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11516,11518],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":422,"column":23,"nodeType":"MemberExpression","endLine":422,"endColumn":34},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":457,"column":23,"nodeType":"MemberExpression","endLine":457,"endColumn":34},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":484,"column":31,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":484,"endColumn":33,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14615,14617],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":507,"column":9,"nodeType":"BinaryExpression","messageId":"constantShortCircuit","endLine":507,"endColumn":23},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":507,"column":9,"nodeType":"BinaryExpression","messageId":"neverNullish","endLine":507,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_options' is defined but never used.","line":551,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":551,"endColumn":13},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":688,"column":43,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":688,"endColumn":62},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":702,"column":14,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":702,"endColumn":75},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":702,"column":14,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":702,"endColumn":60,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[21542,21543],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/switch-exhaustiveness-check","severity":2,"message":"Switch is not exhaustive. Cases not matched: ExportFormat.PDF | ExportFormat.PNG | ExportFormat.SVG","line":755,"column":13,"nodeType":"Identifier","messageId":"switchIsNotExhaustive","endLine":755,"endColumn":19,"suggestions":[{"messageId":"addMissingCases","fix":{"range":[23449,23449],"text":"case ExportFormat.PDF: { throw new Error('Not implemented yet: ExportFormat.PDF case') }\n      case ExportFormat.PNG: { throw new Error('Not implemented yet: ExportFormat.PNG case') }\n      case ExportFormat.SVG: { throw new Error('Not implemented yet: ExportFormat.SVG case') }\n      "},"desc":"Add branches for missing cases."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":815,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":815,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24786,24789],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24786,24789],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":817,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":817,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24861,24864],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24861,24864],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":817,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":817,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24885,24888],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24885,24888],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview exportUtils Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\n// Geli┼şmi┼ş Raporlama Sistemi - Export Utility Fonksiyonlar─▒\r\n\r\nimport { ExportFormat, type ChartConfig, type AnalyticsData } from '../types/reporting';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\n// Chart data interfaces\r\n/**\r\n * ChartDataPoint Interface\r\n * \r\n * @interface ChartDataPoint\r\n */\r\nexport interface ChartDataPoint {\r\n  value: number;\r\n  label?: string;\r\n  [key: string]: unknown;\r\n}\r\n\r\n/**\r\n * ChartDataset Interface\r\n * \r\n * @interface ChartDataset\r\n */\r\nexport interface ChartDataset<T extends ChartDataPoint = ChartDataPoint> {\r\n  data: T[];\r\n  label?: string;\r\n  backgroundColor?: string | string[];\r\n  borderColor?: string | string[];\r\n  [key: string]: unknown;\r\n}\r\n\r\n// Chart export utilities\r\n/**\r\n * ChartExportOptions Interface\r\n * \r\n * @interface ChartExportOptions\r\n */\r\nexport interface ChartExportOptions {\r\n  width?: number;\r\n  height?: number;\r\n  backgroundColor?: string;\r\n  quality?: number;\r\n  format: 'png' | 'svg' | 'pdf';\r\n}\r\n\r\n/**\r\n * ExportDataOptions Interface\r\n * \r\n * @interface ExportDataOptions\r\n */\r\nexport interface ExportDataOptions {\r\n  includeHeaders?: boolean;\r\n  dateFormat?: string;\r\n  numberFormat?: string;\r\n  currencySymbol?: string;\r\n  delimiter?: string;\r\n  encoding?: string;\r\n}\r\n\r\n/**\r\n * OptimizationOptions Interface\r\n * \r\n * @interface OptimizationOptions\r\n */\r\nexport interface OptimizationOptions {\r\n  chunkSize?: number;\r\n  maxMemoryUsage?: number;\r\n  compressionLevel?: number;\r\n  streamingThreshold?: number;\r\n}\r\n\r\n/**\r\n * Chart export utilities for converting charts to various formats\r\n */\r\n/**\r\n * ChartExportUtils Service\r\n * \r\n * Service class for handling chartexportutils operations\r\n * \r\n * @class ChartExportUtils\r\n */\r\nexport class ChartExportUtils {\r\n  /**\r\n   * Convert chart to PNG format\r\n   */\r\n  static async chartToPNG(\r\n    chartElement: HTMLElement | string,\r\n    options: ChartExportOptions = { format: 'png' },\r\n  ): Promise<string> {\r\n    const { width = 800, height = 600, backgroundColor = '#ffffff', quality = 0.9 } = options;\r\n\r\n    try {\r\n      // Create canvas element\r\n      const canvas = document.createElement('canvas');\r\n      canvas.width = width;\r\n      canvas.height = height;\r\n      const ctx = canvas.getContext('2d');\r\n\r\n      if (!ctx) {\r\n        throw new Error('Canvas context not available');\r\n      }\r\n\r\n      // Set background\r\n      ctx.fillStyle = backgroundColor;\r\n      ctx.fillRect(0, 0, width, height);\r\n\r\n      // Convert chart element to image\r\n      if (typeof chartElement === 'string') {\r\n        // If SVG string, convert to image\r\n        const img = await this.svgStringToImage(chartElement, width, height);\r\n        ctx.drawImage(img, 0, 0, width, height);\r\n      } else {\r\n        // If HTML element, use html2canvas-like functionality\r\n        await this.htmlElementToCanvas(chartElement, ctx, width, height);\r\n      }\r\n\r\n      // Convert to PNG data URL\r\n      return canvas.toDataURL('image/png', quality);\r\n    } catch (error) {\r\n      throw new Error(\r\n        `PNG export failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert chart to SVG format\r\n   */\r\n  static async chartToSVG<T extends ChartDataPoint>(\r\n    chartData: ChartDataset<T> | T[],\r\n    chartConfig: ChartConfig,\r\n    options: ChartExportOptions = { format: 'svg' },\r\n  ): Promise<string> {\r\n    const { width = 800, height = 600, backgroundColor = '#ffffff' } = options;\r\n\r\n    try {\r\n      // Create SVG structure\r\n      const svg = this.createSVGElement(width, height, backgroundColor);\r\n\r\n      // Add chart elements based on type\r\n      switch (chartConfig.type) {\r\n        case 'bar':\r\n          this.addBarChartToSVG(svg, chartData, chartConfig, width, height);\r\n          break;\r\n        case 'line':\r\n          this.addLineChartToSVG(svg, chartData, chartConfig, width, height);\r\n          break;\r\n        case 'pie':\r\n          this.addPieChartToSVG(svg, chartData, chartConfig, width, height);\r\n          break;\r\n        case 'doughnut':\r\n          this.addDoughnutChartToSVG(svg, chartData, chartConfig, width, height);\r\n          break;\r\n        case 'area':\r\n          this.addAreaChartToSVG(svg, chartData, chartConfig, width, height);\r\n          break;\r\n        case 'scatter':\r\n          this.addScatterChartToSVG(svg, chartData, chartConfig, width, height);\r\n          break;\r\n        case 'heatmap':\r\n          this.addHeatmapChartToSVG(svg, chartData, chartConfig, width, height);\r\n          break;\r\n        case 'treemap':\r\n          this.addTreemapChartToSVG(svg, chartData, chartConfig, width, height);\r\n          break;\r\n        default:\r\n          throw new Error(`Unsupported chart type: ${chartConfig.type}`);\r\n      }\r\n\r\n      return svg.outerHTML;\r\n    } catch (error) {\r\n      throw new Error(\r\n        `SVG export failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Convert chart to PDF-compatible format\r\n   */\r\n  static async chartToPDF(\r\n    chartElement: HTMLElement | string,\r\n    options: ChartExportOptions = { format: 'pdf' },\r\n  ): Promise<string> {\r\n    // For PDF, we'll convert to high-quality PNG first\r\n    const pngData = await this.chartToPNG(chartElement, {\r\n      ...options,\r\n      quality: 1.0,\r\n      width: options.width ?? 1200,\r\n      height: options.height ?? 900,\r\n    });\r\n\r\n    return pngData;\r\n  }\r\n\r\n  // Private helper methods\r\n  private static async svgStringToImage(\r\n    svgString: string,\r\n    _width: number,\r\n    _height: number,\r\n  ): Promise<HTMLImageElement> {\r\n    return new Promise((resolve, reject) => {\r\n      const img = new Image();\r\n\r\n      const blob = new Blob([svgString], { type: 'image/svg+xml' });\r\n      const url = URL.createObjectURL(blob);\r\n\r\n      img.onload = () => {\r\n        URL.revokeObjectURL(url); // Clean up object URL\r\n        resolve(img);\r\n      };\r\n\r\n      img.onerror = (err) => {\r\n        URL.revokeObjectURL(url); // Clean up object URL on error\r\n        reject(err);\r\n      };\r\n\r\n      img.src = url;\r\n    });\r\n  }\r\n\r\n  private static async htmlElementToCanvas(\r\n    element: HTMLElement,\r\n    ctx: CanvasRenderingContext2D,\r\n    width: number,\r\n    height: number,\r\n  ): Promise<void> {\r\n    // Simplified implementation - in real app, use html2canvas library\r\n    const rect = element.getBoundingClientRect();\r\n    const scaleX = width / rect.width;\r\n    const scaleY = height / rect.height;\r\n\r\n    ctx.scale(Math.min(scaleX, scaleY), Math.min(scaleX, scaleY));\r\n\r\n    // Mock drawing - replace with actual html2canvas implementation\r\n    ctx.fillStyle = '#f0f0f0';\r\n    ctx.fillRect(0, 0, width, height);\r\n    ctx.fillStyle = '#333';\r\n    ctx.font = '16px Arial';\r\n    ctx.fillText('Chart Export Placeholder', 50, 50);\r\n  }\r\n\r\n  private static createSVGElement(\r\n    width: number,\r\n    height: number,\r\n    backgroundColor: string,\r\n  ): SVGSVGElement {\r\n    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');\r\n    svg.setAttribute('width', width.toString());\r\n    svg.setAttribute('height', height.toString());\r\n    svg.setAttribute('viewBox', `0 0 ${width} ${height}`);\r\n\r\n    // Add background\r\n    const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\r\n    rect.setAttribute('width', '100%');\r\n    rect.setAttribute('height', '100%');\r\n    rect.setAttribute('fill', backgroundColor);\r\n    svg.appendChild(rect);\r\n\r\n    return svg;\r\n  }\r\n\r\n  private static addBarChartToSVG<T extends ChartDataPoint>(\r\n    svg: SVGSVGElement,\r\n    data: T[],\r\n    config: ChartConfig,\r\n    width: number,\r\n    height: number,\r\n  ): void {\r\n    const margin = { top: 20, right: 20, bottom: 40, left: 60 };\r\n    const chartWidth = width - margin.left - margin.right;\r\n    const chartHeight = height - margin.top - margin.bottom;\r\n\r\n    // Create chart group\r\n    const chartGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');\r\n    chartGroup.setAttribute('transform', `translate(${margin.left}, ${margin.top})`);\r\n\r\n    // Add bars (simplified)\r\n    data.forEach((item, index) => {\r\n      const barHeight = (item.value / Math.max(...data.map((d) => d.value))) * chartHeight;\r\n      const barWidth = (chartWidth / data.length) * 0.8;\r\n      const x = (chartWidth / data.length) * index + (chartWidth / data.length - barWidth) / 2;\r\n      const y = chartHeight - barHeight;\r\n\r\n      const rect = document.createElementNS('http://www.w3.org/2000/svg', 'rect');\r\n      rect.setAttribute('x', x.toString());\r\n      rect.setAttribute('y', y.toString());\r\n      rect.setAttribute('width', barWidth.toString());\r\n      rect.setAttribute('height', barHeight.toString());\r\n      rect.setAttribute('fill', config.colors?.[index % config.colors.length] || '#3b82f6');\r\n\r\n      chartGroup.appendChild(rect);\r\n    });\r\n\r\n    svg.appendChild(chartGroup);\r\n  }\r\n\r\n  private static addLineChartToSVG<T extends ChartDataPoint>(\r\n    svg: SVGSVGElement,\r\n    data: T[],\r\n    config: ChartConfig,\r\n    width: number,\r\n    height: number,\r\n  ): void {\r\n    const margin = { top: 20, right: 20, bottom: 40, left: 60 };\r\n    const chartWidth = width - margin.left - margin.right;\r\n    const chartHeight = height - margin.top - margin.bottom;\r\n\r\n    // Create chart group\r\n    const chartGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');\r\n    chartGroup.setAttribute('transform', `translate(${margin.left}, ${margin.top})`);\r\n\r\n    // Create line path\r\n    const maxValue = Math.max(...data.map((d) => d.value));\r\n    const points = data\r\n      .map((item, index) => {\r\n        const x = (chartWidth / (data.length - 1)) * index;\r\n        const y = chartHeight - (item.value / maxValue) * chartHeight;\r\n        return `${x},${y}`;\r\n      })\r\n      .join(' ');\r\n\r\n    const polyline = document.createElementNS('http://www.w3.org/2000/svg', 'polyline');\r\n    polyline.setAttribute('points', points);\r\n    polyline.setAttribute('fill', 'none');\r\n    polyline.setAttribute('stroke', config.colors?.[0] || '#3b82f6');\r\n    polyline.setAttribute('stroke-width', '2');\r\n\r\n    chartGroup.appendChild(polyline);\r\n    svg.appendChild(chartGroup);\r\n  }\r\n\r\n  private static addPieChartToSVG<T extends ChartDataPoint>(\r\n    svg: SVGSVGElement,\r\n    data: T[],\r\n    config: ChartConfig,\r\n    width: number,\r\n    height: number,\r\n  ): void {\r\n    const centerX = width / 2;\r\n    const centerY = height / 2;\r\n    const radius = Math.min(width, height) / 2 - 20;\r\n\r\n    const total = data.reduce((sum, item) => sum + item.value, 0);\r\n    let currentAngle = 0;\r\n\r\n    data.forEach((item, index) => {\r\n      const sliceAngle = (item.value / total) * 2 * Math.PI;\r\n      const endAngle = currentAngle + sliceAngle;\r\n\r\n      const x1 = centerX + radius * Math.cos(currentAngle);\r\n      const y1 = centerY + radius * Math.sin(currentAngle);\r\n      const x2 = centerX + radius * Math.cos(endAngle);\r\n      const y2 = centerY + radius * Math.sin(endAngle);\r\n\r\n      const largeArcFlag = sliceAngle > Math.PI ? 1 : 0;\r\n\r\n      const pathData = [\r\n        `M ${centerX} ${centerY}`,\r\n        `L ${x1} ${y1}`,\r\n        `A ${radius} ${radius} 0 ${largeArcFlag} 1 ${x2} ${y2}`,\r\n        'Z',\r\n      ].join(' ');\r\n\r\n      const path = document.createElementNS('http://www.w3.org/2000/svg', 'path');\r\n      path.setAttribute('d', pathData);\r\n      path.setAttribute(\r\n        'fill',\r\n        config.colors?.[index % config.colors.length] ||\r\n          `hsl(${(index * 360) / data.length}, 70%, 50%)`,\r\n      );\r\n\r\n      svg.appendChild(path);\r\n      currentAngle = endAngle;\r\n    });\r\n  }\r\n}\r\n\r\n/**\r\n * Data formatting utilities for export\r\n */\r\n/**\r\n * DataFormattingUtils Service\r\n * \r\n * Service class for handling dataformattingutils operations\r\n * \r\n * @class DataFormattingUtils\r\n */\r\nexport class DataFormattingUtils {\r\n  /**\r\n   * Format data for CSV export\r\n   */\r\n  static formatForCSV<T extends Record<string, unknown>>(data: T[], options: ExportDataOptions = {}): string {\r\n    const {\r\n      includeHeaders = true,\r\n      delimiter = ',',\r\n      dateFormat = 'YYYY-MM-DD',\r\n      numberFormat = '0.00',\r\n    } = options;\r\n\r\n    if (!Array.isArray(data) || data.length === 0) {\r\n      return '';\r\n    }\r\n\r\n    const headers = Object.keys(data[0] || {});\r\n    const rows: string[] = [];\r\n\r\n    // Add headers if requested\r\n    if (includeHeaders) {\r\n      rows.push(headers.map((header) => this.escapeCSVField(header)).join(delimiter));\r\n    }\r\n\r\n    // Add data rows\r\n    data.forEach((row) => {\r\n      const values = headers.map((header) => {\r\n        const value = row[header];\r\n        return this.formatCSVValue(value as string | number | boolean | Date | null | undefined, { dateFormat, numberFormat });\r\n      });\r\n      rows.push(values.map((value) => this.escapeCSVField(value)).join(delimiter));\r\n    });\r\n\r\n    return rows.join('\\n');\r\n  }\r\n\r\n  /**\r\n   * Format data for Excel export\r\n   */\r\n  static formatForExcel<T extends Record<string, unknown>>(data: T[], options: ExportDataOptions = {}): unknown[][] {\r\n    const {\r\n      includeHeaders = true,\r\n      dateFormat = 'YYYY-MM-DD',\r\n      numberFormat = '0.00',\r\n      currencySymbol = 'Ôé║',\r\n    } = options;\r\n\r\n    if (!Array.isArray(data) || data.length === 0) {\r\n      return [];\r\n    }\r\n\r\n    const headers = Object.keys(data[0] || {});\r\n    const result: unknown[][] = [];\r\n\r\n    // Add headers if requested\r\n    if (includeHeaders) {\r\n      result.push(headers);\r\n    }\r\n\r\n    // Add data rows\r\n    data.forEach((row) => {\r\n      const values = headers.map((header) => {\r\n        const value = row[header];\r\n        return this.formatExcelValue(value as string | number | boolean | Date | null | undefined, { dateFormat, numberFormat, currencySymbol });\r\n      });\r\n      result.push(values);\r\n    });\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * Format analytics data for export\r\n   */\r\n  static formatAnalyticsData(\r\n    analyticsData: AnalyticsData,\r\n    options: ExportDataOptions = {},\r\n  ): {\r\n    metrics: Record<string, string>[];\r\n    timeSeries: Record<string, unknown>[];\r\n    categories: Record<string, string>[];\r\n    summary: Record<string, string>;\r\n  } {\r\n    return {\r\n      metrics: analyticsData.metrics.map((metric) => ({\r\n        Metrik: metric.key,\r\n        De─şer: this.formatNumber(metric.value, options.numberFormat),\r\n        De─şi┼şim: metric.change ? `${metric.change > 0 ? '+' : ''}${metric.change.toFixed(2)}` : '',\r\n        Trend: metric.trend === 'up' ? 'Ôåù' : metric.trend === 'down' ? 'Ôåİ' : 'ÔåÆ',\r\n        Format: metric.format || 'number',\r\n      })),\r\n      timeSeries: analyticsData.timeSeries.map((ts) => ({\r\n        Tarih: this.formatDate(new Date(ts.date), options.dateFormat),\r\n        ...ts.values,\r\n      })),\r\n      categories: analyticsData.categories.map((cat) => ({\r\n        Kategori: cat.name,\r\n        De─şer: this.formatNumber(cat.value, options.numberFormat),\r\n        Y├╝zde: `${cat.percentage.toFixed(1)}%`,\r\n      })),\r\n      summary: {\r\n        'Mevcut De─şer': this.formatNumber(analyticsData.comparisons.current, options.numberFormat),\r\n        '├ûnceki De─şer': this.formatNumber(analyticsData.comparisons.previous, options.numberFormat),\r\n        De─şi┼şim: this.formatNumber(analyticsData.comparisons.change, options.numberFormat),\r\n        'De─şi┼şim Y├╝zdesi': `${analyticsData.comparisons.changePercent.toFixed(2)}%`,\r\n      },\r\n    };\r\n  }\r\n\r\n  // Private helper methods\r\n  private static escapeCSVField(field: string | number | boolean | Date | null | undefined): string {\r\n    // Handle null/undefined values\r\n    if (field === null ?? field === undefined) {\r\n      return '';\r\n    }\r\n\r\n    // Convert non-string inputs to strings\r\n    if (typeof field !== 'string') {\r\n      field = String(field);\r\n    }\r\n\r\n    // Check for characters that require escaping: comma, quote, newline, carriage return\r\n    if (\r\n      field.includes(',') ||\r\n      field.includes('\"') ||\r\n      field.includes('\\n') ||\r\n      field.includes('\\r')\r\n    ) {\r\n      // Escape double-quotes by doubling them and wrap entire field in quotes\r\n      return `\"${field.replace(/\"/g, '\"\"')}\"`;\r\n    }\r\n\r\n    return field;\r\n  }\r\n\r\n  private static formatCSVValue(\r\n    value: string | number | boolean | Date | null | undefined,\r\n    options: { dateFormat?: string; numberFormat?: string },\r\n  ): string {\r\n    if (value === null || value === undefined) {\r\n      return '';\r\n    }\r\n\r\n    if (value instanceof Date) {\r\n      return this.formatDate(value, options.dateFormat);\r\n    }\r\n\r\n    if (typeof value === 'number') {\r\n      return this.formatNumber(value, options.numberFormat);\r\n    }\r\n\r\n    return String(value);\r\n  }\r\n\r\n  private static formatExcelValue(\r\n    value: string | number | boolean | Date | null | undefined,\r\n    _options: { dateFormat?: string; numberFormat?: string; currencySymbol?: string },\r\n  ): string | number | Date {\r\n    if (value === null || value === undefined) {\r\n      return '';\r\n    }\r\n\r\n    if (value instanceof Date) {\r\n      return value; // Excel handles dates natively\r\n    }\r\n\r\n    if (typeof value === 'number') {\r\n      return value; // Excel handles numbers natively\r\n    }\r\n\r\n    return String(value);\r\n  }\r\n\r\n  private static formatDate(date: Date, format = 'YYYY-MM-DD'): string {\r\n    const year = date.getFullYear();\r\n    const month = String(date.getMonth() + 1).padStart(2, '0');\r\n    const day = String(date.getDate()).padStart(2, '0');\r\n\r\n    return format.replace('YYYY', year.toString()).replace('MM', month).replace('DD', day);\r\n  }\r\n\r\n  private static formatNumber(value: number | string, format = '0.00'): string {\r\n    const num = typeof value === 'string' ? parseFloat(value) : value;\r\n\r\n    if (isNaN(num)) {\r\n      return String(value);\r\n    }\r\n\r\n    const decimals = format.includes('.') ? (format.split('.')[1]?.length || 0) : 0;\r\n    return num.toFixed(decimals);\r\n  }\r\n}\r\n\r\n/**\r\n * Large dataset optimization utilities\r\n */\r\n/**\r\n * OptimizationUtils Service\r\n * \r\n * Service class for handling optimizationutils operations\r\n * \r\n * @class OptimizationUtils\r\n */\r\nexport class OptimizationUtils {\r\n  /**\r\n   * Process large datasets in chunks to prevent memory issues\r\n   */\r\n  static async processInChunks<T, R>(\r\n    data: T[],\r\n    processor: (chunk: T[]) => Promise<R[]> | R[],\r\n    options: OptimizationOptions = {},\r\n  ): Promise<R[]> {\r\n    const {\r\n      chunkSize = 1000,\r\n      maxMemoryUsage = 100 * 1024 * 1024, // 100MB\r\n    } = options;\r\n\r\n    const results: R[] = [];\r\n    const totalChunks = Math.ceil(data.length / chunkSize);\r\n\r\n    for (let i = 0; i < totalChunks; i++) {\r\n      const start = i * chunkSize;\r\n      const end = Math.min(start + chunkSize, data.length);\r\n      const chunk = data.slice(start, end);\r\n\r\n      // Check memory usage\r\n      if (this.getMemoryUsage() > maxMemoryUsage) {\r\n        // Force garbage collection if available (Node.js only)\r\n        if (typeof global !== 'undefined' && typeof global.gc === 'function') {\r\n          global.gc();\r\n        }\r\n\r\n        // Wait a bit to allow memory cleanup\r\n        await new Promise((resolve) => setTimeout(resolve, 100));\r\n      }\r\n\r\n      const chunkResults = await processor(chunk);\r\n      results.push(...chunkResults);\r\n\r\n      // Yield control to prevent blocking\r\n      if (i % 10 === 0) {\r\n        await new Promise((resolve) => setTimeout(resolve, 0));\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  /**\r\n   * Stream large exports to prevent memory issues\r\n   */\r\n  static streamExport(\r\n    data: Record<string, unknown>[] | ChartDataset[] | ChartDataPoint[],\r\n    format: ExportFormat,\r\n    options: OptimizationOptions = {},\r\n  ): Promise<ReadableStream> {\r\n    const { streamingThreshold = 10000, chunkSize = 1000 } = options;\r\n\r\n    if (data.length < streamingThreshold) {\r\n      // For small datasets, return regular export\r\n      return Promise.resolve(this.createSimpleStream(data, format));\r\n    }\r\n\r\n    // For large datasets, create streaming export\r\n    return Promise.resolve(new ReadableStream({\r\n      start(controller) {\r\n        OptimizationUtils.processLargeDataset(data, format, chunkSize, controller);\r\n      },\r\n    }));\r\n  }\r\n\r\n  /**\r\n   * Compress export data\r\n   */\r\n  static async compressData(\r\n    data: string | Uint8Array,\r\n    options: OptimizationOptions = {},\r\n  ): Promise<Uint8Array> {\r\n    const { compressionLevel = 6 } = options;\r\n\r\n    // Mock compression - in real implementation, use pako or similar library\r\n    const input = typeof data === 'string' ? new TextEncoder().encode(data) : data;\r\n\r\n    // Simulate compression by reducing size (mock)\r\n    const compressionRatio = Math.max(0.3, 1 - compressionLevel / 10);\r\n    const compressedSize = Math.floor(input.length * compressionRatio);\r\n\r\n    return input.slice(0, compressedSize);\r\n  }\r\n\r\n  // Private helper methods\r\n  private static getMemoryUsage(): number {\r\n    // Use real Node.js memory usage when available\r\n    if (typeof process !== 'undefined' && process.memoryUsage) {\r\n      return process.memoryUsage().rss; // Resident Set Size in bytes\r\n    }\r\n\r\n    // Fallback for browser environments - estimate based on performance API\r\n    interface PerformanceWithMemory extends Performance {\r\n      memory?: {\r\n        usedJSHeapSize: number;\r\n        totalJSHeapSize: number;\r\n        jsHeapSizeLimit: number;\r\n      };\r\n    }\r\n    \r\n    if (typeof performance !== 'undefined' && (performance as PerformanceWithMemory).memory) {\r\n      return (performance as PerformanceWithMemory).memory!.usedJSHeapSize ?? 0;\r\n    }\r\n\r\n    // Last resort fallback\r\n    logger.warn('Memory usage API not available, returning 0');\r\n    return 0;\r\n  }\r\n\r\n  private static createSimpleStream(data: Record<string, unknown>[] | ChartDataset[] | ChartDataPoint[], format: ExportFormat): ReadableStream {\r\n    let index = 0;\r\n\r\n    return new ReadableStream({\r\n      pull(controller) {\r\n        if (index >= data.length) {\r\n          controller.close();\r\n          return;\r\n        }\r\n\r\n        const chunk = OptimizationUtils.formatChunk(data.slice(index, index + 100), format);\r\n        controller.enqueue(chunk);\r\n        index += 100;\r\n      },\r\n    });\r\n  }\r\n\r\n  private static async processLargeDataset(\r\n    data: Record<string, unknown>[] | ChartDataset[] | ChartDataPoint[],\r\n    format: ExportFormat,\r\n    chunkSize: number,\r\n    controller: ReadableStreamDefaultController,\r\n  ): Promise<void> {\r\n    try {\r\n      for (let i = 0; i < data.length; i += chunkSize) {\r\n        const chunk = data.slice(i, i + chunkSize);\r\n        const formattedChunk = OptimizationUtils.formatChunk(chunk, format);\r\n\r\n        controller.enqueue(formattedChunk);\r\n\r\n        // Yield control periodically\r\n        if (i % (chunkSize * 10) === 0) {\r\n          await new Promise((resolve) => setTimeout(resolve, 0));\r\n        }\r\n      }\r\n\r\n      controller.close();\r\n    } catch (error) {\r\n      controller.error(error);\r\n    }\r\n  }\r\n\r\n  private static formatChunk(chunk: Record<string, unknown>[] | ChartDataset[] | ChartDataPoint[], format: ExportFormat): Uint8Array {\r\n    let formatted: string;\r\n\r\n    switch (format) {\r\n      case ExportFormat.CSV:\r\n        formatted = DataFormattingUtils.formatForCSV(chunk);\r\n        break;\r\n      case ExportFormat.EXCEL:\r\n        // For Excel, we'd need to format as XLSX binary data\r\n        formatted = JSON.stringify(DataFormattingUtils.formatForExcel(chunk));\r\n        break;\r\n      default:\r\n        formatted = JSON.stringify(chunk);\r\n    }\r\n\r\n    return new TextEncoder().encode(formatted);\r\n  }\r\n}\r\n\r\n/**\r\n * Export template system\r\n */\r\n/**\r\n * ExportTemplateUtils Service\r\n * \r\n * Service class for handling exporttemplateutils operations\r\n * \r\n * @class ExportTemplateUtils\r\n */\r\nexport class ExportTemplateUtils {\r\n  private static readonly templates = new Map<string, ExportTemplate>();\r\n\r\n  static registerTemplate(id: string, template: ExportTemplate): void {\r\n    this.templates.set(id, template);\r\n  }\r\n\r\n  static getTemplate(id: string): ExportTemplate | undefined {\r\n    return this.templates.get(id);\r\n  }\r\n\r\n  static applyTemplate<T>(data: T, templateId: string): T {\r\n    const template = this.getTemplate(templateId);\r\n    if (!template) {\r\n      return data;\r\n    }\r\n\r\n    return template.transform(data) as T;\r\n  }\r\n\r\n  // Initialize default templates\r\n  static initializeDefaultTemplates(): void {\r\n    // Default template\r\n    this.registerTemplate('default', {\r\n      name: 'Varsay─▒lan ┼Şablon',\r\n      description: 'Standart rapor format─▒',\r\n      transform: (data) => data,\r\n    });\r\n\r\n    // Executive summary template\r\n    this.registerTemplate('executive', {\r\n      name: 'Y├Ânetici ├ûzeti',\r\n      description: '├ûzet bilgiler ve grafikler',\r\n      transform: (data) => {\r\n        if ((data as any).metrics) {\r\n          // Only include key metrics\r\n          (data as any).metrics = (data as any).metrics.slice(0, 5);\r\n        }\r\n        return data;\r\n      },\r\n    });\r\n\r\n    // Detailed template\r\n    this.registerTemplate('detailed', {\r\n      name: 'Detayl─▒ Rapor',\r\n      description: 'T├╝m veriler ve analizler',\r\n      transform: (data) => {\r\n        // Include all available data\r\n        return {\r\n          ...(data as object),\r\n          includeAllDetails: true,\r\n          showCalculations: true,\r\n        };\r\n      },\r\n    });\r\n\r\n    // Presentation template\r\n    this.registerTemplate('presentation', {\r\n      name: 'Sunum Format─▒',\r\n      description: 'G├Ârsel a─ş─▒rl─▒kl─▒ format',\r\n      transform: (data) => {\r\n        return {\r\n          ...(data as object),\r\n          emphasizeVisuals: true,\r\n          reduceTextContent: true,\r\n        };\r\n      },\r\n    });\r\n  }\r\n}\r\n\r\ninterface ExportTemplate<T = unknown> {\r\n  name: string;\r\n  description: string;\r\n  transform: (data: T) => T;\r\n}\r\n\r\n// Initialize default templates\r\nExportTemplateUtils.initializeDefaultTemplates();\r\n\r\n// Export utilities are already exported as classes above\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\fileStorageService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":33,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":33,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[944,947],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[944,947],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":41,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":41,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1109,1112],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1109,1112],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":197,"column":63,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":197,"endColumn":65,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5135,5137],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":198,"column":79,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":198,"endColumn":81,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5224,5226],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":199,"column":69,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":199,"endColumn":71,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5303,5305],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":200,"column":65,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":200,"endColumn":67,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5378,5380],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":218,"column":9,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":218,"endColumn":37},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":236,"column":31,"nodeType":"ChainExpression","messageId":"alwaysTruthy","endLine":236,"endColumn":58},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":236,"column":38,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":236,"endColumn":40,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[6372,6374],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_key' is assigned a value but never used.","line":238,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":238,"endColumn":23},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":282,"column":58,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":282,"endColumn":60,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7957,7959],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":286,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":286,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8067,8069],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":287,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":287,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8134,8136],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":314,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":314,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9126,9128],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":319,"column":44,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":319,"endColumn":46,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9341,9343],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":320,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":320,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9393,9395],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":343,"column":17,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":343,"endColumn":19,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[9996,9998],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":353,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":353,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10300,10302],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":355,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":355,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10365,10367],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":356,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":356,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10414,10416],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":357,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":357,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10457,10459],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":376,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":376,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11029,11031],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":437,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":437,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12792,12794],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":438,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":438,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12859,12861],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":439,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":439,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12901,12903],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":440,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":440,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12945,12947],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":446,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":446,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13105,13107],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":447,"column":36,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":447,"endColumn":38,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13152,13154],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":466,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":466,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13703,13705],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":470,"column":38,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":470,"endColumn":42},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":473,"column":28,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":473,"endColumn":30,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[13956,13958],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":473,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":473,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13963,13965],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":474,"column":28,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":474,"endColumn":30,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[13997,13999],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":474,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":474,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14008,14010],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":482,"column":34,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":482,"endColumn":36,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[14402,14404],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":482,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":482,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14415,14417],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":483,"column":19,"nodeType":"MemberExpression","endLine":483,"endColumn":46},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":483,"column":46,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":483,"endColumn":48,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[14474,14476],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":485,"column":28,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":485,"endColumn":30,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[14550,14552],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":486,"column":35,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":486,"endColumn":37,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[14631,14633],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":486,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":486,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14645,14647],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":487,"column":19,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":487,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_errorResult' is assigned a value but never used.","line":509,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":509,"endColumn":25},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":517,"column":32,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":517,"endColumn":34,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[15470,15472],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":538,"column":24,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":538,"endColumn":26,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[15936,15938],"text":""},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":539,"column":11,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":539,"endColumn":16},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":548,"column":28,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":548,"endColumn":30,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[16214,16216],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":548,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":548,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16221,16223],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":549,"column":28,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":549,"endColumn":30,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[16255,16257],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":549,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":549,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16266,16268],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":555,"column":34,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":555,"endColumn":36,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[16512,16514],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":555,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":555,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16525,16527],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":556,"column":19,"nodeType":"MemberExpression","endLine":556,"endColumn":46},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":556,"column":46,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":556,"endColumn":48,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[16584,16586],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":558,"column":28,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":558,"endColumn":30,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[16660,16662],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":559,"column":35,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":559,"endColumn":37,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[16741,16743],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":559,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":559,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16755,16757],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":560,"column":19,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":560,"endColumn":32},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_options' is assigned a value but never used.","line":596,"column":5,"nodeType":null,"messageId":"unusedVar","endLine":596,"endColumn":13},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_data' is assigned a value but never used.","line":738,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":738,"endColumn":26},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":789,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":789,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[22632,22634],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":795,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":795,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[22869,22871],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":801,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":801,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[23153,23155],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Variable Assigned to Object Injection Sink","line":802,"column":26,"nodeType":"MemberExpression","endLine":802,"endColumn":53},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":803,"column":9,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":803,"endColumn":21},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_key' is assigned a value but never used.","line":886,"column":17,"nodeType":null,"messageId":"unusedVar","endLine":886,"endColumn":21},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":890,"column":35,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":890,"endColumn":37,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[25932,25934],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":891,"column":82,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":891,"endColumn":84,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[26021,26023],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":891,"column":89,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":891,"endColumn":91,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[26028,26030],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_key' is assigned a value but never used.","line":919,"column":19,"nodeType":null,"messageId":"unusedVar","endLine":919,"endColumn":23}],"suppressedMessages":[],"errorCount":6,"fatalErrorCount":0,"warningCount":64,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview Comprehensive File Storage Service\r\n * @description Centralized file management system with Supabase Storage integration\r\n */\r\n\r\nimport { supabase } from '../lib/supabase';\r\nimport { environment } from '../lib/environment';\r\nimport { monitoring } from './monitoringService';\r\nimport { logger } from '../lib/logging/logger';\r\n\r\n// =============================================================================\r\n// TYPES AND INTERFACES\r\n// =============================================================================\r\n\r\nexport interface FileMetadata {\r\n  id: string;\r\n  name: string;\r\n  size: number;\r\n  type: string;\r\n  bucket: string;\r\n  path: string;\r\n  url: string;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n  uploadedBy: string;\r\n  tags?: string[];\r\n  description?: string;\r\n  isPublic: boolean;\r\n  downloadCount: number;\r\n  lastDownloaded?: Date;\r\n  checksum?: string;\r\n  version?: number;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\nexport interface FileUploadOptions {\r\n  bucket?: string;\r\n  folder?: string;\r\n  isPublic?: boolean;\r\n  overwrite?: boolean;\r\n  metadata?: Record<string, any>;\r\n  tags?: string[];\r\n  description?: string;\r\n  maxSize?: number; // bytes\r\n  allowedTypes?: string[];\r\n  generateThumbnail?: boolean;\r\n  compress?: boolean;\r\n}\r\n\r\nexport interface FileUploadResult {\r\n  success: boolean;\r\n  file?: FileMetadata;\r\n  error?: string;\r\n  url?: string;\r\n  path?: string;\r\n}\r\n\r\nexport interface FileListOptions {\r\n  bucket?: string;\r\n  folder?: string;\r\n  limit?: number;\r\n  offset?: number;\r\n  sortBy?: 'name' | 'size' | 'createdAt' | 'updatedAt';\r\n  sortOrder?: 'asc' | 'desc';\r\n  search?: string;\r\n  tags?: string[];\r\n  type?: string;\r\n  uploadedBy?: string;\r\n}\r\n\r\nexport interface FileListResult {\r\n  files: FileMetadata[];\r\n  total: number;\r\n  hasMore: boolean;\r\n  nextOffset?: number;\r\n}\r\n\r\nexport interface FileDownloadOptions {\r\n  download?: boolean;\r\n  filename?: string;\r\n  disposition?: 'inline' | 'attachment';\r\n}\r\n\r\nexport interface StorageConfig {\r\n  buckets: Record<\r\n    string,\r\n    {\r\n      name: string;\r\n      isPublic: boolean;\r\n      allowedTypes: string[];\r\n      maxSize: number; // bytes\r\n      retention?: number; // days\r\n      versioning: boolean;\r\n      encryption: boolean;\r\n      compression: boolean;\r\n    }\r\n  >;\r\n  defaultBucket: string;\r\n  uploadLimits: {\r\n    maxFileSize: number; // bytes\r\n    maxFilesPerUpload: number;\r\n    allowedMimeTypes: string[];\r\n  };\r\n  security: {\r\n    enableVirusScan: boolean;\r\n    enableContentModeration: boolean;\r\n    enableWatermarking: boolean;\r\n    enableEncryption: boolean;\r\n  };\r\n}\r\n\r\n// =============================================================================\r\n// STORAGE CONFIGURATION\r\n// =============================================================================\r\n\r\nconst STORAGE_CONFIG: StorageConfig = {\r\n  buckets: {\r\n    documents: {\r\n      name: 'documents',\r\n      isPublic: false,\r\n      allowedTypes: [\r\n        'application/pdf',\r\n        'application/msword',\r\n        'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n        'text/plain',\r\n      ],\r\n      maxSize: 10 * 1024 * 1024, // 10MB\r\n      versioning: true,\r\n      encryption: true,\r\n      compression: false,\r\n    },\r\n    images: {\r\n      name: 'images',\r\n      isPublic: true,\r\n      allowedTypes: ['image/jpeg', 'image/png', 'image/gif', 'image/webp', 'image/svg+xml'],\r\n      maxSize: 5 * 1024 * 1024, // 5MB\r\n      versioning: true,\r\n      encryption: false,\r\n      compression: true,\r\n    },\r\n    reports: {\r\n      name: 'reports',\r\n      isPublic: false,\r\n      allowedTypes: [\r\n        'application/pdf',\r\n        'application/vnd.ms-excel',\r\n        'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n      ],\r\n      maxSize: 50 * 1024 * 1024, // 50MB\r\n      versioning: true,\r\n      encryption: true,\r\n      compression: true,\r\n    },\r\n    temp: {\r\n      name: 'temp',\r\n      isPublic: false,\r\n      allowedTypes: ['*/*'],\r\n      maxSize: 100 * 1024 * 1024, // 100MB\r\n      retention: 7, // 7 days\r\n      versioning: false,\r\n      encryption: false,\r\n      compression: false,\r\n    },\r\n    backups: {\r\n      name: 'backups',\r\n      isPublic: false,\r\n      allowedTypes: ['application/zip', 'application/gzip', 'application/x-tar'],\r\n      maxSize: 500 * 1024 * 1024, // 500MB\r\n      versioning: true,\r\n      encryption: true,\r\n      compression: true,\r\n    },\r\n  },\r\n  defaultBucket: 'documents',\r\n  uploadLimits: {\r\n    maxFileSize: 100 * 1024 * 1024, // 100MB\r\n    maxFilesPerUpload: 10,\r\n    allowedMimeTypes: [\r\n      'image/jpeg',\r\n      'image/png',\r\n      'image/gif',\r\n      'image/webp',\r\n      'image/svg+xml',\r\n      'application/pdf',\r\n      'application/msword',\r\n      'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\r\n      'application/vnd.ms-excel',\r\n      'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\r\n      'text/plain',\r\n      'text/csv',\r\n      'application/zip',\r\n      'application/gzip',\r\n      'application/x-tar',\r\n    ],\r\n  },\r\n  security: {\r\n    enableVirusScan: environment.features.security?.virusScan || false,\r\n    enableContentModeration: environment.features.security?.contentModeration || false,\r\n    enableWatermarking: environment.features.security?.watermarking || false,\r\n    enableEncryption: environment.features.security?.encryption || false,\r\n  },\r\n};\r\n\r\n// =============================================================================\r\n// FILE STORAGE SERVICE CLASS\r\n// =============================================================================\r\n\r\nexport class FileStorageService {\r\n  private static instance: FileStorageService;\r\n  private readonly config: StorageConfig;\r\n\r\n  private constructor() {\r\n    this.config = STORAGE_CONFIG;\r\n    this.initializeBuckets();\r\n  }\r\n\r\n  public static getInstance(): FileStorageService {\r\n    if (!FileStorageService.instance) {\r\n      FileStorageService.instance = new FileStorageService();\r\n    }\r\n    return FileStorageService.instance;\r\n  }\r\n\r\n  /**\r\n   * Initialize storage buckets\r\n   */\r\n  private async initializeBuckets(): Promise<void> {\r\n    try {\r\n      const { data: buckets, error } = await supabase.storage.listBuckets();\r\n\r\n      if (error) {\r\n        logger.error('Failed to list buckets:', error);\r\n        return;\r\n      }\r\n\r\n      const existingBuckets = buckets?.map((b) => b.name) || [];\r\n\r\n      for (const [_key, config] of Object.entries(this.config.buckets)) {\r\n        if (!existingBuckets.includes(config.name)) {\r\n          const { error: createError } = await supabase.storage.createBucket(config.name, {\r\n            public: config.isPublic,\r\n            allowedMimeTypes: config.allowedTypes,\r\n            fileSizeLimit: config.maxSize,\r\n          });\r\n\r\n          if (createError) {\r\n            logger.error(`Failed to create bucket ${config.name}:`, createError);\r\n          } else {\r\n            logger.info(`Ô£à Created bucket: ${config.name}`);\r\n          }\r\n        }\r\n      }\r\n\r\n      monitoring.trackEvent({\r\n        type: 'file_storage_initialized',\r\n        category: 'storage',\r\n        action: 'initialize',\r\n        metadata: {\r\n          buckets: Object.keys(this.config.buckets),\r\n          totalBuckets: Object.keys(this.config.buckets).length,\r\n        },\r\n      });\r\n    } catch (error) {\r\n      logger.error('Failed to initialize buckets:', error);\r\n    }\r\n  }\r\n\r\n  // =============================================================================\r\n  // FILE UPLOAD OPERATIONS\r\n  // =============================================================================\r\n\r\n  /**\r\n   * Upload single file\r\n   */\r\n  async uploadFile(file: File, options: FileUploadOptions = {}): Promise<FileUploadResult> {\r\n    const startTime = Date.now();\r\n\r\n    try {\r\n      // Validate file\r\n      const validation = this.validateFile(file, options);\r\n      if (!validation.valid) {\r\n        return { success: false, error: validation.error || 'Validation failed' };\r\n      }\r\n\r\n      // Determine bucket and path\r\n      const bucket = options.bucket || this.config.defaultBucket;\r\n      const folder = options.folder || '';\r\n      const fileName = this.generateUniqueFileName(file.name, options.overwrite);\r\n      const filePath = folder ? `${folder}/${fileName}` : fileName;\r\n\r\n      // Check if file already exists\r\n      if (!options.overwrite) {\r\n        const { data: existingFiles } = await supabase.storage\r\n          .from(bucket)\r\n          .list(folder, { search: fileName });\r\n\r\n        if (existingFiles && existingFiles.length > 0) {\r\n          return {\r\n            success: false,\r\n            error: `File already exists: ${fileName}. Set overwrite=true to replace.`,\r\n          };\r\n        }\r\n      }\r\n\r\n      // Process file (compression, encryption, etc.)\r\n      let processedFile = file;\r\n      if (options.compress) {\r\n        processedFile = await this.processFile(file);\r\n      }\r\n\r\n      // Upload to Supabase Storage\r\n      const { data, error } = await supabase.storage.from(bucket).upload(filePath, processedFile, {\r\n        cacheControl: '3600',\r\n        upsert: options.overwrite || false,\r\n        contentType: file.type,\r\n        metadata: {\r\n          originalName: file.name,\r\n          uploadedBy: 'system', // In real app, get from auth context\r\n          description: options.description || '',\r\n          tags: JSON.stringify(options.tags || []),\r\n          ...options.metadata,\r\n        },\r\n      });\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      // Get file info\r\n      const { data: fileInfo } = await supabase.storage\r\n        .from(bucket)\r\n        .list(folder, { search: fileName });\r\n\r\n      if (!fileInfo || fileInfo.length === 0) {\r\n        throw new Error('Failed to get uploaded file info');\r\n      }\r\n\r\n      // Generate public URL\r\n      const { data: urlData } = supabase.storage.from(bucket).getPublicUrl(filePath);\r\n\r\n      // Create file metadata\r\n      const fileMetadata: FileMetadata = {\r\n        id: data?.path || filePath,\r\n        name: file.name,\r\n        size: file.size,\r\n        type: file.type,\r\n        bucket,\r\n        path: filePath,\r\n        url: urlData.publicUrl,\r\n        createdAt: new Date(),\r\n        updatedAt: new Date(),\r\n        uploadedBy: 'system',\r\n        isPublic: options.isPublic || false,\r\n        downloadCount: 0,\r\n        tags: options.tags || [],\r\n        description: options.description || '',\r\n        metadata: options.metadata || {},\r\n      };\r\n\r\n      // Save metadata to database (in real app)\r\n      await this.saveFileMetadata(fileMetadata);\r\n\r\n      const processingTime = Date.now() - startTime;\r\n      const result: FileUploadResult = {\r\n        success: true,\r\n        file: fileMetadata,\r\n        url: fileMetadata.url,\r\n        path: fileMetadata.path,\r\n      };\r\n\r\n      // Track success\r\n      monitoring.trackApiCall('file_storage/upload', 'POST', processingTime, 200, {\r\n        bucket,\r\n        fileSize: file.size,\r\n        fileType: file.type,\r\n        compressed: options.compress || false,\r\n      });\r\n\r\n      return result;\r\n    } catch (error) {\r\n      const processingTime = Date.now() - startTime;\r\n      const errorResult: FileUploadResult = {\r\n        success: false,\r\n        error: (error as Error).message,\r\n      };\r\n\r\n      // Track error\r\n      monitoring.trackApiCall('file_storage/upload', 'POST', processingTime, 500, {\r\n        fileSize: file.size,\r\n        fileType: file.type,\r\n        error: (error as Error).message,\r\n      });\r\n\r\n      return errorResult;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Upload multiple files\r\n   */\r\n  async uploadFiles(files: File[], options: FileUploadOptions = {}): Promise<FileUploadResult[]> {\r\n    const results: FileUploadResult[] = [];\r\n\r\n    // Check limits\r\n    if (files.length > this.config.uploadLimits.maxFilesPerUpload) {\r\n      const errorResult: FileUploadResult = {\r\n        success: false,\r\n        error: `Too many files. Maximum allowed: ${this.config.uploadLimits.maxFilesPerUpload}`,\r\n      };\r\n      return new Array(files.length).fill(errorResult);\r\n    }\r\n\r\n    for (const file of files) {\r\n      const result = await this.uploadFile(file, options);\r\n      results.push(result);\r\n\r\n      // Small delay between uploads to prevent rate limiting\r\n      if (files.length > 1) {\r\n        await new Promise((resolve) => setTimeout(resolve, 100));\r\n      }\r\n    }\r\n\r\n    return results;\r\n  }\r\n\r\n  // =============================================================================\r\n  // FILE RETRIEVAL OPERATIONS\r\n  // =============================================================================\r\n\r\n  /**\r\n   * List files\r\n   */\r\n  async listFiles(options: FileListOptions = {}): Promise<FileListResult> {\r\n    const startTime = Date.now();\r\n\r\n    try {\r\n      const bucket = options.bucket || this.config.defaultBucket;\r\n      const folder = options.folder || '';\r\n      const limit = options.limit || 50;\r\n      const offset = options.offset || 0;\r\n\r\n      const query = supabase.storage.from(bucket).list(folder, {\r\n        limit,\r\n        offset,\r\n        sortBy: {\r\n          column: options.sortBy || 'name',\r\n          order: options.sortOrder || 'asc',\r\n        },\r\n      });\r\n\r\n      // Apply filters\r\n      if (options.search) {\r\n        // Note: Supabase Storage doesn't support search in list operation\r\n        // This would require a separate metadata table query\r\n      }\r\n\r\n      const { data, error } = await query;\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      // Get total count (simplified - in real app, use metadata table)\r\n      const { data: allFiles } = await supabase.storage.from(bucket).list(folder, { limit: 1000 });\r\n\r\n      const total = allFiles?.length || 0;\r\n      const hasMore = offset + limit < total;\r\n\r\n      // Convert to FileMetadata objects\r\n      const files: FileMetadata[] = (data || []).map((file) => ({\r\n        id: file.id || file.name,\r\n        name: file.name,\r\n        size: file.metadata?.size || 0,\r\n        type: file.metadata?.mimetype || 'application/octet-stream',\r\n        bucket,\r\n        path: folder ? `${folder}/${file.name}` : file.name,\r\n        url: supabase.storage\r\n          .from(bucket)\r\n          .getPublicUrl(folder ? `${folder}/${file.name}` : file.name).data.publicUrl,\r\n        createdAt: new Date(file.created_at || ''),\r\n        updatedAt: new Date(file.updated_at || ''),\r\n        uploadedBy: file.metadata?.uploadedBy || 'system',\r\n        isPublic: this.config.buckets[bucket]?.isPublic || false,\r\n        downloadCount: 0,\r\n        tags: file.metadata?.tags ? JSON.parse(file.metadata.tags) : [],\r\n        description: file.metadata?.description || '',\r\n        metadata: file.metadata || {},\r\n      }));\r\n\r\n      const processingTime = Date.now() - startTime;\r\n      const result: FileListResult = {\r\n        files,\r\n        total,\r\n        hasMore,\r\n        nextOffset: hasMore ? offset + limit : 0,\r\n      };\r\n\r\n      // Track success\r\n      monitoring.trackApiCall('file_storage/list', 'GET', processingTime, 200, {\r\n        bucket,\r\n        count: files.length,\r\n        total,\r\n        hasMore,\r\n      });\r\n\r\n      return result;\r\n    } catch (error) {\r\n      const processingTime = Date.now() - startTime;\r\n      const _errorResult: FileListResult = {\r\n        files: [],\r\n        total: 0,\r\n        hasMore: false,\r\n      };\r\n\r\n      // Track error\r\n      monitoring.trackApiCall('file_storage/list', 'GET', processingTime, 500, {\r\n        bucket: options.bucket || this.config.defaultBucket,\r\n        error: (error as Error).message,\r\n      });\r\n\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get file info\r\n   */\r\n  async getFileInfo(bucket: string, filePath: string): Promise<FileMetadata | null> {\r\n    const startTime = Date.now();\r\n\r\n    try {\r\n      const { data, error } = await supabase.storage.from(bucket).list('', { search: filePath });\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      const file = data?.[0];\r\n      if (!file) {\r\n        return null;\r\n      }\r\n\r\n      const { data: urlData } = supabase.storage.from(bucket).getPublicUrl(filePath);\r\n\r\n      const fileInfo: FileMetadata = {\r\n        id: file.id || file.name,\r\n        name: file.name,\r\n        size: file.metadata?.size || 0,\r\n        type: file.metadata?.mimetype || 'application/octet-stream',\r\n        bucket,\r\n        path: filePath,\r\n        url: urlData.publicUrl,\r\n        createdAt: new Date(file.created_at || ''),\r\n        updatedAt: new Date(file.updated_at || ''),\r\n        uploadedBy: file.metadata?.uploadedBy || 'system',\r\n        isPublic: this.config.buckets[bucket]?.isPublic || false,\r\n        downloadCount: 0,\r\n        tags: file.metadata?.tags ? JSON.parse(file.metadata.tags) : [],\r\n        description: file.metadata?.description || '',\r\n        metadata: file.metadata || {},\r\n      };\r\n\r\n      const processingTime = Date.now() - startTime;\r\n\r\n      // Track success\r\n      monitoring.trackApiCall('file_storage/info', 'GET', processingTime, 200, {\r\n        bucket,\r\n        filePath,\r\n      });\r\n\r\n      return fileInfo;\r\n    } catch (error) {\r\n      const processingTime = Date.now() - startTime;\r\n\r\n      // Track error\r\n      monitoring.trackApiCall('file_storage/info', 'GET', processingTime, 500, {\r\n        bucket,\r\n        filePath,\r\n        error: (error as Error).message,\r\n      });\r\n\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // =============================================================================\r\n  // FILE DOWNLOAD OPERATIONS\r\n  // =============================================================================\r\n\r\n  /**\r\n   * Download file\r\n   */\r\n  async downloadFile(\r\n    bucket: string,\r\n    filePath: string,\r\n    _options: FileDownloadOptions = {},\r\n  ): Promise<Blob | null> {\r\n    const startTime = Date.now();\r\n\r\n    try {\r\n      const { data, error } = await supabase.storage.from(bucket).download(filePath);\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      // Update download count\r\n      await this.incrementDownloadCount(bucket, filePath);\r\n\r\n      const processingTime = Date.now() - startTime;\r\n\r\n      // Track success\r\n      monitoring.trackApiCall('file_storage/download', 'GET', processingTime, 200, {\r\n        bucket,\r\n        filePath,\r\n        fileSize: data.size,\r\n      });\r\n\r\n      return data;\r\n    } catch (error) {\r\n      const processingTime = Date.now() - startTime;\r\n\r\n      // Track error\r\n      monitoring.trackApiCall('file_storage/download', 'GET', processingTime, 500, {\r\n        bucket,\r\n        filePath,\r\n        error: (error as Error).message,\r\n      });\r\n\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get file URL\r\n   */\r\n  async getFileUrl(bucket: string, filePath: string, expiresIn = 3600): Promise<string | null> {\r\n    const startTime = Date.now();\r\n\r\n    try {\r\n      const { data, error } = await supabase.storage\r\n        .from(bucket)\r\n        .createSignedUrl(filePath, expiresIn);\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      const processingTime = Date.now() - startTime;\r\n\r\n      // Track success\r\n      monitoring.trackApiCall('file_storage/url', 'GET', processingTime, 200, {\r\n        bucket,\r\n        filePath,\r\n        expiresIn,\r\n      });\r\n\r\n      return data.signedUrl;\r\n    } catch (error) {\r\n      const processingTime = Date.now() - startTime;\r\n\r\n      // Track error\r\n      monitoring.trackApiCall('file_storage/url', 'GET', processingTime, 500, {\r\n        bucket,\r\n        filePath,\r\n        error: (error as Error).message,\r\n      });\r\n\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // =============================================================================\r\n  // FILE MANAGEMENT OPERATIONS\r\n  // =============================================================================\r\n\r\n  /**\r\n   * Delete file\r\n   */\r\n  async deleteFile(bucket: string, filePath: string): Promise<boolean> {\r\n    const startTime = Date.now();\r\n\r\n    try {\r\n      const { error } = await supabase.storage.from(bucket).remove([filePath]);\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      // Delete metadata from database (in real app)\r\n      await this.deleteFileMetadata(bucket, filePath);\r\n\r\n      const processingTime = Date.now() - startTime;\r\n\r\n      // Track success\r\n      monitoring.trackApiCall('file_storage/delete', 'DELETE', processingTime, 200, {\r\n        bucket,\r\n        filePath,\r\n      });\r\n\r\n      return true;\r\n    } catch (error) {\r\n      const processingTime = Date.now() - startTime;\r\n\r\n      // Track error\r\n      monitoring.trackApiCall('file_storage/delete', 'DELETE', processingTime, 500, {\r\n        bucket,\r\n        filePath,\r\n        error: (error as Error).message,\r\n      });\r\n\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Copy file\r\n   */\r\n  async copyFile(\r\n    sourceBucket: string,\r\n    sourcePath: string,\r\n    targetBucket: string,\r\n    targetPath: string,\r\n  ): Promise<FileMetadata | null> {\r\n    const startTime = Date.now();\r\n\r\n    try {\r\n      // Get source file\r\n      const { data: sourceFile, error: downloadError } = await supabase.storage\r\n        .from(sourceBucket)\r\n        .download(sourcePath);\r\n\r\n      if (downloadError) {\r\n        throw downloadError;\r\n      }\r\n\r\n      // Upload to target\r\n      const { data: _data, error: uploadError } = await supabase.storage\r\n        .from(targetBucket)\r\n        .upload(targetPath, sourceFile, {\r\n          cacheControl: '3600',\r\n          upsert: true,\r\n        });\r\n\r\n      if (uploadError) {\r\n        throw uploadError;\r\n      }\r\n\r\n      // Get file info\r\n      const fileInfo = await this.getFileInfo(targetBucket, targetPath);\r\n\r\n      const processingTime = Date.now() - startTime;\r\n\r\n      // Track success\r\n      monitoring.trackApiCall('file_storage/copy', 'POST', processingTime, 200, {\r\n        sourceBucket,\r\n        sourcePath,\r\n        targetBucket,\r\n        targetPath,\r\n        fileSize: sourceFile.size,\r\n      });\r\n\r\n      return fileInfo;\r\n    } catch (error) {\r\n      const processingTime = Date.now() - startTime;\r\n\r\n      // Track error\r\n      monitoring.trackApiCall('file_storage/copy', 'POST', processingTime, 500, {\r\n        sourceBucket,\r\n        sourcePath,\r\n        targetBucket,\r\n        targetPath,\r\n        error: (error as Error).message,\r\n      });\r\n\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // =============================================================================\r\n  // UTILITY METHODS\r\n  // =============================================================================\r\n\r\n  /**\r\n   * Validate file\r\n   */\r\n  private validateFile(file: File, options: FileUploadOptions): { valid: boolean; error?: string } {\r\n    // Check file size\r\n    const maxSize = options.maxSize || this.config.uploadLimits.maxFileSize;\r\n    if (file.size > maxSize) {\r\n      return { valid: false, error: `File size exceeds limit: ${maxSize} bytes` };\r\n    }\r\n\r\n    // Check file type\r\n    const allowedTypes = options.allowedTypes || this.config.uploadLimits.allowedMimeTypes;\r\n    if (!allowedTypes.includes('*/*') && !allowedTypes.includes(file.type)) {\r\n      return { valid: false, error: `File type not allowed: ${file.type}` };\r\n    }\r\n\r\n    // Check bucket-specific limits\r\n    const bucket = options.bucket || this.config.defaultBucket;\r\n    const bucketConfig = this.config.buckets[bucket];\r\n    if (bucketConfig) {\r\n      if (file.size > bucketConfig.maxSize) {\r\n        return {\r\n          valid: false,\r\n          error: `File size exceeds bucket limit: ${bucketConfig.maxSize} bytes`,\r\n        };\r\n      }\r\n      if (\r\n        !bucketConfig.allowedTypes.includes('*/*') &&\r\n        !bucketConfig.allowedTypes.includes(file.type)\r\n      ) {\r\n        return { valid: false, error: `File type not allowed in bucket ${bucket}: ${file.type}` };\r\n      }\r\n    }\r\n\r\n    return { valid: true };\r\n  }\r\n\r\n  /**\r\n   * Generate unique file name\r\n   */\r\n  private generateUniqueFileName(originalName: string, overwrite = false): string {\r\n    if (overwrite) {\r\n      return originalName;\r\n    }\r\n\r\n    const timestamp = Date.now();\r\n    const random = Math.random().toString(36).substr(2, 9);\r\n    const extension = originalName.split('.').pop();\r\n    const nameWithoutExtension = originalName.replace(`.${extension}`, '');\r\n\r\n    return `${nameWithoutExtension}_${timestamp}_${random}.${extension}`;\r\n  }\r\n\r\n  /**\r\n   * Process file (compression, encryption, etc.)\r\n   */\r\n  private async processFile(file: File): Promise<File> {\r\n    // Mock implementation - in real app, implement compression/encryption\r\n    return file;\r\n  }\r\n\r\n  /**\r\n   * Save file metadata (mock implementation)\r\n   */\r\n  private async saveFileMetadata(metadata: FileMetadata): Promise<void> {\r\n    // In real app, save to database\r\n    logger.info('Saving file metadata:', metadata);\r\n  }\r\n\r\n  /**\r\n   * Delete file metadata (mock implementation)\r\n   */\r\n  private async deleteFileMetadata(bucket: string, filePath: string): Promise<void> {\r\n    // In real app, delete from database\r\n    logger.info('Deleting file metadata:', { bucket, filePath });\r\n  }\r\n\r\n  /**\r\n   * Increment download count\r\n   */\r\n  private async incrementDownloadCount(bucket: string, filePath: string): Promise<void> {\r\n    // In real app, update download count in database\r\n    logger.info('Incrementing download count:', { bucket, filePath });\r\n  }\r\n\r\n  /**\r\n   * Get storage statistics\r\n   */\r\n  async getStorageStats(): Promise<{\r\n    totalFiles: number;\r\n    totalSize: number;\r\n    bucketStats: Record<string, { files: number; size: number }>;\r\n    recentUploads: FileMetadata[];\r\n  }> {\r\n    const stats = {\r\n      totalFiles: 0,\r\n      totalSize: 0,\r\n      bucketStats: {} as Record<string, { files: number; size: number }>,\r\n      recentUploads: [] as FileMetadata[],\r\n    };\r\n\r\n    // Get stats for each bucket\r\n    for (const [_key, config] of Object.entries(this.config.buckets)) {\r\n      try {\r\n        const { data: files } = await supabase.storage.from(config.name).list('', { limit: 1000 });\r\n\r\n        const bucketFiles = files || [];\r\n        const bucketSize = bucketFiles.reduce((sum, file) => sum + (file.metadata?.size || 0), 0);\r\n\r\n        stats.bucketStats[config.name] = {\r\n          files: bucketFiles.length,\r\n          size: bucketSize,\r\n        };\r\n\r\n        stats.totalFiles += bucketFiles.length;\r\n        stats.totalSize += bucketSize;\r\n      } catch (error) {\r\n        logger.error(`Failed to get stats for bucket ${config.name}:`, error);\r\n      }\r\n    }\r\n\r\n    // Get recent uploads (mock implementation)\r\n    stats.recentUploads = [];\r\n\r\n    return stats;\r\n  }\r\n\r\n  /**\r\n   * Test storage configuration\r\n   */\r\n  async testStorage(): Promise<{ success: boolean; errors: string[] }> {\r\n    const errors: string[] = [];\r\n\r\n    try {\r\n      // Test bucket access\r\n      for (const [_key, config] of Object.entries(this.config.buckets)) {\r\n        try {\r\n          const { error } = await supabase.storage.from(config.name).list('', { limit: 1 });\r\n\r\n          if (error) {\r\n            errors.push(`Cannot access bucket ${config.name}: ${error.message}`);\r\n          }\r\n        } catch (error) {\r\n          errors.push(`Failed to test bucket ${config.name}: ${(error as Error).message}`);\r\n        }\r\n      }\r\n\r\n      // Test upload/download with a small test file\r\n      const testFile = new File(['test'], 'test.txt', { type: 'text/plain' });\r\n\r\n      try {\r\n        const uploadResult = await this.uploadFile(testFile, {\r\n          bucket: 'temp',\r\n          folder: 'test',\r\n          isPublic: false,\r\n        });\r\n\r\n        if (uploadResult.success && uploadResult.path) {\r\n          // Clean up test file\r\n          await this.deleteFile('temp', uploadResult.path);\r\n        }\r\n      } catch (error) {\r\n        errors.push(`Upload/download test failed: ${(error as Error).message}`);\r\n      }\r\n    } catch (error) {\r\n      errors.push(`Storage test failed: ${(error as Error).message}`);\r\n    }\r\n\r\n    return {\r\n      success: errors.length === 0,\r\n      errors,\r\n    };\r\n  }\r\n}\r\n\r\n// =============================================================================\r\n// GLOBAL INSTANCE AND UTILITIES\r\n// =============================================================================\r\n\r\nexport const fileStorageService = FileStorageService.getInstance();\r\n\r\n// Utility functions for easy access\r\nexport const uploadFile = (file: File, options?: FileUploadOptions) =>\r\n  fileStorageService.uploadFile(file, options);\r\nexport const uploadFiles = (files: File[], options?: FileUploadOptions) =>\r\n  fileStorageService.uploadFiles(files, options);\r\nexport const listFiles = (options?: FileListOptions) => fileStorageService.listFiles(options);\r\nexport const getFileInfo = (bucket: string, filePath: string) =>\r\n  fileStorageService.getFileInfo(bucket, filePath);\r\nexport const downloadFile = (bucket: string, filePath: string, options?: FileDownloadOptions) =>\r\n  fileStorageService.downloadFile(bucket, filePath, options);\r\nexport const getFileUrl = (bucket: string, filePath: string, expiresIn?: number) =>\r\n  fileStorageService.getFileUrl(bucket, filePath, expiresIn);\r\nexport const deleteFile = (bucket: string, filePath: string) =>\r\n  fileStorageService.deleteFile(bucket, filePath);\r\nexport const copyFile = (\r\n  sourceBucket: string,\r\n  sourcePath: string,\r\n  targetBucket: string,\r\n  targetPath: string,\r\n) => fileStorageService.copyFile(sourceBucket, sourcePath, targetBucket, targetPath);\r\nexport const getStorageStats = () => fileStorageService.getStorageStats();\r\nexport const testFileStorage = () => fileStorageService.testStorage();\r\n\r\nexport default FileStorageService;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\ihtiyacSahipleriService.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":130,"column":45,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":130,"endColumn":57},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":130,"column":49,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":130,"endColumn":51,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[4403,4405],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":133,"column":15,"nodeType":"Identifier","messageId":"neverNullish","endLine":133,"endColumn":19},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":289,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":289,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8486,8489],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8486,8489],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":289,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":289,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8500,8502],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":299,"column":22,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":299,"endColumn":34},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":299,"column":26,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":299,"endColumn":28,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[8784,8786],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":300,"column":23,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":300,"endColumn":76},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":300,"column":27,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":300,"endColumn":29,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[8826,8828],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":301,"column":25,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":301,"endColumn":80},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":301,"column":29,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":301,"endColumn":31,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[8911,8913],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":302,"column":26,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":302,"endColumn":82},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":302,"column":30,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":302,"endColumn":32,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[8999,9001],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":303,"column":27,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":303,"endColumn":29,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[9085,9087],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":317,"column":11,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":317,"endColumn":13,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[9487,9489],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":319,"column":47,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":319,"endColumn":79},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":322,"column":40,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":322,"endColumn":65},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":325,"column":38,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":325,"endColumn":61},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":332,"column":36,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":334,"endColumn":15},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":332,"column":40,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":332,"endColumn":42,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[10063,10065],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":368,"column":38,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":368,"endColumn":40,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[10977,10979],"text":"."},"desc":"Remove unnecessary optional chain"}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":21,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview ihtiyacSahipleriService Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { supabase } from '../lib/supabase';\r\nimport { logger } from '../lib/logging/logger';\r\nimport type { IhtiyacSahibi, IhtiyacSahibiInsert, IhtiyacSahibiUpdate, IhtiyacSahibiStats } from '../types/ihtiyacSahipleri';\r\n\r\n// Real service for ihtiyacSahipleri with Supabase integration\r\nexport const ihtiyacSahipleriService = {\r\n  // Test function to check if table exists\r\n  testConnection: async () => {\r\n    try {\r\n      logger.info('­şğ¬ Testing Supabase connection and table existence...');\r\n      \r\n      // Try to get table schema first\r\n      const { data: tableData, error: tableError } = await supabase\r\n        .from('ihtiyac_sahipleri')\r\n        .select('*')\r\n        .limit(1);\r\n      \r\n      logger.info('­şôè Table test result:', { tableData, tableError });\r\n      \r\n      if (tableError) {\r\n        logger.error('ÔØî Table does not exist or access denied:', tableError);\r\n        return { exists: false, error: tableError.message };\r\n      }\r\n      \r\n      logger.info('Ô£à Table exists and is accessible');\r\n      return { exists: true, data: tableData };\r\n    } catch (error) {\r\n      logger.error('ÔØî Connection test failed:', error);\r\n      return { exists: false, error: error instanceof Error ? error.message : 'Unknown error' };\r\n    }\r\n  },\r\n  getIhtiyacSahipleri: async (page: number, limit: number, filters: Record<string, unknown>) => {\r\n    try {\r\n      logger.info('­şöı Getting ihtiyac sahipleri from Supabase:', { page, limit, filters });\r\n      logger.info('­şöù Supabase client:', supabase);\r\n      \r\n      // Calculate offset for pagination\r\n      const offset = (page - 1) * limit;\r\n      \r\n      // Build query\r\n      let query = supabase\r\n        .from('ihtiyac_sahipleri')\r\n        .select('*', { count: 'exact' });\r\n      \r\n      logger.info('­şôè Initial query built for table: ihtiyac_sahipleri');\r\n      \r\n      // Apply filters if provided\r\n      if (filters.status) {\r\n        query = query.eq('status', filters.status);\r\n        logger.info('­şöı Applied status filter:', filters.status);\r\n      }\r\n      \r\n      if (filters.sehir) {\r\n        query = query.eq('sehir', filters.sehir);\r\n        logger.info('­şöı Applied sehir filter:', filters.sehir);\r\n      }\r\n      \r\n      if (filters.kategori) {\r\n        query = query.eq('kategori', filters.kategori);\r\n        logger.info('­şöı Applied kategori filter:', filters.kategori);\r\n      }\r\n      \r\n      if (filters.searchTerm) {\r\n        query = query.or(`ad_soyad.ilike.%${filters.searchTerm}%,kimlik_no.ilike.%${filters.searchTerm}%,telefon_no.ilike.%${filters.searchTerm}%`);\r\n        logger.info('­şöı Applied search filter:', filters.searchTerm);\r\n      }\r\n      \r\n      logger.info('­şôä Applying pagination - offset:', offset, 'limit:', limit);\r\n      \r\n      // Apply sorting based on user selection\r\n      let sortField = 'ad_soyad';\r\n      let ascending = true;\r\n      \r\n      if (filters.sortBy) {\r\n        switch (filters.sortBy) {\r\n          case 'name-asc':\r\n            sortField = 'ad_soyad';\r\n            ascending = true;\r\n            break;\r\n          case 'name-desc':\r\n            sortField = 'ad_soyad';\r\n            ascending = false;\r\n            break;\r\n          case 'date-newest':\r\n            sortField = 'created_at';\r\n            ascending = false;\r\n            break;\r\n          case 'date-oldest':\r\n            sortField = 'created_at';\r\n            ascending = true;\r\n            break;\r\n          case 'city-asc':\r\n            sortField = 'sehri';\r\n            ascending = true;\r\n            break;\r\n          case 'category-asc':\r\n            sortField = 'kategori';\r\n            ascending = true;\r\n            break;\r\n          default:\r\n            sortField = 'ad_soyad';\r\n            ascending = true;\r\n        }\r\n      }\r\n      \r\n      const { data, error, count } = await query\r\n        .order(sortField, { ascending })\r\n        .range(offset, offset + limit - 1);\r\n      \r\n      logger.info('­şôè Supabase response:', { data, error, count });\r\n      \r\n      if (error) {\r\n        logger.error('ÔØî Error fetching ihtiyac sahipleri:', error);\r\n        return {\r\n          data: [],\r\n          total: 0,\r\n          page,\r\n          limit,\r\n          error: error.message\r\n        };\r\n      }\r\n      \r\n      logger.info(`Ô£à Successfully fetched ${data?.length ?? 0} ihtiyac sahipleri from ${count ?? 0} total`);\r\n      \r\n      return {\r\n        data: data ?? [],\r\n        total: count ?? 0,\r\n        page,\r\n        limit,\r\n      };\r\n    } catch (error) {\r\n      logger.error('Error in getIhtiyacSahipleri:', error);\r\n      return {\r\n        data: [],\r\n        total: 0,\r\n        page,\r\n        limit,\r\n        error: '─░htiya├ğ sahipleri verileri al─▒namad─▒',\r\n      };\r\n    }\r\n  },\r\n\r\n  // Get single ihtiyac sahibi by ID\r\n  getIhtiyacSahibi: async (id: string | number) => {\r\n    try {\r\n      logger.info('­şöı Getting single ihtiyac sahibi:', id);\r\n\r\n      const { data, error } = await supabase\r\n        .from('ihtiyac_sahipleri')\r\n        .select('*')\r\n        .eq('id', id)\r\n        .single();\r\n\r\n      if (error) {\r\n        logger.error('ÔØî Error fetching ihtiyac sahibi:', error);\r\n        return {\r\n          data: null,\r\n          error: error.message\r\n        };\r\n      }\r\n\r\n      logger.info('Ô£à Successfully fetched ihtiyac sahibi:', data);\r\n      return {\r\n        data: data as IhtiyacSahibi,\r\n      };\r\n    } catch (error) {\r\n      logger.error('Error in getIhtiyacSahibi:', error);\r\n      return {\r\n        data: null,\r\n        error: '─░htiya├ğ sahibi verisi al─▒namad─▒',\r\n      };\r\n    }\r\n  },\r\n\r\n  // Create new ihtiyac sahibi\r\n  createIhtiyacSahibi: async (data: IhtiyacSahibiInsert) => {\r\n    try {\r\n      logger.info('ÔŞò Creating new ihtiyac sahibi:', data);\r\n\r\n      const { data: result, error } = await supabase\r\n        .from('ihtiyac_sahipleri')\r\n        .insert(data)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        logger.error('ÔØî Error creating ihtiyac sahibi:', error);\r\n        return {\r\n          data: null,\r\n          error: error.message\r\n        };\r\n      }\r\n\r\n      logger.info('Ô£à Successfully created ihtiyac sahibi:', result);\r\n      return {\r\n        data: result as IhtiyacSahibi,\r\n      };\r\n    } catch (error) {\r\n      logger.error('Error in createIhtiyacSahibi:', error);\r\n      return {\r\n        data: null,\r\n        error: '─░htiya├ğ sahibi olu┼şturulamad─▒',\r\n      };\r\n    }\r\n  },\r\n\r\n  // Update existing ihtiyac sahibi\r\n  updateIhtiyacSahibi: async (id: string | number, data: IhtiyacSahibiUpdate) => {\r\n    try {\r\n      logger.info('Ô£Å´©Å Updating ihtiyac sahibi:', id, data);\r\n\r\n      const { data: result, error } = await supabase\r\n        .from('ihtiyac_sahipleri')\r\n        .update(data)\r\n        .eq('id', id)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        logger.error('ÔØî Error updating ihtiyac sahibi:', error);\r\n        return {\r\n          data: null,\r\n          error: error.message\r\n        };\r\n      }\r\n\r\n      logger.info('Ô£à Successfully updated ihtiyac sahibi:', result);\r\n      return {\r\n        data: result as IhtiyacSahibi,\r\n      };\r\n    } catch (error) {\r\n      logger.error('Error in updateIhtiyacSahibi:', error);\r\n      return {\r\n        data: null,\r\n        error: '─░htiya├ğ sahibi g├╝ncellenemedi',\r\n      };\r\n    }\r\n  },\r\n\r\n  // Delete ihtiyac sahibi\r\n  deleteIhtiyacSahibi: async (id: string | number) => {\r\n    try {\r\n      logger.info('­şùæ´©Å Deleting ihtiyac sahibi:', id);\r\n\r\n      const { error } = await supabase\r\n        .from('ihtiyac_sahipleri')\r\n        .delete()\r\n        .eq('id', id);\r\n\r\n      if (error) {\r\n        logger.error('ÔØî Error deleting ihtiyac sahibi:', error);\r\n        return {\r\n          data: false,\r\n          error: error.message\r\n        };\r\n      }\r\n\r\n      logger.info('Ô£à Successfully deleted ihtiyac sahibi:', id);\r\n      return {\r\n        data: true,\r\n      };\r\n    } catch (error) {\r\n      logger.error('Error in deleteIhtiyacSahibi:', error);\r\n      return {\r\n        data: false,\r\n        error: '─░htiya├ğ sahibi silinemedi',\r\n      };\r\n    }\r\n  },\r\n\r\n  // Get statistics\r\n  getIstatistikler: async () => {\r\n    try {\r\n      logger.info('­şôè Getting ihtiyac sahipleri statistics');\r\n\r\n      // Get all records for statistics calculation\r\n      const { data, error } = await supabase\r\n        .from('ihtiyac_sahipleri')\r\n        .select('*');\r\n\r\n      if (error) {\r\n        const errMsg = (error as any)?.message || JSON.stringify(error);\r\n        logger.error('ÔØî Error fetching statistics data:', errMsg);\r\n        return {\r\n          data: null,\r\n          error: errMsg,\r\n        };\r\n      }\r\n\r\n      // Calculate statistics\r\n      const stats: IhtiyacSahibiStats = {\r\n        total_count: data?.length ?? 0,\r\n        active_count: data?.filter(item => item.status === 'active').length ?? 0,\r\n        inactive_count: data?.filter(item => item.status === 'inactive').length ?? 0,\r\n        suspended_count: data?.filter(item => item.status === 'suspended').length ?? 0,\r\n        total_amount: data?.reduce((sum, item) => sum + (item.toplam_tutar ?? 0), 0) ?? 0,\r\n        average_amount: 0,\r\n        by_category: {},\r\n        by_city: {},\r\n        by_type: {},\r\n        recent_registrations: 0,\r\n      };\r\n\r\n      // Calculate average amount\r\n      if (stats.total_count > 0) {\r\n        stats.average_amount = stats.total_amount / stats.total_count;\r\n      }\r\n\r\n      // Group by category\r\n      data?.forEach(item => {\r\n        if (item.kategori) {\r\n          stats.by_category[item.kategori] = (stats.by_category[item.kategori] ?? 0) + 1;\r\n        }\r\n        if (item.sehri) {\r\n          stats.by_city[item.sehri] = (stats.by_city[item.sehri] ?? 0) + 1;\r\n        }\r\n        if (item.tur) {\r\n          stats.by_type[item.tur] = (stats.by_type[item.tur] ?? 0) + 1;\r\n        }\r\n      });\r\n\r\n      // Recent registrations (last 30 days)\r\n      const thirtyDaysAgo = new Date();\r\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\r\n      stats.recent_registrations = data?.filter(item =>\r\n        item.created_at && new Date(item.created_at) >= thirtyDaysAgo\r\n      ).length ?? 0;\r\n\r\n      logger.info('Ô£à Successfully calculated statistics:', stats);\r\n      return {\r\n        data: stats,\r\n      };\r\n    } catch (error) {\r\n      logger.error('Error in getIstatistikler:', error);\r\n      return {\r\n        data: null,\r\n        error: '─░statistikler al─▒namad─▒',\r\n      };\r\n    }\r\n  },\r\n\r\n  // Get unique cities\r\n  getSehirler: async () => {\r\n    try {\r\n      logger.info('­şÅÖ´©Å Getting unique cities');\r\n\r\n      const { data, error } = await supabase\r\n        .from('ihtiyac_sahipleri')\r\n        .select('sehri')\r\n        .not('sehri', 'is', null);\r\n\r\n      if (error) {\r\n        logger.error('ÔØî Error fetching cities:', error);\r\n        return {\r\n          data: [],\r\n          error: error.message\r\n        };\r\n      }\r\n\r\n      // Get unique cities\r\n      const cities = [...new Set(data?.map(item => item.sehri).filter(Boolean))].sort((a, b) => a.localeCompare(b));\r\n\r\n      logger.info('Ô£à Successfully fetched cities:', cities);\r\n      return {\r\n        data: cities as string[],\r\n      };\r\n    } catch (error) {\r\n      logger.error('Error in getSehirler:', error);\r\n      return {\r\n        data: [],\r\n        error: '┼Şehirler al─▒namad─▒',\r\n      };\r\n    }\r\n  },\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\index.ts","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":332,"column":9,"nodeType":"MemberExpression","endLine":332,"endColumn":58},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":334,"column":15,"nodeType":"MemberExpression","endLine":334,"endColumn":64},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":337,"column":15,"nodeType":"MemberExpression","endLine":337,"endColumn":64},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":340,"column":20,"nodeType":"MemberExpression","endLine":340,"endColumn":69},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":341,"column":17,"nodeType":"MemberExpression","endLine":341,"endColumn":66},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":345,"column":7,"nodeType":"MemberExpression","endLine":345,"endColumn":28},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":351,"column":7,"nodeType":"MemberExpression","endLine":351,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview Services Index - Centralized service exports\r\n * @description Export all services for easy importing throughout the application\r\n */\r\n\r\nimport emailSMSService from './emailSMSService';\r\nimport indexManagementService from './indexManagementService';\r\nimport nativeFeaturesService from './nativeFeaturesService';\r\nimport userManagementService from './userManagementService';\r\nimport membersService from './membersService';\r\nimport donationsService from './donationsService';\r\nimport beneficiariesService from './beneficiariesService';\r\nimport kumbaraService from './kumbaraService';\r\nimport notificationService from './notificationService';\r\nimport fileStorageService from './fileStorageService';\r\nimport monitoring from './monitoringService';\r\nimport exportService from './exportService';\r\n// AI services removed\r\nimport queryOptimizationService from './queryOptimizationService';\r\nimport connectionPoolingService from './connectionPoolingService';\r\nimport cachingService from './cachingService';\r\nimport performanceMonitoringService from './performanceMonitoringService';\r\n\r\n// =============================================================================\r\n// CORE SERVICES\r\n// =============================================================================\r\n\r\n// Base service for common functionality\r\nexport { default as baseService } from './baseService';\r\n\r\n// =============================================================================\r\n// AUTHENTICATION & AUTHORIZATION\r\n// =============================================================================\r\n\r\n// Auth context and services\r\nexport { default as userManagementService } from './userManagementService';\r\n\r\n// =============================================================================\r\n// DATA SERVICES\r\n// =============================================================================\r\n\r\n// Main entity services\r\nexport { default as membersService } from './membersService';\r\nexport { default as donationsService } from './donationsService';\r\nexport { default as beneficiariesService } from './beneficiariesService';\r\nexport { default as kumbaraService } from './kumbaraService';\r\n\r\n// Support services\r\nexport { default as reportsService } from './reportingService';\r\nexport { default as statsService } from './safeStatsService';\r\nexport { default as intelligentStatsService } from './intelligentStatsService';\r\n\r\n// =============================================================================\r\n// COMMUNICATION SERVICES\r\n// =============================================================================\r\n\r\n// Email/SMS notification service\r\nexport {\r\n  emailSMSService,\r\n  sendEmail,\r\n  sendSMS,\r\n  sendWithTemplate,\r\n  getNotificationTemplates,\r\n  testNotificationConfig,\r\n  type NotificationData,\r\n  type NotificationTemplate,\r\n  type NotificationResult,\r\n} from './emailSMSService';\r\n\r\n// In-app notifications\r\nexport { default as notificationService } from './notificationService';\r\n\r\n// =============================================================================\r\n// FILE MANAGEMENT\r\n// =============================================================================\r\n\r\n// File storage service\r\nexport {\r\n  fileStorageService,\r\n  uploadFile,\r\n  uploadFiles,\r\n  listFiles,\r\n  getFileInfo,\r\n  downloadFile,\r\n  getFileUrl,\r\n  deleteFile,\r\n  copyFile,\r\n  getStorageStats,\r\n  testFileStorage,\r\n  type FileUploadOptions,\r\n  type FileListOptions,\r\n  type FileListResult,\r\n} from './fileStorageService';\r\n\r\n// =============================================================================\r\n// DATABASE OPTIMIZATION SERVICES\r\n// =============================================================================\r\n\r\n// Query optimization service\r\nexport {\r\n  queryOptimizationService,\r\n  executeOptimizedQuery,\r\n  executePreparedStatement,\r\n  getQueryAnalytics,\r\n  suggestIndexOptimizations,\r\n  type QueryMetrics,\r\n  type QueryAnalysis,\r\n  type PreparedStatement,\r\n  type QueryOptimizationConfig,\r\n} from './queryOptimizationService';\r\n\r\n// Index management service\r\nexport {\r\n  indexManagementService,\r\n  getDatabaseIndexes,\r\n  getTableIndexes,\r\n  analyzeIndexUsage,\r\n  suggestMissingIndexes,\r\n  createIndex,\r\n  dropIndex,\r\n  rebuildIndex,\r\n  analyzeTable,\r\n  vacuumTable,\r\n  getMaintenanceRecommendations,\r\n  type DatabaseIndex,\r\n  type IndexSuggestion,\r\n  type IndexAnalysis,\r\n} from './indexManagementService';\r\n\r\n// Connection pooling service\r\nexport {\r\n  connectionPoolingService,\r\n  executeQuery,\r\n  executeSupabaseQuery,\r\n  executeRawSQL,\r\n  getConnectionStats,\r\n  getConnectionHealth,\r\n  getConnectionMetrics,\r\n  optimizeConnectionPool,\r\n  testConnectionQuality,\r\n  refreshConnections,\r\n  type ConnectionStats,\r\n  type ConnectionHealth,\r\n  type ConnectionConfig,\r\n  type QueryResult,\r\n  type ConnectionMetrics,\r\n} from './connectionPoolingService';\r\n\r\n// Caching service\r\nexport {\r\n  cachingService,\r\n  cacheSet,\r\n  cacheGet,\r\n  cacheHas,\r\n  cacheDelete,\r\n  cacheClear,\r\n  cacheClearByTags,\r\n  getCacheStats,\r\n  getCacheStrategies,\r\n  getReactQueryConfig,\r\n  getQueryOptions,\r\n  getMutationOptions,\r\n  getCacheOptimizationRecommendations,\r\n  type CacheEntry,\r\n  type CacheConfig,\r\n  type CacheStats,\r\n  type CacheStrategy,\r\n  type ReactQueryConfig,\r\n} from './cachingService';\r\n\r\n// Performance monitoring service\r\nexport {\r\n  performanceMonitoringService,\r\n  getPerformanceReport,\r\n  getActiveAlerts,\r\n  getMetricsHistory,\r\n  exportPerformanceData,\r\n  updatePerformanceConfig,\r\n  type PerformanceMetrics,\r\n  type PerformanceAlert,\r\n  type PerformanceReport,\r\n  type PerformanceConfig,\r\n} from './performanceMonitoringService';\r\n\r\n// =============================================================================\r\n// UTILITY SERVICES\r\n// =============================================================================\r\n\r\n// AI services removed\r\n\r\n// Monitoring and analytics\r\nexport {\r\n  trackEvent,\r\n  trackError,\r\n  trackAnalytics,\r\n  trackPageView,\r\n  trackFeatureUsage,\r\n} from './monitoringService';\r\nexport { default as monitoring } from './monitoringService';\r\n\r\n// Export service\r\nexport { default as exportService } from './exportService';\r\n\r\n// Error tracking removed\r\n\r\n// =============================================================================\r\n// NATIVE FEATURES\r\n// =============================================================================\r\n\r\n// Native device features\r\nexport { default as nativeFeaturesService } from './nativeFeaturesService';\r\n\r\n// =============================================================================\r\n// LEGACY SERVICES (TO BE REPLACED)\r\n// =============================================================================\r\n\r\n// These services will be replaced by the new comprehensive services above\r\nexport { default as ihtiyacSahipleriService } from './ihtiyacSahipleriService';\r\n\r\n// =============================================================================\r\n// TYPE DEFINITIONS\r\n// =============================================================================\r\n\r\n// Re-export common types\r\nexport type {\r\n  // Service response types\r\n  ApiResponse,\r\n  PaginatedResponse,\r\n  // Data types\r\n  Member,\r\n  Donation,\r\n} from '../types/database';\r\n\r\nexport type {\r\n  // Auth types\r\n  User,\r\n  AuthState,\r\n  LoginCredentials,\r\n} from '../types/auth';\r\n\r\nexport type {\r\n  // Beneficiary types\r\n  Beneficiary,\r\n} from '../types/beneficiary';\r\n\r\nexport type {\r\n  // Kumbara types\r\n  Kumbara,\r\n} from '../types/kumbara';\r\n\r\n// =============================================================================\r\n// SERVICE FACTORIES\r\n// =============================================================================\r\n\r\n// Service factory for creating service instances with configuration\r\nexport const createServices = () => {\r\n  // TODO: Use _config parameter for service configuration\r\n  // Return configured service instances\r\n  return {\r\n    // Core services\r\n    userManagement: userManagementService,\r\n    members: membersService,\r\n    donations: donationsService,\r\n    beneficiaries: beneficiariesService,\r\n    kumbara: kumbaraService,\r\n\r\n    // Communication\r\n    notifications: notificationService,\r\n    emailSMS: emailSMSService,\r\n\r\n    // File management\r\n    files: fileStorageService,\r\n\r\n    // Utilities\r\n    monitoring,\r\n    export: exportService,\r\n\r\n    // AI services removed\r\n\r\n    // Native features\r\n    native: nativeFeaturesService,\r\n  };\r\n};\r\n\r\n// Default service instance\r\nexport const services = createServices();\r\n\r\n// =============================================================================\r\n// SERVICE HEALTH CHECK\r\n// =============================================================================\r\n\r\n// Health check function for all services\r\nexport const checkServiceHealth = async () => {\r\n  const health = {\r\n    timestamp: new Date().toISOString(),\r\n    services: {} as Record<\r\n      string,\r\n      { status: 'healthy' | 'unhealthy'; error?: string; responseTime?: number }\r\n    >,\r\n  };\r\n\r\n  // Type-safe service method interface\r\n  type ServiceWithMethod = Record<string, (...args: unknown[]) => unknown>;\r\n\r\n  // Check each service\r\n  const servicesToCheck = [\r\n    { name: 'userManagement', service: userManagementService, method: 'getUsers' },\r\n    { name: 'members', service: membersService, method: 'getMembers' },\r\n    { name: 'donations', service: donationsService, method: 'getDonations' },\r\n    { name: 'beneficiaries', service: beneficiariesService, method: 'getBeneficiaries' },\r\n    { name: 'emailSMS', service: emailSMSService, method: 'testConfiguration' },\r\n    { name: 'files', service: fileStorageService, method: 'testStorage' },\r\n    { name: 'monitoring', service: monitoring, method: 'trackEvent' },\r\n    // Database Optimization Services\r\n    { name: 'queryOptimization', service: queryOptimizationService, method: 'getQueryAnalytics' },\r\n    { name: 'indexManagement', service: indexManagementService, method: 'getDatabaseIndexes' },\r\n    { name: 'connectionPooling', service: connectionPoolingService, method: 'getConnectionStats' },\r\n    { name: 'caching', service: cachingService, method: 'getStats' },\r\n    {\r\n      name: 'performanceMonitoring',\r\n      service: performanceMonitoringService,\r\n      method: 'getActiveAlerts',\r\n    },\r\n  ];\r\n\r\n  for (const { name, service, method } of servicesToCheck) {\r\n    const startTime = Date.now();\r\n\r\n    try {\r\n      // Call a lightweight method to test service health\r\n      if (method === 'trackEvent') {\r\n        (service as unknown as ServiceWithMethod)[method]('health_check', { service: name });\r\n      } else if (method === 'testConfiguration' || method === 'testStorage') {\r\n        await (service as unknown as ServiceWithMethod)[method]();\r\n      } else if (method === 'getDatabaseIndexes') {\r\n        // Call with empty string for schema to test basic functionality\r\n        await (service as unknown as ServiceWithMethod)[method]('');\r\n      } else {\r\n        // For data services, just check if method exists and call it\r\n        if (typeof (service as unknown as ServiceWithMethod)[method] === 'function') {\r\n          await (service as unknown as ServiceWithMethod)[method]();\r\n        }\r\n      }\r\n\r\n      health.services[name] = {\r\n        status: 'healthy',\r\n        responseTime: Date.now() - startTime,\r\n      };\r\n    } catch (error) {\r\n      const errorMessage = (error as Error).message;\r\n      health.services[name] = {\r\n        status: 'unhealthy',\r\n        error: errorMessage,\r\n        responseTime: Date.now() - startTime,\r\n      };\r\n\r\n      // Service health tracking removed\r\n    }\r\n  }\r\n\r\n  return health;\r\n};\r\n\r\nexport default services;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\indexManagementService.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":112,"column":9,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":112,"endColumn":41},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":142,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":142,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3861,3864],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3861,3864],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":146,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":146,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4018,4020],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'upperSql' is assigned a value but never used.","line":365,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":365,"endColumn":21},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'upperSql' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":365,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":365,"endColumn":21},{"ruleId":"no-constant-binary-expression","severity":2,"message":"Unexpected constant nullishness on the left-hand side of a `??` expression.","line":373,"column":36,"nodeType":"UnaryExpression","messageId":"constantShortCircuit","endLine":373,"endColumn":48},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":373,"column":36,"nodeType":"UnaryExpression","messageId":"neverNullish","endLine":373,"endColumn":48},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":436,"column":51,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":436,"endColumn":54,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13687,13690],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13687,13690],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-non-literal-regexp","severity":1,"message":"Found non-literal argument to RegExp Constructor","line":489,"column":23,"nodeType":"NewExpression","endLine":489,"endColumn":68},{"ruleId":"security/detect-non-literal-regexp","severity":1,"message":"Found non-literal argument to RegExp Constructor","line":490,"column":23,"nodeType":"NewExpression","endLine":490,"endColumn":68},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":812,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":812,"endColumn":19},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":812,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":812,"endColumn":19},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'schema' is defined but never used.","line":845,"column":56,"nodeType":null,"messageId":"unusedVar","endLine":845,"endColumn":62},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'schema' is defined but never used. Allowed unused args must match /^_/u.","line":845,"column":56,"nodeType":null,"messageId":"unusedVar","endLine":845,"endColumn":62},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":845,"column":82,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":845,"endColumn":85,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[24484,24487],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[24484,24487],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":945,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":945,"endColumn":23},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":945,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":945,"endColumn":23},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1008,"column":81,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1008,"endColumn":84,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29622,29625],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29622,29625],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1010,"column":56,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1010,"endColumn":59,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29758,29761],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29758,29761],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1012,"column":59,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1012,"endColumn":62,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[29882,29885],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[29882,29885],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":5,"fatalErrorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview Index Management Service\r\n * @description Database index management, optimization, and maintenance\r\n */\r\n\r\nimport { supabase } from '../lib/supabase';\r\nimport { environment } from '../lib/environment';\r\nimport { monitoring } from './monitoringService';\r\nimport { queryOptimizationService } from './queryOptimizationService';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\n// =============================================================================\r\n// TYPES AND INTERFACES\r\n// =============================================================================\r\n\r\n/**\r\n * DatabaseIndex Interface\r\n * \r\n * @interface DatabaseIndex\r\n */\r\nexport interface DatabaseIndex {\r\n  indexName: string;\r\n  tableName: string;\r\n  schemaName: string;\r\n  columnNames: string[];\r\n  indexType: 'btree' | 'hash' | 'gist' | 'gin' | 'spgist' | 'brin' | 'bitmap';\r\n  isUnique: boolean;\r\n  isPrimary: boolean;\r\n  isClustered: boolean;\r\n  size: number; // in bytes\r\n  usageCount: number;\r\n  lastUsed?: Date;\r\n  createdAt: Date;\r\n  definition: string;\r\n}\r\n\r\n/**\r\n * IndexSuggestion Interface\r\n * \r\n * @interface IndexSuggestion\r\n */\r\nexport interface IndexSuggestion {\r\n  table: string;\r\n  columns: string[];\r\n  indexType: string;\r\n  reason: string;\r\n  potentialBenefit: 'high' | 'medium' | 'low';\r\n  queryPattern: string;\r\n  estimatedSize: number;\r\n  priority: number;\r\n}\r\n\r\n/**\r\n * IndexAnalysis Interface\r\n * \r\n * @interface IndexAnalysis\r\n */\r\nexport interface IndexAnalysis {\r\n  tableName: string;\r\n  totalIndexes: number;\r\n  usedIndexes: number;\r\n  unusedIndexes: number;\r\n  duplicateIndexes: string[];\r\n  missingIndexes: IndexSuggestion[];\r\n  oversizedIndexes: DatabaseIndex[];\r\n  scanEfficiency: {\r\n    seqScans: number;\r\n    indexScans: number;\r\n    bitmapScans: number;\r\n    efficiency: number;\r\n  };\r\n}\r\n\r\n/**\r\n * IndexMaintenance Interface\r\n * \r\n * @interface IndexMaintenance\r\n */\r\nexport interface IndexMaintenance {\r\n  operation: 'create' | 'drop' | 'rebuild' | 'analyze';\r\n  indexName: string;\r\n  tableName: string;\r\n  estimatedTime: number;\r\n  impact: 'high' | 'medium' | 'low';\r\n  requiresLock: boolean;\r\n  status: 'pending' | 'running' | 'completed' | 'failed';\r\n  error?: string;\r\n}\r\n\r\n// =============================================================================\r\n// INDEX MANAGEMENT SERVICE CLASS\r\n// =============================================================================\r\n\r\n/**\r\n * IndexManagementService Service\r\n * \r\n * Service class for handling indexmanagementservice operations\r\n * \r\n * @class IndexManagementService\r\n */\r\nexport class IndexManagementService {\r\n  private static instance: IndexManagementService;\r\n  private readonly indexCache = new Map<string, DatabaseIndex[]>();\r\n  private readonly cacheTTL = 300000; // 5 minutes\r\n  private readonly maintenanceQueue: IndexMaintenance[] = [];\r\n\r\n  private constructor() {\r\n    this.initializeIndexMonitoring();\r\n  }\r\n\r\n  public static getInstance(): IndexManagementService {\r\n    if (!IndexManagementService.instance) {\r\n      IndexManagementService.instance = new IndexManagementService();\r\n    }\r\n    return IndexManagementService.instance;\r\n  }\r\n\r\n  // =============================================================================\r\n  // INDEX DISCOVERY AND ANALYSIS\r\n  // =============================================================================\r\n\r\n  /**\r\n   * Get all indexes in the database\r\n   */\r\n  async getDatabaseIndexes(schema = 'public'): Promise<DatabaseIndex[]> {\r\n    const cacheKey = `indexes_${schema}`;\r\n    const cached = this.getCachedIndexes(cacheKey);\r\n\r\n    if (cached) {\r\n      return cached;\r\n    }\r\n\r\n    try {\r\n      const { data, error } = await supabase.rpc('get_database_indexes', {\r\n        schema_name: schema,\r\n      });\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      const indexes: DatabaseIndex[] = data.map((row: any) => ({\r\n        indexName: row.indexname,\r\n        tableName: row.tablename,\r\n        schemaName: row.schemaname,\r\n        columnNames: row.column_names || [],\r\n        indexType: row.index_type,\r\n        isUnique: row.is_unique,\r\n        isPrimary: row.is_primary,\r\n        isClustered: row.is_clustered,\r\n        size: row.size_bytes ?? 0,\r\n        usageCount: row.usage_count ?? 0,\r\n        lastUsed: row.last_used ? new Date(row.last_used) : undefined,\r\n        createdAt: new Date(row.created_at),\r\n        definition: row.definition ?? '',\r\n      }));\r\n\r\n      this.setCachedIndexes(cacheKey, indexes);\r\n\r\n      monitoring.trackEvent({\r\n        type: 'database_indexes_loaded',\r\n        category: 'database',\r\n        action: 'load_indexes',\r\n        metadata: {\r\n          schema,\r\n          totalIndexes: indexes.length,\r\n          totalSize: indexes.reduce((sum, idx) => sum + idx.size, 0),\r\n        },\r\n      });\r\n\r\n      return indexes;\r\n    } catch (error) {\r\n      monitoring.trackApiCall('get_database_indexes', 'GET', 0, 500, {\r\n        schema,\r\n        error: (error as Error).message,\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get indexes for a specific table\r\n   */\r\n  async getTableIndexes(tableName: string, schema = 'public'): Promise<DatabaseIndex[]> {\r\n    const allIndexes = await this.getDatabaseIndexes(schema);\r\n    return allIndexes.filter((idx) => idx.tableName === tableName);\r\n  }\r\n\r\n  /**\r\n   * Analyze index usage and efficiency\r\n   */\r\n  async analyzeIndexUsage(tableName?: string, schema = 'public'): Promise<IndexAnalysis> {\r\n    try {\r\n      const indexes = tableName\r\n        ? await this.getTableIndexes(tableName, schema)\r\n        : await this.getDatabaseIndexes(schema);\r\n\r\n      const tableNames = [...new Set(indexes.map((idx) => idx.tableName))];\r\n      const analysis: IndexAnalysis = {\r\n        tableName: tableName ?? 'all_tables',\r\n        totalIndexes: indexes.length,\r\n        usedIndexes: 0,\r\n        unusedIndexes: 0,\r\n        duplicateIndexes: [],\r\n        missingIndexes: [],\r\n        oversizedIndexes: [],\r\n        scanEfficiency: {\r\n          seqScans: 0,\r\n          indexScans: 0,\r\n          bitmapScans: 0,\r\n          efficiency: 0,\r\n        },\r\n      };\r\n\r\n      // Analyze usage\r\n      analysis.usedIndexes = indexes.filter((idx) => idx.usageCount > 0).length;\r\n      analysis.unusedIndexes = indexes.length - analysis.usedIndexes;\r\n\r\n      // Find duplicate indexes\r\n      analysis.duplicateIndexes = this.findDuplicateIndexes(indexes);\r\n\r\n      // Find oversized indexes\r\n      analysis.oversizedIndexes = indexes.filter((idx) => idx.size > 100 * 1024 * 1024); // > 100MB\r\n\r\n      // Analyze scan efficiency for each table\r\n      for (const table of tableNames) {\r\n        const tableScanStats = await this.getTableScanStats(table, schema);\r\n        analysis.scanEfficiency.seqScans += tableScanStats.seqScans;\r\n        analysis.scanEfficiency.indexScans += tableScanStats.indexScans;\r\n        analysis.scanEfficiency.bitmapScans += tableScanStats.bitmapScans;\r\n      }\r\n\r\n      // Calculate overall efficiency\r\n      const totalScans =\r\n        analysis.scanEfficiency.seqScans +\r\n        analysis.scanEfficiency.indexScans +\r\n        analysis.scanEfficiency.bitmapScans;\r\n\r\n      analysis.scanEfficiency.efficiency =\r\n        totalScans > 0\r\n          ? (analysis.scanEfficiency.indexScans + analysis.scanEfficiency.bitmapScans) / totalScans\r\n          : 0;\r\n\r\n      // Get missing index suggestions\r\n      analysis.missingIndexes = await this.suggestMissingIndexes(tableName, schema);\r\n\r\n      monitoring.trackEvent({\r\n        type: 'index_analysis_completed',\r\n        category: 'database',\r\n        action: 'analyze_indexes',\r\n        metadata: {\r\n          tableName: tableName ?? 'all',\r\n          totalIndexes: analysis.totalIndexes,\r\n          usedIndexes: analysis.usedIndexes,\r\n          efficiency: analysis.scanEfficiency.efficiency,\r\n        },\r\n      });\r\n\r\n      return analysis;\r\n    } catch (error) {\r\n      monitoring.trackApiCall('analyze_index_usage', 'GET', 0, 500, {\r\n        tableName,\r\n        schema,\r\n        error: (error as Error).message,\r\n      });\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get table scan statistics\r\n   */\r\n  private async getTableScanStats(\r\n    tableName: string,\r\n    schema: string,\r\n  ): Promise<{\r\n    seqScans: number;\r\n    indexScans: number;\r\n    bitmapScans: number;\r\n  }> {\r\n    try {\r\n      const { data, error } = await supabase.rpc('get_table_scan_stats', {\r\n        table_name: tableName,\r\n        schema_name: schema,\r\n      });\r\n\r\n      if (error || !data) {\r\n        return { seqScans: 0, indexScans: 0, bitmapScans: 0 };\r\n      }\r\n\r\n      return {\r\n        seqScans: data.seq_scans ?? 0,\r\n        indexScans: data.index_scans ?? 0,\r\n        bitmapScans: data.bitmap_scans ?? 0,\r\n      };\r\n    } catch (error) {\r\n      logger.warn(`Failed to get scan stats for ${tableName}:`, error);\r\n      return { seqScans: 0, indexScans: 0, bitmapScans: 0 };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Find duplicate indexes\r\n   */\r\n  private findDuplicateIndexes(indexes: DatabaseIndex[]): string[] {\r\n    const duplicates: string[] = [];\r\n    const seen = new Map<string, DatabaseIndex>();\r\n\r\n    for (const index of indexes) {\r\n      const key = `${index.tableName}:${index.columnNames.sort((a, b) => a.localeCompare(b)).join(',')}`;\r\n      const existing = seen.get(key);\r\n\r\n      if (existing && !existing.isPrimary && !index.isPrimary) {\r\n        duplicates.push(`${existing.indexName} -> ${index.indexName}`);\r\n      }\r\n\r\n      seen.set(key, index);\r\n    }\r\n\r\n    return duplicates;\r\n  }\r\n\r\n  // =============================================================================\r\n  // INDEX OPTIMIZATION SUGGESTIONS\r\n  // =============================================================================\r\n\r\n  /**\r\n   * Suggest missing indexes based on query patterns\r\n   */\r\n  async suggestMissingIndexes(tableName?: string, schema = 'public'): Promise<IndexSuggestion[]> {\r\n    const suggestions: IndexSuggestion[] = [];\r\n\r\n    try {\r\n      // Get query analytics from optimization service\r\n      const analytics = queryOptimizationService.getQueryAnalytics();\r\n\r\n      // Analyze slow queries for potential indexes\r\n      analytics.topSlowQueries.forEach((query) => {\r\n        const potentialIndexes = this.analyzeQueryForIndexes(query.sql, tableName);\r\n        suggestions.push(...potentialIndexes);\r\n      });\r\n\r\n      // Analyze table statistics for common patterns\r\n      const tableStats = await this.getTableStatistics(tableName, schema);\r\n      const statBasedSuggestions = this.analyzeTableStatsForIndexes(tableStats);\r\n      suggestions.push(...statBasedSuggestions);\r\n\r\n      // Remove duplicates and sort by priority\r\n      const uniqueSuggestions = this.deduplicateSuggestions(suggestions);\r\n      return uniqueSuggestions.sort((a, b) => b.priority - a.priority);\r\n    } catch (error) {\r\n      logger.warn('Failed to generate index suggestions:', error);\r\n      return [];\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Analyze query for potential indexes\r\n   */\r\n  private analyzeQueryForIndexes(sql: string, targetTable?: string): IndexSuggestion[] {\r\n    const suggestions: IndexSuggestion[] = [];\r\n\r\n    try {\r\n      // Simple SQL analysis (in production, use proper SQL parser)\r\n      const upperSql = sql.toUpperCase();\r\n\r\n      // WHERE clause analysis\r\n      const whereMatch = /WHERE\\s+(.+?)(?:\\s+(?:GROUP|ORDER|LIMIT|$))/i.exec(sql);\r\n      if (whereMatch) {\r\n        const whereClause = whereMatch[1];\r\n        const columns = this.extractColumnsFromCondition(whereClause);\r\n\r\n        if (columns.length > 0 && (!targetTable ?? this.queryUsesTable(sql, targetTable))) {\r\n          suggestions.push({\r\n            table: targetTable ?? 'unknown',\r\n            columns,\r\n            indexType: columns.length === 1 ? 'btree' : 'btree',\r\n            reason: 'WHERE clause filtering',\r\n            potentialBenefit: 'high',\r\n            queryPattern: `SELECT ... WHERE ${  columns.join(' AND ')}`,\r\n            estimatedSize: this.estimateIndexSize(columns.length),\r\n            priority: 8,\r\n          });\r\n        }\r\n      }\r\n\r\n      // JOIN analysis\r\n      const joinMatch = /JOIN\\s+(\\w+)\\s+ON\\s+(.+?)(?:\\s+(?:WHERE|GROUP|ORDER|LIMIT|$))/i.exec(sql);\r\n      if (joinMatch) {\r\n        const joinTable = joinMatch[1];\r\n        const joinCondition = joinMatch[2];\r\n        const joinColumns = this.extractColumnsFromCondition(joinCondition);\r\n\r\n        if (joinColumns.length > 0) {\r\n          suggestions.push({\r\n            table: joinTable,\r\n            columns: joinColumns,\r\n            indexType: 'btree',\r\n            reason: 'JOIN operation',\r\n            potentialBenefit: 'high',\r\n            queryPattern: `JOIN ON ${  joinColumns.join(' = ')}`,\r\n            estimatedSize: this.estimateIndexSize(joinColumns.length),\r\n            priority: 9,\r\n          });\r\n        }\r\n      }\r\n\r\n      // ORDER BY analysis\r\n      const orderMatch = /ORDER BY\\s+(.+?)(?:\\s+(?:LIMIT|$))/i.exec(sql);\r\n      if (orderMatch) {\r\n        const orderColumns = this.extractColumnsFromOrder(orderMatch[1]);\r\n\r\n        if (orderColumns.length > 0) {\r\n          suggestions.push({\r\n            table: targetTable ?? 'unknown',\r\n            columns: orderColumns,\r\n            indexType: 'btree',\r\n            reason: 'ORDER BY sorting',\r\n            potentialBenefit: 'medium',\r\n            queryPattern: `ORDER BY ${  orderColumns.join(', ')}`,\r\n            estimatedSize: this.estimateIndexSize(orderColumns.length),\r\n            priority: 6,\r\n          });\r\n        }\r\n      }\r\n    } catch (error) {\r\n      logger.warn('Query analysis failed:', error);\r\n    }\r\n\r\n    return suggestions;\r\n  }\r\n\r\n  /**\r\n   * Analyze table statistics for index suggestions\r\n   */\r\n  private analyzeTableStatsForIndexes(tableStats: any): IndexSuggestion[] {\r\n    const suggestions: IndexSuggestion[] = [];\r\n\r\n    // Suggest indexes for frequently updated columns (if applicable)\r\n    if (tableStats?.mostUpdatedColumns) {\r\n      tableStats.mostUpdatedColumns.forEach((col: string) => {\r\n        suggestions.push({\r\n          table: tableStats.tableName,\r\n          columns: [col],\r\n          indexType: 'btree',\r\n          reason: 'High update frequency',\r\n          potentialBenefit: 'low',\r\n          queryPattern: 'UPDATE operations',\r\n          estimatedSize: this.estimateIndexSize(1),\r\n          priority: 3,\r\n        });\r\n      });\r\n    }\r\n\r\n    return suggestions;\r\n  }\r\n\r\n  /**\r\n   * Extract columns from WHERE/JOIN conditions\r\n   */\r\n  private extractColumnsFromCondition(condition: string): string[] {\r\n    const columns: string[] = [];\r\n    const columnRegex = /(\\w+)\\s*[=<>!]+\\s*[\\w$]/g;\r\n    let match;\r\n\r\n    while ((match = columnRegex.exec(condition)) !== null) {\r\n      if (!columns.includes(match[1])) {\r\n        columns.push(match[1]);\r\n      }\r\n    }\r\n\r\n    return columns;\r\n  }\r\n\r\n  /**\r\n   * Extract columns from ORDER BY clause\r\n   */\r\n  private extractColumnsFromOrder(orderClause: string): string[] {\r\n    return orderClause\r\n      .split(',')\r\n      .map((col) => col.trim().split(/\\s+/)[0])\r\n      .filter((col) => col && !col.includes('(')); // Remove function calls\r\n  }\r\n\r\n  /**\r\n   * Check if query uses specific table\r\n   */\r\n  private queryUsesTable(sql: string, tableName: string): boolean {\r\n    const fromRegex = new RegExp(`\\\\bFROM\\\\s+${tableName}\\\\b`, 'i');\r\n    const joinRegex = new RegExp(`\\\\bJOIN\\\\s+${tableName}\\\\b`, 'i');\r\n\r\n    return fromRegex.test(sql) || joinRegex.test(sql);\r\n  }\r\n\r\n  /**\r\n   * Estimate index size\r\n   */\r\n  private estimateIndexSize(columnCount: number): number {\r\n    // Rough estimation: base size + per column overhead\r\n    return 1000 + columnCount * 200;\r\n  }\r\n\r\n  /**\r\n   * Remove duplicate suggestions\r\n   */\r\n  private deduplicateSuggestions(suggestions: IndexSuggestion[]): IndexSuggestion[] {\r\n    const seen = new Set<string>();\r\n    return suggestions.filter((suggestion) => {\r\n      const key = `${suggestion.table}:${suggestion.columns.sort((a, b) => a.localeCompare(b)).join(',')}:${suggestion.reason}`;\r\n      if (seen.has(key)) {\r\n        return false;\r\n      }\r\n      seen.add(key);\r\n      return true;\r\n    });\r\n  }\r\n\r\n  // =============================================================================\r\n  // INDEX OPERATIONS\r\n  // =============================================================================\r\n\r\n  /**\r\n   * Create new index\r\n   */\r\n  async createIndex(\r\n    tableName: string,\r\n    columnNames: string[],\r\n    options: {\r\n      indexName?: string;\r\n      unique?: boolean;\r\n      indexType?: string;\r\n      concurrently?: boolean;\r\n      schema?: string;\r\n    } = {},\r\n  ): Promise<{ success: boolean; indexName: string; error?: string }> {\r\n    const startTime = Date.now();\r\n\r\n    try {\r\n      const indexName = options.indexName ?? this.generateIndexName(tableName, columnNames);\r\n      const schema = options.schema ?? 'public';\r\n      const concurrently = options.concurrently !== false;\r\n\r\n      const { error } = await supabase.rpc('create_database_index', {\r\n        schema_name: schema,\r\n        table_name: tableName,\r\n        index_name: indexName,\r\n        column_names: columnNames,\r\n        index_type: options.indexType ?? 'btree',\r\n        is_unique: options.unique ?? false,\r\n        concurrently,\r\n      });\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      const executionTime = Date.now() - startTime;\r\n\r\n      // Clear cache\r\n      this.clearIndexCache();\r\n\r\n      monitoring.trackApiCall('create_index', 'POST', executionTime, 200, {\r\n        tableName,\r\n        indexName,\r\n        columnCount: columnNames.length,\r\n        indexType: options.indexType ?? 'btree',\r\n      });\r\n\r\n      return { success: true, indexName };\r\n    } catch (error) {\r\n      const executionTime = Date.now() - startTime;\r\n\r\n      monitoring.trackApiCall('create_index', 'POST', executionTime, 500, {\r\n        tableName,\r\n        columnNames: columnNames.join(','),\r\n        error: (error as Error).message,\r\n      });\r\n\r\n      return {\r\n        success: false,\r\n        indexName: '',\r\n        error: (error as Error).message,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Drop existing index\r\n   */\r\n  async dropIndex(\r\n    indexName: string,\r\n    options: {\r\n      concurrently?: boolean;\r\n      ifExists?: boolean;\r\n      schema?: string;\r\n    } = {},\r\n  ): Promise<{ success: boolean; error?: string }> {\r\n    const startTime = Date.now();\r\n\r\n    try {\r\n      const schema = options.schema ?? 'public';\r\n      const concurrently = options.concurrently !== false;\r\n      const ifExists = options.ifExists !== false;\r\n\r\n      const { error } = await supabase.rpc('drop_database_index', {\r\n        schema_name: schema,\r\n        index_name: indexName,\r\n        concurrently,\r\n        if_exists: ifExists,\r\n      });\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      const executionTime = Date.now() - startTime;\r\n\r\n      // Clear cache\r\n      this.clearIndexCache();\r\n\r\n      monitoring.trackApiCall('drop_index', 'DELETE', executionTime, 200, {\r\n        indexName,\r\n        schema,\r\n      });\r\n\r\n      return { success: true };\r\n    } catch (error) {\r\n      const executionTime = Date.now() - startTime;\r\n\r\n      monitoring.trackApiCall('drop_index', 'DELETE', executionTime, 500, {\r\n        indexName,\r\n        error: (error as Error).message,\r\n      });\r\n\r\n      return {\r\n        success: false,\r\n        error: (error as Error).message,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Rebuild index (for maintenance)\r\n   */\r\n  async rebuildIndex(\r\n    indexName: string,\r\n    options: {\r\n      concurrently?: boolean;\r\n      schema?: string;\r\n    } = {},\r\n  ): Promise<{ success: boolean; error?: string }> {\r\n    const startTime = Date.now();\r\n\r\n    try {\r\n      const schema = options.schema ?? 'public';\r\n      const concurrently = options.concurrently !== false;\r\n\r\n      const { error } = await supabase.rpc('rebuild_database_index', {\r\n        schema_name: schema,\r\n        index_name: indexName,\r\n        concurrently,\r\n      });\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      const executionTime = Date.now() - startTime;\r\n\r\n      monitoring.trackApiCall('rebuild_index', 'PUT', executionTime, 200, {\r\n        indexName,\r\n        schema,\r\n      });\r\n\r\n      return { success: true };\r\n    } catch (error) {\r\n      const executionTime = Date.now() - startTime;\r\n\r\n      monitoring.trackApiCall('rebuild_index', 'PUT', executionTime, 500, {\r\n        indexName,\r\n        error: (error as Error).message,\r\n      });\r\n\r\n      return {\r\n        success: false,\r\n        error: (error as Error).message,\r\n      };\r\n    }\r\n  }\r\n\r\n  // =============================================================================\r\n  // MAINTENANCE OPERATIONS\r\n  // =============================================================================\r\n\r\n  /**\r\n   * Analyze table for query planner statistics\r\n   */\r\n  async analyzeTable(\r\n    tableName: string,\r\n    schema = 'public',\r\n  ): Promise<{ success: boolean; error?: string }> {\r\n    const startTime = Date.now();\r\n\r\n    try {\r\n      const { error } = await supabase.rpc('analyze_database_table', {\r\n        schema_name: schema,\r\n        table_name: tableName,\r\n      });\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      const executionTime = Date.now() - startTime;\r\n\r\n      monitoring.trackApiCall('analyze_table', 'POST', executionTime, 200, {\r\n        tableName,\r\n        schema,\r\n      });\r\n\r\n      return { success: true };\r\n    } catch (error) {\r\n      const executionTime = Date.now() - startTime;\r\n\r\n      monitoring.trackApiCall('analyze_table', 'POST', executionTime, 500, {\r\n        tableName,\r\n        error: (error as Error).message,\r\n      });\r\n\r\n      return {\r\n        success: false,\r\n        error: (error as Error).message,\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Vacuum table for maintenance\r\n   */\r\n  async vacuumTable(\r\n    tableName: string,\r\n    schema = 'public',\r\n    full = false,\r\n  ): Promise<{ success: boolean; error?: string }> {\r\n    const startTime = Date.now();\r\n\r\n    try {\r\n      const { error } = await supabase.rpc('vacuum_database_table', {\r\n        schema_name: schema,\r\n        table_name: tableName,\r\n        full_vacuum: full,\r\n      });\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      const executionTime = Date.now() - startTime;\r\n\r\n      monitoring.trackApiCall('vacuum_table', 'POST', executionTime, 200, {\r\n        tableName,\r\n        schema,\r\n        fullVacuum: full,\r\n      });\r\n\r\n      return { success: true };\r\n    } catch (error) {\r\n      const executionTime = Date.now() - startTime;\r\n\r\n      monitoring.trackApiCall('vacuum_table', 'POST', executionTime, 500, {\r\n        tableName,\r\n        error: (error as Error).message,\r\n      });\r\n\r\n      return {\r\n        success: false,\r\n        error: (error as Error).message,\r\n      };\r\n    }\r\n  }\r\n\r\n  // =============================================================================\r\n  // UTILITY METHODS\r\n  // =============================================================================\r\n\r\n  /**\r\n   * Generate index name\r\n   */\r\n  private generateIndexName(tableName: string, columnNames: string[]): string {\r\n    const columnPart = columnNames.join('_');\r\n    const timestamp = Date.now();\r\n    return `idx_${tableName}_${columnPart}_${timestamp}`;\r\n  }\r\n\r\n  /**\r\n   * Get cached indexes\r\n   */\r\n  private getCachedIndexes(key: string): DatabaseIndex[] | null {\r\n    const cached = localStorage.getItem(`index_cache_${key}`);\r\n    if (!cached) return null;\r\n\r\n    try {\r\n      const parsed = JSON.parse(cached);\r\n      const now = Date.now();\r\n\r\n      if (now - parsed.timestamp > this.cacheTTL) {\r\n        localStorage.removeItem(`index_cache_${key}`);\r\n        return null;\r\n      }\r\n\r\n      return parsed.data;\r\n    } catch (error) {\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Set cached indexes\r\n   */\r\n  private setCachedIndexes(key: string, indexes: DatabaseIndex[]): void {\r\n    try {\r\n      const cacheData = {\r\n        data: indexes,\r\n        timestamp: Date.now(),\r\n      };\r\n      localStorage.setItem(`index_cache_${key}`, JSON.stringify(cacheData));\r\n    } catch (error) {\r\n      logger.warn('Failed to cache indexes:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear index cache\r\n   */\r\n  private clearIndexCache(): void {\r\n    const keys = Object.keys(localStorage).filter((key) => key.startsWith('index_cache_'));\r\n    keys.forEach((key) => {\r\n      localStorage.removeItem(key);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Get table statistics\r\n   */\r\n  private async getTableStatistics(tableName?: string, schema?: string): Promise<any> {\r\n    // Implementation - in real app, get from database\r\n    return {\r\n      tableName,\r\n      rowCount: 1000,\r\n      mostQueriedColumns: ['id', 'created_at'],\r\n      mostUpdatedColumns: ['updated_at', 'status'],\r\n    };\r\n  }\r\n\r\n  // =============================================================================\r\n  // MONITORING AND INITIALIZATION\r\n  // =============================================================================\r\n\r\n  /**\r\n   * Initialize index monitoring\r\n   */\r\n  private initializeIndexMonitoring(): void {\r\n    // Set up periodic index analysis\r\n    if (environment.features.monitoring) {\r\n      setInterval(\r\n        async () => {\r\n          try {\r\n            await this.performIndexMaintenance();\r\n          } catch (error) {\r\n            logger.warn('Index maintenance failed:', error);\r\n          }\r\n        },\r\n        24 * 60 * 60 * 1000,\r\n      ); // Daily\r\n    }\r\n\r\n    monitoring.trackEvent({\r\n      type: 'index_management_initialized',\r\n      category: 'database',\r\n      action: 'initialize',\r\n      metadata: {\r\n        cacheTTL: this.cacheTTL,\r\n        monitoringEnabled: environment.features.monitoring,\r\n      },\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Perform automatic index maintenance\r\n   */\r\n  private async performIndexMaintenance(): Promise<void> {\r\n    try {\r\n      // Analyze tables for optimization opportunities\r\n      const analysis = await this.analyzeIndexUsage();\r\n\r\n      // Log findings\r\n      if (analysis.unusedIndexes > 0) {\r\n        monitoring.trackEvent({\r\n          type: 'unused_indexes_found',\r\n          category: 'database',\r\n          action: 'maintenance_check',\r\n          metadata: {\r\n            count: analysis.unusedIndexes,\r\n            totalIndexes: analysis.totalIndexes,\r\n          },\r\n        });\r\n      }\r\n\r\n      if (analysis.missingIndexes.length > 0) {\r\n        monitoring.trackEvent({\r\n          type: 'missing_indexes_suggested',\r\n          category: 'database',\r\n          action: 'maintenance_check',\r\n          metadata: {\r\n            count: analysis.missingIndexes.length,\r\n            highPriority: analysis.missingIndexes.filter((s) => s.priority >= 8).length,\r\n          },\r\n        });\r\n      }\r\n\r\n      // Clear old cache entries\r\n      this.clearExpiredCache();\r\n    } catch (error) {\r\n      logger.warn('Index maintenance failed:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Clear expired cache entries\r\n   */\r\n  private clearExpiredCache(): void {\r\n    const now = Date.now();\r\n    const keys = Object.keys(localStorage);\r\n\r\n    for (const key of keys) {\r\n      if (key.startsWith('index_cache_') || key.startsWith('query_cache_')) {\r\n        try {\r\n          const cached = localStorage.getItem(key);\r\n          if (cached) {\r\n            const parsed = JSON.parse(cached);\r\n            if (now - parsed.timestamp > this.cacheTTL) {\r\n              localStorage.removeItem(key);\r\n            }\r\n          }\r\n        } catch (error) {\r\n          // Remove corrupted cache entries\r\n          localStorage.removeItem(key);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get index maintenance recommendations\r\n   */\r\n  async getMaintenanceRecommendations(): Promise<{\r\n    unusedIndexes: DatabaseIndex[];\r\n    missingIndexes: IndexSuggestion[];\r\n    maintenanceTasks: string[];\r\n  }> {\r\n    const analysis = await this.analyzeIndexUsage();\r\n    const indexes = await this.getDatabaseIndexes();\r\n\r\n    const unusedIndexes = indexes.filter(\r\n      (idx) =>\r\n        idx.usageCount === 0 &&\r\n        !idx.isPrimary &&\r\n        idx.createdAt < new Date(Date.now() - 30 * 24 * 60 * 60 * 1000), // Older than 30 days\r\n    );\r\n\r\n    const maintenanceTasks: string[] = [];\r\n\r\n    if (analysis.scanEfficiency.efficiency < 0.5) {\r\n      maintenanceTasks.push('Consider adding indexes to reduce sequential scans');\r\n    }\r\n\r\n    if (unusedIndexes.length > 0) {\r\n      maintenanceTasks.push(`Consider dropping ${unusedIndexes.length} unused indexes`);\r\n    }\r\n\r\n    if (analysis.duplicateIndexes.length > 0) {\r\n      maintenanceTasks.push(`Remove ${analysis.duplicateIndexes.length} duplicate indexes`);\r\n    }\r\n\r\n    return {\r\n      unusedIndexes,\r\n      missingIndexes: analysis.missingIndexes,\r\n      maintenanceTasks,\r\n    };\r\n  }\r\n}\r\n\r\n// =============================================================================\r\n// GLOBAL INSTANCE AND UTILITIES\r\n// =============================================================================\r\n\r\nexport const indexManagementService = IndexManagementService.getInstance();\r\n\r\n// Utility functions for easy access\r\nexport const getDatabaseIndexes = (schema?: string) =>\r\n  indexManagementService.getDatabaseIndexes(schema);\r\nexport const getTableIndexes = (tableName: string, schema?: string) =>\r\n  indexManagementService.getTableIndexes(tableName, schema);\r\nexport const analyzeIndexUsage = (tableName?: string, schema?: string) =>\r\n  indexManagementService.analyzeIndexUsage(tableName, schema);\r\nexport const suggestMissingIndexes = (tableName?: string, schema?: string) =>\r\n  indexManagementService.suggestMissingIndexes(tableName, schema);\r\nexport const createIndex = (tableName: string, columnNames: string[], options?: any) =>\r\n  indexManagementService.createIndex(tableName, columnNames, options);\r\nexport const dropIndex = (indexName: string, options?: any) =>\r\n  indexManagementService.dropIndex(indexName, options);\r\nexport const rebuildIndex = (indexName: string, options?: any) =>\r\n  indexManagementService.rebuildIndex(indexName, options);\r\nexport const analyzeTable = (tableName: string, schema?: string) =>\r\n  indexManagementService.analyzeTable(tableName, schema);\r\nexport const vacuumTable = (tableName: string, schema?: string, full?: boolean) =>\r\n  indexManagementService.vacuumTable(tableName, schema, full);\r\nexport const getMaintenanceRecommendations = () =>\r\n  indexManagementService.getMaintenanceRecommendations();\r\n\r\nexport default IndexManagementService;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\intelligentStatsService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'error' is defined but never used.","line":51,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":19},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'error' is defined but never used.","line":51,"column":14,"nodeType":null,"messageId":"unusedVar","endLine":51,"endColumn":19},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":64,"column":21,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":64,"endColumn":42},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":64,"column":34,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":64,"endColumn":36,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[1928,1930],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":65,"column":22,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":65,"endColumn":80},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":65,"column":35,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":65,"endColumn":37,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[1978,1980],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":66,"column":23,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":66,"endColumn":82},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":66,"column":36,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":66,"endColumn":38,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[2066,2068],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":67,"column":25,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":67,"endColumn":86},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":67,"column":38,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":67,"endColumn":40,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[2157,2159],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":69,"column":9,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":69,"endColumn":77},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":69,"column":22,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":69,"endColumn":24,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[2265,2267],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":71,"column":43,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":71,"endColumn":45,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[2372,2374],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":71,"column":96,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":71,"endColumn":98,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[2425,2427],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":76,"column":20,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":76,"endColumn":22,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[2599,2601],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":78,"column":9,"nodeType":"MemberExpression","endLine":78,"endColumn":21},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":78,"column":25,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":78,"endColumn":37},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":78,"column":25,"nodeType":"MemberExpression","endLine":78,"endColumn":37},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":83,"column":20,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":83,"endColumn":22,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[2832,2834],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":85,"column":9,"nodeType":"MemberExpression","endLine":85,"endColumn":29},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":85,"column":33,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":85,"endColumn":53},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":85,"column":33,"nodeType":"MemberExpression","endLine":85,"endColumn":53},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":122,"column":21,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":122,"endColumn":36},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":122,"column":28,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":122,"endColumn":30,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[3756,3758],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":123,"column":22,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":123,"endColumn":85},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":123,"column":29,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":123,"endColumn":31,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[3800,3802],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":124,"column":24,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":124,"endColumn":89},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":124,"column":31,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":124,"endColumn":33,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[3894,3896],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":125,"column":25,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":125,"endColumn":91},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":125,"column":32,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":125,"endColumn":34,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[3991,3993],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":129,"column":14,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":129,"endColumn":16,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[4168,4170],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":131,"column":9,"nodeType":"MemberExpression","endLine":131,"endColumn":31},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":131,"column":35,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":131,"endColumn":57},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":131,"column":35,"nodeType":"MemberExpression","endLine":131,"endColumn":57},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":136,"column":14,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":136,"endColumn":16,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[4412,4414],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":138,"column":9,"nodeType":"MemberExpression","endLine":138,"endColumn":21},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":138,"column":25,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":138,"endColumn":37},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":138,"column":25,"nodeType":"MemberExpression","endLine":138,"endColumn":37},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":145,"column":9,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":145,"endColumn":80},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":145,"column":16,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":145,"endColumn":18,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[4724,4726],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":149,"column":9,"nodeType":"ChainExpression","messageId":"alwaysTruthy","endLine":158,"endColumn":41},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":150,"column":11,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":150,"endColumn":13,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[4867,4869],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":195,"column":21,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":195,"endColumn":38},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":195,"column":30,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":195,"endColumn":32,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[6025,6027],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":196,"column":36,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":196,"endColumn":38,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[6076,6078],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":196,"column":83,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":196,"endColumn":85,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6123,6125],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":201,"column":16,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":201,"endColumn":18,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[6291,6293],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":203,"column":9,"nodeType":"MemberExpression","endLine":203,"endColumn":25},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":203,"column":29,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":203,"endColumn":45},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":203,"column":29,"nodeType":"MemberExpression","endLine":203,"endColumn":45},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":208,"column":16,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":208,"endColumn":18,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[6525,6527],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":210,"column":9,"nodeType":"MemberExpression","endLine":210,"endColumn":29},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":210,"column":33,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":210,"endColumn":53},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":210,"column":33,"nodeType":"MemberExpression","endLine":210,"endColumn":53},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":215,"column":16,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":215,"endColumn":18,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[6780,6782],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":217,"column":9,"nodeType":"MemberExpression","endLine":217,"endColumn":32},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":217,"column":36,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":217,"endColumn":59},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":217,"column":36,"nodeType":"MemberExpression","endLine":217,"endColumn":59},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":222,"column":16,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":222,"endColumn":18,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[7034,7036],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":224,"column":9,"nodeType":"MemberExpression","endLine":224,"endColumn":21},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":224,"column":25,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":224,"endColumn":37},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":224,"column":25,"nodeType":"MemberExpression","endLine":224,"endColumn":37},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":228,"column":55,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":228,"endColumn":64},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":231,"column":49,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":231,"endColumn":58},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":267,"column":21,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":267,"endColumn":40},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":267,"column":32,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":267,"endColumn":34,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[8175,8177],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":268,"column":23,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":268,"endColumn":80},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":268,"column":34,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":268,"endColumn":36,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[8224,8226],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":269,"column":27,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":269,"endColumn":89},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":269,"column":38,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":269,"endColumn":40,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[8315,8317],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":270,"column":24,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":270,"endColumn":82},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":270,"column":35,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":270,"endColumn":37,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[8408,8410],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":271,"column":24,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":271,"endColumn":82},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":271,"column":35,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":271,"endColumn":37,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[8497,8499],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":272,"column":25,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":272,"endColumn":84},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":272,"column":36,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":272,"endColumn":38,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[8587,8589],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":275,"column":20,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":275,"endColumn":22,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[8700,8702],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":275,"column":77,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":275,"endColumn":79,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8757,8759],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":277,"column":20,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":277,"endColumn":22,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[8818,8820],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":277,"column":76,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":277,"endColumn":78,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8874,8876],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":281,"column":18,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":281,"endColumn":20,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[8981,8983],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":283,"column":9,"nodeType":"MemberExpression","endLine":283,"endColumn":24},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":283,"column":28,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":283,"endColumn":43},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":283,"column":28,"nodeType":"MemberExpression","endLine":283,"endColumn":43},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":288,"column":18,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":288,"endColumn":20,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[9211,9213],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":290,"column":9,"nodeType":"MemberExpression","endLine":290,"endColumn":27},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":290,"column":31,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":290,"endColumn":49},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":290,"column":31,"nodeType":"MemberExpression","endLine":290,"endColumn":49},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":294,"column":69,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":294,"endColumn":80},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":328,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":328,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10218,10221],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10218,10221],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":348,"column":7,"nodeType":"MemberExpression","endLine":348,"endColumn":28},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":348,"column":32,"nodeType":"MemberExpression","endLine":348,"endColumn":53},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":360,"column":16,"nodeType":"MemberExpression","endLine":360,"endColumn":37},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":368,"column":41,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":368,"endColumn":44,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11294,11297],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11294,11297],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":373,"column":7,"nodeType":"MemberExpression","endLine":373,"endColumn":25},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":373,"column":29,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":373,"endColumn":47},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":373,"column":29,"nodeType":"MemberExpression","endLine":373,"endColumn":47},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":382,"column":55,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":382,"endColumn":58,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11757,11760],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11757,11760],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":97,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview intelligentStatsService Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\n// Real data stats service with Supabase integration\r\nimport { supabase } from '../lib/supabase';\r\nimport type { ApiResponse } from '../types/database';\r\nimport type { SafeStats } from '../types/stats';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\nclass IntelligentStatsService {\r\n  // Get real stats from Supabase\r\n  async getAllStats(): Promise<ApiResponse<SafeStats>> {\r\n    try {\r\n      // Fetch real data from Supabase\r\n      const [beneficiariesResult, membersResult, donationsResult, aidRequestsResult] =\r\n        await Promise.all([\r\n          this.getBeneficiariesStats(),\r\n          this.getMembersStats(),\r\n          this.getDonationsStats(),\r\n          this.getAidRequestsStats(),\r\n        ]);\r\n\r\n      const stats: SafeStats = {\r\n        beneficiaries: beneficiariesResult,\r\n        members: membersResult,\r\n        donations: {\r\n          ...donationsResult,\r\n          count: donationsResult.total,\r\n        },\r\n        aidRequests: aidRequestsResult,\r\n        campaigns: {\r\n          total: 0,\r\n          active: 0,\r\n          completed: 0,\r\n          draft: 0,\r\n          paused: 0,\r\n          cancelled: 0,\r\n          totalGoalAmount: 0,\r\n          totalCurrentAmount: 0,\r\n          averageProgress: 0,\r\n          byCategory: {},\r\n          mostSuccessful: [],\r\n        },\r\n      };\r\n\r\n      return { data: stats, error: null };\r\n    } catch (error: unknown) {\r\n      // Use proper error logging instead of logger.error\r\n      return { data: null, error: '─░statistik verileri al─▒namad─▒' };\r\n    }\r\n  }\r\n\r\n  // Get beneficiaries stats\r\n  private async getBeneficiariesStats() {\r\n    try {\r\n      const { data: beneficiaries, error } = await supabase.from('ihtiyac_sahipleri').select('*');\r\n\r\n      if (error) throw error;\r\n\r\n      const total = beneficiaries?.length ?? 0;\r\n      const active = beneficiaries?.filter((b) => b.status === 'active').length ?? 0;\r\n      const passive = beneficiaries?.filter((b) => b.status === 'passive').length ?? 0;\r\n      const suspended = beneficiaries?.filter((b) => b.status === 'suspended').length ?? 0;\r\n      const underEvaluation =\r\n        beneficiaries?.filter((b) => b.status === 'under_evaluation').length ?? 0;\r\n\r\n      const totalAidAmount = beneficiaries?.reduce((sum, b) => sum + (b.toplam_tutar ?? 0), 0) || 0;\r\n      const averageAidAmount = total > 0 ? totalAidAmount / total : 0;\r\n\r\n      // Group by city\r\n      const byCity: Record<string, number> = {};\r\n      beneficiaries?.forEach((b) => {\r\n        const city = b.sehir ?? 'Belirtilmemi┼ş';\r\n        byCity[city] = (byCity[city] ?? 0) + 1;\r\n      });\r\n\r\n      // Group by priority\r\n      const byPriority: Record<string, number> = {};\r\n      beneficiaries?.forEach((b) => {\r\n        const priority = b.oncelik ?? 'Normal';\r\n        byPriority[priority] = (byPriority[priority] ?? 0) + 1;\r\n      });\r\n\r\n      return {\r\n        total,\r\n        active,\r\n        passive,\r\n        suspended,\r\n        underEvaluation,\r\n        totalAidAmount,\r\n        averageAidAmount,\r\n        byCity,\r\n        byPriority,\r\n      };\r\n    } catch (error) {\r\n      logger.error('Error fetching beneficiaries stats:', error);\r\n      return {\r\n        total: 0,\r\n        active: 0,\r\n        passive: 0,\r\n        suspended: 0,\r\n        underEvaluation: 0,\r\n        totalAidAmount: 0,\r\n        averageAidAmount: 0,\r\n        byCity: {},\r\n        byPriority: {},\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get members stats\r\n  private async getMembersStats() {\r\n    try {\r\n      const { data: members, error } = await supabase.from('members').select('*');\r\n\r\n      if (error) throw error;\r\n\r\n      const total = members?.length ?? 0;\r\n      const active = members?.filter((m) => m.membership_status === 'active').length ?? 0;\r\n      const inactive = members?.filter((m) => m.membership_status === 'inactive').length ?? 0;\r\n      const suspended = members?.filter((m) => m.membership_status === 'suspended').length ?? 0;\r\n\r\n      // Group by membership type\r\n      const byMembershipType: Record<string, number> = {};\r\n      members?.forEach((m) => {\r\n        const type = m.membership_type ?? 'Bireysel';\r\n        byMembershipType[type] = (byMembershipType[type] ?? 0) + 1;\r\n      });\r\n\r\n      // Group by city\r\n      const byCity: Record<string, number> = {};\r\n      members?.forEach((m) => {\r\n        const city = m.city ?? 'Belirtilmemi┼ş';\r\n        byCity[city] = (byCity[city] ?? 0) + 1;\r\n      });\r\n\r\n      // Recent joins (last 30 days)\r\n      const thirtyDaysAgo = new Date();\r\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\r\n      const recentJoins =\r\n        members?.filter((m) => new Date(m.joined_date) >= thirtyDaysAgo).length ?? 0;\r\n\r\n      // Average age\r\n      const ages =\r\n        members\r\n          ?.map((m) => {\r\n            if (m.birth_date) {\r\n              const birthDate = new Date(m.birth_date);\r\n              const today = new Date();\r\n              return today.getFullYear() - birthDate.getFullYear();\r\n            }\r\n            return null;\r\n          })\r\n          .filter((age) => age !== null) || [];\r\n\r\n      const averageAge =\r\n        ages.length > 0 ? ages.reduce((sum, age) => sum + age, 0) / ages.length : 0;\r\n\r\n      return {\r\n        total,\r\n        active,\r\n        inactive,\r\n        suspended,\r\n        byMembershipType,\r\n        byCity,\r\n        recentJoins,\r\n        averageAge,\r\n      };\r\n    } catch (error) {\r\n      logger.error('Error fetching members stats:', error);\r\n      return {\r\n        total: 0,\r\n        active: 0,\r\n        inactive: 0,\r\n        suspended: 0,\r\n        byMembershipType: {},\r\n        byCity: {},\r\n        recentJoins: 0,\r\n        averageAge: 0,\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get donations stats\r\n  private async getDonationsStats() {\r\n    try {\r\n      const { data: donations, error } = await supabase.from('donations').select('*');\r\n\r\n      if (error) throw error;\r\n\r\n      const total = donations?.length ?? 0;\r\n      const totalAmount = donations?.reduce((sum, d) => sum + (d.amount ?? 0), 0) || 0;\r\n      const averageAmount = total > 0 ? totalAmount / total : 0;\r\n\r\n      // Group by status\r\n      const byStatus: Record<string, number> = {};\r\n      donations?.forEach((d) => {\r\n        const status = d.status ?? 'pending';\r\n        byStatus[status] = (byStatus[status] ?? 0) + 1;\r\n      });\r\n\r\n      // Group by category\r\n      const byCategory: Record<string, number> = {};\r\n      donations?.forEach((d) => {\r\n        const category = d.category ?? 'Genel';\r\n        byCategory[category] = (byCategory[category] ?? 0) + 1;\r\n      });\r\n\r\n      // Group by payment method\r\n      const byPaymentMethod: Record<string, number> = {};\r\n      donations?.forEach((d) => {\r\n        const method = d.payment_method ?? 'bank_transfer';\r\n        byPaymentMethod[method] = (byPaymentMethod[method] ?? 0) + 1;\r\n      });\r\n\r\n      // Group by type\r\n      const byType: Record<string, number> = {};\r\n      donations?.forEach((d) => {\r\n        const type = d.donation_type ?? 'cash';\r\n        byType[type] = (byType[type] ?? 0) + 1;\r\n      });\r\n\r\n      // Monthly trend (last 6 months)\r\n      const monthlyTrend = this.calculateMonthlyTrend(donations || []);\r\n\r\n      // Top donors\r\n      const topDonors = this.calculateTopDonors(donations || []);\r\n\r\n      return {\r\n        total,\r\n        totalAmount,\r\n        averageAmount,\r\n        byStatus,\r\n        byCategory,\r\n        byPaymentMethod,\r\n        byType,\r\n        monthlyTrend,\r\n        topDonors,\r\n      };\r\n    } catch (error) {\r\n      logger.error('Error fetching donations stats:', error);\r\n      return {\r\n        total: 0,\r\n        totalAmount: 0,\r\n        averageAmount: 0,\r\n        byStatus: {},\r\n        byCategory: {},\r\n        byPaymentMethod: {},\r\n        byType: {},\r\n        monthlyTrend: [],\r\n        topDonors: [],\r\n      };\r\n    }\r\n  }\r\n\r\n  // Get aid requests stats\r\n  private async getAidRequestsStats() {\r\n    try {\r\n      const { data: aidRequests, error } = await supabase.from('aid_applications').select('*');\r\n\r\n      if (error) throw error;\r\n\r\n      const total = aidRequests?.length ?? 0;\r\n      const pending = aidRequests?.filter((a) => a.status === 'pending').length ?? 0;\r\n      const underReview = aidRequests?.filter((a) => a.status === 'under_review').length ?? 0;\r\n      const approved = aidRequests?.filter((a) => a.status === 'approved').length ?? 0;\r\n      const rejected = aidRequests?.filter((a) => a.status === 'rejected').length ?? 0;\r\n      const completed = aidRequests?.filter((a) => a.status === 'completed').length ?? 0;\r\n\r\n      const totalRequestedAmount =\r\n        aidRequests?.reduce((sum, a) => sum + (a.requested_amount ?? 0), 0) || 0;\r\n      const totalApprovedAmount =\r\n        aidRequests?.reduce((sum, a) => sum + (a.approved_amount ?? 0), 0) || 0;\r\n\r\n      // Group by aid type\r\n      const byAidType: Record<string, number> = {};\r\n      aidRequests?.forEach((a) => {\r\n        const type = a.aid_type ?? 'Genel';\r\n        byAidType[type] = (byAidType[type] ?? 0) + 1;\r\n      });\r\n\r\n      // Group by urgency\r\n      const byUrgency: Record<string, number> = {};\r\n      aidRequests?.forEach((a) => {\r\n        const urgency = a.urgency ?? 'Normal';\r\n        byUrgency[urgency] = (byUrgency[urgency] ?? 0) + 1;\r\n      });\r\n\r\n      // Average processing days\r\n      const avgProcessingDays = this.calculateAverageProcessingDays(aidRequests || []);\r\n\r\n      return {\r\n        total,\r\n        pending,\r\n        underReview,\r\n        approved,\r\n        rejected,\r\n        completed,\r\n        totalRequestedAmount,\r\n        totalApprovedAmount,\r\n        byAidType,\r\n        byUrgency,\r\n        avgProcessingDays,\r\n      };\r\n    } catch (error) {\r\n      logger.error('Error fetching aid requests stats:', error);\r\n      return {\r\n        total: 0,\r\n        pending: 0,\r\n        underReview: 0,\r\n        approved: 0,\r\n        rejected: 0,\r\n        completed: 0,\r\n        totalRequestedAmount: 0,\r\n        totalApprovedAmount: 0,\r\n        byAidType: {},\r\n        byUrgency: {},\r\n        avgProcessingDays: 0,\r\n      };\r\n    }\r\n  }\r\n\r\n  // Helper methods\r\n  private calculateMonthlyTrend(donations: any[]) {\r\n    const monthlyData: Record<string, number> = {};\r\n    const months = [\r\n      'Ocak',\r\n      '┼Şubat',\r\n      'Mart',\r\n      'Nisan',\r\n      'May─▒s',\r\n      'Haziran',\r\n      'Temmuz',\r\n      'A─şustos',\r\n      'Eyl├╝l',\r\n      'Ekim',\r\n      'Kas─▒m',\r\n      'Aral─▒k',\r\n    ];\r\n\r\n    donations.forEach((donation) => {\r\n      const date = new Date(donation.created_at);\r\n      const monthKey = `${date.getFullYear()}-${date.getMonth()}`;\r\n      monthlyData[monthKey] = (monthlyData[monthKey] ?? 0) + (donation.amount ?? 0);\r\n    });\r\n\r\n    // Get last 6 months\r\n    const last6Months = [];\r\n    const today = new Date();\r\n    for (let i = 5; i >= 0; i--) {\r\n      const date = new Date(today.getFullYear(), today.getMonth() - i, 1);\r\n      const monthKey = `${date.getFullYear()}-${date.getMonth()}`;\r\n      const monthName = months[date.getMonth()];\r\n      last6Months.push({\r\n        name: monthName,\r\n        value: monthlyData[monthKey] ?? 0,\r\n        month: monthName,\r\n      });\r\n    }\r\n\r\n    return last6Months;\r\n  }\r\n\r\n  private calculateTopDonors(donations: any[]) {\r\n    const donorTotals: Record<string, number> = {};\r\n\r\n    donations.forEach((donation) => {\r\n      const donor = donation.donor_name ?? 'Anonim';\r\n      donorTotals[donor] = (donorTotals[donor] ?? 0) + (donation.amount ?? 0);\r\n    });\r\n\r\n    return Object.entries(donorTotals)\r\n      .map(([name, total]) => ({ name, total }))\r\n      .sort((a, b) => b.total - a.total)\r\n      .slice(0, 5);\r\n  }\r\n\r\n  private calculateAverageProcessingDays(aidRequests: any[]) {\r\n    const processingDays = aidRequests\r\n      .filter((a) => a.status === 'completed' && a.created_at && a.updated_at)\r\n      .map((a) => {\r\n        const created = new Date(a.created_at);\r\n        const updated = new Date(a.updated_at);\r\n        return Math.ceil((updated.getTime() - created.getTime()) / (1000 * 60 * 60 * 24));\r\n      });\r\n\r\n    return processingDays.length > 0\r\n      ? processingDays.reduce((sum, days) => sum + days, 0) / processingDays.length\r\n      : 0;\r\n  }\r\n\r\n  // Get current mode info for debugging\r\n  async getCurrentMode(): Promise<{ mode: 'real' | 'mock'; hasData: boolean }> {\r\n    return {\r\n      mode: 'real',\r\n      hasData: false,\r\n    };\r\n  }\r\n\r\n  // Force refresh (no-op)\r\n  async refreshDatabaseCheck(): Promise<void> {\r\n    // No-op for frontend\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const intelligentStatsService = new IntelligentStatsService();\r\nexport default intelligentStatsService;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\internationalizationService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":643,"column":49,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":643,"endColumn":52,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17733,17736],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17733,17736],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":645,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":645,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[17805,17808],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[17805,17808],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":650,"column":23,"nodeType":"MemberExpression","endLine":650,"endColumn":37},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":656,"column":27,"nodeType":"MemberExpression","endLine":656,"endColumn":41},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":672,"column":16,"nodeType":"MemberExpression","endLine":672,"endColumn":29},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'format' is defined but never used.","line":744,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":744,"endColumn":39},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'format' is defined but never used. Allowed unused args must match /^_/u.","line":744,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":744,"endColumn":39},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":796,"column":42,"nodeType":"MemberExpression","endLine":796,"endColumn":64},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":814,"column":27,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":814,"endColumn":30,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[22346,22349],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[22346,22349],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":818,"column":18,"nodeType":"MemberExpression","endLine":818,"endColumn":26},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":818,"column":43,"nodeType":"MemberExpression","endLine":818,"endColumn":51},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":819,"column":44,"nodeType":"MemberExpression","endLine":819,"endColumn":52},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":850,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":850,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[23487,23490],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[23487,23490],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview Internationalization Service\r\n * @description ├çoklu dil deste─şi ve yerelle┼ştirme servisi\r\n */\r\n\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\n// Desteklenen diller\r\nexport type SupportedLanguage = 'tr' | 'en' | 'ar' | 'ku' | 'de' | 'fr' | 'es';\r\n\r\n// Dil ayarlar─▒\r\n/**\r\n * LanguageSettings Interface\r\n * \r\n * @interface LanguageSettings\r\n */\r\nexport interface LanguageSettings {\r\n  current: SupportedLanguage;\r\n  fallback: SupportedLanguage;\r\n  rtl: boolean; // Right-to-left\r\n  dateFormat: string;\r\n  numberFormat: string;\r\n  currency: string;\r\n  timezone: string;\r\n}\r\n\r\n// ├çeviri anahtarlar─▒\r\n/**\r\n * TranslationKeys Interface\r\n * \r\n * @interface TranslationKeys\r\n */\r\nexport interface TranslationKeys {\r\n  // Genel\r\n  common: {\r\n    save: string;\r\n    cancel: string;\r\n    delete: string;\r\n    edit: string;\r\n    add: string;\r\n    search: string;\r\n    filter: string;\r\n    loading: string;\r\n    error: string;\r\n    success: string;\r\n    warning: string;\r\n    info: string;\r\n    yes: string;\r\n    no: string;\r\n    ok: string;\r\n    close: string;\r\n  };\r\n\r\n  // Navigasyon\r\n  navigation: {\r\n    home: string;\r\n    dashboard: string;\r\n    beneficiaries: string;\r\n    donations: string;\r\n    members: string;\r\n    events: string;\r\n    reports: string;\r\n    settings: string;\r\n    profile: string;\r\n    logout: string;\r\n  };\r\n\r\n  // Dashboard\r\n  dashboard: {\r\n    title: string;\r\n    welcome: string;\r\n    totalBeneficiaries: string;\r\n    totalDonations: string;\r\n    totalMembers: string;\r\n    totalEvents: string;\r\n    recentActivity: string;\r\n    upcomingTasks: string;\r\n  };\r\n\r\n  // Formlar\r\n  forms: {\r\n    required: string;\r\n    invalidEmail: string;\r\n    invalidPhone: string;\r\n    minLength: string;\r\n    maxLength: string;\r\n    passwordMismatch: string;\r\n    selectOption: string;\r\n    uploadFile: string;\r\n    dragDrop: string;\r\n  };\r\n\r\n  // Hata mesajlar─▒\r\n  errors: {\r\n    networkError: string;\r\n    serverError: string;\r\n    unauthorized: string;\r\n    forbidden: string;\r\n    notFound: string;\r\n    validationError: string;\r\n    unknownError: string;\r\n  };\r\n}\r\n\r\n// ├çeviri verileri\r\nconst translations: Record<SupportedLanguage, TranslationKeys> = {\r\n  tr: {\r\n    common: {\r\n      save: 'Kaydet',\r\n      cancel: '─░ptal',\r\n      delete: 'Sil',\r\n      edit: 'D├╝zenle',\r\n      add: 'Ekle',\r\n      search: 'Ara',\r\n      filter: 'Filtrele',\r\n      loading: 'Y├╝kleniyor...',\r\n      error: 'Hata',\r\n      success: 'Ba┼şar─▒l─▒',\r\n      warning: 'Uyar─▒',\r\n      info: 'Bilgi',\r\n      yes: 'Evet',\r\n      no: 'Hay─▒r',\r\n      ok: 'Tamam',\r\n      close: 'Kapat',\r\n    },\r\n    navigation: {\r\n      home: 'Ana Sayfa',\r\n      dashboard: 'Dashboard',\r\n      beneficiaries: '─░htiya├ğ Sahipleri',\r\n      donations: 'Ba─ş─▒┼şlar',\r\n      members: '├£yeler',\r\n      events: 'Etkinlikler',\r\n      reports: 'Raporlar',\r\n      settings: 'Ayarlar',\r\n      profile: 'Profil',\r\n      logout: '├ç─▒k─▒┼ş',\r\n    },\r\n    dashboard: {\r\n      title: 'Dashboard',\r\n      welcome: 'Ho┼ş Geldiniz',\r\n      totalBeneficiaries: 'Toplam ─░htiya├ğ Sahibi',\r\n      totalDonations: 'Toplam Ba─ş─▒┼ş',\r\n      totalMembers: 'Toplam ├£ye',\r\n      totalEvents: 'Toplam Etkinlik',\r\n      recentActivity: 'Son Aktiviteler',\r\n      upcomingTasks: 'Yakla┼şan G├Ârevler',\r\n    },\r\n    forms: {\r\n      required: 'Bu alan zorunludur',\r\n      invalidEmail: 'Ge├ğerli bir e-posta adresi girin',\r\n      invalidPhone: 'Ge├ğerli bir telefon numaras─▒ girin',\r\n      minLength: 'En az {min} karakter olmal─▒',\r\n      maxLength: 'En fazla {max} karakter olmal─▒',\r\n      passwordMismatch: '┼Şifreler e┼şle┼şmiyor',\r\n      selectOption: 'Se├ğenek se├ğin',\r\n      uploadFile: 'Dosya y├╝kle',\r\n      dragDrop: 'Dosyalar─▒ buraya s├╝r├╝kleyin',\r\n    },\r\n    errors: {\r\n      networkError: 'A─ş ba─şlant─▒s─▒ hatas─▒',\r\n      serverError: 'Sunucu hatas─▒',\r\n      unauthorized: 'Yetkisiz eri┼şim',\r\n      forbidden: 'Eri┼şim reddedildi',\r\n      notFound: 'Bulunamad─▒',\r\n      validationError: 'Do─şrulama hatas─▒',\r\n      unknownError: 'Bilinmeyen hata',\r\n    },\r\n  },\r\n\r\n  en: {\r\n    common: {\r\n      save: 'Save',\r\n      cancel: 'Cancel',\r\n      delete: 'Delete',\r\n      edit: 'Edit',\r\n      add: 'Add',\r\n      search: 'Search',\r\n      filter: 'Filter',\r\n      loading: 'Loading...',\r\n      error: 'Error',\r\n      success: 'Success',\r\n      warning: 'Warning',\r\n      info: 'Info',\r\n      yes: 'Yes',\r\n      no: 'No',\r\n      ok: 'OK',\r\n      close: 'Close',\r\n    },\r\n    navigation: {\r\n      home: 'Home',\r\n      dashboard: 'Dashboard',\r\n      beneficiaries: 'Beneficiaries',\r\n      donations: 'Donations',\r\n      members: 'Members',\r\n      events: 'Events',\r\n      reports: 'Reports',\r\n      settings: 'Settings',\r\n      profile: 'Profile',\r\n      logout: 'Logout',\r\n    },\r\n    dashboard: {\r\n      title: 'Dashboard',\r\n      welcome: 'Welcome',\r\n      totalBeneficiaries: 'Total Beneficiaries',\r\n      totalDonations: 'Total Donations',\r\n      totalMembers: 'Total Members',\r\n      totalEvents: 'Total Events',\r\n      recentActivity: 'Recent Activity',\r\n      upcomingTasks: 'Upcoming Tasks',\r\n    },\r\n    forms: {\r\n      required: 'This field is required',\r\n      invalidEmail: 'Please enter a valid email address',\r\n      invalidPhone: 'Please enter a valid phone number',\r\n      minLength: 'Must be at least {min} characters',\r\n      maxLength: 'Must be at most {max} characters',\r\n      passwordMismatch: 'Passwords do not match',\r\n      selectOption: 'Select an option',\r\n      uploadFile: 'Upload file',\r\n      dragDrop: 'Drag and drop files here',\r\n    },\r\n    errors: {\r\n      networkError: 'Network connection error',\r\n      serverError: 'Server error',\r\n      unauthorized: 'Unauthorized access',\r\n      forbidden: 'Access denied',\r\n      notFound: 'Not found',\r\n      validationError: 'Validation error',\r\n      unknownError: 'Unknown error',\r\n    },\r\n  },\r\n\r\n  ar: {\r\n    common: {\r\n      save: 'Ï¡┘üÏ©',\r\n      cancel: 'ÏÑ┘äÏ║ÏğÏí',\r\n      delete: 'Ï¡Ï░┘ü',\r\n      edit: 'Ï¬Ï╣Ï»┘è┘ä',\r\n      add: 'ÏÑÏÂÏğ┘üÏ®',\r\n      search: 'Ï¿Ï¡Ï½',\r\n      filter: 'Ï¬ÏÁ┘ü┘èÏ®',\r\n      loading: 'Ï¼ÏğÏ▒┘è Ïğ┘äÏ¬Ï¡┘à┘è┘ä...',\r\n      error: 'Ï«ÏÀÏú',\r\n      success: '┘åÏ¼Ï¡',\r\n      warning: 'Ï¬Ï¡Ï░┘èÏ▒',\r\n      info: '┘àÏ╣┘ä┘ê┘àÏğÏ¬',\r\n      yes: '┘åÏ╣┘à',\r\n      no: '┘äÏğ',\r\n      ok: '┘à┘êÏğ┘ü┘é',\r\n      close: 'ÏÑÏ║┘äÏğ┘é',\r\n    },\r\n    navigation: {\r\n      home: 'Ïğ┘äÏ▒ÏĞ┘èÏ│┘èÏ®',\r\n      dashboard: '┘ä┘êÏ¡Ï® Ïğ┘äÏ¬Ï¡┘â┘à',\r\n      beneficiaries: 'Ïğ┘ä┘àÏ│Ï¬┘ü┘èÏ»┘ê┘å',\r\n      donations: 'Ïğ┘äÏ¬Ï¿Ï▒Ï╣ÏğÏ¬',\r\n      members: 'Ïğ┘äÏúÏ╣ÏÂÏğÏí',\r\n      events: 'Ïğ┘äÏúÏ¡Ï»ÏğÏ½',\r\n      reports: 'Ïğ┘äÏ¬┘éÏğÏ▒┘èÏ▒',\r\n      settings: 'Ïğ┘äÏÑÏ╣Ï»ÏğÏ»ÏğÏ¬',\r\n      profile: 'Ïğ┘ä┘à┘ä┘ü Ïğ┘äÏ┤Ï«ÏÁ┘è',\r\n      logout: 'Ï¬Ï│Ï¼┘è┘ä Ïğ┘äÏ«Ï▒┘êÏ¼',\r\n    },\r\n    dashboard: {\r\n      title: '┘ä┘êÏ¡Ï® Ïğ┘äÏ¬Ï¡┘â┘à',\r\n      welcome: '┘àÏ▒Ï¡Ï¿Ïğ┘ï',\r\n      totalBeneficiaries: 'ÏÑÏ¼┘àÏğ┘ä┘è Ïğ┘ä┘àÏ│Ï¬┘ü┘èÏ»┘è┘å',\r\n      totalDonations: 'ÏÑÏ¼┘àÏğ┘ä┘è Ïğ┘äÏ¬Ï¿Ï▒Ï╣ÏğÏ¬',\r\n      totalMembers: 'ÏÑÏ¼┘àÏğ┘ä┘è Ïğ┘äÏúÏ╣ÏÂÏğÏí',\r\n      totalEvents: 'ÏÑÏ¼┘àÏğ┘ä┘è Ïğ┘äÏúÏ¡Ï»ÏğÏ½',\r\n      recentActivity: 'Ïğ┘ä┘åÏ┤ÏğÏÀ Ïğ┘äÏúÏ«┘èÏ▒',\r\n      upcomingTasks: 'Ïğ┘ä┘à┘çÏğ┘à Ïğ┘ä┘éÏğÏ»┘àÏ®',\r\n    },\r\n    forms: {\r\n      required: '┘çÏ░Ïğ Ïğ┘äÏ¡┘é┘ä ┘àÏÀ┘ä┘êÏ¿',\r\n      invalidEmail: '┘èÏ▒Ï¼┘ë ÏÑÏ»Ï«Ïğ┘ä Ï╣┘å┘êÏğ┘å Ï¿Ï▒┘èÏ» ÏÑ┘ä┘âÏ¬Ï▒┘ê┘å┘è ÏÁÏ¡┘èÏ¡',\r\n      invalidPhone: '┘èÏ▒Ï¼┘ë ÏÑÏ»Ï«Ïğ┘ä Ï▒┘é┘à ┘çÏğÏ¬┘ü ÏÁÏ¡┘èÏ¡',\r\n      minLength: '┘èÏ¼Ï¿ Ïú┘å ┘è┘â┘ê┘å Ï╣┘ä┘ë Ïğ┘äÏú┘é┘ä {min} ÏúÏ¡Ï▒┘ü',\r\n      maxLength: '┘èÏ¼Ï¿ Ïú┘å ┘è┘â┘ê┘å Ï╣┘ä┘ë Ïğ┘äÏú┘âÏ½Ï▒ {max} ÏúÏ¡Ï▒┘ü',\r\n      passwordMismatch: '┘â┘ä┘àÏğÏ¬ Ïğ┘ä┘àÏ▒┘êÏ▒ Ï║┘èÏ▒ ┘àÏ¬ÏÀÏğÏ¿┘éÏ®',\r\n      selectOption: 'ÏğÏ«Ï¬Ï▒ Ï«┘èÏğÏ▒Ïğ┘ï',\r\n      uploadFile: 'Ï▒┘üÏ╣ ┘à┘ä┘ü',\r\n      dragDrop: 'ÏğÏ│Ï¡Ï¿ ┘êÏú┘ü┘äÏ¬ Ïğ┘ä┘à┘ä┘üÏğÏ¬ ┘ç┘åÏğ',\r\n    },\r\n    errors: {\r\n      networkError: 'Ï«ÏÀÏú ┘ü┘è Ïğ┘äÏğÏ¬ÏÁÏğ┘ä Ï¿Ïğ┘äÏ┤Ï¿┘âÏ®',\r\n      serverError: 'Ï«ÏÀÏú ┘ü┘è Ïğ┘äÏ«ÏğÏ»┘à',\r\n      unauthorized: '┘êÏÁ┘ê┘ä Ï║┘èÏ▒ ┘àÏÁÏ▒Ï¡ Ï¿┘ç',\r\n      forbidden: 'Ï¬┘à Ï▒┘üÏÂ Ïğ┘ä┘êÏÁ┘ê┘ä',\r\n      notFound: 'Ï║┘èÏ▒ ┘à┘êÏ¼┘êÏ»',\r\n      validationError: 'Ï«ÏÀÏú ┘ü┘è Ïğ┘äÏ¬Ï¡┘é┘é',\r\n      unknownError: 'Ï«ÏÀÏú Ï║┘èÏ▒ ┘àÏ╣Ï▒┘ê┘ü',\r\n    },\r\n  },\r\n\r\n  ku: {\r\n    common: {\r\n      save: '┘¥ÏğÏ┤█ò┌®█ò┘êÏ¬┘å',\r\n      cancel: '┘ç█ò┌Á┘ê█òÏ┤Ïğ┘åÏ»┘å█ò┘ê█ò',\r\n      delete: 'Ï│┌ò█î┘å█ò┘ê█ò',\r\n      edit: 'Ï»█òÏ│Ï¬┌®ÏğÏ▒█î',\r\n      add: 'Ï▓█îÏğÏ»┌®Ï▒Ï»┘å',\r\n      search: '┌»█ò┌òÏğ┘å',\r\n      filter: '┘¥Ïğ┌ÁÏğ┘êÏ¬┘å',\r\n      loading: 'Ï¿ÏğÏ▒┌®Ï▒Ï»┘å...',\r\n      error: '┘ç█ò┌Á█ò',\r\n      success: 'Ï│█òÏ▒┌®█ò┘êÏ¬┘ê┘ê',\r\n      warning: 'ÏĞÏğ┌»ÏğÏ»ÏğÏ▒┌®Ï▒Ï»┘å█ò┘ê█ò',\r\n      info: 'Ï▓Ïğ┘å█îÏğÏ▒█î',\r\n      yes: 'Ï¿█ò┌Á█Ä',\r\n      no: '┘å█òÏ«█ÄÏ▒',\r\n      ok: 'Ï¿ÏğÏ┤█ò',\r\n      close: 'Ï»ÏğÏ«Ï│Ï¬┘å',\r\n    },\r\n    navigation: {\r\n      home: 'Ï│█òÏ▒█ò┌®█î',\r\n      dashboard: 'Ï»ÏğÏ┤Ï¿█åÏ▒Ï»',\r\n      beneficiaries: 'Ï│┘ê┘êÏ»Ï¿█òÏ«█ò┌®Ïğ┘å',\r\n      donations: 'Ï¿█òÏ«Ï┤█î┘å█ò┌®Ïğ┘å',\r\n      members: 'ÏĞ█ò┘åÏ»Ïğ┘àÏğ┘å',\r\n      events: '┌ò┘ê┘êÏ»Ïğ┘ê█ò┌®Ïğ┘å',\r\n      reports: '┌òÏğ┘¥█åÏ▒Ï¬█ò┌®Ïğ┘å',\r\n      settings: '┌ò█Ä┌®Ï«Ï│Ï¬┘å█ò┌®Ïğ┘å',\r\n      profile: '┘¥Ï▒█å┘üÏğ█î┘ä',\r\n      logout: 'Ï»█òÏ▒┌å┘ê┘ê┘å',\r\n    },\r\n    dashboard: {\r\n      title: 'Ï»ÏğÏ┤Ï¿█åÏ▒Ï»',\r\n      welcome: 'Ï¿█òÏ«█ÄÏ▒Ï¿█Ä┘å',\r\n      totalBeneficiaries: '┌®█å█î Ï│┘ê┘êÏ»Ï¿█òÏ«█ò┌®Ïğ┘å',\r\n      totalDonations: '┌®█å█î Ï¿█òÏ«Ï┤█î┘å█ò┌®Ïğ┘å',\r\n      totalMembers: '┌®█å█î ÏĞ█ò┘åÏ»Ïğ┘àÏğ┘å',\r\n      totalEvents: '┌®█å█î ┌ò┘ê┘êÏ»Ïğ┘ê█ò┌®Ïğ┘å',\r\n      recentActivity: '┌åÏğ┘äÏğ┌®█î Ï»┘êÏğ█î█î',\r\n      upcomingTasks: 'ÏĞ█òÏ▒┌®█ò Ï»Ïğ┘çÏğÏ¬┘ê┘ê█ò┌®Ïğ┘å',\r\n    },\r\n    forms: {\r\n      required: 'ÏĞ█ò┘à Ï«Ïğ┘å█ò█î█ò ┘¥█Ä┘ê█îÏ│Ï¬█ò',\r\n      invalidEmail: 'Ï¬┌®Ïğ█î█ò ÏĞ█î┘à█ò█î┌Á█Ä┌®█î Ï»Ï▒┘êÏ│Ï¬ Ï¿┘å┘ê┘êÏ│█ò',\r\n      invalidPhone: 'Ï¬┌®Ïğ█î█ò ┌İ┘àÏğÏ▒█ò█î Ï¬█ò┘ä█ò┘ü█å┘å█Ä┌®█î Ï»Ï▒┘êÏ│Ï¬ Ï¿┘å┘ê┘êÏ│█ò',\r\n      minLength: 'Ï»█òÏ¿█ÄÏ¬ ┘äÏğ┘å█î┌®█ò┘à {min} ┘¥█îÏ¬ Ï¿█ÄÏ¬',\r\n      maxLength: 'Ï»█òÏ¿█ÄÏ¬ Ï▓█åÏ▒Ï¬Ï▒█î┘å {max} ┘¥█îÏ¬ Ï¿█ÄÏ¬',\r\n      passwordMismatch: '┘êÏ┤█ò█î ┘å┘ç█Ä┘å█î█î█ò┌®Ïğ┘å █î█ò┌®┘åÏğ┌»Ï▒┘å█ò┘ê█ò',\r\n      selectOption: '┘ç█ò┌ÁÏ¿┌İÏğÏ▒Ï»┘å█Ä┌® ┘ç█ò┌ÁÏ¿┌İ█ÄÏ▒█ò',\r\n      uploadFile: '┘üÏğ█î┘ä Ï¿ÏğÏ▒┌®Ï▒Ï»┘å',\r\n      dragDrop: '┘üÏğ█î┘ä█ò┌®Ïğ┘å ┘ä█ÄÏ▒█ò ┌òÏğ┌®█ÄÏ┤█ò ┘ê ┘ü┌ò█Ä Ï¿Ï»█ò',\r\n    },\r\n    errors: {\r\n      networkError: '┘ç█ò┌Á█ò█î ┘¥█ò█î┘ê█ò┘åÏ»█î Ï¬█å┌ò',\r\n      serverError: '┘ç█ò┌Á█ò█î Ï│█ÄÏ▒┌ñ█òÏ▒',\r\n      unauthorized: 'Ï»█òÏ│Ï¬┘¥█Ä┌»█ò█îÏ┤Ï¬┘å█î Ï¿█Ä ┘à█å┌Á█òÏ¬',\r\n      forbidden: 'Ï»█òÏ│Ï¬┘¥█Ä┌»█ò█îÏ┤Ï¬┘å ┌ò█òÏ¬┌®Ï▒Ïğ┘ê█ò',\r\n      notFound: '┘å█òÏ»█åÏ▓Ï▒Ïğ█î█ò┘ê█ò',\r\n      validationError: '┘ç█ò┌Á█ò█î ┘¥Ï┤Ï¬┌òÏğÏ│Ï¬┌®Ï▒Ï»┘å█ò┘ê█ò',\r\n      unknownError: '┘ç█ò┌Á█ò█î ┘å█ò┘åÏğÏ│Ï▒Ïğ┘ê',\r\n    },\r\n  },\r\n\r\n  de: {\r\n    common: {\r\n      save: 'Speichern',\r\n      cancel: 'Abbrechen',\r\n      delete: 'L├Âschen',\r\n      edit: 'Bearbeiten',\r\n      add: 'Hinzuf├╝gen',\r\n      search: 'Suchen',\r\n      filter: 'Filtern',\r\n      loading: 'Laden...',\r\n      error: 'Fehler',\r\n      success: 'Erfolgreich',\r\n      warning: 'Warnung',\r\n      info: 'Information',\r\n      yes: 'Ja',\r\n      no: 'Nein',\r\n      ok: 'OK',\r\n      close: 'Schlie├şen',\r\n    },\r\n    navigation: {\r\n      home: 'Startseite',\r\n      dashboard: 'Dashboard',\r\n      beneficiaries: 'Beg├╝nstigte',\r\n      donations: 'Spenden',\r\n      members: 'Mitglieder',\r\n      events: 'Veranstaltungen',\r\n      reports: 'Berichte',\r\n      settings: 'Einstellungen',\r\n      profile: 'Profil',\r\n      logout: 'Abmelden',\r\n    },\r\n    dashboard: {\r\n      title: 'Dashboard',\r\n      welcome: 'Willkommen',\r\n      totalBeneficiaries: 'Gesamte Beg├╝nstigte',\r\n      totalDonations: 'Gesamte Spenden',\r\n      totalMembers: 'Gesamte Mitglieder',\r\n      totalEvents: 'Gesamte Veranstaltungen',\r\n      recentActivity: 'Letzte Aktivit├ñten',\r\n      upcomingTasks: 'Anstehende Aufgaben',\r\n    },\r\n    forms: {\r\n      required: 'Dieses Feld ist erforderlich',\r\n      invalidEmail: 'Bitte geben Sie eine g├╝ltige E-Mail-Adresse ein',\r\n      invalidPhone: 'Bitte geben Sie eine g├╝ltige Telefonnummer ein',\r\n      minLength: 'Muss mindestens {min} Zeichen haben',\r\n      maxLength: 'Darf h├Âchstens {max} Zeichen haben',\r\n      passwordMismatch: 'Passw├Ârter stimmen nicht ├╝berein',\r\n      selectOption: 'Option ausw├ñhlen',\r\n      uploadFile: 'Datei hochladen',\r\n      dragDrop: 'Dateien hierher ziehen',\r\n    },\r\n    errors: {\r\n      networkError: 'Netzwerkverbindungsfehler',\r\n      serverError: 'Serverfehler',\r\n      unauthorized: 'Unbefugter Zugriff',\r\n      forbidden: 'Zugriff verweigert',\r\n      notFound: 'Nicht gefunden',\r\n      validationError: 'Validierungsfehler',\r\n      unknownError: 'Unbekannter Fehler',\r\n    },\r\n  },\r\n\r\n  fr: {\r\n    common: {\r\n      save: 'Enregistrer',\r\n      cancel: 'Annuler',\r\n      delete: 'Supprimer',\r\n      edit: 'Modifier',\r\n      add: 'Ajouter',\r\n      search: 'Rechercher',\r\n      filter: 'Filtrer',\r\n      loading: 'Chargement...',\r\n      error: 'Erreur',\r\n      success: 'Succ├¿s',\r\n      warning: 'Avertissement',\r\n      info: 'Information',\r\n      yes: 'Oui',\r\n      no: 'Non',\r\n      ok: 'OK',\r\n      close: 'Fermer',\r\n    },\r\n    navigation: {\r\n      home: 'Accueil',\r\n      dashboard: 'Tableau de bord',\r\n      beneficiaries: 'B├®n├®ficiaires',\r\n      donations: 'Dons',\r\n      members: 'Membres',\r\n      events: '├ëv├®nements',\r\n      reports: 'Rapports',\r\n      settings: 'Param├¿tres',\r\n      profile: 'Profil',\r\n      logout: 'D├®connexion',\r\n    },\r\n    dashboard: {\r\n      title: 'Tableau de bord',\r\n      welcome: 'Bienvenue',\r\n      totalBeneficiaries: 'Total des b├®n├®ficiaires',\r\n      totalDonations: 'Total des dons',\r\n      totalMembers: 'Total des membres',\r\n      totalEvents: 'Total des ├®v├®nements',\r\n      recentActivity: 'Activit├® r├®cente',\r\n      upcomingTasks: 'T├óches ├á venir',\r\n    },\r\n    forms: {\r\n      required: 'Ce champ est requis',\r\n      invalidEmail: 'Veuillez saisir une adresse e-mail valide',\r\n      invalidPhone: 'Veuillez saisir un num├®ro de t├®l├®phone valide',\r\n      minLength: 'Doit contenir au moins {min} caract├¿res',\r\n      maxLength: 'Doit contenir au maximum {max} caract├¿res',\r\n      passwordMismatch: 'Les mots de passe ne correspondent pas',\r\n      selectOption: 'S├®lectionner une option',\r\n      uploadFile: 'T├®l├®charger un fichier',\r\n      dragDrop: 'Glisser-d├®poser les fichiers ici',\r\n    },\r\n    errors: {\r\n      networkError: 'Erreur de connexion r├®seau',\r\n      serverError: 'Erreur serveur',\r\n      unauthorized: 'Acc├¿s non autoris├®',\r\n      forbidden: 'Acc├¿s refus├®',\r\n      notFound: 'Non trouv├®',\r\n      validationError: 'Erreur de validation',\r\n      unknownError: 'Erreur inconnue',\r\n    },\r\n  },\r\n\r\n  es: {\r\n    common: {\r\n      save: 'Guardar',\r\n      cancel: 'Cancelar',\r\n      delete: 'Eliminar',\r\n      edit: 'Editar',\r\n      add: 'Agregar',\r\n      search: 'Buscar',\r\n      filter: 'Filtrar',\r\n      loading: 'Cargando...',\r\n      error: 'Error',\r\n      success: '├ëxito',\r\n      warning: 'Advertencia',\r\n      info: 'Informaci├│n',\r\n      yes: 'S├¡',\r\n      no: 'No',\r\n      ok: 'OK',\r\n      close: 'Cerrar',\r\n    },\r\n    navigation: {\r\n      home: 'Inicio',\r\n      dashboard: 'Panel de control',\r\n      beneficiaries: 'Beneficiarios',\r\n      donations: 'Donaciones',\r\n      members: 'Miembros',\r\n      events: 'Eventos',\r\n      reports: 'Informes',\r\n      settings: 'Configuraci├│n',\r\n      profile: 'Perfil',\r\n      logout: 'Cerrar sesi├│n',\r\n    },\r\n    dashboard: {\r\n      title: 'Panel de control',\r\n      welcome: 'Bienvenido',\r\n      totalBeneficiaries: 'Total de beneficiarios',\r\n      totalDonations: 'Total de donaciones',\r\n      totalMembers: 'Total de miembros',\r\n      totalEvents: 'Total de eventos',\r\n      recentActivity: 'Actividad reciente',\r\n      upcomingTasks: 'Tareas pr├│ximas',\r\n    },\r\n    forms: {\r\n      required: 'Este campo es obligatorio',\r\n      invalidEmail: 'Por favor ingrese una direcci├│n de correo v├ílida',\r\n      invalidPhone: 'Por favor ingrese un n├║mero de tel├®fono v├ílido',\r\n      minLength: 'Debe tener al menos {min} caracteres',\r\n      maxLength: 'Debe tener como m├íximo {max} caracteres',\r\n      passwordMismatch: 'Las contrase├▒as no coinciden',\r\n      selectOption: 'Seleccionar una opci├│n',\r\n      uploadFile: 'Subir archivo',\r\n      dragDrop: 'Arrastra y suelta archivos aqu├¡',\r\n    },\r\n    errors: {\r\n      networkError: 'Error de conexi├│n de red',\r\n      serverError: 'Error del servidor',\r\n      unauthorized: 'Acceso no autorizado',\r\n      forbidden: 'Acceso denegado',\r\n      notFound: 'No encontrado',\r\n      validationError: 'Error de validaci├│n',\r\n      unknownError: 'Error desconocido',\r\n    },\r\n  },\r\n};\r\n\r\nclass InternationalizationService {\r\n  private currentLanguage: SupportedLanguage = 'tr';\r\n  private readonly fallbackLanguage: SupportedLanguage = 'en';\r\n  private settings: LanguageSettings;\r\n\r\n  constructor() {\r\n    this.settings = this.getDefaultSettings();\r\n    this.loadLanguageFromStorage();\r\n    this.applyLanguageSettings();\r\n  }\r\n\r\n  /**\r\n   * Varsay─▒lan ayarlar\r\n   */\r\n  private getDefaultSettings(): LanguageSettings {\r\n    return {\r\n      current: 'tr',\r\n      fallback: 'en',\r\n      rtl: false,\r\n      dateFormat: 'DD/MM/YYYY',\r\n      numberFormat: 'tr-TR',\r\n      currency: 'TRY',\r\n      timezone: 'Europe/Istanbul',\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Dil ayarlar─▒n─▒ localStorage'dan y├╝kle\r\n   */\r\n  private loadLanguageFromStorage(): void {\r\n    if (typeof window !== 'undefined') {\r\n      const saved = localStorage.getItem('language-settings');\r\n      if (saved) {\r\n        try {\r\n          const parsed = JSON.parse(saved);\r\n          this.settings = { ...this.settings, ...parsed };\r\n          this.currentLanguage = this.settings.current;\r\n        } catch (error) {\r\n          logger.warn('[i18n] Failed to load language settings:', error);\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Dil ayarlar─▒n─▒ localStorage'a kaydet\r\n   */\r\n  private saveLanguageToStorage(): void {\r\n    if (typeof window !== 'undefined') {\r\n      localStorage.setItem('language-settings', JSON.stringify(this.settings));\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Dil ayarlar─▒n─▒ uygula\r\n   */\r\n  private applyLanguageSettings(): void {\r\n    if (typeof document !== 'undefined') {\r\n      const html = document.documentElement;\r\n\r\n      // Dil attribute'unu ayarla\r\n      html.setAttribute('lang', this.currentLanguage);\r\n\r\n      // RTL deste─şi\r\n      if (this.settings.rtl) {\r\n        html.setAttribute('dir', 'rtl');\r\n      } else {\r\n        html.setAttribute('dir', 'ltr');\r\n      }\r\n\r\n      // CSS s─▒n─▒flar─▒\r\n      html.classList.remove(\r\n        'lang-tr',\r\n        'lang-en',\r\n        'lang-ar',\r\n        'lang-ku',\r\n        'lang-de',\r\n        'lang-fr',\r\n        'lang-es',\r\n      );\r\n      html.classList.add(`lang-${this.currentLanguage}`);\r\n\r\n      if (this.settings.rtl) {\r\n        html.classList.add('rtl');\r\n      } else {\r\n        html.classList.remove('rtl');\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * ├çeviri al\r\n   */\r\n  public t(key: string, params?: Record<string, any>): string {\r\n    const keys = key.split('.');\r\n    let translation: any = translations[this.currentLanguage];\r\n\r\n    // Anahtar─▒ takip et\r\n    for (const k of keys) {\r\n      if (translation && typeof translation === 'object' && k in translation) {\r\n        translation = translation[k];\r\n      } else {\r\n        // Fallback diline ge├ğ\r\n        translation = translations[this.fallbackLanguage];\r\n        for (const k of keys) {\r\n          if (translation && typeof translation === 'object' && k in translation) {\r\n            translation = translation[k];\r\n          } else {\r\n            return key; // ├çeviri bulunamad─▒\r\n          }\r\n        }\r\n        break;\r\n      }\r\n    }\r\n\r\n    if (typeof translation !== 'string') {\r\n      return key;\r\n    }\r\n\r\n    // Parametreleri de─şi┼ştir\r\n    if (params) {\r\n      return translation.replace(/\\{(\\w+)\\}/g, (match, param) => {\r\n        return params[param] ?? match;\r\n      });\r\n    }\r\n\r\n    return translation;\r\n  }\r\n\r\n  /**\r\n   * Dil de─şi┼ştir\r\n   */\r\n  public setLanguage(language: SupportedLanguage): void {\r\n    this.currentLanguage = language;\r\n    this.settings.current = language;\r\n    this.settings.rtl = this.isRTLLanguage(language);\r\n\r\n    this.applyLanguageSettings();\r\n    this.saveLanguageToStorage();\r\n\r\n    // Dil de─şi┼şikli─şi eventi\r\n    if (typeof window !== 'undefined') {\r\n      window.dispatchEvent(\r\n        new CustomEvent('languageChanged', {\r\n          detail: { language, settings: this.settings },\r\n        }),\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * RTL dil kontrol├╝\r\n   */\r\n  private isRTLLanguage(language: SupportedLanguage): boolean {\r\n    return language === 'ar' || language === 'ku';\r\n  }\r\n\r\n  /**\r\n   * Mevcut dil\r\n   */\r\n  public getCurrentLanguage(): SupportedLanguage {\r\n    return this.currentLanguage;\r\n  }\r\n\r\n  /**\r\n   * Dil ayarlar─▒\r\n   */\r\n  public getSettings(): LanguageSettings {\r\n    return { ...this.settings };\r\n  }\r\n\r\n  /**\r\n   * Desteklenen diller\r\n   */\r\n  public getSupportedLanguages(): {\r\n    code: SupportedLanguage;\r\n    name: string;\r\n    nativeName: string;\r\n    rtl: boolean;\r\n  }[] {\r\n    return [\r\n      { code: 'tr', name: 'Turkish', nativeName: 'T├╝rk├ğe', rtl: false },\r\n      { code: 'en', name: 'English', nativeName: 'English', rtl: false },\r\n      { code: 'ar', name: 'Arabic', nativeName: 'Ïğ┘äÏ╣Ï▒Ï¿┘èÏ®', rtl: true },\r\n      { code: 'ku', name: 'Kurdish', nativeName: '┌®┘êÏ▒Ï»█î', rtl: true },\r\n      { code: 'de', name: 'German', nativeName: 'Deutsch', rtl: false },\r\n      { code: 'fr', name: 'French', nativeName: 'Fran├ğais', rtl: false },\r\n      { code: 'es', name: 'Spanish', nativeName: 'Espa├▒ol', rtl: false },\r\n    ];\r\n  }\r\n\r\n  /**\r\n   * Tarih formatla\r\n   */\r\n  public formatDate(date: Date, format?: string): string {\r\n    const options: Intl.DateTimeFormatOptions = {\r\n      year: 'numeric',\r\n      month: '2-digit',\r\n      day: '2-digit',\r\n    };\r\n\r\n    return new Intl.DateTimeFormat(this.settings.numberFormat, options).format(date);\r\n  }\r\n\r\n  /**\r\n   * Say─▒ formatla\r\n   */\r\n  public formatNumber(number: number): string {\r\n    return new Intl.NumberFormat(this.settings.numberFormat).format(number);\r\n  }\r\n\r\n  /**\r\n   * Para birimi formatla\r\n   */\r\n  public formatCurrency(amount: number): string {\r\n    return new Intl.NumberFormat(this.settings.numberFormat, {\r\n      style: 'currency',\r\n      currency: this.settings.currency,\r\n    }).format(amount);\r\n  }\r\n\r\n  /**\r\n   * ├çeviri y├╝kle (dinamik)\r\n   */\r\n  public async loadTranslations(language: SupportedLanguage): Promise<void> {\r\n    try {\r\n      // Ger├ğek uygulamada API'den ├ğeviriler y├╝klenebilir\r\n      logger.info(`[i18n] Loading translations for ${language}`);\r\n    } catch (error) {\r\n      logger.error(`[i18n] Failed to load translations for ${language}:`, error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Eksik ├ğevirileri tespit et\r\n   */\r\n  public findMissingTranslations(): {\r\n    language: SupportedLanguage;\r\n    missingKeys: string[];\r\n  }[] {\r\n    const missing: { language: SupportedLanguage; missingKeys: string[] }[] = [];\r\n    const referenceKeys = this.getAllKeys(translations.en);\r\n\r\n    Object.keys(translations).forEach((lang) => {\r\n      const langCode = lang as SupportedLanguage;\r\n      if (langCode !== 'en') {\r\n        const langKeys = this.getAllKeys(translations[langCode]);\r\n        const missingKeys = referenceKeys.filter((key) => !langKeys.includes(key));\r\n\r\n        if (missingKeys.length > 0) {\r\n          missing.push({\r\n            language: langCode,\r\n            missingKeys,\r\n          });\r\n        }\r\n      }\r\n    });\r\n\r\n    return missing;\r\n  }\r\n\r\n  /**\r\n   * T├╝m anahtarlar─▒ al\r\n   */\r\n  private getAllKeys(obj: any, prefix = ''): string[] {\r\n    let keys: string[] = [];\r\n\r\n    for (const key in obj) {\r\n      if (typeof obj[key] === 'object' && obj[key] !== null) {\r\n        keys = keys.concat(this.getAllKeys(obj[key], prefix ? `${prefix}.${key}` : key));\r\n      } else {\r\n        keys.push(prefix ? `${prefix}.${key}` : key);\r\n      }\r\n    }\r\n\r\n    return keys;\r\n  }\r\n}\r\n\r\n// Singleton instance\r\nexport const i18n = new InternationalizationService();\r\n\r\n// React hook for internationalization\r\nexport const useTranslation = () => {\r\n  const [currentLanguage, setCurrentLanguage] = useState(i18n.getCurrentLanguage());\r\n  const [settings, setSettings] = useState(i18n.getSettings());\r\n\r\n  useEffect(() => {\r\n    const handleLanguageChange = (event: CustomEvent) => {\r\n      setCurrentLanguage(event.detail.language);\r\n      setSettings(event.detail.settings);\r\n    };\r\n\r\n    window.addEventListener('languageChanged', handleLanguageChange as EventListener);\r\n    return () => {\r\n      window.removeEventListener('languageChanged', handleLanguageChange as EventListener);\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    t: (key: string, params?: Record<string, any>) => i18n.t(key, params),\r\n    setLanguage: (language: SupportedLanguage) => {\r\n      i18n.setLanguage(language);\r\n    },\r\n    currentLanguage,\r\n    settings,\r\n    supportedLanguages: i18n.getSupportedLanguages(),\r\n    formatDate: (date: Date, format?: string) => i18n.formatDate(date, format),\r\n    formatNumber: (number: number) => i18n.formatNumber(number),\r\n    formatCurrency: (amount: number) => i18n.formatCurrency(amount),\r\n  };\r\n};\r\n\r\nexport default i18n;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\kumbaraService.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":29,"column":32,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":29,"endColumn":34,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[739,741],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":29,"column":37,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":29,"endColumn":39,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[744,746],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":29,"column":53,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":29,"endColumn":55,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[728,787],"text":"(import.meta?.env?.VITE_API_URL) ?? process.env.VITE_API_URL)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":29,"column":81,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":29,"endColumn":83,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[788,790],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":30,"column":31,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":30,"endColumn":33,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[851,853],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":30,"column":36,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":30,"endColumn":38,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[856,858],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":30,"column":52,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":30,"endColumn":54,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[840,899],"text":"(import.meta?.env?.VITE_API_KEY) ?? process.env.VITE_API_KEY)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":30,"column":80,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":30,"endColumn":82,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[900,902],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":85,"column":59,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":85,"endColumn":74,"suggestions":[{"messageId":"suggestOptionalChain","fix":{"range":[2682,2683],"text":"?"},"desc":"Consider using the optional chain operator `?.` instead. This operator includes runtime checks, so it is safer than the compile-only non-null assertion operator."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3205,3208],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3205,3208],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3216,3219],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3216,3219],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/switch-exhaustiveness-check","severity":2,"message":"Switch is not exhaustive. Cases not matched: undefined | \"created_at\"","line":103,"column":19,"nodeType":"MemberExpression","messageId":"switchIsNotExhaustive","endLine":103,"endColumn":34,"suggestions":[{"messageId":"addMissingCases","fix":{"range":[3795,3795],"text":"case undefined: { throw new Error('Not implemented yet: undefined case') }\n            case \"created_at\": { throw new Error('Not implemented yet: \"created_at\" case') }\n            "},"desc":"Add branches for missing cases."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":117,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":117,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3698,3700],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":118,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":118,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3753,3755],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":172,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":172,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5202,5204],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":180,"column":29,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":180,"endColumn":31,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5440,5442],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":181,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":181,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5492,5494],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'id' is defined but never used.","line":227,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":227,"endColumn":25},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'id' is defined but never used. Allowed unused args must match /^_/u.","line":227,"column":23,"nodeType":null,"messageId":"unusedVar","endLine":227,"endColumn":25},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'deletedBy' is defined but never used.","line":227,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":227,"endColumn":44},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'deletedBy' is defined but never used. Allowed unused args must match /^_/u.","line":227,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":227,"endColumn":44},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":249,"column":47,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":249,"endColumn":49,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7529,7531],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":251,"column":33,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":251,"endColumn":35,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7621,7623],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":253,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":253,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7718,7720],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":254,"column":27,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":254,"endColumn":29,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7752,7754],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":255,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":255,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7800,7802],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":256,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":256,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7850,7852],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":257,"column":55,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":257,"endColumn":57,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7912,7914],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":258,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":258,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7970,7972],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":259,"column":51,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":259,"endColumn":53,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8028,8030],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'limit' is assigned a value but never used.","line":276,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":276,"endColumn":48},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'limit' is assigned a value but never used. Allowed unused args must match /^_/u.","line":276,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":276,"endColumn":48},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":322,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":322,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10272,10274],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":391,"column":30,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":391,"endColumn":32,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12438,12440],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":392,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":392,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12484,12486],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'qrData' is assigned a value but never used.","line":406,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":406,"endColumn":17},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'qrData' is assigned a value but never used. Allowed unused vars must match /^_/u.","line":406,"column":11,"nodeType":null,"messageId":"unusedVar","endLine":406,"endColumn":17},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":577,"column":24,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":577,"endColumn":26,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[17346,17348],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":580,"column":23,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":580,"endColumn":25,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[17445,17447],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":581,"column":15,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":581,"endColumn":17,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[17467,17469],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":582,"column":15,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":582,"endColumn":17,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[17489,17491],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'alertId' is defined but never used.","line":624,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":624,"endColumn":33},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'alertId' is defined but never used. Allowed unused args must match /^_/u.","line":624,"column":26,"nodeType":null,"messageId":"unusedVar","endLine":624,"endColumn":33},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'acknowledgedBy' is defined but never used.","line":624,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":624,"endColumn":57},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'acknowledgedBy' is defined but never used. Allowed unused args must match /^_/u.","line":624,"column":43,"nodeType":null,"messageId":"unusedVar","endLine":624,"endColumn":57}],"suppressedMessages":[],"errorCount":7,"fatalErrorCount":0,"warningCount":38,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { logger } from '../lib/logging/logger';\r\n// ­şÅĞ KUMBARA SERVICE\r\n// Comprehensive service layer for Kumbara (Piggy Bank) management\r\n\r\nimport type {\r\n  Kumbara,\r\n  KumbaraAlert,\r\n  KumbaraAnalytics,\r\n  KumbaraCollection,\r\n  KumbaraCollectionInsert,\r\n  KumbaraDashboardStats,\r\n  KumbaraFilters,\r\n  KumbaraInsert,\r\n  KumbaraQRData,\r\n  KumbaraSearchResult,\r\n  KumbaraUpdate,\r\n} from '../types/kumbara';\r\n\r\n/**\r\n * Enhanced Kumbara Service with modern TypeScript patterns\r\n * Implements comprehensive error handling and type safety\r\n */\r\nclass KumbaraService {\r\n  private readonly baseUrl: string;\r\n  private readonly apiKey: string;\r\n  private readonly defaultHeaders: HeadersInit;\r\n\r\n  constructor() {\r\n    this.baseUrl = (import.meta?.env?.VITE_API_URL) || process.env.VITE_API_URL || 'http://localhost:3000/api';\r\n    this.apiKey = (import.meta?.env?.VITE_API_KEY) || process.env.VITE_API_KEY || '';\r\n    this.defaultHeaders = {\r\n      'Content-Type': 'application/json',\r\n      Accept: 'application/json',\r\n      ...(this.apiKey && { Authorization: `Bearer ${this.apiKey}` }),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Enhanced error handling with proper typing\r\n   */\r\n  private handleError(error: unknown, operation: string): never {\r\n    const errorMessage = error instanceof Error ? error.message : 'Bilinmeyen bir hata olu┼ştu';\r\n\r\n    logger.error(`KumbaraService.${operation} error:`, error);\r\n    throw new Error(`${operation} i┼şlemi ba┼şar─▒s─▒z: ${errorMessage}`);\r\n  }\r\n\r\n  /**\r\n   * Type-safe API request helper\r\n   */\r\n  private async makeRequest<T>(endpoint: string, options: RequestInit = {}): Promise<T> {\r\n    try {\r\n      const response = await fetch(`${this.baseUrl}${endpoint}`, {\r\n        headers: this.defaultHeaders,\r\n        ...options,\r\n      });\r\n\r\n      if (!response.ok) {\r\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\r\n      }\r\n\r\n      return (await response.json()) as T;\r\n    } catch (error) {\r\n      this.handleError(error, 'API Request');\r\n    }\r\n  }\r\n\r\n  // ==========================================\r\n  // KUMBARA CRUD OPERATIONS\r\n  // ==========================================\r\n\r\n  /**\r\n   * Get all kumbaras with filtering and pagination\r\n   * Enhanced with proper error handling and type safety\r\n   */\r\n  async getKumbaras(filters: KumbaraFilters = {}): Promise<KumbaraSearchResult> {\r\n    try {\r\n      // Return empty data structure for clean start\r\n      const emptyKumbaras: Kumbara[] = [];\r\n\r\n      // Apply filters to empty data structure\r\n      let filteredKumbaras = emptyKumbaras;\r\n\r\n      if (filters.status && filters.status.length > 0) {\r\n        filteredKumbaras = filteredKumbaras.filter((k) => filters.status!.includes(k.status));\r\n      }\r\n\r\n      if (filters.search_term) {\r\n        const searchLower = filters.search_term.toLowerCase();\r\n        filteredKumbaras = filteredKumbaras.filter(\r\n          (k) =>\r\n            k.name.toLowerCase().includes(searchLower) ||\r\n            k.location.toLowerCase().includes(searchLower) ||\r\n            k.code.toLowerCase().includes(searchLower),\r\n        );\r\n      }\r\n\r\n      // Apply sorting\r\n      if (filters.sort_by) {\r\n        filteredKumbaras.sort((a, b) => {\r\n          let aVal: any, bVal: any;\r\n\r\n          switch (filters.sort_by) {\r\n            case 'name':\r\n              aVal = a.name;\r\n              bVal = b.name;\r\n              break;\r\n            case 'location':\r\n              aVal = a.location;\r\n              bVal = b.location;\r\n              break;\r\n            case 'amount':\r\n              aVal = a.totalAmount;\r\n              bVal = b.totalAmount;\r\n              break;\r\n            case 'last_collection':\r\n              aVal = new Date(a.lastCollection || 0);\r\n              bVal = new Date(b.lastCollection || 0);\r\n              break;\r\n            default:\r\n              aVal = a.created_at;\r\n              bVal = b.created_at;\r\n          }\r\n\r\n          if (filters.sort_order === 'desc') {\r\n            return aVal > bVal ? -1 : aVal < bVal ? 1 : 0;\r\n          }\r\n          return aVal < bVal ? -1 : aVal > bVal ? 1 : 0;\r\n        });\r\n      }\r\n\r\n      return {\r\n        kumbaras: filteredKumbaras,\r\n        total_count: filteredKumbaras.length,\r\n        page: 1,\r\n        page_size: filteredKumbaras.length,\r\n        total_pages: 1,\r\n        filters_applied: filters,\r\n      };\r\n    } catch (error) {\r\n      logger.error('Error fetching kumbaras:', error);\r\n      throw new Error('Kumbara listesi al─▒namad─▒');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get single kumbara by ID\r\n   */\r\n  async getKumbara(id: string): Promise<Kumbara> {\r\n    try {\r\n      // Mock implementation - replace with real API call\r\n      const kumbaras = await this.getKumbaras();\r\n      const kumbara = kumbaras.kumbaras.find((k) => k.id === id);\r\n\r\n      if (!kumbara) {\r\n        throw new Error('Kumbara bulunamad─▒');\r\n      }\r\n\r\n      return kumbara;\r\n    } catch (error) {\r\n      logger.error('Error fetching kumbara:', error);\r\n      throw new Error('Kumbara bilgileri al─▒namad─▒');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Create new kumbara\r\n   */\r\n  async createKumbara(data: KumbaraInsert): Promise<Kumbara> {\r\n    try {\r\n      // Generate unique code if not provided\r\n      const code = data.code || this.generateKumbaraCode();\r\n\r\n      const newKumbara: Kumbara = {\r\n        id: this.generateId(),\r\n        code,\r\n        name: data.name,\r\n        location: data.location,\r\n        address: data.address,\r\n        status: data.status || 'active',\r\n        installDate: data.installDate || new Date().toISOString().split('T')[0],\r\n        lastCollection: null,\r\n        totalAmount: 0,\r\n        monthlyAverage: 0,\r\n        qrCode: this.generateQRCode(code),\r\n        contactPerson: data.contactPerson,\r\n        phone: data.phone,\r\n        notes: data.notes,\r\n        coordinates: data.coordinates,\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString(),\r\n        created_by: data.created_by,\r\n      };\r\n\r\n      // Mock API call - replace with real implementation\r\n      return newKumbara;\r\n    } catch (error) {\r\n      logger.error('Error creating kumbara:', error);\r\n      throw new Error('Kumbara olu┼şturulamad─▒');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update existing kumbara\r\n   */\r\n  async updateKumbara(id: string, data: KumbaraUpdate): Promise<Kumbara> {\r\n    try {\r\n      const existingKumbara = await this.getKumbara(id);\r\n\r\n      const updatedKumbara: Kumbara = {\r\n        ...existingKumbara,\r\n        ...data,\r\n        updated_at: new Date().toISOString(),\r\n      };\r\n\r\n      // Mock API call - replace with real implementation\r\n      return updatedKumbara;\r\n    } catch (error) {\r\n      logger.error('Error updating kumbara:', error);\r\n      throw new Error('Kumbara g├╝ncellenemedi');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Delete kumbara (soft delete)\r\n   */\r\n  async deleteKumbara(id: string, deletedBy: string): Promise<boolean> {\r\n    try {\r\n      // Mock API call - replace with real implementation\r\n      return true;\r\n    } catch (error) {\r\n      logger.error('Error deleting kumbara:', error);\r\n      throw new Error('Kumbara silinemedi');\r\n    }\r\n  }\r\n\r\n  // ==========================================\r\n  // COLLECTION OPERATIONS\r\n  // ==========================================\r\n\r\n  /**\r\n   * Record new collection\r\n   */\r\n  async recordCollection(data: KumbaraCollectionInsert): Promise<KumbaraCollection> {\r\n    try {\r\n      const newCollection: KumbaraCollection = {\r\n        id: this.generateId(),\r\n        kumbara_id: data.kumbara_id,\r\n        collection_date: data.collection_date || new Date().toISOString(),\r\n        amount: data.amount,\r\n        currency: data.currency || 'TRY',\r\n        collector_name: data.collector_name,\r\n        collector_id: data.collector_id || '',\r\n        notes: data.notes || '',\r\n        witness_name: data.witness_name || '',\r\n        witness_phone: data.witness_phone || '',\r\n        verification_photos: data.verification_photos || [],\r\n        weather_condition: data.weather_condition || '',\r\n        collection_method: data.collection_method || 'scheduled',\r\n        created_at: new Date().toISOString(),\r\n        updated_at: new Date().toISOString(),\r\n        created_by: data.created_by,\r\n      };\r\n\r\n      // Mock API call - replace with real implementation\r\n      return newCollection;\r\n    } catch (error) {\r\n      logger.error('Error recording collection:', error);\r\n      throw new Error('Toplama kayd─▒ olu┼şturulamad─▒');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get collections for a kumbara\r\n   */\r\n  async getCollections(kumbaraId: string, limit = 10): Promise<KumbaraCollection[]> {\r\n    try {\r\n      // ­şöù Ger├ğek API'den toplama kay─▒tlar─▒ al─▒nacak\r\n      return [];\r\n    } catch (error) {\r\n      logger.error('Error fetching collections:', error);\r\n      throw new Error('Toplama kay─▒tlar─▒ al─▒namad─▒');\r\n    }\r\n  }\r\n\r\n  // ==========================================\r\n  // DASHBOARD AND ANALYTICS\r\n  // ==========================================\r\n\r\n  /**\r\n   * Get dashboard statistics\r\n   */\r\n  async getDashboardStats(): Promise<KumbaraDashboardStats> {\r\n    try {\r\n      const kumbaras = await this.getKumbaras();\r\n\r\n      const stats: KumbaraDashboardStats = {\r\n        total_kumbaras: kumbaras.kumbaras.length,\r\n        active_kumbaras: kumbaras.kumbaras.filter((k) => k.status === 'active').length,\r\n        inactive_kumbaras: kumbaras.kumbaras.filter((k) => k.status === 'inactive').length,\r\n        maintenance_kumbaras: kumbaras.kumbaras.filter((k) => k.status === 'maintenance').length,\r\n        total_collections_today: 5,\r\n        total_amount_today: 450.75,\r\n        total_collections_month: 45,\r\n        total_amount_month: 12500.25,\r\n        top_performing_kumbaras: kumbaras.kumbaras\r\n          .sort((a, b) => b.totalAmount - a.totalAmount)\r\n          .slice(0, 5)\r\n          .map((k) => ({\r\n            id: k.id,\r\n            name: k.name,\r\n            location: k.location,\r\n            amount: k.totalAmount,\r\n            collections: 0, // Ger├ğek veri API'den gelecek\r\n          })),\r\n        recent_collections: [], // Ger├ğek veri API'den gelecek\r\n        maintenance_alerts: kumbaras.kumbaras\r\n          .filter((k) => k.status === 'maintenance')\r\n          .map((k) => ({\r\n            kumbara_id: k.id,\r\n            kumbara_name: k.name,\r\n            issue: k.notes || 'Bak─▒m gerekli',\r\n            priority: 'medium' as const,\r\n          })),\r\n        performance_trends: [\r\n          { date: '2024-01-01', total_amount: 1000, collection_count: 10 },\r\n          { date: '2024-01-02', total_amount: 1200, collection_count: 12 },\r\n          { date: '2024-01-03', total_amount: 950, collection_count: 8 },\r\n        ],\r\n      };\r\n\r\n      return stats;\r\n    } catch (error) {\r\n      logger.error('Error fetching dashboard stats:', error);\r\n      throw new Error('Dashboard istatistikleri al─▒namad─▒');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get analytics for a specific kumbara\r\n   */\r\n  async getKumbaraAnalytics(\r\n    kumbaraId: string,\r\n    periodStart: string,\r\n    periodEnd: string,\r\n  ): Promise<KumbaraAnalytics> {\r\n    try {\r\n      // Analytics data - replace with real API call\r\n      const analytics: KumbaraAnalytics = {\r\n        kumbara_id: kumbaraId,\r\n        period_start: periodStart,\r\n        period_end: periodEnd,\r\n        total_collections: 25,\r\n        total_amount: 2500.75,\r\n        average_amount: 100.03,\r\n        collection_frequency: 3, // days\r\n        performance_score: 85,\r\n        trend: 'increasing',\r\n        peak_months: ['Aral─▒k', 'Ocak'],\r\n        low_months: ['Temmuz', 'A─şustos'],\r\n        recommendations: [\r\n          'Koleksiyon s─▒kl─▒─ş─▒ art─▒r─▒labilir',\r\n          'QR kod tan─▒t─▒m─▒ yap─▒labilir',\r\n          'Lokasyon trafi─şi incelenmeli',\r\n        ],\r\n      };\r\n\r\n      return analytics;\r\n    } catch (error) {\r\n      logger.error('Error fetching kumbara analytics:', error);\r\n      throw new Error('Kumbara analitikleri al─▒namad─▒');\r\n    }\r\n  }\r\n\r\n  // ==========================================\r\n  // QR CODE OPERATIONS\r\n  // ==========================================\r\n\r\n  /**\r\n   * Generate QR code data for kumbara\r\n   */\r\n  generateQRData(kumbara: Kumbara): KumbaraQRData {\r\n    return {\r\n      kumbaraId: kumbara.id,\r\n      code: kumbara.code,\r\n      name: kumbara.name,\r\n      location: kumbara.location,\r\n      url: `https://bagis.dernek.org/kumbara/${kumbara.code}`,\r\n      donationUrl: `https://bagis.dernek.org/donate/kumbara/${kumbara.code}`,\r\n      contactInfo: {\r\n        phone: kumbara.phone || '',\r\n        person: kumbara.contactPerson || '',\r\n      },\r\n      metadata: {\r\n        installDate: kumbara.installDate,\r\n        lastUpdated: kumbara.updated_at,\r\n        version: '1.0',\r\n      },\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Generate printable QR code HTML\r\n   */\r\n  generatePrintableQR(kumbara: Kumbara): string {\r\n    const qrData = this.generateQRData(kumbara);\r\n\r\n    return `\r\n      <html>\r\n        <head>\r\n          <title>Kumbara QR Kod - ${kumbara.code}</title>\r\n          <style>\r\n            @page { size: 40mm 30mm; margin: 2mm; }\r\n            body { \r\n              font-family: Arial, sans-serif; \r\n              margin: 0; \r\n              padding: 0;\r\n              display: flex;\r\n              flex-direction: column;\r\n              align-items: center;\r\n              justify-content: center;\r\n              height: 26mm;\r\n              width: 36mm;\r\n            }\r\n            .qr-container {\r\n              text-align: center;\r\n              border: 1px solid #ddd;\r\n              padding: 2mm;\r\n              border-radius: 2mm;\r\n            }\r\n            .qr-placeholder {\r\n              width: 20mm;\r\n              height: 20mm;\r\n              border: 2px solid #333;\r\n              margin: 0 auto 1mm auto;\r\n              display: flex;\r\n              align-items: center;\r\n              justify-content: center;\r\n              font-size: 8px;\r\n              background: #f9f9f9;\r\n            }\r\n            .qr-info {\r\n              font-size: 6px;\r\n              margin: 0;\r\n              line-height: 1.2;\r\n            }\r\n            .qr-code {\r\n              font-weight: bold;\r\n              margin-bottom: 0.5mm;\r\n            }\r\n          </style>\r\n        </head>\r\n        <body>\r\n          <div class=\"qr-container\">\r\n            <div class=\"qr-placeholder\">QR KOD</div>\r\n            <div class=\"qr-info qr-code\">${kumbara.code}</div>\r\n            <div class=\"qr-info\">${kumbara.name}</div>\r\n            <div class=\"qr-info\">${kumbara.location}</div>\r\n          </div>\r\n        </body>\r\n      </html>\r\n    `;\r\n  }\r\n\r\n  // ==========================================\r\n  // UTILITY METHODS\r\n  // ==========================================\r\n\r\n  /**\r\n   * Generate unique kumbara code\r\n   */\r\n  private generateKumbaraCode(): string {\r\n    const prefix = 'KMB';\r\n    const timestamp = Date.now().toString().slice(-6);\r\n    const random = Math.floor(Math.random() * 100)\r\n      .toString()\r\n      .padStart(2, '0');\r\n    return `${prefix}-${timestamp}-${random}`;\r\n  }\r\n\r\n  /**\r\n   * Generate QR code string\r\n   */\r\n  private generateQRCode(code: string): string {\r\n    return `QR-${code}-${new Date().getFullYear()}`;\r\n  }\r\n\r\n  /**\r\n   * Generate unique ID\r\n   */\r\n  private generateId(): string {\r\n    return Math.random().toString(36).substr(2, 9);\r\n  }\r\n\r\n  /**\r\n   * Validate kumbara data\r\n   */\r\n  validateKumbaraData(data: KumbaraInsert): { isValid: boolean; errors: string[] } {\r\n    const errors: string[] = [];\r\n\r\n    if (!data.name || data.name.trim().length < 3) {\r\n      errors.push('Kumbara ad─▒ en az 3 karakter olmal─▒d─▒r');\r\n    }\r\n\r\n    if (!data.location || data.location.trim().length < 3) {\r\n      errors.push('Lokasyon en az 3 karakter olmal─▒d─▒r');\r\n    }\r\n\r\n    if (!data.address || data.address.trim().length < 10) {\r\n      errors.push('Adres en az 10 karakter olmal─▒d─▒r');\r\n    }\r\n\r\n    if (data.phone && !this.isValidPhone(data.phone)) {\r\n      errors.push('Ge├ğerli bir telefon numaras─▒ giriniz');\r\n    }\r\n\r\n    return {\r\n      isValid: errors.length === 0,\r\n      errors,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Validate phone number\r\n   */\r\n  private isValidPhone(phone: string): boolean {\r\n    const phoneRegex = /^(\\+90|0)?[5][0-9]{9}$/;\r\n    return phoneRegex.test(phone.replace(/\\s/g, ''));\r\n  }\r\n\r\n  /**\r\n   * Export kumbara data\r\n   */\r\n  async exportKumbaras(format: 'csv' | 'excel' | 'pdf' = 'csv'): Promise<Blob> {\r\n    try {\r\n      const kumbaras = await this.getKumbaras();\r\n\r\n      if (format === 'csv') {\r\n        const csvContent = this.generateCSV(kumbaras.kumbaras);\r\n        return new Blob([csvContent], { type: 'text/csv' });\r\n      }\r\n\r\n      // For other formats, implement accordingly\r\n      throw new Error(`${format} format─▒ hen├╝z desteklenmiyor`);\r\n    } catch (error) {\r\n      logger.error('Error exporting kumbaras:', error);\r\n      throw new Error('Kumbara verileri d─▒┼şa aktar─▒lamad─▒');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate CSV content\r\n   */\r\n  private generateCSV(kumbaras: Kumbara[]): string {\r\n    const headers = [\r\n      'Kod',\r\n      '─░sim',\r\n      'Lokasyon',\r\n      'Adres',\r\n      'Durum',\r\n      'Kurulum Tarihi',\r\n      'Son Toplama',\r\n      'Toplam Tutar',\r\n      'Ayl─▒k Ortalama',\r\n      '─░leti┼şim Ki┼şisi',\r\n      'Telefon',\r\n      'Notlar',\r\n    ];\r\n\r\n    const rows = kumbaras.map((k) => [\r\n      k.code,\r\n      k.name,\r\n      k.location,\r\n      k.address,\r\n      k.status,\r\n      k.installDate,\r\n      k.lastCollection || '',\r\n      k.totalAmount.toString(),\r\n      k.monthlyAverage.toString(),\r\n      k.contactPerson || '',\r\n      k.phone || '',\r\n      k.notes || '',\r\n    ]);\r\n\r\n    return [headers, ...rows].map((row) => row.map((cell) => `\"${cell}\"`).join(',')).join('\\n');\r\n  }\r\n\r\n  // ==========================================\r\n  // ALERT AND NOTIFICATION METHODS\r\n  // ==========================================\r\n\r\n  /**\r\n   * Get alerts for kumbaras\r\n   */\r\n  async getKumbaraAlerts(): Promise<KumbaraAlert[]> {\r\n    try {\r\n      // Mock alerts - replace with real API call\r\n      const alerts: KumbaraAlert[] = [\r\n        {\r\n          id: '1',\r\n          kumbara_id: '3',\r\n          alert_type: 'maintenance_due',\r\n          severity: 'warning',\r\n          title: 'Bak─▒m Gerekli',\r\n          message: 'Market Kumbaras─▒ kilit ar─▒zas─▒ nedeniyle bak─▒m gerektiriyor',\r\n          action_required: true,\r\n          action_url: '/kumbara/3/maintenance',\r\n          acknowledged: false,\r\n          resolved: false,\r\n          created_at: new Date().toISOString(),\r\n        },\r\n      ];\r\n\r\n      return alerts;\r\n    } catch (error) {\r\n      logger.error('Error fetching kumbara alerts:', error);\r\n      throw new Error('Kumbara uyar─▒lar─▒ al─▒namad─▒');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Acknowledge alert\r\n   */\r\n  async acknowledgeAlert(alertId: string, acknowledgedBy: string): Promise<boolean> {\r\n    try {\r\n      // Mock API call - replace with real implementation\r\n      return true;\r\n    } catch (error) {\r\n      logger.error('Error acknowledging alert:', error);\r\n      throw new Error('Uyar─▒ onaylanamad─▒');\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const kumbaraService = new KumbaraService();\r\nexport default kumbaraService;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\membersService.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":176,"column":47,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":176,"endColumn":49,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[5232,5234],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":179,"column":15,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":179,"endColumn":19},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":180,"column":22,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":180,"endColumn":24,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5325,5327],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":181,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":181,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5369,5371],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":183,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":183,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5419,5422],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5419,5422],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":185,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":185,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5525,5527],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":203,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":203,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6088,6091],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6088,6091],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":205,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":205,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[6196,6198],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":226,"column":23,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":226,"endColumn":34},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":275,"column":87,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":275,"endColumn":89,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8606,8608],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":278,"column":90,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":278,"endColumn":92,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[8739,8741],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":286,"column":17,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":286,"endColumn":36},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":287,"column":19,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":287,"endColumn":40},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":288,"column":20,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":288,"endColumn":42},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":289,"column":18,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":289,"endColumn":38},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":290,"column":18,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":290,"endColumn":38},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":308,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":308,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9730,9733],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9730,9733],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":310,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":310,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9844,9846],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":325,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":325,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10352,10355],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10352,10355],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":326,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":326,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[10396,10398],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":344,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":344,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[10982,10985],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[10982,10985],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":345,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":345,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11026,11028],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":363,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":363,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11602,11605],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11602,11605],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":364,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":364,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[11646,11648],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":375,"column":38,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":375,"endColumn":40,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12000,12002],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":381,"column":19,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":381,"endColumn":35},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":382,"column":20,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":382,"endColumn":37},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":389,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":389,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12536,12538],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":395,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":395,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12843,12845],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":397,"column":45,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":397,"endColumn":47,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[12953,12955],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":398,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":398,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13057,13059],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":401,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":401,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13212,13214],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":412,"column":61,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":412,"endColumn":63,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[13899,13901],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":420,"column":71,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":420,"endColumn":73,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14478,14480],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":421,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":421,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14541,14543],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":422,"column":65,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":422,"endColumn":67,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14612,14614],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":441,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":441,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15277,15280],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15277,15280],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":443,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":443,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[15388,15390],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":469,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":469,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16098,16101],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16098,16101],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":471,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":471,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16209,16211],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":489,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":489,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16725,16728],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16725,16728],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":491,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":491,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16836,16838],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":509,"column":11,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":509,"endColumn":15},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":545,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":545,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[18489,18492],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[18489,18492],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":547,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":547,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[18604,18606],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":598,"column":50,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":598,"endColumn":52,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[20288,20290],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":599,"column":22,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":599,"endColumn":26},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":600,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":600,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[20372,20375],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[20372,20375],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":602,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":602,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[20484,20486],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":622,"column":23,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":622,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":623,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":623,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[21148,21151],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[21148,21151],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":624,"column":37,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":624,"endColumn":39,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[21192,21194],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":52,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { supabase } from '../lib/supabase';\r\nimport { logger } from '../lib/logging/logger';\r\n\r\n// Member types - Updated to match database schema\r\nexport interface Member {\r\n  id: number;\r\n  name: string;\r\n  email: string;\r\n  phone?: string;\r\n  avatar_url?: string;\r\n  address?: string;\r\n  city?: string;\r\n  district?: string;\r\n  postal_code?: string;\r\n  country: string;\r\n  birth_date?: string;\r\n  gender?: 'male' | 'female' | 'other';\r\n  marital_status?: 'single' | 'married' | 'divorced' | 'widowed';\r\n  occupation?: string;\r\n  employer?: string;\r\n  membership_type: 'standard' | 'premium' | 'corporate' | 'student' | 'senior' | 'honorary';\r\n  membership_number: string;\r\n  join_date: string;\r\n  membership_status: 'active' | 'inactive' | 'suspended' | 'expired' | 'pending';\r\n  expiry_date?: string;\r\n  annual_fee?: number;\r\n  fee_paid: boolean;\r\n  last_payment_date?: string;\r\n  payment_method?: string;\r\n  profession?: string;\r\n  specialization?: string;\r\n  experience_years?: number;\r\n  education_level?: 'high_school' | 'bachelor' | 'master' | 'phd' | 'other';\r\n  certifications?: string[];\r\n  languages?: string[];\r\n  preferred_contact_method?: 'email' | 'phone' | 'sms' | 'mail';\r\n  newsletter_subscription: boolean;\r\n  event_notifications: boolean;\r\n  marketing_consent: boolean;\r\n  emergency_contact_name?: string;\r\n  emergency_contact_phone?: string;\r\n  emergency_contact_relation?: string;\r\n  committee_memberships?: string[];\r\n  volunteer_interests?: string[];\r\n  leadership_positions?: string[];\r\n  skills_and_expertise?: string[];\r\n  last_activity_date?: string;\r\n  event_attendance_count: number;\r\n  volunteer_hours: number;\r\n  contribution_amount: number;\r\n  notes?: string;\r\n  special_requirements?: string;\r\n  dietary_restrictions?: string;\r\n  accessibility_needs?: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n  created_by?: string;\r\n  updated_by?: string;\r\n  ip_address?: string;\r\n  user_agent?: string;\r\n  source?: string;\r\n  referral_code?: string;\r\n}\r\n\r\n// API response type\r\nexport interface MembersApiResponse<T> {\r\n  data?: T;\r\n  error?: string;\r\n  count?: number;\r\n  totalPages?: number;\r\n}\r\n\r\n// Filters interface\r\nexport interface MembersFilters {\r\n  searchTerm?: string;\r\n  membershipStatus?: string;\r\n  membershipType?: string;\r\n  city?: string;\r\n  profession?: string;\r\n  dateFrom?: string;\r\n  dateTo?: string;\r\n  volunteerAvailable?: boolean;\r\n  feePaid?: boolean;\r\n}\r\n\r\n// Member statistics interface\r\nexport interface MemberStats {\r\n  total: number;\r\n  active: number;\r\n  inactive: number;\r\n  suspended: number;\r\n  expired: number;\r\n  pending: number;\r\n  byMembershipType: Record<string, number>;\r\n  byCity: Record<string, number>;\r\n  byProfession: Record<string, number>;\r\n  recentJoins: number;\r\n  averageAge: number;\r\n  totalVolunteerHours: number;\r\n  totalContributions: number;\r\n  feePaidPercentage: number;\r\n}\r\n\r\nexport class MembersService {\r\n  // Get all members with pagination and filters\r\n  async getMembers(\r\n    page = 1,\r\n    pageSize = 10,\r\n    filters: MembersFilters = {},\r\n  ): Promise<MembersApiResponse<Member[]>> {\r\n    try {\r\n      logger.info('Fetching members with filters', { filters });\r\n\r\n      let query = supabase.from('members').select('*', { count: 'exact' });\r\n\r\n      // Search filter\r\n      if (filters.searchTerm) {\r\n        const term = filters.searchTerm.toLowerCase();\r\n        query = query.or(\r\n          `name.ilike.%${term}%,email.ilike.%${term}%,phone.ilike.%${term}%,membership_number.ilike.%${term}%`,\r\n        );\r\n      }\r\n\r\n      // Membership status filter\r\n      if (filters.membershipStatus && filters.membershipStatus !== 'all') {\r\n        query = query.eq('membership_status', filters.membershipStatus);\r\n      }\r\n\r\n      // Membership type filter\r\n      if (filters.membershipType && filters.membershipType !== 'all') {\r\n        query = query.eq('membership_type', filters.membershipType);\r\n      }\r\n\r\n      // City filter\r\n      if (filters.city && filters.city !== 'all') {\r\n        query = query.eq('city', filters.city);\r\n      }\r\n\r\n      // Profession filter\r\n      if (filters.profession && filters.profession !== 'all') {\r\n        query = query.eq('profession', filters.profession);\r\n      }\r\n\r\n      // Date range filter\r\n      if (filters.dateFrom) {\r\n        query = query.gte('join_date', filters.dateFrom);\r\n      }\r\n      if (filters.dateTo) {\r\n        query = query.lte('join_date', filters.dateTo);\r\n      }\r\n\r\n      // Volunteer availability filter\r\n      if (filters.volunteerAvailable !== undefined) {\r\n        query = query.eq('volunteer_hours', filters.volunteerAvailable ? 0 : null);\r\n      }\r\n\r\n      // Fee paid filter\r\n      if (filters.feePaid !== undefined) {\r\n        query = query.eq('fee_paid', filters.feePaid);\r\n      }\r\n\r\n      // Pagination\r\n      const startIndex = (page - 1) * pageSize;\r\n      query = query.range(startIndex, startIndex + pageSize - 1);\r\n\r\n      // Order by join date (newest first)\r\n      query = query.order('join_date', { ascending: false });\r\n\r\n      const { data, error, count } = await query;\r\n\r\n      if (error) {\r\n        logger.error('Error fetching members', error);\r\n        return { error: error.message };\r\n      }\r\n\r\n      logger.info(`Successfully fetched ${data?.length || 0} members`);\r\n\r\n      return {\r\n        data: data || [],\r\n        count: count || 0,\r\n        totalPages: Math.ceil((count || 0) / pageSize),\r\n      };\r\n    } catch (error: any) {\r\n      logger.error('Unexpected error in getMembers', error);\r\n      return { error: error.message || 'Beklenmeyen hata olu┼ştu' };\r\n    }\r\n  }\r\n\r\n  // Get single member\r\n  async getMember(id: number): Promise<MembersApiResponse<Member>> {\r\n    try {\r\n      logger.info('­şöä Fetching single member with id:', id);\r\n\r\n      const { data, error } = await supabase.from('members').select('*').eq('id', id).single();\r\n\r\n      if (error) {\r\n        logger.error('ÔØî Error fetching single member:', error);\r\n        return { error: error.message };\r\n      }\r\n\r\n      logger.info('Ô£à Successfully fetched member:', data?.name);\r\n      return { data };\r\n    } catch (error: any) {\r\n      logger.error('ÔØî Unexpected error in getMember:', error);\r\n      return { error: error.message || '├£ye bulunamad─▒' };\r\n    }\r\n  }\r\n\r\n  // Get member statistics\r\n  async getMemberStats(): Promise<MembersApiResponse<MemberStats>> {\r\n    try {\r\n      logger.info('­şöä Fetching member statistics');\r\n\r\n      // Get all member data\r\n      const { data: membersData, error } = await supabase\r\n        .from('members')\r\n        .select(\r\n          'membership_status, membership_type, city, profession, join_date, birth_date, volunteer_hours, contribution_amount, fee_paid',\r\n        );\r\n\r\n      if (error) {\r\n        logger.error('ÔØî Error fetching member stats:', error);\r\n        return { error: error.message };\r\n      }\r\n\r\n      const members = membersData || [];\r\n\r\n      // Calculate statistics\r\n      const total = members.length;\r\n\r\n      // Status breakdown\r\n      const statusCounts = members.reduce<Record<string, number>>((acc, m) => {\r\n        acc[m.membership_status] = (acc[m.membership_status] || 0) + 1;\r\n        return acc;\r\n      }, {});\r\n\r\n      // Membership type breakdown\r\n      const membershipTypeCounts = members.reduce<Record<string, number>>((acc, m) => {\r\n        acc[m.membership_type] = (acc[m.membership_type] || 0) + 1;\r\n        return acc;\r\n      }, {});\r\n\r\n      // City breakdown\r\n      const cityCounts = members.reduce<Record<string, number>>((acc, m) => {\r\n        if (m.city) {\r\n          acc[m.city] = (acc[m.city] || 0) + 1;\r\n        }\r\n        return acc;\r\n      }, {});\r\n\r\n      // Profession breakdown\r\n      const professionCounts = members.reduce<Record<string, number>>((acc, m) => {\r\n        if (m.profession) {\r\n          acc[m.profession] = (acc[m.profession] || 0) + 1;\r\n        }\r\n        return acc;\r\n      }, {});\r\n\r\n      // Recent joins (last 30 days)\r\n      const thirtyDaysAgo = new Date();\r\n      thirtyDaysAgo.setDate(thirtyDaysAgo.getDate() - 30);\r\n      const recentJoins = members.filter((m) => new Date(m.join_date) >= thirtyDaysAgo).length;\r\n\r\n      // Average age\r\n      const membersWithAge = members.filter((m) => m.birth_date);\r\n      const averageAge =\r\n        membersWithAge.length > 0\r\n          ? membersWithAge.reduce((sum, m) => {\r\n              const age = new Date().getFullYear() - new Date(m.birth_date).getFullYear();\r\n              return sum + age;\r\n            }, 0) / membersWithAge.length\r\n          : 0;\r\n\r\n      // Total volunteer hours\r\n      const totalVolunteerHours = members.reduce((sum, m) => sum + (m.volunteer_hours || 0), 0);\r\n\r\n      // Total contributions\r\n      const totalContributions = members.reduce((sum, m) => sum + (m.contribution_amount || 0), 0);\r\n\r\n      // Fee paid percentage\r\n      const feePaidPercentage =\r\n        total > 0 ? (members.filter((m) => m.fee_paid).length / total) * 100 : 0;\r\n\r\n      const stats: MemberStats = {\r\n        total,\r\n        active: statusCounts.active ?? 0,\r\n        inactive: statusCounts.inactive ?? 0,\r\n        suspended: statusCounts.suspended ?? 0,\r\n        expired: statusCounts.expired ?? 0,\r\n        pending: statusCounts.pending ?? 0,\r\n        byMembershipType: membershipTypeCounts,\r\n        byCity: cityCounts,\r\n        byProfession: professionCounts,\r\n        recentJoins,\r\n        averageAge: Math.round(averageAge),\r\n        totalVolunteerHours,\r\n        totalContributions,\r\n        feePaidPercentage: Math.round(feePaidPercentage),\r\n      };\r\n\r\n      logger.info('Ô£à Successfully calculated member statistics:', {\r\n        total: stats.total,\r\n        active: stats.active,\r\n        averageAge: stats.averageAge,\r\n      });\r\n\r\n      return { data: stats };\r\n    } catch (error: any) {\r\n      logger.error('ÔØî Error calculating member statistics:', error);\r\n      return { error: error.message || '─░statistikler hesaplanamad─▒' };\r\n    }\r\n  }\r\n\r\n  // Get cities for filter dropdown\r\n  async getCities(): Promise<MembersApiResponse<string[]>> {\r\n    try {\r\n      const { data, error } = await supabase.from('members').select('city').not('city', 'is', null);\r\n\r\n      if (error) {\r\n        return { error: error.message };\r\n      }\r\n\r\n      const cities = [...new Set(data.map((item) => item.city))].filter(Boolean).sort((a, b) => a.localeCompare(b));\r\n      return { data: cities };\r\n    } catch (error: any) {\r\n      return { error: error.message || '┼Şehirler getirilemedi' };\r\n    }\r\n  }\r\n\r\n  // Get membership types for filter dropdown\r\n  async getMembershipTypes(): Promise<MembersApiResponse<string[]>> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('members')\r\n        .select('membership_type')\r\n        .not('membership_type', 'is', null);\r\n\r\n      if (error) {\r\n        return { error: error.message };\r\n      }\r\n\r\n      const membershipTypes = [...new Set(data.map((item) => item.membership_type))].sort((a, b) => a.localeCompare(b));\r\n      return { data: membershipTypes };\r\n    } catch (error: any) {\r\n      return { error: error.message || '├£yelik t├╝rleri getirilemedi' };\r\n    }\r\n  }\r\n\r\n  // Get professions for filter dropdown\r\n  async getProfessions(): Promise<MembersApiResponse<string[]>> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('members')\r\n        .select('profession')\r\n        .not('profession', 'is', null);\r\n\r\n      if (error) {\r\n        return { error: error.message };\r\n      }\r\n\r\n      const professions = [...new Set(data.map((item) => item.profession))].filter(Boolean).sort((a, b) => a.localeCompare(b));\r\n      return { data: professions };\r\n    } catch (error: any) {\r\n      return { error: error.message || 'Meslekler getirilemedi' };\r\n    }\r\n  }\r\n\r\n  // Create new member\r\n  async createMember(memberData: Partial<Member>): Promise<MembersApiResponse<Member>> {\r\n    try {\r\n      logger.info('­şöä Creating new member:', memberData);\r\n\r\n      // Generate membership number if not provided\r\n      const membershipNumber =\r\n        memberData.membership_number || (await this.generateMembershipNumber());\r\n\r\n      const { data: newMember, error } = await supabase\r\n        .from('members')\r\n        .insert([\r\n          {\r\n            name: memberData.name!,\r\n            email: memberData.email!,\r\n            phone: memberData.phone,\r\n            avatar_url: memberData.avatar_url,\r\n            address: memberData.address,\r\n            city: memberData.city,\r\n            district: memberData.district,\r\n            postal_code: memberData.postal_code,\r\n            country: memberData.country || 'T├╝rkiye',\r\n            birth_date: memberData.birth_date,\r\n            gender: memberData.gender,\r\n            marital_status: memberData.marital_status,\r\n            occupation: memberData.occupation,\r\n            employer: memberData.employer,\r\n            membership_type: memberData.membership_type || 'standard',\r\n            membership_number: membershipNumber,\r\n            join_date: memberData.join_date || new Date().toISOString().split('T')[0],\r\n            membership_status: memberData.membership_status || 'pending',\r\n            expiry_date: memberData.expiry_date,\r\n            annual_fee: memberData.annual_fee,\r\n            fee_paid: memberData.fee_paid || false,\r\n            payment_method: memberData.payment_method,\r\n            profession: memberData.profession,\r\n            specialization: memberData.specialization,\r\n            experience_years: memberData.experience_years,\r\n            education_level: memberData.education_level,\r\n            certifications: memberData.certifications,\r\n            languages: memberData.languages,\r\n            preferred_contact_method: memberData.preferred_contact_method,\r\n            newsletter_subscription: memberData.newsletter_subscription !== false,\r\n            event_notifications: memberData.event_notifications !== false,\r\n            marketing_consent: memberData.marketing_consent || false,\r\n            emergency_contact_name: memberData.emergency_contact_name,\r\n            emergency_contact_phone: memberData.emergency_contact_phone,\r\n            emergency_contact_relation: memberData.emergency_contact_relation,\r\n            committee_memberships: memberData.committee_memberships,\r\n            volunteer_interests: memberData.volunteer_interests,\r\n            leadership_positions: memberData.leadership_positions,\r\n            skills_and_expertise: memberData.skills_and_expertise,\r\n            event_attendance_count: memberData.event_attendance_count || 0,\r\n            volunteer_hours: memberData.volunteer_hours || 0,\r\n            contribution_amount: memberData.contribution_amount || 0,\r\n            notes: memberData.notes,\r\n            special_requirements: memberData.special_requirements,\r\n            dietary_restrictions: memberData.dietary_restrictions,\r\n            accessibility_needs: memberData.accessibility_needs,\r\n            source: memberData.source,\r\n            referral_code: memberData.referral_code,\r\n          },\r\n        ])\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        logger.error('ÔØî Error creating member:', error);\r\n        return { error: error.message };\r\n      }\r\n\r\n      logger.info('Ô£à Successfully created member:', newMember?.name);\r\n      return { data: newMember };\r\n    } catch (error: any) {\r\n      logger.error('ÔØî Unexpected error in createMember:', error);\r\n      return { error: error.message || '├£ye olu┼şturulamad─▒' };\r\n    }\r\n  }\r\n\r\n  // Update member\r\n  async updateMember(id: number, updates: Partial<Member>): Promise<MembersApiResponse<Member>> {\r\n    try {\r\n      logger.info('­şöä Updating member:', id, updates);\r\n\r\n      const { data, error } = await supabase\r\n        .from('members')\r\n        .update({\r\n          ...updates,\r\n          updated_at: new Date().toISOString(),\r\n        })\r\n        .eq('id', id)\r\n        .select()\r\n        .single();\r\n\r\n      if (error) {\r\n        logger.error('ÔØî Error updating member:', error);\r\n        return { error: error.message };\r\n      }\r\n\r\n      logger.info('Ô£à Successfully updated member:', data?.name);\r\n      return { data };\r\n    } catch (error: any) {\r\n      logger.error('ÔØî Unexpected error in updateMember:', error);\r\n      return { error: error.message || '├£ye g├╝ncellenemedi' };\r\n    }\r\n  }\r\n\r\n  // Delete member\r\n  async deleteMember(id: number): Promise<MembersApiResponse<boolean>> {\r\n    try {\r\n      logger.info('­şöä Deleting member:', id);\r\n\r\n      const { error } = await supabase.from('members').delete().eq('id', id);\r\n\r\n      if (error) {\r\n        logger.error('ÔØî Error deleting member:', error);\r\n        return { error: error.message };\r\n      }\r\n\r\n      logger.info('Ô£à Successfully deleted member:', id);\r\n      return { data: true };\r\n    } catch (error: any) {\r\n      logger.error('ÔØî Unexpected error in deleteMember:', error);\r\n      return { error: error.message || '├£ye silinemedi' };\r\n    }\r\n  }\r\n\r\n  // Generate unique membership number\r\n  private async generateMembershipNumber(): Promise<string> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('members')\r\n        .select('membership_number')\r\n        .order('membership_number', { ascending: false })\r\n        .limit(1);\r\n\r\n      if (error) {\r\n        logger.error('ÔØî Error generating membership number:', error);\r\n        return `UYE-${Date.now()}`;\r\n      }\r\n\r\n      if (data && data.length > 0) {\r\n        const lastNumber = data[0]?.membership_number;\r\n        const match = lastNumber.match(/UYE-(\\d+)/);\r\n        if (match) {\r\n          const nextNumber = parseInt(match[1]) + 1;\r\n          return `UYE-${nextNumber.toString().padStart(4, '0')}`;\r\n        }\r\n      }\r\n\r\n      return 'UYE-0001';\r\n    } catch (error) {\r\n      logger.error('ÔØî Error in generateMembershipNumber:', error);\r\n      return `UYE-${Date.now()}`;\r\n    }\r\n  }\r\n\r\n  // Bulk update membership status\r\n  async bulkUpdateStatus(ids: number[], status: string): Promise<MembersApiResponse<boolean>> {\r\n    try {\r\n      logger.info('­şöä Bulk updating member status:', ids, status);\r\n\r\n      const { error } = await supabase\r\n        .from('members')\r\n        .update({\r\n          membership_status: status,\r\n          updated_at: new Date().toISOString(),\r\n        })\r\n        .in('id', ids);\r\n\r\n      if (error) {\r\n        logger.error('ÔØî Error bulk updating member status:', error);\r\n        return { error: error.message };\r\n      }\r\n\r\n      logger.info('Ô£à Successfully bulk updated', ids.length, 'members');\r\n      return { data: true };\r\n    } catch (error: any) {\r\n      logger.error('ÔØî Unexpected error in bulkUpdateStatus:', error);\r\n      return { error: error.message || 'Toplu g├╝ncelleme ba┼şar─▒s─▒z' };\r\n    }\r\n  }\r\n\r\n  // Export members to CSV\r\n  async exportMembers(filters: MembersFilters = {}): Promise<MembersApiResponse<Member[]>> {\r\n    try {\r\n      logger.info('­şöä Exporting members with filters:', filters);\r\n\r\n      let query = supabase.from('members').select('*');\r\n\r\n      // Apply same filters as getMembers but without pagination\r\n      if (filters.searchTerm) {\r\n        const term = filters.searchTerm.toLowerCase();\r\n        query = query.or(\r\n          `name.ilike.%${term}%,email.ilike.%${term}%,phone.ilike.%${term}%,membership_number.ilike.%${term}%`,\r\n        );\r\n      }\r\n\r\n      if (filters.membershipStatus && filters.membershipStatus !== 'all') {\r\n        query = query.eq('membership_status', filters.membershipStatus);\r\n      }\r\n\r\n      if (filters.membershipType && filters.membershipType !== 'all') {\r\n        query = query.eq('membership_type', filters.membershipType);\r\n      }\r\n\r\n      if (filters.city && filters.city !== 'all') {\r\n        query = query.eq('city', filters.city);\r\n      }\r\n\r\n      if (filters.profession && filters.profession !== 'all') {\r\n        query = query.eq('profession', filters.profession);\r\n      }\r\n\r\n      if (filters.dateFrom) {\r\n        query = query.gte('join_date', filters.dateFrom);\r\n      }\r\n      if (filters.dateTo) {\r\n        query = query.lte('join_date', filters.dateTo);\r\n      }\r\n\r\n      query = query.order('join_date', { ascending: false });\r\n\r\n      const { data, error } = await query;\r\n\r\n      if (error) {\r\n        logger.error('ÔØî Error exporting members:', error);\r\n        return { error: error.message };\r\n      }\r\n\r\n      logger.info('Ô£à Successfully exported', data?.length || 0, 'members');\r\n      return { data: data || [] };\r\n    } catch (error: any) {\r\n      logger.error('ÔØî Unexpected error in exportMembers:', error);\r\n      return { error: error.message || 'D─▒┼şa aktarma ba┼şar─▒s─▒z' };\r\n    }\r\n  }\r\n\r\n  // Search members for autocomplete\r\n  async searchMembers(searchTerm: string, limit = 10): Promise<MembersApiResponse<Member[]>> {\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('members')\r\n        .select('id, name, email, membership_number, membership_status')\r\n        .or(\r\n          `name.ilike.%${searchTerm}%,email.ilike.%${searchTerm}%,membership_number.ilike.%${searchTerm}%`,\r\n        )\r\n        .limit(limit)\r\n        .order('name');\r\n\r\n      if (error) {\r\n        return { error: error.message };\r\n      }\r\n\r\n      return { data: (data || []) as Member[] };\r\n    } catch (error: any) {\r\n      return { error: error.message || 'Arama ba┼şar─▒s─▒z' };\r\n    }\r\n  }\r\n}\r\n\r\n// Singleton instance\r\nexport const membersService = new MembersService();\r\n\r\n// Default export\r\nexport default membersService;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\monitoringService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\nativeFeaturesService.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":82,"column":11,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":82,"endColumn":48},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":82,"column":34,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":82,"endColumn":36,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[1843,1845],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-non-null-assertion","severity":1,"message":"Forbidden non-null assertion.","line":126,"column":23,"nodeType":"TSNonNullExpression","messageId":"noNonNull","endLine":126,"endColumn":47},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":167,"column":11,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":167,"endColumn":33},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":200,"column":9,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":200,"endColumn":31},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":233,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":233,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5982,5985],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5982,5985],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":235,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":235,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[6069,6072],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[6069,6072],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":261,"column":11,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":261,"endColumn":30},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":1,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":261,"column":11,"nodeType":null,"messageId":"preferOptionalChain","endLine":261,"endColumn":63,"suggestions":[{"fix":{"range":[6801,6853],"text":"navigator.clipboard?.writeText"},"messageId":"optionalChainSuggest","desc":"Change to an optional chain."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":261,"column":34,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":261,"endColumn":63},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":290,"column":11,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":290,"endColumn":30},{"ruleId":"@typescript-eslint/prefer-optional-chain","severity":1,"message":"Prefer using an optional chain expression instead, as it's more concise and easier to read.","line":290,"column":11,"nodeType":null,"messageId":"preferOptionalChain","endLine":290,"endColumn":62,"suggestions":[{"fix":{"range":[7665,7716],"text":"navigator.clipboard?.readText"},"messageId":"optionalChainSuggest","desc":"Change to an optional chain."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":290,"column":34,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":290,"endColumn":62},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":313,"column":11,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":313,"endColumn":27},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":340,"column":44,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":340,"endColumn":47,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8935,8938],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8935,8938],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":347,"column":19,"nodeType":"MemberExpression","endLine":347,"endColumn":28},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":372,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":372,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9974,9977],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9974,9977],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":416,"column":43,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":416,"endColumn":46,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11183,11186],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11183,11186],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":418,"column":61,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":418,"endColumn":64,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[11293,11296],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[11293,11296],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":459,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":459,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12550,12553],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12550,12553],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":475,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":475,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12910,12913],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12910,12913],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":486,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":486,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13316,13319],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13316,13319],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":487,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":487,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13368,13371],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13368,13371],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":499,"column":11,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":499,"endColumn":35},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":501,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":501,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13728,13731],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13728,13731],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":502,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":502,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13786,13789],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13786,13789],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":503,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":503,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13847,13850],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13847,13850],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":504,"column":26,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":504,"endColumn":29,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[13901,13904],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[13901,13904],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":521,"column":11,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":521,"endColumn":34},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":523,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":523,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14350,14353],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14350,14353],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":524,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":524,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14407,14410],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14407,14410],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":525,"column":31,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":525,"endColumn":34,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14467,14470],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14467,14470],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":526,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":526,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14520,14523],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14520,14523],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":543,"column":34,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":543,"endColumn":36,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14864,14942],"text":"(document.fullscreenElement ??\r\n      (document as any).webkitFullscreenElement)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":544,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":544,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14914,14917],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14914,14917],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":544,"column":49,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":544,"endColumn":51,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[14943,14945],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":545,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":545,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[14966,14969],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[14966,14969],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":570,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":570,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15555,15558],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15555,15558],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":573,"column":45,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":573,"endColumn":48,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[15658,15661],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[15658,15661],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":592,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":592,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16149,16152],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16149,16152],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":595,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":595,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16215,16218],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16215,16218],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":595,"column":39,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":595,"endColumn":41,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16201,16275],"text":"((navigator as any).connection ??\r\n        (navigator as any).mozConnection)"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":596,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":596,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16257,16260],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16257,16260],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":596,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":596,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[16276,16278],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":597,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":597,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[16302,16305],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[16302,16305],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":632,"column":11,"nodeType":"MemberExpression","messageId":"alwaysTruthy","endLine":632,"endColumn":28}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":46,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Native Features Service\r\n * Provides access to device native features (Camera, GPS, Contacts, etc.)\r\n */\r\n\r\nimport { logger } from '../lib/logging/logger';\r\n\r\n/**\r\n * CameraOptions Interface\r\n * \r\n * @interface CameraOptions\r\n */\r\nexport interface CameraOptions {\r\n  facingMode?: 'user' | 'environment';\r\n  width?: number;\r\n  height?: number;\r\n  quality?: number;\r\n}\r\n\r\n/**\r\n * GeolocationOptions Interface\r\n * \r\n * @interface GeolocationOptions\r\n */\r\nexport interface GeolocationOptions {\r\n  enableHighAccuracy?: boolean;\r\n  timeout?: number;\r\n  maximumAge?: number;\r\n}\r\n\r\n/**\r\n * ContactInfo Interface\r\n * \r\n * @interface ContactInfo\r\n */\r\nexport interface ContactInfo {\r\n  name?: string;\r\n  phone?: string;\r\n  email?: string;\r\n}\r\n\r\n/**\r\n * DeviceCapabilities Interface\r\n * \r\n * @interface DeviceCapabilities\r\n */\r\nexport interface DeviceCapabilities {\r\n  camera: boolean;\r\n  geolocation: boolean;\r\n  contacts: boolean;\r\n  vibration: boolean;\r\n  notification: boolean;\r\n  fileSystem: boolean;\r\n  clipboard: boolean;\r\n  share: boolean;\r\n}\r\n\r\nclass NativeFeaturesService {\r\n  private stream: MediaStream | null = null;\r\n\r\n  /**\r\n   * Check device capabilities\r\n   */\r\n  getDeviceCapabilities(): DeviceCapabilities {\r\n    return {\r\n      camera: 'mediaDevices' in navigator && 'getUserMedia' in navigator.mediaDevices,\r\n      geolocation: 'geolocation' in navigator,\r\n      contacts: 'contacts' in navigator && 'ContactsManager' in window,\r\n      vibration: 'vibrate' in navigator,\r\n      notification: 'Notification' in window,\r\n      fileSystem: 'showOpenFilePicker' in window,\r\n      clipboard: 'clipboard' in navigator,\r\n      share: 'share' in navigator,\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Access device camera\r\n   */\r\n  async accessCamera(options: CameraOptions = {}): Promise<MediaStream> {\r\n    try {\r\n      if (!navigator.mediaDevices?.getUserMedia) {\r\n        throw new Error('Camera access not supported');\r\n      }\r\n\r\n      const constraints: MediaStreamConstraints = {\r\n        video: {\r\n          facingMode: options.facingMode ?? 'environment',\r\n          width: options.width ?? 1280,\r\n          height: options.height ?? 720,\r\n        },\r\n        audio: false,\r\n      };\r\n\r\n      this.stream = await navigator.mediaDevices.getUserMedia(constraints);\r\n      return this.stream;\r\n    } catch (error) {\r\n      logger.error('Camera access failed:', error);\r\n      throw new Error(\r\n        `Camera access failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Capture photo from camera\r\n   */\r\n  async capturePhoto(options: CameraOptions = {}): Promise<string> {\r\n    try {\r\n      const stream = await this.accessCamera(options);\r\n\r\n      // Create video element to capture frame\r\n      const video = document.createElement('video');\r\n      video.srcObject = stream;\r\n      video.autoplay = true;\r\n\r\n      // Wait for video to be ready\r\n      await new Promise<void>((resolve) => {\r\n        video.onloadedmetadata = () => {\r\n          resolve();\r\n        };\r\n      });\r\n\r\n      // Create canvas to capture frame\r\n      const canvas = document.createElement('canvas');\r\n      const context = canvas.getContext('2d')!;\r\n\r\n      canvas.width = video.videoWidth;\r\n      canvas.height = video.videoHeight;\r\n\r\n      // Draw current frame to canvas\r\n      context.drawImage(video, 0, 0, canvas.width, canvas.height);\r\n\r\n      // Convert to base64\r\n      const dataURL = canvas.toDataURL('image/jpeg', options.quality ?? 0.8);\r\n\r\n      // Clean up\r\n      this.stopCamera();\r\n\r\n      return dataURL;\r\n    } catch (error) {\r\n      this.stopCamera();\r\n      logger.error('Photo capture failed:', error);\r\n      throw new Error(\r\n        `Photo capture failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Stop camera stream\r\n   */\r\n  stopCamera(): void {\r\n    if (this.stream) {\r\n      this.stream.getTracks().forEach((track) => {\r\n        track.stop();\r\n      });\r\n      this.stream = null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get current location\r\n   */\r\n  async getCurrentLocation(options: GeolocationOptions = {}): Promise<GeolocationPosition> {\r\n    return new Promise((resolve, reject) => {\r\n      if (!navigator.geolocation) {\r\n        reject(new Error('Geolocation not supported'));\r\n        return;\r\n      }\r\n\r\n      const defaultOptions: GeolocationOptions = {\r\n        enableHighAccuracy: true,\r\n        timeout: 10000,\r\n        maximumAge: 60000,\r\n        ...options,\r\n      };\r\n\r\n      navigator.geolocation.getCurrentPosition(\r\n        (position) => {\r\n          resolve(position);\r\n        },\r\n        (error) => {\r\n          logger.error('Geolocation error:', error);\r\n          reject(new Error(`Geolocation failed: ${error.message}`));\r\n        },\r\n        defaultOptions,\r\n      );\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Watch location changes\r\n   */\r\n  watchLocation(\r\n    callback: (position: GeolocationPosition) => void,\r\n    errorCallback?: (error: GeolocationPositionError) => void,\r\n    options: GeolocationOptions = {},\r\n  ): number | null {\r\n    if (!navigator.geolocation) {\r\n      logger.error('Geolocation not supported');\r\n      return null;\r\n    }\r\n\r\n    const defaultOptions: GeolocationOptions = {\r\n      enableHighAccuracy: true,\r\n      timeout: 10000,\r\n      maximumAge: 60000,\r\n      ...options,\r\n    };\r\n\r\n    return navigator.geolocation.watchPosition(callback, errorCallback, defaultOptions);\r\n  }\r\n\r\n  /**\r\n   * Stop watching location\r\n   */\r\n  stopWatchingLocation(watchId: number): void {\r\n    navigator.geolocation.clearWatch(watchId);\r\n  }\r\n\r\n  /**\r\n   * Access contacts (experimental - limited browser support)\r\n   */\r\n  async accessContacts(): Promise<ContactInfo[]> {\r\n    try {\r\n      // Check if Contacts API is available\r\n      if (!('contacts' in navigator) || !('ContactsManager' in window)) {\r\n        throw new Error('Contacts API not supported');\r\n      }\r\n\r\n      // Request contacts access\r\n      const contacts = await (navigator as any).contacts.select(['name', 'email', 'tel']);\r\n\r\n      return contacts.map((contact: any) => ({\r\n        name: contact.name?.[0] ?? '',\r\n        phone: contact.tel?.[0] ?? '',\r\n        email: contact.email?.[0] ?? '',\r\n      }));\r\n    } catch (error) {\r\n      logger.error('Contacts access failed:', error);\r\n      throw new Error(\r\n        `Contacts access failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Trigger device vibration (public interface)\r\n   */\r\n  vibrate(pattern: number | number[]): boolean {\r\n    const patternArray = Array.isArray(pattern) ? pattern : [pattern];\r\n    return this.vibrateInternal(patternArray);\r\n  }\r\n\r\n  /**\r\n   * Copy text to clipboard\r\n   */\r\n  async copyToClipboard(text: string): Promise<boolean> {\r\n    try {\r\n      if (navigator.clipboard && navigator.clipboard.writeText) {\r\n        await navigator.clipboard.writeText(text);\r\n        return true;\r\n      } \r\n        // Fallback for older browsers\r\n        const textArea = document.createElement('textarea');\r\n        textArea.value = text;\r\n        textArea.style.position = 'fixed';\r\n        textArea.style.left = '-999999px';\r\n        textArea.style.top = '-999999px';\r\n        document.body.appendChild(textArea);\r\n        textArea.focus();\r\n        textArea.select();\r\n\r\n        const result = document.execCommand('copy');\r\n        document.body.removeChild(textArea);\r\n        return result;\r\n      \r\n    } catch (error) {\r\n      logger.error('Clipboard access failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Read from clipboard\r\n   */\r\n  async readFromClipboard(): Promise<string> {\r\n    try {\r\n      if (navigator.clipboard && navigator.clipboard.readText) {\r\n        return await navigator.clipboard.readText();\r\n      } \r\n        throw new Error('Clipboard read not supported');\r\n      \r\n    } catch (error) {\r\n      logger.error('Clipboard read failed:', error);\r\n      throw new Error(\r\n        `Clipboard read failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Share content using Web Share API\r\n   */\r\n  async shareContent(data: {\r\n    title?: string;\r\n    text?: string;\r\n    url?: string;\r\n    files?: File[];\r\n  }): Promise<boolean> {\r\n    try {\r\n      if (!navigator.share) {\r\n        throw new Error('Web Share API not supported');\r\n      }\r\n\r\n      await navigator.share(data);\r\n      return true;\r\n    } catch (error) {\r\n      logger.error('Share failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Open file picker\r\n   */\r\n  async openFilePicker(\r\n    options: {\r\n      multiple?: boolean;\r\n      accept?: string[];\r\n      excludeAcceptAllOption?: boolean;\r\n    } = {},\r\n  ): Promise<FileSystemFileHandle[]> {\r\n    try {\r\n      if (!('showOpenFilePicker' in window)) {\r\n        throw new Error('File System Access API not supported');\r\n      }\r\n\r\n      const fileHandles = await (window as any).showOpenFilePicker({\r\n        multiple: options.multiple ?? false,\r\n        types: options.accept\r\n          ? [\r\n              {\r\n                description: 'Allowed files',\r\n                accept: options.accept.reduce<Record<string, string[]>>((acc, type) => {\r\n                  acc[type] = [];\r\n                  return acc;\r\n                }, {}),\r\n              },\r\n            ]\r\n          : undefined,\r\n        excludeAcceptAllOption: options.excludeAcceptAllOption ?? false,\r\n      });\r\n\r\n      return fileHandles;\r\n    } catch (error) {\r\n      logger.error('File picker failed:', error);\r\n      throw new Error(\r\n        `File picker failed: ${error instanceof Error ? error.message : 'Unknown error'}`,\r\n      );\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Save file to device\r\n   */\r\n  async saveFile(content: string, filename: string, mimeType = 'text/plain'): Promise<boolean> {\r\n    try {\r\n      if ('showSaveFilePicker' in window) {\r\n        // Use File System Access API if available\r\n        const fileHandle = await (window as any).showSaveFilePicker({\r\n          suggestedName: filename,\r\n          types: [\r\n            {\r\n              description: 'File',\r\n              accept: {\r\n                [mimeType]: [`.${filename.split('.').pop()}`],\r\n              },\r\n            },\r\n          ],\r\n        });\r\n\r\n        const writable = await fileHandle.createWritable();\r\n        await writable.write(content);\r\n        await writable.close();\r\n\r\n        return true;\r\n      } \r\n        // Fallback to download\r\n        const blob = new Blob([content], { type: mimeType });\r\n        const url = URL.createObjectURL(blob);\r\n        const a = document.createElement('a');\r\n        a.href = url;\r\n        a.download = filename;\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        document.body.removeChild(a);\r\n        URL.revokeObjectURL(url);\r\n\r\n        return true;\r\n      \r\n    } catch (error) {\r\n      logger.error('File save failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Request device orientation permission (iOS)\r\n   */\r\n  async requestOrientationPermission(): Promise<boolean> {\r\n    try {\r\n      if (\r\n        'DeviceOrientationEvent' in window &&\r\n        typeof (DeviceOrientationEvent as any).requestPermission === 'function'\r\n      ) {\r\n        const permission = await (DeviceOrientationEvent as any).requestPermission();\r\n        return permission === 'granted';\r\n      }\r\n      return true; // Permission not required on this device\r\n    } catch (error) {\r\n      logger.error('Orientation permission request failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Get device orientation\r\n   */\r\n  getDeviceOrientation(): Promise<DeviceOrientationEvent> {\r\n    return new Promise((resolve, reject) => {\r\n      if (!('DeviceOrientationEvent' in window)) {\r\n        reject(new Error('Device orientation not supported'));\r\n        return;\r\n      }\r\n\r\n      const handleOrientation = (event: DeviceOrientationEvent) => {\r\n        window.removeEventListener('deviceorientation', handleOrientation);\r\n        resolve(event);\r\n      };\r\n\r\n      window.addEventListener('deviceorientation', handleOrientation);\r\n\r\n      // Timeout after 5 seconds\r\n      setTimeout(() => {\r\n        window.removeEventListener('deviceorientation', handleOrientation);\r\n        reject(new Error('Device orientation timeout'));\r\n      }, 5000);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Check if running in standalone mode (installed PWA)\r\n   */\r\n  isStandalone(): boolean {\r\n    return (\r\n      window.matchMedia('(display-mode: standalone)').matches ||\r\n      (window.navigator as any).standalone ?? document.referrer.includes('android-app://')\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Get device info\r\n   */\r\n  getDeviceInfo(): {\r\n    userAgent: string;\r\n    platform: string;\r\n    language: string;\r\n    cookieEnabled: boolean;\r\n    onLine: boolean;\r\n    screenResolution: string;\r\n    windowSize: string;\r\n    deviceMemory?: number;\r\n    connection?: any;\r\n    standalone: boolean;\r\n  } {\r\n    return {\r\n      userAgent: navigator.userAgent,\r\n      platform: navigator.platform,\r\n      language: navigator.language,\r\n      cookieEnabled: navigator.cookieEnabled,\r\n      onLine: navigator.onLine,\r\n      screenResolution: `${screen.width}x${screen.height}`,\r\n      windowSize: `${window.innerWidth}x${window.innerHeight}`,\r\n      deviceMemory: (navigator as any).deviceMemory,\r\n      connection: (navigator as any).connection,\r\n      standalone: this.isStandalone(),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Request fullscreen\r\n   */\r\n  async requestFullscreen(element?: Element): Promise<boolean> {\r\n    try {\r\n      const target = element ?? document.documentElement;\r\n\r\n      if (target.requestFullscreen) {\r\n        await target.requestFullscreen();\r\n      } else if ((target as any).webkitRequestFullscreen) {\r\n        await (target as any).webkitRequestFullscreen();\r\n      } else if ((target as any).msRequestFullscreen) {\r\n        await (target as any).msRequestFullscreen();\r\n      } else {\r\n        throw new Error('Fullscreen not supported');\r\n      }\r\n\r\n      return true;\r\n    } catch (error) {\r\n      logger.error('Fullscreen request failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Exit fullscreen\r\n   */\r\n  async exitFullscreen(): Promise<boolean> {\r\n    try {\r\n      if (document.exitFullscreen) {\r\n        await document.exitFullscreen();\r\n      } else if ((document as any).webkitExitFullscreen) {\r\n        await (document as any).webkitExitFullscreen();\r\n      } else if ((document as any).msExitFullscreen) {\r\n        await (document as any).msExitFullscreen();\r\n      } else {\r\n        throw new Error('Exit fullscreen not supported');\r\n      }\r\n\r\n      return true;\r\n    } catch (error) {\r\n      logger.error('Exit fullscreen failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Check if in fullscreen mode\r\n   */\r\n  isFullscreen(): boolean {\r\n    return !!(\r\n      document.fullscreenElement ||\r\n      (document as any).webkitFullscreenElement ||\r\n      (document as any).msFullscreenElement\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Wake lock (keep screen on)\r\n   */\r\n  async requestWakeLock(): Promise<WakeLockSentinel | null> {\r\n    try {\r\n      if ('wakeLock' in navigator) {\r\n        const wakeLock = await navigator.wakeLock.request('screen');\r\n        return wakeLock;\r\n      } \r\n        logger.warn('Wake Lock API not supported');\r\n        return null;\r\n      \r\n    } catch (error) {\r\n      logger.error('Wake lock request failed:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Battery status (experimental)\r\n   */\r\n  async getBatteryStatus(): Promise<any> {\r\n    try {\r\n      if ('getBattery' in navigator) {\r\n        const battery = await (navigator as any).getBattery();\r\n        return {\r\n          charging: battery.charging,\r\n          chargingTime: battery.chargingTime,\r\n          dischargingTime: battery.dischargingTime,\r\n          level: Math.round(battery.level * 100),\r\n        };\r\n      } \r\n        throw new Error('Battery Status API not supported');\r\n      \r\n    } catch (error) {\r\n      logger.error('Battery status failed:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Network information\r\n   */\r\n  getNetworkInfo(): any {\r\n    try {\r\n      const connection =\r\n        (navigator as any).connection ||\r\n        (navigator as any).mozConnection ||\r\n        (navigator as any).webkitConnection;\r\n\r\n      if (connection) {\r\n        return {\r\n          effectiveType: connection.effectiveType,\r\n          downlink: connection.downlink,\r\n          rtt: connection.rtt,\r\n          saveData: connection.saveData,\r\n        };\r\n      }\r\n      return null;\r\n    } catch (error) {\r\n      logger.error('Network info failed:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Haptic feedback patterns\r\n   */\r\n  hapticFeedback = {\r\n    light: () => this.vibrate([10]),\r\n    medium: () => this.vibrate([50]),\r\n    heavy: () => this.vibrate([100]),\r\n    success: () => this.vibrate([50, 30, 50]),\r\n    error: () => this.vibrate([100, 50, 100, 50, 100]),\r\n    warning: () => this.vibrate([80, 40, 80]),\r\n    notification: () => this.vibrate([200, 100, 200]),\r\n  };\r\n\r\n  /**\r\n   * Internal vibration implementation\r\n   */\r\n  private vibrateInternal(pattern: number[]): boolean {\r\n    try {\r\n      if (navigator.vibrate) {\r\n        navigator.vibrate(pattern);\r\n        return true;\r\n      }\r\n      return false;\r\n    } catch (error) {\r\n      logger.error('Vibration failed:', error);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const nativeFeaturesService = new NativeFeaturesService();\r\nexport default nativeFeaturesService;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\notificationService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\ocrService.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":35,"column":9,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":35,"endColumn":29},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":46,"column":11,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":46,"endColumn":48},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":46,"column":34,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":46,"endColumn":36,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[1122,1124],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":64,"column":42,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":64,"endColumn":44,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1612,1614],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":65,"column":41,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":65,"endColumn":43,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1671,1673],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":66,"column":43,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":66,"endColumn":45,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1725,1727],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview OCR Service - Kimlik ve pasaport okuma servisi\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { logger } from '../lib/logging/logger';\r\n\r\nexport interface OCRResult {\r\n  fullName?: string;\r\n  identityNumber?: string;\r\n  nationality?: string;\r\n  country?: string;\r\n  birthDate?: string;\r\n  gender?: 'male' | 'female' | 'other';\r\n  documentType?: 'identity' | 'passport';\r\n  confidence?: number;\r\n  rawText?: string;\r\n}\r\n\r\nexport interface CameraOptions {\r\n  facingMode?: 'user' | 'environment';\r\n  width?: number;\r\n  height?: number;\r\n}\r\n\r\nclass OCRService {\r\n  private static instance: OCRService;\r\n  private mediaStream: MediaStream | null = null;\r\n  private videoElement: HTMLVideoElement | null = null;\r\n  private canvas: HTMLCanvasElement | null = null;\r\n\r\n  static getInstance(): OCRService {\r\n    if (!OCRService.instance) {\r\n      OCRService.instance = new OCRService();\r\n    }\r\n    return OCRService.instance;\r\n  }\r\n\r\n  /**\r\n   * Kamera eri┼şimini kontrol et\r\n   */\r\n  async checkCameraSupport(): Promise<boolean> {\r\n    try {\r\n      if (!navigator.mediaDevices?.getUserMedia) {\r\n        logger.warn('Kamera API desteklenmiyor');\r\n        return false;\r\n      }\r\n      return true;\r\n    } catch (error) {\r\n      logger.error('Kamera deste─şi kontrol├╝ ba┼şar─▒s─▒z:', error);\r\n      return false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Kamera ak─▒┼ş─▒n─▒ ba┼şlat\r\n   */\r\n  async startCamera(options: CameraOptions = {}): Promise<HTMLVideoElement> {\r\n    try {\r\n      const constraints: MediaStreamConstraints = {\r\n        video: {\r\n          facingMode: options.facingMode || 'environment',\r\n          width: { ideal: options.width || 1280 },\r\n          height: { ideal: options.height || 720 },\r\n        },\r\n        audio: false,\r\n      };\r\n\r\n      this.mediaStream = await navigator.mediaDevices.getUserMedia(constraints);\r\n      \r\n      this.videoElement = document.createElement('video');\r\n      this.videoElement.srcObject = this.mediaStream;\r\n      this.videoElement.autoplay = true;\r\n      this.videoElement.playsInline = true;\r\n      this.videoElement.style.width = '100%';\r\n      this.videoElement.style.height = 'auto';\r\n\r\n      this.canvas = document.createElement('canvas');\r\n      this.canvas.style.display = 'none';\r\n\r\n      logger.info('Kamera ba┼şar─▒yla ba┼şlat─▒ld─▒');\r\n      return this.videoElement;\r\n    } catch (error) {\r\n      logger.error('Kamera ba┼şlatma hatas─▒:', error);\r\n      throw new Error('Kamera eri┼şimi sa─şlanamad─▒. L├╝tfen kamera izinlerini kontrol edin.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Kamera ak─▒┼ş─▒n─▒ durdur\r\n   */\r\n  stopCamera(): void {\r\n    try {\r\n      if (this.mediaStream) {\r\n        this.mediaStream.getTracks().forEach(track => { track.stop(); });\r\n        this.mediaStream = null;\r\n      }\r\n      \r\n      if (this.videoElement) {\r\n        this.videoElement.srcObject = null;\r\n        this.videoElement = null;\r\n      }\r\n\r\n      if (this.canvas) {\r\n        this.canvas = null;\r\n      }\r\n\r\n      logger.info('Kamera durduruldu');\r\n    } catch (error) {\r\n      logger.error('Kamera durdurma hatas─▒:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Video'dan frame yakala\r\n   */\r\n  private captureFrame(): string | null {\r\n    if (!this.videoElement || !this.canvas) {\r\n      return null;\r\n    }\r\n\r\n    try {\r\n      const context = this.canvas.getContext('2d');\r\n      if (!context) return null;\r\n\r\n      this.canvas.width = this.videoElement.videoWidth;\r\n      this.canvas.height = this.videoElement.videoHeight;\r\n      \r\n      context.drawImage(this.videoElement, 0, 0);\r\n      return this.canvas.toDataURL('image/jpeg', 0.8);\r\n    } catch (error) {\r\n      logger.error('Frame yakalama hatas─▒:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * OCR i┼şlemi - Tesseract.js kullanarak\r\n   */\r\n  async performOCR(imageData: string): Promise<OCRResult> {\r\n    try {\r\n      // Tesseract.js'i dinamik olarak y├╝kle\r\n      const { createWorker } = await import('tesseract.js');\r\n      \r\n      const worker = await createWorker('tur+eng', 1, {\r\n        logger: (m) => {\r\n          if (m.status === 'recognizing text') {\r\n            logger.debug(`OCR Progress: ${Math.round(m.progress * 100)}%`);\r\n          }\r\n        }\r\n      });\r\n\r\n      const { data: { text, confidence } } = await worker.recognize(imageData);\r\n      await worker.terminate();\r\n\r\n      logger.info('OCR i┼şlemi tamamland─▒', { confidence });\r\n\r\n      // Metni parse et\r\n      const result = this.parseDocumentText(text);\r\n      result.confidence = confidence;\r\n      result.rawText = text;\r\n\r\n      return result;\r\n    } catch (error) {\r\n      logger.error('OCR i┼şlemi ba┼şar─▒s─▒z:', error);\r\n      throw new Error('Belge okuma i┼şlemi ba┼şar─▒s─▒z oldu. L├╝tfen belgeyi daha net bir ┼şekilde g├Âsterin.');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Kimlik/pasaport metnini parse et\r\n   */\r\n  private parseDocumentText(text: string): OCRResult {\r\n    const result: OCRResult = {};\r\n    const cleanText = text.replace(/\\s+/g, ' ').trim();\r\n\r\n    // T├╝rk├ğe kimlik kart─▒ pattern'leri\r\n    const identityPatterns = {\r\n      identityNumber: /(?:TC|T\\.C\\.|TUR|TURKEY)[\\s:]*(\\d{11})/i,\r\n      fullName: /(?:ADI|AD|NAME)[\\s:]*([A-Z├ç─ŞI─░├û┼Ş├£\\s]+)/i,\r\n      nationality: /(?:UYRUK|NATIONALITY)[\\s:]*([A-Z├ç─ŞI─░├û┼Ş├£\\s]+)/i,\r\n      birthDate: /(?:DO─ŞUM|DOGUM|BIRTH)[\\s:]*(\\d{1,2}[./]\\d{1,2}[./]\\d{4})/i,\r\n      gender: /(?:C─░NS─░YET|CINSIYET|GENDER)[\\s:]*([A-Z├ç─ŞI─░├û┼Ş├£\\s]+)/i,\r\n    };\r\n\r\n    // Pasaport pattern'leri\r\n    const passportPatterns = {\r\n      identityNumber: /(?:PASSPORT|PASAPORT)[\\s:]*([A-Z0-9]{6,12})/i,\r\n      fullName: /(?:SURNAME|SURNAMES|SOYADI)[\\s:]*([A-Z├ç─ŞI─░├û┼Ş├£\\s,]+)/i,\r\n      nationality: /(?:NATIONALITY|UYRUK)[\\s:]*([A-Z├ç─ŞI─░├û┼Ş├£\\s]+)/i,\r\n      birthDate: /(?:DATE OF BIRTH|DO─ŞUM TAR─░H─░)[\\s:]*(\\d{1,2}[./]\\d{1,2}[./]\\d{4})/i,\r\n      gender: /(?:SEX|C─░NS─░YET)[\\s:]*([A-Z├ç─ŞI─░├û┼Ş├£\\s]+)/i,\r\n    };\r\n\r\n    // ├ûnce kimlik kart─▒ pattern'lerini dene\r\n    let patterns = identityPatterns;\r\n    result.documentType = 'identity';\r\n\r\n    // Kimlik numaras─▒ bulunamazsa pasaport pattern'lerini dene\r\n    if (!identityPatterns.identityNumber.test(cleanText)) {\r\n      patterns = passportPatterns;\r\n      result.documentType = 'passport';\r\n    }\r\n\r\n    // Pattern'leri uygula\r\n    Object.entries(patterns).forEach(([key, pattern]) => {\r\n      const match = cleanText.match(pattern);\r\n      if (match) {\r\n        const value = match[1].trim();\r\n        \r\n        switch (key) {\r\n          case 'identityNumber':\r\n            result.identityNumber = value;\r\n            break;\r\n          case 'fullName':\r\n            result.fullName = this.cleanName(value);\r\n            break;\r\n          case 'nationality':\r\n            result.nationality = this.cleanNationality(value);\r\n            break;\r\n          case 'birthDate':\r\n            result.birthDate = this.cleanDate(value);\r\n            break;\r\n          case 'gender':\r\n            result.gender = this.parseGender(value);\r\n            break;\r\n        }\r\n      }\r\n    });\r\n\r\n    // ├£lke kodu belirle\r\n    if (result.nationality) {\r\n      result.country = this.getCountryCode(result.nationality);\r\n    }\r\n\r\n    return result;\r\n  }\r\n\r\n  /**\r\n   * ─░smi temizle\r\n   */\r\n  private cleanName(name: string): string {\r\n    return name\r\n      .replace(/[^A-Z├ç─ŞI─░├û┼Ş├£\\s]/gi, '')\r\n      .replace(/\\s+/g, ' ')\r\n      .trim()\r\n      .toLowerCase()\r\n      .replace(/\\b\\w/g, l => l.toUpperCase());\r\n  }\r\n\r\n  /**\r\n   * Uyru─şu temizle\r\n   */\r\n  private cleanNationality(nationality: string): string {\r\n    return nationality\r\n      .replace(/[^A-Z├ç─ŞI─░├û┼Ş├£\\s]/gi, '')\r\n      .replace(/\\s+/g, ' ')\r\n      .trim()\r\n      .toLowerCase()\r\n      .replace(/\\b\\w/g, l => l.toUpperCase());\r\n  }\r\n\r\n  /**\r\n   * Tarihi temizle\r\n   */\r\n  private cleanDate(date: string): string {\r\n    return date.replace(/[^\\d./]/g, '');\r\n  }\r\n\r\n  /**\r\n   * Cinsiyeti parse et\r\n   */\r\n  private parseGender(gender: string): 'male' | 'female' | 'other' {\r\n    const cleanGender = gender.toLowerCase().trim();\r\n    \r\n    if (cleanGender.includes('erkek') || cleanGender.includes('male') || cleanGender.includes('m')) {\r\n      return 'male';\r\n    } else if (cleanGender.includes('kad─▒n') || cleanGender.includes('female') || cleanGender.includes('f')) {\r\n      return 'female';\r\n    }\r\n    \r\n    return 'other';\r\n  }\r\n\r\n  /**\r\n   * ├£lke kodu belirle\r\n   */\r\n  private getCountryCode(nationality: string): string {\r\n    const countryMap: Record<string, string> = {\r\n      't├╝rk': 'TR',\r\n      'turk': 'TR',\r\n      'turkey': 'TR',\r\n      't├╝rkiye': 'TR',\r\n      'syrian': 'SY',\r\n      'suriyeli': 'SY',\r\n      'afghan': 'AF',\r\n      'afgan': 'AF',\r\n      'iraqi': 'IQ',\r\n      'irakl─▒': 'IQ',\r\n      'iranian': 'IR',\r\n      'iranl─▒': 'IR',\r\n    };\r\n\r\n    const lowerNationality = nationality.toLowerCase();\r\n    for (const [key, code] of Object.entries(countryMap)) {\r\n      if (lowerNationality.includes(key)) {\r\n        return code;\r\n      }\r\n    }\r\n\r\n    return 'TR'; // Varsay─▒lan\r\n  }\r\n\r\n  /**\r\n   * Kamera ile belge tara\r\n   */\r\n  async scanDocument(): Promise<OCRResult> {\r\n    try {\r\n      const imageData = this.captureFrame();\r\n      if (!imageData) {\r\n        throw new Error('G├Âr├╝nt├╝ yakalanamad─▒');\r\n      }\r\n\r\n      return await this.performOCR(imageData);\r\n    } catch (error) {\r\n      logger.error('Belge tarama hatas─▒:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport const ocrService = OCRService.getInstance();\r\nexport default ocrService;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\performanceMonitoringService.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\pushNotificationService.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":50,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":50,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1170,1172],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":51,"column":28,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":51,"endColumn":30,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[1206,1208],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_userId' is defined but never used.","line":56,"column":32,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":39},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_payload' is defined but never used.","line":56,"column":49,"nodeType":null,"messageId":"unusedVar","endLine":56,"endColumn":57},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_payload' is defined but never used.","line":60,"column":31,"nodeType":null,"messageId":"unusedVar","endLine":60,"endColumn":39}],"suppressedMessages":[],"errorCount":3,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview pushNotificationService Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\n// Simple in-browser push notification service stub\r\n\r\n/**\r\n * NotificationPayload Interface\r\n * \r\n * @interface NotificationPayload\r\n */\r\nexport interface NotificationPayload {\r\n  title: string;\r\n  body?: string;\r\n  icon?: string;\r\n  url?: string;\r\n}\r\n\r\nclass PushNotificationService {\r\n  private subscribed = false;\r\n\r\n  async initialize(): Promise<boolean> {\r\n    return true;\r\n  }\r\n\r\n  isSubscribed(): boolean {\r\n    return this.subscribed;\r\n    }\r\n\r\n  getPermissionStatus(): NotificationPermission {\r\n    return typeof Notification !== 'undefined' ? Notification.permission : 'default';\r\n  }\r\n\r\n  async subscribe(): Promise<boolean> {\r\n    this.subscribed = true;\r\n    return true;\r\n  }\r\n\r\n  async unsubscribe(): Promise<boolean> {\r\n    this.subscribed = false;\r\n    return true;\r\n  }\r\n\r\n  async showNotification(payload: NotificationPayload): Promise<void> {\r\n    if (typeof Notification !== 'undefined' && Notification.permission === 'granted') {\r\n      new Notification(payload.title, { \r\n        body: payload.body || '', \r\n        icon: payload.icon || '' \r\n      });\r\n    }\r\n  }\r\n\r\n  async sendNotificationToUser(_userId: string, _payload: NotificationPayload): Promise<boolean> {\r\n    return true;\r\n  }\r\n\r\n  async broadcastNotification(_payload: NotificationPayload): Promise<boolean> {\r\n    return true;\r\n  }\r\n}\r\n\r\nexport const pushNotificationService = new PushNotificationService();\r\nexport default pushNotificationService;\r\n\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\queryOptimizationService.ts","messages":[{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":131,"column":62,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":131,"endColumn":64,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3576,3578],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":281,"column":48,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":281,"endColumn":50,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[7656,7658],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview queryOptimizationService Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\n// Query Optimization Service - Advanced Database Query Management\r\n\r\nimport { supabase } from '../lib/supabase';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\n// Types for query optimization\r\ninterface QueryMetrics {\r\n  queryId: string;\r\n  sql: string;\r\n  executionTime: number;\r\n  timestamp: number;\r\n  parameters?: unknown[];\r\n  cacheHit?: boolean;\r\n}\r\n\r\ninterface QueryAnalysis {\r\n  queryId: string;\r\n  sql: string;\r\n  averageExecutionTime: number;\r\n  executionCount: number;\r\n  lastExecuted: number;\r\n  suggestions: string[];\r\n  indexes: string[];\r\n}\r\n\r\ninterface PreparedStatement {\r\n  name: string;\r\n  sql: string;\r\n  parameters: string[];\r\n  usageCount: number;\r\n  averageExecutionTime: number;\r\n}\r\n\r\ninterface QueryOptimizationConfig {\r\n  cacheEnabled: boolean;\r\n  cacheTTL: number;\r\n  maxQueryHistory: number;\r\n  enablePreparedStatements: boolean;\r\n  enableQueryAnalysis: boolean;\r\n}\r\n\r\n/**\r\n * QueryOptimizationService Service\r\n * \r\n * Service class for handling queryoptimizationservice operations\r\n * \r\n * @class QueryOptimizationService\r\n */\r\nexport class QueryOptimizationService {\r\n  private readonly config: QueryOptimizationConfig;\r\n  private readonly queryHistory: QueryMetrics[] = [];\r\n  private readonly queryAnalysis = new Map<string, QueryAnalysis>();\r\n  private readonly preparedStatements = new Map<string, PreparedStatement>();\r\n\r\n  constructor(config: Partial<QueryOptimizationConfig> = {}) {\r\n    this.config = {\r\n      cacheEnabled: true,\r\n      cacheTTL: 5 * 60 * 1000, // 5 minutes\r\n      maxQueryHistory: 1000,\r\n      enablePreparedStatements: true,\r\n      enableQueryAnalysis: true,\r\n      ...config,\r\n    };\r\n\r\n    this.initializePreparedStatements();\r\n  }\r\n\r\n  /**\r\n   * Initialize common prepared statements\r\n   */\r\n  private initializePreparedStatements(): void {\r\n    if (!this.config.enablePreparedStatements) return;\r\n\r\n    // Common queries that can benefit from prepared statements\r\n    const commonQueries = [\r\n      {\r\n        name: 'get_beneficiaries_by_category',\r\n        sql: 'SELECT * FROM beneficiaries WHERE category = $1',\r\n        parameters: ['category'],\r\n      },\r\n      {\r\n        name: 'get_donations_by_date_range',\r\n        sql: 'SELECT * FROM donations WHERE created_at BETWEEN $1 AND $2',\r\n        parameters: ['start_date', 'end_date'],\r\n      },\r\n      {\r\n        name: 'get_members_by_status',\r\n        sql: 'SELECT * FROM members WHERE status = $1',\r\n        parameters: ['status'],\r\n      },\r\n    ];\r\n\r\n    commonQueries.forEach((query) => {\r\n      this.preparedStatements.set(query.name, {\r\n        name: query.name,\r\n        sql: query.sql,\r\n        parameters: query.parameters,\r\n        usageCount: 0,\r\n        averageExecutionTime: 0,\r\n      });\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Execute a prepared statement with parameters\r\n   */\r\n  async executePreparedStatement(\r\n    name: string,\r\n    parameters: unknown[] = [],\r\n    options: { logQuery?: boolean; analyze?: boolean } = {},\r\n  ): Promise<unknown> {\r\n    const startTime = Date.now();\r\n    const statement = this.preparedStatements.get(name);\r\n\r\n    if (!statement) {\r\n      throw new Error(`Prepared statement not found: ${name}`);\r\n    }\r\n\r\n    try {\r\n      // Replace table name placeholders if any\r\n      let {sql} = statement;\r\n      if (sql.includes('{table_name}')) {\r\n        // This is a dynamic table query - handle accordingly\r\n        sql = sql.replace('{table_name}', parameters.shift() || 'donations');\r\n      }\r\n\r\n      const { data, error } = await supabase.rpc('execute_sql', {\r\n        query: sql,\r\n        params: parameters,\r\n      });\r\n\r\n      if (error) {\r\n        throw error;\r\n      }\r\n\r\n      const executionTime = Date.now() - startTime;\r\n\r\n      // Update statement metrics\r\n      statement.usageCount++;\r\n      statement.averageExecutionTime = \r\n        (statement.averageExecutionTime * (statement.usageCount - 1) + executionTime) / \r\n        statement.usageCount;\r\n\r\n      // Log query if requested\r\n      if (options.logQuery) {\r\n        logger.info(`Prepared statement ${name} executed in ${executionTime}ms`);\r\n      }\r\n\r\n      // Analyze query if requested\r\n      if (options.analyze && this.config.enableQueryAnalysis) {\r\n        await this.analyzeQuery(sql, parameters, executionTime);\r\n      }\r\n\r\n      return data;\r\n    } catch (error: unknown) {\r\n      logger.error(`Error executing prepared statement ${name}:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Execute an optimized query with caching and analysis\r\n   */\r\n  async executeOptimizedQuery(\r\n    sql: string,\r\n    parameters: unknown[] = [],\r\n    options: {\r\n      usePrepared?: boolean;\r\n      analyze?: boolean;\r\n      cache?: boolean;\r\n      ttl?: number;\r\n    } = {},\r\n  ): Promise<unknown> {\r\n    const startTime = Date.now();\r\n    const queryId = this.generateQueryId(sql);\r\n\r\n    // Check cache first\r\n    if (options.cache !== false && this.config.cacheEnabled) {\r\n      const cached = await this.getCachedResult(queryId, parameters);\r\n      if (cached) {\r\n        this.logQueryMetrics({\r\n          queryId,\r\n          sql,\r\n          executionTime: Date.now() - startTime,\r\n          timestamp: Date.now(),\r\n          parameters,\r\n          cacheHit: true,\r\n        });\r\n        return cached.data;\r\n      }\r\n    }\r\n\r\n    try {\r\n      let result: unknown;\r\n\r\n      // Try to use prepared statement if available\r\n      if (options.usePrepared !== false) {\r\n        const preparedName = this.findPreparedStatement(sql);\r\n        if (preparedName) {\r\n          result = await this.executePreparedStatement(preparedName, parameters, {\r\n            logQuery: true,\r\n            analyze: options.analyze,\r\n          });\r\n        } else {\r\n          // Execute raw SQL\r\n          const { data, error } = await supabase.rpc('execute_sql', {\r\n            query: sql,\r\n            params: parameters,\r\n          });\r\n\r\n          if (error) {\r\n            throw error;\r\n          }\r\n\r\n          result = data;\r\n        }\r\n      } else {\r\n        // Execute raw SQL\r\n        const { data, error } = await supabase.rpc('execute_sql', {\r\n          query: sql,\r\n          params: parameters,\r\n        });\r\n\r\n        if (error) {\r\n          throw error;\r\n        }\r\n\r\n        result = data;\r\n      }\r\n\r\n      const executionTime = Date.now() - startTime;\r\n\r\n      // Cache result if enabled\r\n      if (options.cache !== false && this.config.cacheEnabled) {\r\n        await this.cacheResult(queryId, parameters, result, options.ttl);\r\n      }\r\n\r\n      // Log query metrics\r\n      this.logQueryMetrics({\r\n        queryId,\r\n        sql,\r\n        executionTime,\r\n        timestamp: Date.now(),\r\n        parameters,\r\n        cacheHit: false,\r\n      });\r\n\r\n      // Analyze query if requested\r\n      if (options.analyze && this.config.enableQueryAnalysis) {\r\n        await this.analyzeQuery(sql, parameters, executionTime);\r\n      }\r\n\r\n      return result;\r\n    } catch (error: unknown) {\r\n      logger.error(`Error executing optimized query:`, error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Analyze query performance\r\n   */\r\n  async analyzeQuery(sql: string, parameters: unknown[], executionTime: number): Promise<void> {\r\n    try {\r\n      // Get query plan (if supported by Supabase)\r\n      const { data: plan } = await supabase.rpc('explain_query', {\r\n        query_sql: sql,\r\n        params: parameters,\r\n      });\r\n\r\n      const queryId = this.generateQueryId(sql);\r\n      const existing = this.queryAnalysis.get(queryId);\r\n\r\n      const analysis: QueryAnalysis = existing || {\r\n        queryId,\r\n        sql,\r\n        averageExecutionTime: 0,\r\n        executionCount: 0,\r\n        lastExecuted: Date.now(),\r\n        suggestions: [],\r\n        indexes: [],\r\n      };\r\n\r\n      // Update metrics\r\n      analysis.executionCount++;\r\n      analysis.averageExecutionTime = \r\n        (analysis.averageExecutionTime * (analysis.executionCount - 1) + executionTime) / \r\n        analysis.executionCount;\r\n      analysis.lastExecuted = Date.now();\r\n\r\n      // Analyze query plan if available\r\n      if (plan) {\r\n        const suggestions = this.analyzeQueryPlan(plan);\r\n        const indexes = this.suggestIndexes(plan);\r\n        \r\n        analysis.suggestions = [...new Set([...analysis.suggestions, ...suggestions])];\r\n        analysis.indexes = [...new Set([...analysis.indexes, ...indexes])];\r\n      }\r\n\r\n      this.queryAnalysis.set(queryId, analysis);\r\n    } catch (error: unknown) {\r\n      logger.warn('Query analysis failed:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Analyze query plan and return optimization suggestions\r\n   */\r\n  private analyzeQueryPlan(plan: unknown): string[] {\r\n    const suggestions: string[] = [];\r\n    \r\n    // This is a simplified implementation\r\n    // In a real application, you would parse the actual query plan\r\n    if (typeof plan === 'object' && plan !== null) {\r\n      const planStr = JSON.stringify(plan);\r\n      \r\n      if (planStr.includes('Seq Scan')) {\r\n        suggestions.push('Consider adding an index for sequential scan operations');\r\n      }\r\n      \r\n      if (planStr.includes('Nested Loop')) {\r\n        suggestions.push('Consider optimizing nested loop joins');\r\n      }\r\n      \r\n      if (planStr.includes('Hash Join')) {\r\n        suggestions.push('Hash join detected - consider memory optimization');\r\n      }\r\n    }\r\n    \r\n    return suggestions;\r\n  }\r\n\r\n  /**\r\n   * Suggest indexes based on query plan\r\n   */\r\n  private suggestIndexes(plan: unknown): string[] {\r\n    const indexes: string[] = [];\r\n    \r\n    // This is a simplified implementation\r\n    // In a real application, you would analyze the actual query plan\r\n    if (typeof plan === 'object' && plan !== null) {\r\n      const planStr = JSON.stringify(plan);\r\n      \r\n      // Look for common patterns that benefit from indexes\r\n      if (planStr.includes('WHERE')) {\r\n        indexes.push('Consider adding indexes on WHERE clause columns');\r\n      }\r\n      \r\n      if (planStr.includes('ORDER BY')) {\r\n        indexes.push('Consider adding indexes on ORDER BY columns');\r\n      }\r\n      \r\n      if (planStr.includes('JOIN')) {\r\n        indexes.push('Consider adding indexes on JOIN columns');\r\n      }\r\n    }\r\n    \r\n    return indexes;\r\n  }\r\n\r\n  // =============================================================================\r\n  // CACHE MANAGEMENT\r\n  // =============================================================================\r\n\r\n  /**\r\n   * Get cached result\r\n   */\r\n  private async getCachedResult(\r\n    queryId: string,\r\n    parameters: unknown[],\r\n  ): Promise<{ data: unknown; timestamp: number } | null> {\r\n    try {\r\n      const cacheKey = this.generateCacheKey(queryId, parameters);\r\n      const cached = localStorage.getItem(`query_cache_${cacheKey}`);\r\n\r\n      if (!cached) return null;\r\n\r\n      const parsed = JSON.parse(cached);\r\n      const now = Date.now();\r\n\r\n      // Check TTL\r\n      if (now - parsed.timestamp > this.config.cacheTTL) {\r\n        localStorage.removeItem(`query_cache_${cacheKey}`);\r\n        return null;\r\n      }\r\n\r\n      return parsed;\r\n    } catch (error: unknown) {\r\n      logger.warn('Cache read error:', error);\r\n      return null;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Cache query result\r\n   */\r\n  private async cacheResult(\r\n    queryId: string,\r\n    parameters: unknown[],\r\n    data: unknown,\r\n    ttl?: number,\r\n  ): Promise<void> {\r\n    try {\r\n      const cacheKey = this.generateCacheKey(queryId, parameters);\r\n      const cacheData = {\r\n        data,\r\n        timestamp: Date.now(),\r\n        ttl: ttl ?? this.config.cacheTTL,\r\n      };\r\n\r\n      localStorage.setItem(`query_cache_${cacheKey}`, JSON.stringify(cacheData));\r\n    } catch (error: unknown) {\r\n      logger.warn('Cache write error:', error);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate cache key\r\n   */\r\n  private generateCacheKey(queryId: string, parameters: unknown[]): string {\r\n    const paramsHash = JSON.stringify(parameters)\r\n      .split('')\r\n      .reduce((a, b) => {\r\n        a = (a << 5) - a + b.charCodeAt(0);\r\n        return a & a;\r\n      }, 0);\r\n    return `${queryId}_${paramsHash}`;\r\n  }\r\n\r\n  // =============================================================================\r\n  // UTILITY METHODS\r\n  // =============================================================================\r\n\r\n  /**\r\n   * Generate query ID\r\n   */\r\n  private generateQueryId(sql: string): string {\r\n    // Simple hash function for SQL\r\n    let hash = 0;\r\n    for (let i = 0; i < sql.length; i++) {\r\n      const char = sql.charCodeAt(i);\r\n      hash = (hash << 5) - hash + char;\r\n      hash = hash & hash; // Convert to 32-bit integer\r\n    }\r\n    return Math.abs(hash).toString(36);\r\n  }\r\n\r\n  /**\r\n   * Find matching prepared statement\r\n   */\r\n  private findPreparedStatement(sql: string): string | null {\r\n    for (const [name, statement] of this.preparedStatements) {\r\n      if (sql.includes(statement.sql.split(' ')[0])) {\r\n        return name;\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  /**\r\n   * Log query metrics\r\n   */\r\n  private logQueryMetrics(metrics: QueryMetrics): void {\r\n    this.queryHistory.push(metrics);\r\n\r\n    // Keep only recent queries\r\n    if (this.queryHistory.length > this.config.maxQueryHistory) {\r\n      this.queryHistory.shift();\r\n    }\r\n\r\n    // Log slow queries\r\n    if (metrics.executionTime > 1000) {\r\n      logger.warn(`Slow query detected: ${metrics.sql} (${metrics.executionTime}ms)`);\r\n    }\r\n  }\r\n\r\n  // =============================================================================\r\n  // PUBLIC API\r\n  // =============================================================================\r\n\r\n  /**\r\n   * Get query analytics\r\n   */\r\n  getQueryAnalytics(): {\r\n    totalQueries: number;\r\n    averageExecutionTime: number;\r\n    slowQueries: QueryMetrics[];\r\n    preparedStatements: PreparedStatement[];\r\n    topSlowQueries: QueryMetrics[];\r\n    queryAnalysis: QueryAnalysis[];\r\n  } {\r\n    const slowQueries = this.queryHistory.filter(q => q.executionTime > 1000);\r\n    const topSlowQueries = [...this.queryHistory]\r\n      .sort((a, b) => b.executionTime - a.executionTime)\r\n      .slice(0, 10);\r\n\r\n    const averageExecutionTime = this.queryHistory.length > 0\r\n      ? this.queryHistory.reduce((sum, q) => sum + q.executionTime, 0) / this.queryHistory.length\r\n      : 0;\r\n\r\n    return {\r\n      totalQueries: this.queryHistory.length,\r\n      averageExecutionTime,\r\n      slowQueries,\r\n      preparedStatements: Array.from(this.preparedStatements.values()),\r\n      topSlowQueries,\r\n      queryAnalysis: Array.from(this.queryAnalysis.values()),\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Clear query cache\r\n   */\r\n  clearCache(): void {\r\n    const keys = Object.keys(localStorage).filter((key) => key.startsWith('query_cache_'));\r\n    keys.forEach((key) => {\r\n      localStorage.removeItem(key);\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Suggest index optimizations\r\n   */\r\n  async suggestIndexOptimizations(): Promise<\r\n    {\r\n      table: string;\r\n      column: string;\r\n      reason: string;\r\n      impact: 'high' | 'medium' | 'low';\r\n    }[]\r\n  > {\r\n    const suggestions: {\r\n      table: string;\r\n      column: string;\r\n      reason: string;\r\n      impact: 'high' | 'medium' | 'low';\r\n    }[] = [];\r\n\r\n    // Analyze query history for common patterns\r\n    const tableUsage = new Map<string, Set<string>>();\r\n    \r\n    this.queryHistory.forEach((query) => {\r\n      // Simple regex to extract table names (this is basic - in production use a proper SQL parser)\r\n      const tableMatches = query.sql.match(/FROM\\s+(\\w+)/gi);\r\n      if (tableMatches) {\r\n        tableMatches.forEach((match) => {\r\n          const tableName = match.replace(/FROM\\s+/i, '');\r\n          if (!tableUsage.has(tableName)) {\r\n            tableUsage.set(tableName, new Set());\r\n          }\r\n          \r\n          // Extract column names from WHERE clauses\r\n          const whereMatches = query.sql.match(/WHERE\\s+(\\w+)/gi);\r\n          if (whereMatches) {\r\n            whereMatches.forEach((whereMatch) => {\r\n              const columnName = whereMatch.replace(/WHERE\\s+/i, '');\r\n              tableUsage.get(tableName)?.add(columnName);\r\n            });\r\n          }\r\n        });\r\n      }\r\n    });\r\n\r\n    // Generate suggestions based on usage patterns\r\n    tableUsage.forEach((columns, table) => {\r\n      columns.forEach((column) => {\r\n        suggestions.push({\r\n          table,\r\n          column,\r\n          reason: `Frequently used in WHERE clauses`,\r\n          impact: 'medium',\r\n        });\r\n      });\r\n    });\r\n\r\n    return suggestions;\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const queryOptimizationService = new QueryOptimizationService();\r\n\r\n// Export individual methods for convenience\r\nexport const executePreparedStatement = (name: string, parameters?: unknown[], options?: unknown) =>\r\n  queryOptimizationService.executePreparedStatement(name, parameters, options);\r\n\r\nexport const getQueryAnalytics = () => queryOptimizationService.getQueryAnalytics();\r\nexport const suggestIndexOptimizations = () => queryOptimizationService.suggestIndexOptimizations();\r\n\r\nexport default QueryOptimizationService;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\reportingService.ts","messages":[{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_filters' is defined but never used.","line":114,"column":55,"nodeType":null,"messageId":"unusedVar","endLine":114,"endColumn":63},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":135,"column":30,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":135,"endColumn":82},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":135,"column":43,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":135,"endColumn":45,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[3860,3862],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":136,"column":29,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":136,"endColumn":80},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":136,"column":41,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":136,"endColumn":43,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[3947,3949],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":142,"column":25,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":142,"endColumn":46},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":142,"column":38,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":142,"endColumn":40,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[4150,4152],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":143,"column":24,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":143,"endColumn":44},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":143,"column":36,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":143,"endColumn":38,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[4201,4203],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_filters' is defined but never used.","line":157,"column":57,"nodeType":null,"messageId":"unusedVar","endLine":157,"endColumn":65},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":170,"column":27,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":170,"endColumn":79},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":170,"column":40,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":170,"endColumn":42,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[5106,5108],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":171,"column":26,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":171,"endColumn":47},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":171,"column":39,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":171,"endColumn":41,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[5191,5193],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":172,"column":30,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":172,"endColumn":79},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":172,"column":43,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":172,"endColumn":45,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[5249,5251],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":177,"column":11,"nodeType":"Identifier","messageId":"alwaysTruthy","endLine":177,"endColumn":24},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":180,"column":15,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":180,"endColumn":25},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":180,"column":16,"nodeType":"MemberExpression","endLine":180,"endColumn":25},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":181,"column":13,"nodeType":"MemberExpression","endLine":181,"endColumn":22},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":183,"column":11,"nodeType":"MemberExpression","endLine":183,"endColumn":20},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":184,"column":11,"nodeType":"MemberExpression","endLine":184,"endColumn":20},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":205,"column":56,"nodeType":"Identifier","messageId":"neverNullish","endLine":205,"endColumn":69},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":206,"column":61,"nodeType":"Identifier","messageId":"neverNullish","endLine":206,"endColumn":74},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":207,"column":59,"nodeType":"Identifier","messageId":"neverNullish","endLine":207,"endColumn":72},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":211,"column":54,"nodeType":"Identifier","messageId":"neverNullish","endLine":211,"endColumn":67},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":212,"column":49,"nodeType":"Identifier","messageId":"neverNullish","endLine":212,"endColumn":62},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":213,"column":47,"nodeType":"Identifier","messageId":"neverNullish","endLine":213,"endColumn":60},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":216,"column":64,"nodeType":"Identifier","messageId":"neverNullish","endLine":216,"endColumn":77},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":217,"column":63,"nodeType":"Identifier","messageId":"neverNullish","endLine":217,"endColumn":76},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":218,"column":65,"nodeType":"Identifier","messageId":"neverNullish","endLine":218,"endColumn":78},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":219,"column":55,"nodeType":"Identifier","messageId":"neverNullish","endLine":219,"endColumn":68},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":225,"column":55,"nodeType":"Identifier","messageId":"neverNullish","endLine":225,"endColumn":68},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":226,"column":49,"nodeType":"Identifier","messageId":"neverNullish","endLine":226,"endColumn":62},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'filters' is defined but never used.","line":241,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":241,"endColumn":59},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'filters' is defined but never used. Allowed unused args must match /^_/u.","line":241,"column":52,"nodeType":null,"messageId":"unusedVar","endLine":241,"endColumn":59},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":254,"column":34,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":254,"endColumn":59},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":254,"column":51,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":254,"endColumn":53,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[8457,8459],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":258,"column":24,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":258,"endColumn":26,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[8572,8574],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":260,"column":9,"nodeType":"MemberExpression","endLine":260,"endColumn":21},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":260,"column":25,"nodeType":"MemberExpression","messageId":"neverNullish","endLine":260,"endColumn":37},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":260,"column":25,"nodeType":"MemberExpression","endLine":260,"endColumn":37},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":271,"column":50,"nodeType":"Identifier","messageId":"neverNullish","endLine":271,"endColumn":67},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":272,"column":45,"nodeType":"Identifier","messageId":"neverNullish","endLine":272,"endColumn":62},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_report' is assigned a value but never used.","line":302,"column":13,"nodeType":null,"messageId":"unusedVar","endLine":302,"endColumn":20},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":321,"column":55,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":321,"endColumn":57,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[10701,10703],"text":""},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":343,"column":31,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":343,"endColumn":33,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[11690,11692],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'rawData' is defined but never used.","line":403,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":403,"endColumn":42},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'rawData' is defined but never used. Allowed unused args must match /^_/u.","line":403,"column":35,"nodeType":null,"messageId":"unusedVar","endLine":403,"endColumn":42},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'reportConfig' is defined but never used.","line":403,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":403,"endColumn":65},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'reportConfig' is defined but never used. Allowed unused args must match /^_/u.","line":403,"column":53,"nodeType":null,"messageId":"unusedVar","endLine":403,"endColumn":65},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_beneficiary' is defined but never used.","line":604,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":604,"endColumn":40},{"ruleId":"@typescript-eslint/adjacent-overload-signatures","severity":2,"message":"All fetchFinancialData signatures should be adjacent.","line":666,"column":3,"nodeType":"MethodDefinition","messageId":"adjacentSignature","endLine":668,"endColumn":4},{"ruleId":"@typescript-eslint/adjacent-overload-signatures","severity":2,"message":"All fetchDonationData signatures should be adjacent.","line":670,"column":3,"nodeType":"MethodDefinition","messageId":"adjacentSignature","endLine":672,"endColumn":4},{"ruleId":"@typescript-eslint/adjacent-overload-signatures","severity":2,"message":"All fetchImpactData signatures should be adjacent.","line":674,"column":3,"nodeType":"MethodDefinition","messageId":"adjacentSignature","endLine":676,"endColumn":4}],"suppressedMessages":[],"errorCount":10,"fatalErrorCount":0,"warningCount":45,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview reportingService Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport type {\r\n  AnalyticsData,\r\n  CustomReport,\r\n  DateRange,\r\n  DonationAnalytics,\r\n  DonorTypeData,\r\n  FinancialData,\r\n  ImpactData,\r\n  ReportFilters,\r\n  ReportResponse,\r\n  FilterConfig,\r\n  TimeSeriesData,\r\n} from '../types/reporting';\r\nimport { supabase } from '../lib/supabase';\r\nimport { logger } from '../lib/logging/logger';\r\n\r\n// Raw data interfaces for type safety\r\ninterface FinancialRawData {\r\n  donations: { amount: number }[];\r\n  expenses: { amount: number; category?: string }[];\r\n}\r\n\r\ninterface DonationRawData {\r\n  donations: DonationRawItem[];\r\n}\r\n\r\ninterface DonationRawItem {\r\n  amount: number;\r\n  donor_type?: string;\r\n  created_at?: string;\r\n  is_recurring?: boolean;\r\n  campaign_id?: number;\r\n  donor_email?: string;\r\n  donor_name?: string;\r\n}\r\n\r\ninterface ImpactRawData {\r\n  beneficiaries: ImpactRawBeneficiary[];\r\n}\r\n\r\ninterface ImpactRawBeneficiary {\r\n  category?: string;\r\n  city?: string;\r\n  gender?: string;\r\n  household_size?: number;\r\n  created_at?: string;\r\n  updated_at?: string;\r\n}\r\n\r\n/**\r\n * ReportingService Service\r\n * \r\n * Service class for handling reportingservice operations\r\n * \r\n * @class ReportingService\r\n */\r\nexport class ReportingService {\r\n  private readonly cache = new Map<\r\n    string,\r\n    { data: unknown; timestamp: number; ttl: number; key: string }\r\n  >();\r\n  private readonly CACHE_TTL = 5 * 60 * 1000; // 5 minutes\r\n  private readonly MAX_CACHE_SIZE = 100; // Maximum number of cached items\r\n\r\n  /**\r\n   * Generate a custom report based on the provided configuration.\r\n   * @param reportConfig - The configuration for the custom report\r\n   * @returns A promise that resolves to the generated report response\r\n   */\r\n  async generateReport(reportConfig: CustomReport): Promise<ReportResponse<AnalyticsData>> {\r\n    const startTime = Date.now();\r\n    const cacheKey = this.getCacheKey('generateReport', reportConfig);\r\n\r\n    try {\r\n      const cached = this.getFromCache<ReportResponse<AnalyticsData>>(cacheKey);\r\n      if (cached) {\r\n        return cached;\r\n      }\r\n\r\n      const rawData = await this.fetchReportData(reportConfig);\r\n      const processedData = await this.processReportData(rawData, reportConfig);\r\n\r\n      const result: ReportResponse<AnalyticsData> = {\r\n        success: true,\r\n        data: processedData,\r\n        metadata: {\r\n          generatedAt: new Date().toISOString(),\r\n          processingTime: Date.now() - startTime,\r\n          cacheKey,\r\n        },\r\n      };\r\n\r\n      this.setCache(cacheKey, result);\r\n      return result;\r\n    } catch (error) {\r\n      logger.error('Report generation failed:', error);\r\n      throw new Error(`Report generation failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate financial report\r\n   * @param dateRange - Date range for the report\r\n   * @param filters - Optional filters\r\n   * @returns Financial report data\r\n   */\r\n  async generateFinancialReport(dateRange: DateRange, _filters?: ReportFilters): Promise<FinancialData> {\r\n    const startDate = dateRange.start.toISOString();\r\n    const endDate = dateRange.end.toISOString();\r\n\r\n    try {\r\n      const { data: donationsData, error: donationsError } = await supabase\r\n        .from('donations')\r\n        .select('amount, created_at, status')\r\n        .gte('created_at', startDate)\r\n        .lte('created_at', endDate);\r\n\r\n      if (donationsError) throw donationsError;\r\n\r\n      const { data: expensesData, error: expensesError } = await supabase\r\n        .from('expenses')\r\n        .select('amount, created_at, category')\r\n        .gte('created_at', startDate)\r\n        .lte('created_at', endDate);\r\n\r\n      if (expensesError) throw expensesError;\r\n\r\n      const totalDonations = donationsData?.reduce((sum, d) => sum + d.amount, 0) ?? 0;\r\n      const totalExpenses = expensesData?.reduce((sum, e) => sum + e.amount, 0) ?? 0;\r\n\r\n      return {\r\n        totalDonations,\r\n        totalExpenses,\r\n        netIncome: totalDonations - totalExpenses,\r\n        donationsCount: donationsData?.length ?? 0,\r\n        expensesCount: expensesData?.length ?? 0,\r\n      };\r\n    } catch (error) {\r\n      logger.error('Financial report generation failed:', error);\r\n      throw new Error('Financial report generation failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate donation analytics\r\n   * @param dateRange - Date range for the report\r\n   * @param filters - Optional filters\r\n   * @returns Donation analytics data\r\n   */\r\n  async generateDonationAnalytics(dateRange: DateRange, _filters?: ReportFilters): Promise<DonationAnalytics> {\r\n    const startDate = dateRange.start.toISOString();\r\n    const endDate = dateRange.end.toISOString();\r\n\r\n    try {\r\n      const { data: donationsData, error } = await supabase\r\n        .from('donations')\r\n        .select('amount, created_at, donor_type, is_recurring')\r\n        .gte('created_at', startDate)\r\n        .lte('created_at', endDate);\r\n\r\n      if (error) throw error;\r\n\r\n      const totalAmount = donationsData?.reduce((sum, d) => sum + d.amount, 0) ?? 0;\r\n      const totalCount = donationsData?.length ?? 0;\r\n      const recurringCount = donationsData?.filter(d => d.is_recurring).length ?? 0;\r\n      const averageAmount = totalCount > 0 ? totalAmount / totalCount : 0;\r\n\r\n      // Group by donor type\r\n      const donorTypeData: DonorTypeData[] = [];\r\n      if (donationsData) {\r\n        const groupedByType = donationsData.reduce((acc, donation) => {\r\n          const type = donation.donor_type ?? 'unknown';\r\n          if (!acc[type]) {\r\n            acc[type] = { count: 0, total: 0 };\r\n          }\r\n          acc[type].count++;\r\n          acc[type].total += donation.amount;\r\n          return acc;\r\n        }, {} as Record<string, { count: number; total: number }>);\r\n\r\n        Object.entries(groupedByType).forEach(([type, data]) => {\r\n          donorTypeData.push({\r\n            type,\r\n            count: data.count,\r\n            total: data.total,\r\n            average: data.count > 0 ? data.total / data.count : 0,\r\n          });\r\n        });\r\n      }\r\n\r\n      return {\r\n        totalAmount,\r\n        totalCount,\r\n        averageAmount,\r\n        recurringCount,\r\n        donorTypes: donorTypeData,\r\n        trends: {\r\n          monthly_donations: this.aggregateMonthlyData(donationsData ?? []),\r\n          yearly_comparison: this.calculateYearlyComparison(donationsData ?? []),\r\n          seasonal_patterns: this.analyzeSeasonalPatterns(donationsData ?? []),\r\n        },\r\n        segmentation: {\r\n          by_donor_type: donorTypeData,\r\n          by_amount_range: this.segmentByAmountRange(donationsData ?? []),\r\n          by_frequency: this.segmentByFrequency(donationsData ?? []),\r\n          by_campaign: this.segmentByCampaign(donationsData ?? []),\r\n        },\r\n        predictions: {\r\n          next_month_forecast: this.calculateNextMonthForecast(donationsData ?? []),\r\n          quarterly_forecast: this.calculateQuarterlyForecast(donationsData ?? []),\r\n          confidence_interval: this.calculateConfidenceInterval(donationsData ?? []),\r\n          trend_direction: this.analyzeTrendDirection(donationsData ?? []),\r\n        },\r\n        performance: {\r\n          total_donations: totalAmount,\r\n          unique_donors: totalCount,\r\n          average_donation: averageAmount,\r\n          retention_rate: this.calculateRetentionRate(donationsData ?? []),\r\n          growth_rate: this.calculateGrowthRate(donationsData ?? []),\r\n        },\r\n      };\r\n    } catch (error) {\r\n      logger.error('Donation analytics generation failed:', error);\r\n      throw new Error('Donation analytics generation failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generate impact report\r\n   * @param dateRange - Date range for the report\r\n   * @param filters - Optional filters\r\n   * @returns Impact report data\r\n   */\r\n  async generateImpactReport(dateRange: DateRange, filters?: ReportFilters): Promise<ImpactData> {\r\n    const startDate = dateRange.start.toISOString();\r\n    const endDate = dateRange.end.toISOString();\r\n\r\n    try {\r\n      const { data: beneficiariesData, error } = await supabase\r\n        .from('beneficiaries')\r\n        .select('category, city, gender, household_size, created_at, updated_at')\r\n        .gte('created_at', startDate)\r\n        .lte('created_at', endDate);\r\n\r\n      if (error) throw error;\r\n\r\n      const totalBeneficiaries = beneficiariesData?.length ?? 0;\r\n\r\n      // Group by city\r\n      const cities: Record<string, number> = {};\r\n      beneficiariesData?.forEach(beneficiary => {\r\n        const city = beneficiary.city ?? 'Unknown';\r\n        cities[city] = (cities[city] ?? 0) + 1;\r\n      });\r\n\r\n      return {\r\n        totalBeneficiaries,\r\n        demographics: {\r\n          by_location: Object.entries(cities).map(([city, count]) => ({\r\n            city,\r\n            count,\r\n            percentage: totalBeneficiaries > 0 ? (count / totalBeneficiaries) * 100 : 0,\r\n          })),\r\n          by_age_group: this.processAgeGroupData(beneficiariesData ?? []),\r\n          by_gender: this.processGenderData(beneficiariesData ?? []),\r\n        },\r\n        services: {\r\n          education_support: 0,\r\n          healthcare_assistance: 0,\r\n          food_aid: 0,\r\n          financial_assistance: 0,\r\n        },\r\n        impact_metrics: {\r\n          families_helped: totalBeneficiaries,\r\n          children_supported: 0,\r\n          elderly_cared_for: 0,\r\n          emergency_cases: 0,\r\n        },\r\n      };\r\n    } catch (error) {\r\n      logger.error('Impact report generation failed:', error);\r\n      throw new Error('Impact report generation failed');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Export report in specified format\r\n   * @param reportConfig - Report configuration\r\n   * @param format - Export format\r\n   * @param filename - Optional filename\r\n   * @returns Export result\r\n   */\r\n  async exportReport(reportConfig: CustomReport, format: 'csv' | 'excel' | 'pdf' = 'csv', filename?: string): Promise<{ success: boolean; url?: string; error?: string }> {\r\n    try {\r\n      const _report = await this.generateReport(reportConfig);\r\n      \r\n      // This would implement actual export logic\r\n      const exportFilename = filename ?? `report_${Date.now()}.${format}`;\r\n      \r\n      return {\r\n        success: true,\r\n        url: `/exports/${exportFilename}`,\r\n      };\r\n    } catch (error) {\r\n      return {\r\n        success: false,\r\n        error: error instanceof Error ? error.message : 'Export failed',\r\n      };\r\n    }\r\n  }\r\n\r\n  // Private helper methods\r\n  private async fetchReportData(reportConfig: CustomReport): Promise<unknown> {\r\n    const dataSource = reportConfig.config.dataSources?.[0]?.source ?? 'default';\r\n    const dateRange = this.extractDateRange(reportConfig.config.filters);\r\n    const defaultDateRange: DateRange = { start: new Date(0), end: new Date() };\r\n\r\n    switch (dataSource) {\r\n      case 'financial':\r\n        return await this.fetchFinancialData(dateRange ?? defaultDateRange);\r\n      case 'donations':\r\n        return await this.fetchDonationData(dateRange ?? defaultDateRange);\r\n      case 'beneficiaries':\r\n        return await this.fetchImpactData(dateRange ?? defaultDateRange);\r\n      case 'members':\r\n        return await this.fetchMemberData(dateRange ?? defaultDateRange);\r\n      case 'campaigns':\r\n        return await this.fetchCampaignData(dateRange ?? defaultDateRange);\r\n      default:\r\n        return await this.fetchFinancialData(dateRange ?? defaultDateRange);\r\n    }\r\n  }\r\n\r\n  private extractDateRange(filters: FilterConfig[] | undefined): DateRange | undefined {\r\n    if (!filters) return undefined;\r\n    const dateFilter = filters?.find(filter => filter.field === 'date_range');\r\n    if (dateFilter?.value) {\r\n      const { start, end } = dateFilter.value as { start: string; end: string };\r\n      return { start: new Date(start), end: new Date(end) };\r\n    }\r\n    return undefined;\r\n  }\r\n\r\n  private async fetchFinancialData(dateRange: DateRange): Promise<FinancialRawData> {\r\n    const startDate = dateRange.start.toISOString();\r\n    const endDate = dateRange.end.toISOString();\r\n\r\n    const { data: donationsData } = await supabase\r\n      .from('donations')\r\n      .select('amount')\r\n      .gte('created_at', startDate)\r\n      .lte('created_at', endDate);\r\n\r\n    const { data: expensesData } = await supabase\r\n      .from('expenses')\r\n      .select('amount, category')\r\n      .gte('created_at', startDate)\r\n      .lte('created_at', endDate);\r\n\r\n    return {\r\n      donations: donationsData ?? [],\r\n      expenses: expensesData ?? [],\r\n    };\r\n  }\r\n\r\n  private async fetchDonationData(dateRange: DateRange): Promise<DonationRawData> {\r\n    const startDate = dateRange.start.toISOString();\r\n    const endDate = dateRange.end.toISOString();\r\n\r\n    const { data: donationsData } = await supabase\r\n      .from('donations')\r\n      .select('amount, donor_type, created_at, is_recurring, campaign_id, donor_email, donor_name')\r\n      .gte('created_at', startDate)\r\n      .lte('created_at', endDate);\r\n\r\n    return {\r\n      donations: donationsData ?? [],\r\n    };\r\n  }\r\n\r\n  private async fetchImpactData(dateRange: DateRange): Promise<ImpactRawData> {\r\n    const startDate = dateRange.start.toISOString();\r\n    const endDate = dateRange.end.toISOString();\r\n\r\n    const { data: beneficiariesData } = await supabase\r\n      .from('beneficiaries')\r\n      .select('category, city, gender, household_size, created_at, updated_at')\r\n      .gte('created_at', startDate)\r\n      .lte('created_at', endDate);\r\n\r\n    return {\r\n      beneficiaries: beneficiariesData ?? [],\r\n    };\r\n  }\r\n\r\n  private async processReportData(rawData: unknown, reportConfig: CustomReport): Promise<AnalyticsData> {\r\n    // This would implement the actual data processing logic\r\n    return {\r\n      summary: {\r\n        totalRecords: 0,\r\n        dateRange: { start: new Date(), end: new Date() },\r\n        lastUpdated: new Date().toISOString(),\r\n      },\r\n      metrics: [],\r\n      trends: [],\r\n      insights: [],\r\n    };\r\n  }\r\n\r\n  // Cache management\r\n  private getCacheKey(operation: string, params: unknown): string {\r\n    return `${operation}_${JSON.stringify(params)}`;\r\n  }\r\n\r\n  private getFromCache<T>(key: string): T | null {\r\n    const cached = this.cache.get(key);\r\n    if (!cached) return null;\r\n    \r\n    if (Date.now() - cached.timestamp > cached.ttl) {\r\n      this.cache.delete(key);\r\n      return null;\r\n    }\r\n    \r\n    return cached.data as T;\r\n  }\r\n\r\n  private setCache(key: string, data: unknown): void {\r\n    if (this.cache.size >= this.MAX_CACHE_SIZE) {\r\n      const firstKey = this.cache.keys().next().value;\r\n      this.cache.delete(firstKey);\r\n    }\r\n    \r\n    this.cache.set(key, {\r\n      data,\r\n      timestamp: Date.now(),\r\n      ttl: this.CACHE_TTL,\r\n      key,\r\n    });\r\n  }\r\n\r\n  // Data processing methods\r\n  private aggregateMonthlyData(donations: DonationRawItem[]): TimeSeriesData[] {\r\n    const monthlyData = new Map<string, number>();\r\n    \r\n    donations.forEach(donation => {\r\n      if (donation.created_at) {\r\n        const date = new Date(donation.created_at);\r\n        const monthKey = `${date.getFullYear()}-${String(date.getMonth() + 1).padStart(2, '0')}`;\r\n        monthlyData.set(monthKey, (monthlyData.get(monthKey) ?? 0) + donation.amount);\r\n      }\r\n    });\r\n    \r\n    return Array.from(monthlyData.entries()).map(([date, amount]) => ({\r\n      date,\r\n      value: amount\r\n    }));\r\n  }\r\n\r\n  private calculateYearlyComparison(donations: DonationRawItem[]): TimeSeriesData[] {\r\n    const yearlyData = new Map<string, number>();\r\n    \r\n    donations.forEach(donation => {\r\n      if (donation.created_at) {\r\n        const date = new Date(donation.created_at);\r\n        const year = date.getFullYear().toString();\r\n        yearlyData.set(year, (yearlyData.get(year) ?? 0) + donation.amount);\r\n      }\r\n    });\r\n    \r\n    return Array.from(yearlyData.entries()).map(([date, value]) => ({\r\n      date,\r\n      value\r\n    }));\r\n  }\r\n\r\n  private analyzeSeasonalPatterns(donations: DonationRawItem[]): TimeSeriesData[] {\r\n    const seasonalData = new Map<string, number>();\r\n    \r\n    donations.forEach(donation => {\r\n      if (donation.created_at) {\r\n        const date = new Date(donation.created_at);\r\n        const season = this.getSeason(date.getMonth());\r\n        seasonalData.set(season, (seasonalData.get(season) ?? 0) + donation.amount);\r\n      }\r\n    });\r\n    \r\n    return Array.from(seasonalData.entries()).map(([date, value]) => ({\r\n      date,\r\n      value\r\n    }));\r\n  }\r\n\r\n  private getSeason(month: number): string {\r\n    if (month >= 2 && month <= 4) return 'Spring';\r\n    if (month >= 5 && month <= 7) return 'Summer';\r\n    if (month >= 8 && month <= 10) return 'Autumn';\r\n    return 'Winter';\r\n  }\r\n\r\n  private segmentByAmountRange(donations: DonationRawItem[]): { range: string; count: number; total: number }[] {\r\n    const ranges = [\r\n      { min: 0, max: 100, label: '0-100 TL' },\r\n      { min: 100, max: 500, label: '100-500 TL' },\r\n      { min: 500, max: 1000, label: '500-1000 TL' },\r\n      { min: 1000, max: 5000, label: '1000-5000 TL' },\r\n      { min: 5000, max: Infinity, label: '5000+ TL' }\r\n    ];\r\n\r\n    return ranges.map(range => {\r\n      const donationsInRange = donations.filter(d => d.amount >= range.min && d.amount < range.max);\r\n      return {\r\n        range: range.label,\r\n        count: donationsInRange.length,\r\n        total: donationsInRange.reduce((sum, d) => sum + d.amount, 0)\r\n      };\r\n    });\r\n  }\r\n\r\n  private segmentByFrequency(donations: DonationRawItem[]): { frequency: string; count: number; total: number }[] {\r\n    const recurring = donations.filter(d => d.is_recurring);\r\n    const oneTime = donations.filter(d => !d.is_recurring);\r\n\r\n    return [\r\n      { frequency: 'One-time', count: oneTime.length, total: oneTime.reduce((sum, d) => sum + d.amount, 0) },\r\n      { frequency: 'Recurring', count: recurring.length, total: recurring.reduce((sum, d) => sum + d.amount, 0) }\r\n    ];\r\n  }\r\n\r\n  private segmentByCampaign(donations: DonationRawItem[]): { campaign: string; count: number; total: number }[] {\r\n    const campaignMap = new Map<string, { count: number; total: number }>();\r\n\r\n    donations.forEach(donation => {\r\n      const campaign = donation.campaign_id ? `Campaign ${donation.campaign_id}` : 'No Campaign';\r\n      const existing = campaignMap.get(campaign) ?? { count: 0, total: 0 };\r\n      campaignMap.set(campaign, {\r\n        count: existing.count + 1,\r\n        total: existing.total + donation.amount\r\n      });\r\n    });\r\n\r\n    return Array.from(campaignMap.entries()).map(([campaign, data]) => ({\r\n      campaign,\r\n      count: data.count,\r\n      total: data.total\r\n    }));\r\n  }\r\n\r\n  private calculateNextMonthForecast(donations: DonationRawItem[]): number {\r\n    const lastThreeMonths = this.getLastThreeMonthsData(donations);\r\n    const average = lastThreeMonths.reduce((sum, amount) => sum + amount, 0) / lastThreeMonths.length;\r\n    return Math.round(average);\r\n  }\r\n\r\n  private calculateQuarterlyForecast(donations: DonationRawItem[]): number {\r\n    const lastQuarter = this.getLastQuarterData(donations);\r\n    return Math.round(lastQuarter.reduce((sum, amount) => sum + amount, 0));\r\n  }\r\n\r\n  private calculateConfidenceInterval(donations: DonationRawItem[]): number {\r\n    const amounts = donations.map(d => d.amount);\r\n    const mean = amounts.reduce((sum, amount) => sum + amount, 0) / amounts.length;\r\n    const variance = amounts.reduce((sum, amount) => sum + Math.pow(amount - mean, 2), 0) / amounts.length;\r\n    return Math.round(Math.sqrt(variance) * 1.96); // 95% confidence interval\r\n  }\r\n\r\n  private analyzeTrendDirection(donations: DonationRawItem[]): 'increasing' | 'decreasing' | 'stable' {\r\n    const lastThreeMonths = this.getLastThreeMonthsData(donations);\r\n    if (lastThreeMonths.length < 2) return 'stable';\r\n    \r\n    const trend = lastThreeMonths[lastThreeMonths.length - 1] - lastThreeMonths[0];\r\n    if (trend > 0.1) return 'increasing';\r\n    if (trend < -0.1) return 'decreasing';\r\n    return 'stable';\r\n  }\r\n\r\n  private calculateRetentionRate(donations: DonationRawItem[]): number {\r\n    const uniqueDonors = new Set(donations.map(d => d.donor_email).filter(Boolean));\r\n    const recurringDonors = donations.filter(d => d.is_recurring).length;\r\n    return uniqueDonors.size > 0 ? (recurringDonors / uniqueDonors.size) * 100 : 0;\r\n  }\r\n\r\n  private calculateGrowthRate(donations: DonationRawItem[]): number {\r\n    const currentMonth = this.getCurrentMonthData(donations);\r\n    const previousMonth = this.getPreviousMonthData(donations);\r\n    \r\n    if (previousMonth.length === 0) return 0;\r\n    \r\n    const currentTotal = currentMonth.reduce((sum, d) => sum + d.amount, 0);\r\n    const previousTotal = previousMonth.reduce((sum, d) => sum + d.amount, 0);\r\n    \r\n    return previousTotal > 0 ? ((currentTotal - previousTotal) / previousTotal) * 100 : 0;\r\n  }\r\n\r\n  private processAgeGroupData(_beneficiaries: ImpactRawBeneficiary[]): { ageGroup: string; count: number }[] {\r\n    const ageGroups = new Map<string, number>();\r\n    \r\n    _beneficiaries.forEach(_beneficiary => {\r\n      const ageGroup = 'Unknown'; // Placeholder - would need actual age calculation\r\n      ageGroups.set(ageGroup, (ageGroups.get(ageGroup) ?? 0) + 1);\r\n    });\r\n    \r\n    return Array.from(ageGroups.entries()).map(([ageGroup, count]) => ({\r\n      ageGroup,\r\n      count\r\n    }));\r\n  }\r\n\r\n  private processGenderData(beneficiaries: ImpactRawBeneficiary[]): { gender: string; count: number }[] {\r\n    const genders = new Map<string, number>();\r\n    \r\n    beneficiaries.forEach(_beneficiary => {\r\n      const gender = _beneficiary.gender ?? 'Unknown';\r\n      genders.set(gender, (genders.get(gender) ?? 0) + 1);\r\n    });\r\n    \r\n    return Array.from(genders.entries()).map(([gender, count]) => ({\r\n      gender,\r\n      count\r\n    }));\r\n  }\r\n\r\n  private getLastThreeMonthsData(donations: DonationRawItem[]): number[] {\r\n    const now = new Date();\r\n    const threeMonthsAgo = new Date(now.getFullYear(), now.getMonth() - 3, 1);\r\n    \r\n    return donations\r\n      .filter(d => d.created_at && new Date(d.created_at) >= threeMonthsAgo)\r\n      .map(d => d.amount);\r\n  }\r\n\r\n  private getLastQuarterData(donations: DonationRawItem[]): number[] {\r\n    const now = new Date();\r\n    const quarterStart = new Date(now.getFullYear(), Math.floor(now.getMonth() / 3) * 3, 1);\r\n    \r\n    return donations\r\n      .filter(d => d.created_at && new Date(d.created_at) >= quarterStart)\r\n      .map(d => d.amount);\r\n  }\r\n\r\n  private getCurrentMonthData(donations: DonationRawItem[]): DonationRawItem[] {\r\n    const now = new Date();\r\n    const monthStart = new Date(now.getFullYear(), now.getMonth(), 1);\r\n    \r\n    return donations.filter(d => d.created_at && new Date(d.created_at) >= monthStart);\r\n  }\r\n\r\n  private getPreviousMonthData(donations: DonationRawItem[]): DonationRawItem[] {\r\n    const now = new Date();\r\n    const lastMonthStart = new Date(now.getFullYear(), now.getMonth() - 1, 1);\r\n    const lastMonthEnd = new Date(now.getFullYear(), now.getMonth(), 0);\r\n    \r\n    return donations.filter(d => {\r\n      if (!d.created_at) return false;\r\n      const date = new Date(d.created_at);\r\n      return date >= lastMonthStart && date <= lastMonthEnd;\r\n    });\r\n  }\r\n\r\n  private async fetchFinancialData(dateRange: DateRange): Promise<unknown> {\r\n    return await this.generateFinancialReport(dateRange);\r\n  }\r\n\r\n  private async fetchDonationData(dateRange: DateRange): Promise<unknown> {\r\n    return await this.generateDonationAnalytics(dateRange);\r\n  }\r\n\r\n  private async fetchImpactData(dateRange: DateRange): Promise<unknown> {\r\n    return await this.generateImpactReport(dateRange);\r\n  }\r\n\r\n  private async fetchMemberData(dateRange: DateRange): Promise<unknown> {\r\n    // Placeholder for member data fetching\r\n    const startDate = dateRange.start.toISOString();\r\n    const endDate = dateRange.end.toISOString();\r\n\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('members')\r\n        .select('*')\r\n        .gte('created_at', startDate)\r\n        .lte('created_at', endDate);\r\n\r\n      if (error) throw error;\r\n      return data;\r\n    } catch (error) {\r\n      throw new Error(`Member data fetch failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n\r\n  private async fetchCampaignData(dateRange: DateRange): Promise<unknown> {\r\n    // Placeholder for campaign data fetching\r\n    const startDate = dateRange.start.toISOString();\r\n    const endDate = dateRange.end.toISOString();\r\n\r\n    try {\r\n      const { data, error } = await supabase\r\n        .from('campaigns')\r\n        .select('*')\r\n        .gte('created_at', startDate)\r\n        .lte('created_at', endDate);\r\n\r\n      if (error) throw error;\r\n      return data;\r\n    } catch (error) {\r\n      throw new Error(`Campaign data fetch failed: ${error instanceof Error ? error.message : 'Unknown error'}`);\r\n    }\r\n  }\r\n}\r\n\r\n// Create instance\r\n// const reportingService = new ReportingService();\r\n\r\n// Export functions\r\nexport const generateReport = (reportConfig: CustomReport) =>\r\n  reportingService.generateReport(reportConfig);\r\n\r\nexport const generateFinancialReport = (dateRange: DateRange, filters?: ReportFilters) =>\r\n  reportingService.generateFinancialReport(dateRange, filters);\r\n\r\nexport const generateDonationAnalytics = (dateRange: DateRange, filters?: ReportFilters) =>\r\n  reportingService.generateDonationAnalytics(dateRange, filters);\r\n\r\nexport const generateImpactReport = (dateRange: DateRange, filters?: ReportFilters) =>\r\n  reportingService.generateImpactReport(dateRange, filters);\r\n\r\nexport const exportReport = (reportConfig: CustomReport, format?: 'csv' | 'excel' | 'pdf', filename?: string) =>\r\n  reportingService.exportReport(reportConfig, format, filename);\r\n\r\nexport default ReportingService;\r\nexport const reportingService = new ReportingService();\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\safeStatsService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":99,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":99,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2658,2661],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2658,2661],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":100,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":100,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2727,2730],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2727,2730],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":101,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":101,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2773,2776],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2773,2776],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":104,"column":46,"nodeType":"Identifier","messageId":"neverNullish","endLine":104,"endColumn":55},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":105,"column":23,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":105,"endColumn":26,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2945,2948],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2945,2948],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":112,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":112,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3083,3086],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3083,3086],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":113,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":113,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3137,3140],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3137,3140],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":114,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":114,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3192,3195],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3192,3195],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":116,"column":41,"nodeType":"Identifier","messageId":"neverNullish","endLine":116,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":116,"column":84,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":116,"endColumn":87,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3314,3317],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3314,3317],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":122,"column":20,"nodeType":"Identifier","messageId":"neverNullish","endLine":122,"endColumn":29},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":123,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":123,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3544,3547],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3544,3547],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":131,"column":50,"nodeType":"Identifier","messageId":"neverNullish","endLine":131,"endColumn":59},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":131,"column":80,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":131,"endColumn":83,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[3833,3836],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[3833,3836],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":14,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview safeStatsService Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport { supabase } from '../lib/supabase';\r\nimport type { ApiResponse } from '../types/database';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\n// Table names constants\r\nconst TABLES = {\r\n  BENEFICIARIES: 'beneficiaries',\r\n  MEMBERS: 'members',\r\n  DONATIONS: 'donations',\r\n  AID_REQUESTS: 'aid_requests',\r\n  CAMPAIGNS: 'campaigns',\r\n};\r\n\r\n// Safe stats that only check table existence and provide fallback data\r\n/**\r\n * SafeStats Interface\r\n * \r\n * @interface SafeStats\r\n */\r\nexport interface SafeStats {\r\n  beneficiaries: {\r\n    total: number;\r\n    active: number;\r\n    passive: number;\r\n    suspended: number;\r\n    underEvaluation: number;\r\n    totalAidAmount: number;\r\n    averageAidAmount: number;\r\n    byCity: Record<string, number>;\r\n    byPriority: Record<string, number>;\r\n  };\r\n  members: {\r\n    total: number;\r\n    active: number;\r\n    inactive: number;\r\n    suspended: number;\r\n    byMembershipType: Record<string, number>;\r\n    byCity: Record<string, number>;\r\n    recentJoins: number;\r\n    averageAge?: number;\r\n  };\r\n  donations: {\r\n    total: number;\r\n    totalAmount: number;\r\n    averageAmount: number;\r\n    byStatus: Record<string, number>;\r\n    byCategory: Record<string, number>;\r\n    byPaymentMethod: Record<string, number>;\r\n    byType: Record<string, number>;\r\n    monthlyTrend: { month: string; amount: number; count: number }[];\r\n    topDonors: { name: string; amount: number; count: number }[];\r\n  };\r\n  aidRequests: {\r\n    total: number;\r\n    pending: number;\r\n    underReview: number;\r\n    approved: number;\r\n    rejected: number;\r\n    completed: number;\r\n    totalRequestedAmount: number;\r\n    totalApprovedAmount: number;\r\n    byAidType: Record<string, number>;\r\n    byUrgency: Record<string, number>;\r\n    avgProcessingDays?: number;\r\n  };\r\n  campaigns: {\r\n    total: number;\r\n    active: number;\r\n    completed: number;\r\n    draft: number;\r\n    paused: number;\r\n    cancelled: number;\r\n    totalGoalAmount: number;\r\n    totalCurrentAmount: number;\r\n    averageProgress: number;\r\n    byCategory: Record<string, number>;\r\n    mostSuccessful: unknown[];\r\n  };\r\n}\r\n\r\nclass SafeStatsService {\r\n  // Check if table exists and return basic stats - simplified version\r\n  private async getTableCount(tableName: string): Promise<number> {\r\n    try {\r\n      const { count, error } = await supabase\r\n        .from(tableName)\r\n        .select('*', { count: 'exact', head: true });\r\n\r\n      if (error) {\r\n        // Handle RLS infinite recursion specifically\r\n        if (\r\n          (error as any).message?.includes('infinite recursion') ||\r\n          (error as any).code === '42P17' ||\r\n          (error as any).message?.includes('policy')\r\n        ) {\r\n          logger.info(\r\n            `RLS policy error detected for ${tableName ?? ''}, returning 0:`,\r\n            (error as any).message,\r\n          );\r\n          return 0;\r\n        }\r\n\r\n        // Handle authentication errors\r\n        if (\r\n          (error as any).message?.includes('JWT') ||\r\n          (error as any).message?.includes('auth') ||\r\n          (error as any).code === 'PGRST301'\r\n        ) {\r\n          logger.info(`Auth error for ${tableName ?? ''}, returning 0:`, (error as any).message);\r\n          return 0;\r\n        }\r\n\r\n        // For other errors (like table not exists), silently return 0\r\n        logger.info(\r\n          `Table ${tableName ?? ''} query failed, returning 0:`,\r\n          (error as any).message,\r\n        );\r\n        return 0;\r\n      }\r\n\r\n      return count ?? 0;\r\n    } catch (error: unknown) {\r\n      // Silent handling - expected in development when tables don't exist yet or auth issues\r\n      logger.info(`Exception getting count for ${tableName ?? ''}:`, (error as any).message);\r\n      return 0;\r\n    }\r\n  }\r\n\r\n  // Get all safe stats in one go\r\n  async getAllStats(): Promise<ApiResponse<SafeStats>> {\r\n    try {\r\n      // Get counts for all tables\r\n      const [beneficiariesCount, membersCount, donationsCount, aidRequestsCount, campaignsCount] =\r\n        await Promise.all([\r\n          this.getTableCount(TABLES.BENEFICIARIES),\r\n          this.getTableCount(TABLES.MEMBERS),\r\n          this.getTableCount(TABLES.DONATIONS),\r\n          this.getTableCount(TABLES.AID_REQUESTS),\r\n          this.getTableCount(TABLES.CAMPAIGNS),\r\n        ]);\r\n\r\n      const stats: SafeStats = {\r\n        beneficiaries: {\r\n          total: beneficiariesCount,\r\n          active: Math.round(beneficiariesCount * 0.7),\r\n          passive: Math.round(beneficiariesCount * 0.2),\r\n          suspended: Math.round(beneficiariesCount * 0.05),\r\n          underEvaluation: Math.round(beneficiariesCount * 0.05),\r\n          totalAidAmount: beneficiariesCount * 1500, // Estimate 1500 TL per beneficiary\r\n          averageAidAmount: 1500,\r\n          byCity: {},\r\n          byPriority: {},\r\n        },\r\n        members: {\r\n          total: membersCount,\r\n          active: Math.round(membersCount * 0.8),\r\n          inactive: Math.round(membersCount * 0.15),\r\n          suspended: Math.round(membersCount * 0.05),\r\n          byMembershipType: {\r\n            standard: Math.round(membersCount * 0.6),\r\n            premium: Math.round(membersCount * 0.3),\r\n            corporate: Math.round(membersCount * 0.1),\r\n          },\r\n          byCity: {},\r\n          recentJoins: Math.round(membersCount * 0.1),\r\n        },\r\n        donations: {\r\n          total: donationsCount,\r\n          totalAmount: donationsCount * 250, // Estimate 250 TL per donation\r\n          averageAmount: 250,\r\n          byStatus: {\r\n            completed: Math.round(donationsCount * 0.8),\r\n            pending: Math.round(donationsCount * 0.15),\r\n            cancelled: Math.round(donationsCount * 0.05),\r\n          },\r\n          byCategory: {},\r\n          byPaymentMethod: {\r\n            bank_transfer: Math.round(donationsCount * 0.5),\r\n            cash: Math.round(donationsCount * 0.3),\r\n            credit_card: Math.round(donationsCount * 0.2),\r\n          },\r\n          byType: {\r\n            one_time: Math.round(donationsCount * 0.7),\r\n            monthly: Math.round(donationsCount * 0.25),\r\n            yearly: Math.round(donationsCount * 0.05),\r\n          },\r\n          monthlyTrend: [],\r\n          topDonors: [],\r\n        },\r\n        aidRequests: {\r\n          total: aidRequestsCount,\r\n          pending: Math.round(aidRequestsCount * 0.4),\r\n          underReview: Math.round(aidRequestsCount * 0.3),\r\n          approved: Math.round(aidRequestsCount * 0.2),\r\n          rejected: Math.round(aidRequestsCount * 0.05),\r\n          completed: Math.round(aidRequestsCount * 0.05),\r\n          totalRequestedAmount: aidRequestsCount * 2000, // Estimate 2000 TL per request\r\n          totalApprovedAmount: aidRequestsCount * 1500, // Estimate 1500 TL approved\r\n          byAidType: {},\r\n          byUrgency: {},\r\n        },\r\n        campaigns: {\r\n          total: campaignsCount,\r\n          active: Math.round(campaignsCount * 0.6),\r\n          completed: Math.round(campaignsCount * 0.2),\r\n          draft: Math.round(campaignsCount * 0.15),\r\n          paused: Math.round(campaignsCount * 0.03),\r\n          cancelled: Math.round(campaignsCount * 0.02),\r\n          totalGoalAmount: campaignsCount * 50000, // Estimate 50k TL per campaign\r\n          totalCurrentAmount: campaignsCount * 30000, // Estimate 30k TL current\r\n          averageProgress: 60,\r\n          byCategory: {},\r\n          mostSuccessful: [],\r\n        },\r\n      };\r\n\r\n      return { data: stats, error: null };\r\n    } catch (error: unknown) {\r\n      logger.error('SafeStatsService.getAllStats error:', error);\r\n\r\n      // Return empty stats if everything fails\r\n      const emptyStats: SafeStats = {\r\n        beneficiaries: {\r\n          total: 0,\r\n          active: 0,\r\n          passive: 0,\r\n          suspended: 0,\r\n          underEvaluation: 0,\r\n          totalAidAmount: 0,\r\n          averageAidAmount: 0,\r\n          byCity: {},\r\n          byPriority: {},\r\n        },\r\n        members: {\r\n          total: 0,\r\n          active: 0,\r\n          inactive: 0,\r\n          suspended: 0,\r\n          byMembershipType: {},\r\n          byCity: {},\r\n          recentJoins: 0,\r\n        },\r\n        donations: {\r\n          total: 0,\r\n          totalAmount: 0,\r\n          averageAmount: 0,\r\n          byStatus: {},\r\n          byCategory: {},\r\n          byPaymentMethod: {},\r\n          byType: {},\r\n          monthlyTrend: [],\r\n          topDonors: [],\r\n        },\r\n        aidRequests: {\r\n          total: 0,\r\n          pending: 0,\r\n          underReview: 0,\r\n          approved: 0,\r\n          rejected: 0,\r\n          completed: 0,\r\n          totalRequestedAmount: 0,\r\n          totalApprovedAmount: 0,\r\n          byAidType: {},\r\n          byUrgency: {},\r\n        },\r\n        campaigns: {\r\n          total: 0,\r\n          active: 0,\r\n          completed: 0,\r\n          draft: 0,\r\n          paused: 0,\r\n          cancelled: 0,\r\n          totalGoalAmount: 0,\r\n          totalCurrentAmount: 0,\r\n          averageProgress: 0,\r\n          byCategory: {},\r\n          mostSuccessful: [],\r\n        },\r\n      };\r\n\r\n      return { data: emptyStats, error: null };\r\n    }\r\n  }\r\n}\r\n\r\n// Export singleton instance\r\nexport const safeStatsService = new SafeStatsService();\r\nexport default safeStatsService;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\userManagementService.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":97,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":97,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1840,1843],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1840,1843],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_filters' is defined but never used.","line":102,"column":18,"nodeType":null,"messageId":"unusedVar","endLine":102,"endColumn":26},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_request' is defined but never used.","line":113,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":113,"endColumn":28},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_id' is defined but never used.","line":118,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":118,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_request' is defined but never used.","line":118,"column":33,"nodeType":null,"messageId":"unusedVar","endLine":118,"endColumn":41},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_id' is defined but never used.","line":123,"column":20,"nodeType":null,"messageId":"unusedVar","endLine":123,"endColumn":23},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_id' is defined but never used.","line":128,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":128,"endColumn":30},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_newPassword' is defined but never used.","line":128,"column":40,"nodeType":null,"messageId":"unusedVar","endLine":128,"endColumn":52},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_userId' is defined but never used.","line":133,"column":27,"nodeType":null,"messageId":"unusedVar","endLine":133,"endColumn":34},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_limit' is defined but never used.","line":133,"column":44,"nodeType":null,"messageId":"unusedVar","endLine":133,"endColumn":50},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":138,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":138,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2957,2960],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2957,2960],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":9,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview userManagementService Module - Application module\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\n// User management types\r\n/**\r\n * ManagedUser Interface\r\n * \r\n * @interface ManagedUser\r\n */\r\nexport interface ManagedUser {\r\n  id: string;\r\n  email: string;\r\n  name: string;\r\n  role: 'admin' | 'manager' | 'operator' | 'viewer';\r\n  phone?: string;\r\n  department?: string;\r\n  notes?: string;\r\n  sendInvitation: boolean;\r\n  createdAt: string;\r\n  updatedAt: string;\r\n  lastLoginAt?: string;\r\n  isActive: boolean;\r\n}\r\n\r\n/**\r\n * CreateUserRequest Interface\r\n * \r\n * @interface CreateUserRequest\r\n */\r\nexport interface CreateUserRequest {\r\n  email: string;\r\n  name: string;\r\n  role: 'admin' | 'manager' | 'operator' | 'viewer';\r\n  phone?: string;\r\n  department?: string;\r\n  notes?: string;\r\n  sendInvitation: boolean;\r\n}\r\n\r\n/**\r\n * UpdateUserRequest Interface\r\n * \r\n * @interface UpdateUserRequest\r\n */\r\nexport interface UpdateUserRequest {\r\n  email?: string;\r\n  name?: string;\r\n  role?: 'admin' | 'manager' | 'operator' | 'viewer';\r\n  phone?: string;\r\n  department?: string;\r\n  notes?: string;\r\n  isActive?: boolean;\r\n}\r\n\r\n/**\r\n * UserFilters Interface\r\n * \r\n * @interface UserFilters\r\n */\r\nexport interface UserFilters {\r\n  search?: string;\r\n  role?: string;\r\n  isActive?: boolean;\r\n  department?: string;\r\n  page?: number;\r\n  limit?: number;\r\n}\r\n\r\n/**\r\n * UserListResponse Interface\r\n * \r\n * @interface UserListResponse\r\n */\r\nexport interface UserListResponse {\r\n  users: ManagedUser[];\r\n  total: number;\r\n  page: number;\r\n  limit: number;\r\n  totalPages: number;\r\n}\r\n\r\n/**\r\n * UserActivity Interface\r\n * \r\n * @interface UserActivity\r\n */\r\nexport interface UserActivity {\r\n  id: string;\r\n  userId: string;\r\n  action: string;\r\n  description: string;\r\n  timestamp: string;\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\n// Placeholder service for user management\r\nconst userManagementService = {\r\n  async getUsers(_filters: UserFilters): Promise<UserListResponse> {\r\n    // Placeholder implementation\r\n    return {\r\n      users: [],\r\n      total: 0,\r\n      page: 1,\r\n      limit: 10,\r\n      totalPages: 0,\r\n    };\r\n  },\r\n\r\n  async createUser(_request: CreateUserRequest): Promise<ManagedUser> {\r\n    // Placeholder implementation\r\n    throw new Error('Not implemented');\r\n  },\r\n\r\n  async updateUser(_id: string, _request: UpdateUserRequest): Promise<ManagedUser> {\r\n    // Placeholder implementation\r\n    throw new Error('Not implemented');\r\n  },\r\n\r\n  async deleteUser(_id: string): Promise<void> {\r\n    // Placeholder implementation\r\n    throw new Error('Not implemented');\r\n  },\r\n\r\n  async resetUserPassword(_id: string, _newPassword: string): Promise<void> {\r\n    // Placeholder implementation\r\n    throw new Error('Not implemented');\r\n  },\r\n\r\n  async getUserActivities(_userId: string, _limit: number): Promise<UserActivity[]> {\r\n    // Placeholder implementation\r\n    return [];\r\n  },\r\n\r\n  async getUserStats(): Promise<any> {\r\n    // Placeholder implementation\r\n    return {};\r\n  },\r\n};\r\n\r\nexport { userManagementService };\r\nexport default userManagementService;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\services\\validation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\stores\\__tests__\\authStore.test.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":32,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":35,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[295,298],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[295,298],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { describe, it, expect, beforeEach, vi } from 'vitest';\r\nimport { useAuthStore } from '../authStore';\r\nimport { UserRole, Permission } from '../../types/auth';\r\n\r\n// Mock Zustand\r\nvi.mock('zustand', () => ({\r\n  create: vi.fn((fn) => {\r\n    let state = {};\r\n    const setState = (partial: any) => {\r\n      state = { ...state, ...(typeof partial === 'function' ? partial(state) : partial) };\r\n    };\r\n    const getState = () => state;\r\n\r\n    // Initialize state\r\n    state = fn(setState, getState, undefined);\r\n\r\n    return () => state;\r\n  }),\r\n}));\r\n\r\ndescribe('authStore', () => {\r\n  beforeEach(() => {\r\n    // Reset store state before each test\r\n    const store = useAuthStore.getState();\r\n    store.reset();\r\n  });\r\n\r\n  describe('Initial State', () => {\r\n    it('should have correct initial state', () => {\r\n      const state = useAuthStore.getState();\r\n\r\n      expect(state.user).toBe(null);\r\n      expect(state.isAuthenticated).toBe(false);\r\n      expect(state.isLoading).toBe(false);\r\n      expect(state.error).toBe(null);\r\n      expect(state.session).toBe(null);\r\n      expect(state.user?.permissions || []).toEqual([]);\r\n      expect(state.role).toBe(null);\r\n    });\r\n  });\r\n\r\n  describe('Authentication Actions', () => {\r\n    it('should set loading state', () => {\r\n      const { setLoading } = useAuthStore.getState();\r\n\r\n      setLoading(true);\r\n      expect(useAuthStore.getState().isLoading).toBe(true);\r\n\r\n      setLoading(false);\r\n      expect(useAuthStore.getState().isLoading).toBe(false);\r\n    });\r\n\r\n    it('should set error', () => {\r\n      const { setError } = useAuthStore.getState();\r\n      const errorMessage = 'Authentication failed';\r\n\r\n      setError(errorMessage);\r\n      expect(useAuthStore.getState().error).toBe(errorMessage);\r\n    });\r\n\r\n    it('should clear error', () => {\r\n      const { setError, clearError } = useAuthStore.getState();\r\n\r\n      setError('Some error');\r\n      expect(useAuthStore.getState().error).toBe('Some error');\r\n\r\n      clearError();\r\n      expect(useAuthStore.getState().error).toBe(null);\r\n    });\r\n\r\n    it('should set user', () => {\r\n      const { setUser } = useAuthStore.getState();\r\n      const mockUser = {\r\n        id: '123',\r\n        email: 'test@example.com',\r\n        name: 'Test User',\r\n        role: UserRole.ADMIN,\r\n        permissions: [Permission.VIEW_DASHBOARD, Permission.VIEW_DONATIONS],\r\n      };\r\n\r\n      setUser(mockUser);\r\n      const state = useAuthStore.getState();\r\n\r\n      expect(state.user).toEqual(mockUser);\r\n      expect(state.isAuthenticated).toBe(true);\r\n      expect(state.role).toBe(UserRole.ADMIN);\r\n      expect(state.user?.permissions || []).toEqual([Permission.VIEW_DASHBOARD, Permission.VIEW_DONATIONS]);\r\n    });\r\n\r\n    it('should set session', () => {\r\n      const { setSession } = useAuthStore.getState();\r\n      const mockSession = {\r\n        access_token: 'token123',\r\n        refresh_token: 'refresh123',\r\n        expires_in: 3600,\r\n        token_type: 'Bearer',\r\n        user: {\r\n          id: '123',\r\n          email: 'test@example.com',\r\n        },\r\n      };\r\n\r\n      setSession(mockSession);\r\n      expect(useAuthStore.getState().session).toEqual(mockSession);\r\n    });\r\n\r\n    it('should sign out user', () => {\r\n      const { setUser, setSession, signOut } = useAuthStore.getState();\r\n\r\n      // First set a user and session\r\n      setUser({\r\n        id: '123',\r\n        email: 'test@example.com',\r\n        name: 'Test User',\r\n        role: UserRole.ADMIN,\r\n        permissions: [Permission.VIEW_DASHBOARD],\r\n      });\r\n      setSession({\r\n        access_token: 'token',\r\n        refresh_token: 'refresh',\r\n        expires_in: 3600,\r\n        token_type: 'Bearer',\r\n        user: { id: '123', email: 'test@example.com' },\r\n      });\r\n\r\n      // Then sign out\r\n      signOut();\r\n      const state = useAuthStore.getState();\r\n\r\n      expect(state.user).toBe(null);\r\n      expect(state.session).toBe(null);\r\n      expect(state.isAuthenticated).toBe(false);\r\n      expect(state.role).toBe(null);\r\n      expect(state.user?.permissions || []).toEqual([]);\r\n      expect(state.error).toBe(null);\r\n    });\r\n\r\n    it('should reset store', () => {\r\n      const { setUser, setError, setLoading, reset } = useAuthStore.getState();\r\n\r\n      // Set some state\r\n      setUser({\r\n        id: '123',\r\n        email: 'test@example.com',\r\n        name: 'Test User',\r\n        role: 'admin',\r\n        permissions: ['read'],\r\n      });\r\n      setError('Some error');\r\n      setLoading(true);\r\n\r\n      // Reset\r\n      reset();\r\n      const state = useAuthStore.getState();\r\n\r\n      expect(state.user).toBe(null);\r\n      expect(state.isAuthenticated).toBe(false);\r\n      expect(state.isLoading).toBe(false);\r\n      expect(state.error).toBe(null);\r\n      expect(state.session).toBe(null);\r\n      expect(state.permissions).toEqual([]);\r\n      expect(state.role).toBe(null);\r\n    });\r\n  });\r\n\r\n  describe('Permission Checks', () => {\r\n    it('should check if user has permission', () => {\r\n      const { setUser, hasPermission } = useAuthStore.getState();\r\n\r\n      setUser({\r\n        id: '123',\r\n        email: 'test@example.com',\r\n        name: 'Test User',\r\n        role: UserRole.ADMIN,\r\n        permissions: [Permission.VIEW_DASHBOARD, Permission.VIEW_DONATIONS, Permission.DELETE_DONATION],\r\n      });\r\n\r\n      expect(hasPermission(Permission.VIEW_DASHBOARD)).toBe(true);\r\n      expect(hasPermission(Permission.VIEW_DONATIONS)).toBe(true);\r\n      expect(hasPermission(Permission.EDIT_SETTINGS)).toBe(false);\r\n      expect(hasPermission(Permission.CREATE_USER)).toBe(false);\r\n    });\r\n\r\n    it('should return false for permission check when no user', () => {\r\n      const { hasPermission } = useAuthStore.getState();\r\n\r\n      expect(hasPermission('read')).toBe(false);\r\n    });\r\n\r\n    it('should check if user has role', () => {\r\n      const { setUser, hasRole } = useAuthStore.getState();\r\n\r\n      setUser({\r\n        id: '123',\r\n        email: 'test@example.com',\r\n        name: 'Test User',\r\n        role: UserRole.ADMIN,\r\n        permissions: [Permission.VIEW_DASHBOARD, Permission.VIEW_DONATIONS],\r\n      });\r\n\r\n      expect(hasRole(UserRole.ADMIN)).toBe(true);\r\n      expect(hasRole(UserRole.VIEWER)).toBe(false);\r\n      expect(hasRole(UserRole.MANAGER)).toBe(false);\r\n    });\r\n\r\n    it('should return false for role check when no user', () => {\r\n      const { hasRole } = useAuthStore.getState();\r\n\r\n      expect(hasRole(UserRole.ADMIN)).toBe(false);\r\n    });\r\n  });\r\n\r\n  describe('Computed Properties', () => {\r\n    it('should correctly compute isAuthenticated', () => {\r\n      const { setUser } = useAuthStore.getState();\r\n\r\n      expect(useAuthStore.getState().isAuthenticated).toBe(false);\r\n\r\n      setUser({\r\n        id: '123',\r\n        email: 'test@example.com',\r\n        name: 'Test User',\r\n        role: UserRole.VIEWER,\r\n        permissions: [],\r\n      });\r\n\r\n      expect(useAuthStore.getState().isAuthenticated).toBe(true);\r\n    });\r\n\r\n    it('should correctly extract role from user', () => {\r\n      const { setUser } = useAuthStore.getState();\r\n\r\n      setUser({\r\n        id: '123',\r\n        email: 'test@example.com',\r\n        name: 'Test User',\r\n        role: UserRole.MANAGER,\r\n        permissions: [Permission.VIEW_DASHBOARD, Permission.VIEW_DONATIONS, Permission.EDIT_DONATION, Permission.DELETE_DONATION],\r\n      });\r\n\r\n      expect(useAuthStore.getState().role).toBe(UserRole.MANAGER);\r\n    });\r\n\r\n    it('should correctly extract permissions from user', () => {\r\n      const { setUser } = useAuthStore.getState();\r\n      const permissions = [Permission.VIEW_DASHBOARD, Permission.VIEW_DONATIONS, Permission.EDIT_DONATION, Permission.DELETE_DONATION];\r\n\r\n      setUser({\r\n        id: '123',\r\n        email: 'test@example.com',\r\n        name: 'Test User',\r\n        role: 'admin',\r\n        permissions,\r\n      });\r\n\r\n      expect(useAuthStore.getState().user?.permissions || []).toEqual(permissions);\r\n    });\r\n  });\r\n\r\n  describe('Error Handling', () => {\r\n    it('should handle authentication errors', () => {\r\n      const { setError, setLoading } = useAuthStore.getState();\r\n\r\n      setLoading(true);\r\n      setError('Invalid credentials');\r\n\r\n      const state = useAuthStore.getState();\r\n      expect(state.isLoading).toBe(true);\r\n      expect(state.error).toBe('Invalid credentials');\r\n      expect(state.isAuthenticated).toBe(false);\r\n    });\r\n\r\n    it('should clear error on successful authentication', () => {\r\n      const { setError, setUser, clearError } = useAuthStore.getState();\r\n\r\n      setError('Previous error');\r\n      expect(useAuthStore.getState().error).toBe('Previous error');\r\n\r\n      clearError();\r\n      setUser({\r\n        id: '123',\r\n        email: 'test@example.com',\r\n        name: 'Test User',\r\n        role: 'user',\r\n        permissions: [],\r\n      });\r\n\r\n      const state = useAuthStore.getState();\r\n      expect(state.error).toBe(null);\r\n      expect(state.isAuthenticated).toBe(true);\r\n    });\r\n  });\r\n});\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\stores\\__tests__\\notificationStore.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\stores\\authStore.ts","messages":[{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":117,"column":18,"nodeType":"MemberExpression","endLine":117,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import type { Session, User as SupabaseUser } from '@supabase/supabase-js';\r\nimport { toast } from 'sonner';\r\nimport { create } from 'zustand';\r\nimport { devtools, persist, subscribeWithSelector } from 'zustand/middleware';\r\nimport { immer } from 'zustand/middleware/immer';\r\nimport { supabase } from '../lib/supabase';\r\nimport { authLogger } from '../lib/logging';\r\nimport { ROLE_PERMISSIONS, UserRole, type Permission } from '../types/auth';\r\n\r\n// Error type for Supabase auth operations\r\ninterface AuthError {\r\n  message: string;\r\n  status?: number;\r\n  statusText?: string;\r\n}\r\n\r\n// Mutable version of User interface for Zustand store\r\ninterface User {\r\n  id: string;\r\n  email: string;\r\n  name: string;\r\n  role: UserRole;\r\n  avatar?: string;\r\n  permissions: Permission[];\r\n  metadata?: Record<string, unknown>;\r\n  lastLogin?: Date;\r\n  isActive: boolean;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n}\r\n\r\ninterface AuthState {\r\n  // Auth state\r\n  user: User | null;\r\n  session: Session | null;\r\n  isAuthenticated: boolean;\r\n  isLoading: boolean;\r\n  isInitialized: boolean;\r\n  error: string | null;\r\n\r\n  // UI state\r\n  showLoginModal: boolean;\r\n  rememberMe: boolean;\r\n  loginAttempts: number;\r\n  lastLoginAttempt?: Date;\r\n\r\n  // Session management\r\n  sessionExpiresAt?: Date;\r\n  refreshPromise?: Promise<void>;\r\n}\r\n\r\ninterface AuthActions {\r\n  // Authentication actions\r\n  login: (email: string, password: string, rememberMe?: boolean) => Promise<void>;\r\n  logout: () => Promise<void>;\r\n  register: (userData: RegisterData) => Promise<void>;\r\n  resetPassword: (email: string) => Promise<void>;\r\n  updateProfile: (userData: Partial<User>) => Promise<void>;\r\n\r\n  // Session management\r\n  initializeAuth: () => Promise<void>;\r\n  refreshSession: () => Promise<void>;\r\n  checkSessionExpiry: () => void;\r\n\r\n  // UI actions\r\n  setShowLoginModal: (show: boolean) => void;\r\n  clearError: () => void;\r\n  setRememberMe: (remember: boolean) => void;\r\n\r\n  // Permission helpers\r\n  hasPermission: (permission: Permission) => boolean;\r\n  hasRole: (role: UserRole) => boolean;\r\n  hasAnyPermission: (permissions: Permission[]) => boolean;\r\n  hasAllPermissions: (permissions: Permission[]) => boolean;\r\n\r\n  // Internal actions\r\n  setUser: (user: User | null) => void;\r\n  setSession: (session: Session | null) => void;\r\n  setLoading: (loading: boolean) => void;\r\n  setError: (error: string | null) => void;\r\n  incrementLoginAttempts: () => void;\r\n  resetLoginAttempts: () => void;\r\n}\r\n\r\ninterface RegisterData {\r\n  email: string;\r\n  password: string;\r\n  name: string;\r\n  role?: UserRole;\r\n}\r\n\r\ntype AuthStore = AuthState & AuthActions;\r\n\r\n// Build User object from Supabase User\r\nconst buildUserFromSupabaseUser = (supabaseUser: SupabaseUser): User => {\r\n  const metadata = supabaseUser.user_metadata;\r\n  const appMetadata = supabaseUser.app_metadata;\r\n\r\n  let role: UserRole = UserRole.VIEWER;\r\n  if (appMetadata.role && Object.values(UserRole).includes(appMetadata.role as UserRole)) {\r\n    role = appMetadata.role as UserRole;\r\n  } else if (metadata.role && Object.values(UserRole).includes(metadata.role as UserRole)) {\r\n    role = metadata.role as UserRole;\r\n  }\r\n\r\n  const {email} = supabaseUser;\r\n  if (!email) {\r\n    throw new Error('User email is required');\r\n  }\r\n\r\n  return {\r\n    id: supabaseUser.id,\r\n    email,\r\n    name: (metadata.name as string) || (metadata.full_name as string) || email.split('@')[0] || 'User',\r\n    role,\r\n    avatar: (metadata.avatar_url as string) || (appMetadata.avatar_url as string),\r\n    permissions: ROLE_PERMISSIONS[role],\r\n    metadata: { ...metadata, ...appMetadata },\r\n    lastLogin: supabaseUser.last_sign_in_at ? new Date(supabaseUser.last_sign_in_at) : undefined,\r\n    isActive: true,\r\n    createdAt: new Date(supabaseUser.created_at),\r\n    updatedAt: new Date(supabaseUser.updated_at ?? supabaseUser.created_at),\r\n  };\r\n};\r\n\r\n// Session management helpers\r\nconst isSessionExpired = (session: Session | null): boolean => {\r\n  if (!session?.expires_at) return true;\r\n  const expiresAt = session.expires_at * 1000;\r\n  const now = Date.now();\r\n  const bufferTime = 5 * 60 * 1000; // 5 minutes buffer\r\n  return expiresAt - bufferTime <= now;\r\n};\r\n\r\nconst shouldRefreshSession = (session: Session | null): boolean => {\r\n  if (!session?.expires_at) return false;\r\n  const expiresAt = session.expires_at * 1000;\r\n  const now = Date.now();\r\n  const refreshThreshold = 10 * 60 * 1000; // Refresh 10 minutes before expiry\r\n  return expiresAt - refreshThreshold <= now;\r\n};\r\n\r\nexport const useAuthStore = create<AuthStore>()(\r\n  devtools(\r\n    subscribeWithSelector(\r\n      persist(\r\n        immer((set, get) => ({\r\n          // Initial state\r\n          user: null,\r\n          session: null,\r\n          isAuthenticated: false,\r\n          isLoading: false,\r\n          isInitialized: false,\r\n          error: null,\r\n          showLoginModal: false,\r\n          rememberMe: false,\r\n          loginAttempts: 0,\r\n\r\n          // Initialize authentication\r\n          initializeAuth: async () => {\r\n            set((state) => {\r\n              state.isLoading = true;\r\n              state.error = null;\r\n            });\r\n\r\n            try {\r\n\r\n              // Get initial session\r\n              const {\r\n                data: { session },\r\n                error,\r\n              } = await supabase.auth.getSession();\r\n\r\n              if (error) {\r\n                authLogger.error('getting session', error);\r\n                set((state) => {\r\n                  state.error = error.message;\r\n                  state.isLoading = false;\r\n                  state.isInitialized = true;\r\n                });\r\n                return;\r\n              }\r\n\r\n              if (session?.user && session.expires_at) {\r\n                const user = buildUserFromSupabaseUser(session.user);\r\n                set((state) => {\r\n                  state.user = user;\r\n                  state.session = session;\r\n                  state.isAuthenticated = true;\r\n                  state.sessionExpiresAt = session.expires_at\r\n                    ? new Date(session.expires_at * 1000)\r\n                    : undefined;\r\n                });\r\n              }\r\n\r\n              set((state) => {\r\n                state.isLoading = false;\r\n                state.isInitialized = true;\r\n              });\r\n\r\n              // Setup auth state listener\r\n              supabase.auth.onAuthStateChange((event, session) => {\r\n                const store = get();\r\n\r\n                try {\r\n                  if (event === 'SIGNED_IN' && session?.user && session.expires_at) {\r\n                    const user = buildUserFromSupabaseUser(session.user);\r\n                    set((state) => {\r\n                      state.user = user;\r\n                      state.session = session;\r\n                      state.isAuthenticated = true;\r\n                      state.error = null;\r\n                      state.sessionExpiresAt = session.expires_at\r\n                        ? new Date(session.expires_at * 1000)\r\n                        : undefined;\r\n                    });\r\n\r\n                    store.resetLoginAttempts();\r\n                  } else if (event === 'SIGNED_OUT') {\r\n                    set((state) => {\r\n                      state.user = null;\r\n                      state.session = null;\r\n                      state.isAuthenticated = false;\r\n                      state.error = null;\r\n                      state.sessionExpiresAt = undefined;\r\n                    });\r\n                  } else if (event === 'TOKEN_REFRESHED' && session?.user && session.expires_at) {\r\n                    const user = buildUserFromSupabaseUser(session.user);\r\n                    set((state) => {\r\n                      state.user = user;\r\n                      state.session = session;\r\n                      state.sessionExpiresAt = session.expires_at\r\n                        ? new Date(session.expires_at * 1000)\r\n                        : undefined;\r\n                      state.error = null;\r\n                    });\r\n                  }\r\n                } catch (error) {\r\n                  authLogger.error('auth state change', error);\r\n                  set((state) => {\r\n                    state.error = 'Kimlik do─şrulama hatas─▒';\r\n                  });\r\n                }\r\n              });\r\n            } catch (error) {\r\n              authLogger.error('auth initialization', error);\r\n              set((state) => {\r\n                state.error = 'Kimlik do─şrulama ba┼şlat─▒lamad─▒';\r\n                state.isLoading = false;\r\n                state.isInitialized = true;\r\n              });\r\n            }\r\n          },\r\n\r\n          // Login action\r\n          login: async (email: string, password: string, rememberMe = false) => {\r\n            const state = get();\r\n\r\n            // Rate limiting\r\n            if (state.loginAttempts >= 5) {\r\n              const lastAttempt = state.lastLoginAttempt;\r\n              if (lastAttempt && Date.now() - lastAttempt.getTime() < 15 * 60 * 1000) {\r\n                throw new Error('├çok fazla deneme. 15 dakika sonra tekrar deneyin.');\r\n              } else {\r\n                get().resetLoginAttempts();\r\n              }\r\n            }\r\n\r\n            set((state) => {\r\n              state.isLoading = true;\r\n              state.error = null;\r\n              state.rememberMe = rememberMe;\r\n            });\r\n\r\n            try {\r\n              const { data, error } = await supabase.auth.signInWithPassword({\r\n                email,\r\n                password,\r\n              });\r\n\r\n              if (error) {\r\n                get().incrementLoginAttempts();\r\n                throw error;\r\n              }\r\n\r\n              const user = buildUserFromSupabaseUser(data.user);\r\n\r\n              set((state) => {\r\n                state.user = user;\r\n                state.session = data.session;\r\n                state.isAuthenticated = true;\r\n                state.isLoading = false;\r\n                state.error = null;\r\n                state.sessionExpiresAt = data.session.expires_at\r\n                  ? new Date(data.session.expires_at * 1000)\r\n                  : undefined;\r\n              });\r\n\r\n              get().resetLoginAttempts();\r\n\r\n              // Removed welcome toast notification\r\n            } catch (error: unknown) {\r\n              let errorMessage = 'Giri┼ş yap─▒lamad─▒';\r\n\r\n              if (error && typeof error === 'object' && 'message' in error) {\r\n                const authError = error as AuthError;\r\n                switch (authError.message) {\r\n                  case 'Invalid login credentials':\r\n                    errorMessage = 'Ge├ğersiz email veya ┼şifre';\r\n                    break;\r\n                  case 'Email not confirmed':\r\n                    errorMessage = 'Email adresinizi do─şrulay─▒n';\r\n                    break;\r\n                  case 'Too many requests':\r\n                    errorMessage = '├çok fazla deneme. L├╝tfen bekleyin';\r\n                    break;\r\n                  default:\r\n                    errorMessage = authError.message || 'Giri┼ş yap─▒lamad─▒';\r\n                }\r\n              }\r\n\r\n              set((state) => {\r\n                state.isLoading = false;\r\n                state.error = errorMessage;\r\n              });\r\n\r\n              toast.error(errorMessage, { duration: 4000 });\r\n              throw new Error(errorMessage);\r\n            }\r\n          },\r\n\r\n          // Logout action\r\n          logout: async () => {\r\n            try {\r\n              const { error } = await supabase.auth.signOut();\r\n\r\n              if (error) {\r\n                throw error;\r\n              }\r\n\r\n              set((state) => {\r\n                state.user = null;\r\n                state.session = null;\r\n                state.isAuthenticated = false;\r\n                state.error = null;\r\n                state.sessionExpiresAt = undefined;\r\n                state.showLoginModal = false;\r\n              });\r\n\r\n              toast.success('Ba┼şar─▒yla ├ğ─▒k─▒┼ş yapt─▒n─▒z', { duration: 2000 });\r\n            } catch (error: unknown) {\r\n              authLogger.error('logout', error);\r\n              toast.error('├ç─▒k─▒┼ş yap─▒l─▒rken hata olu┼ştu', { duration: 3000 });\r\n            }\r\n          },\r\n\r\n          // Register action\r\n          register: async (userData: RegisterData) => {\r\n            set((state) => {\r\n              state.isLoading = true;\r\n              state.error = null;\r\n            });\r\n\r\n            try {\r\n              const { error } = await supabase.auth.signUp({\r\n                email: userData.email,\r\n                password: userData.password,\r\n                options: {\r\n                  data: {\r\n                    name: userData.name,\r\n                    role: userData.role ?? UserRole.VIEWER,\r\n                  },\r\n                },\r\n              });\r\n\r\n              if (error) {\r\n                throw error;\r\n              }\r\n\r\n              toast.success('Kay─▒t ba┼şar─▒l─▒! Email adresinizi do─şrulay─▒n.', {\r\n                duration: 5000,\r\n              });\r\n\r\n              set((state) => {\r\n                state.isLoading = false;\r\n              });\r\n            } catch (error: unknown) {\r\n              let errorMessage = 'Kay─▒t olu┼şturulamad─▒';\r\n\r\n              if (error && typeof error === 'object' && 'message' in error) {\r\n                const authError = error as AuthError;\r\n                switch (authError.message) {\r\n                  case 'User already registered':\r\n                    errorMessage = 'Bu email adresi zaten kay─▒tl─▒';\r\n                    break;\r\n                  case 'Password should be at least 6 characters':\r\n                    errorMessage = '┼Şifre en az 6 karakter olmal─▒d─▒r';\r\n                    break;\r\n                  default:\r\n                    errorMessage = authError.message || 'Kay─▒t olu┼şturulamad─▒';\r\n                }\r\n              }\r\n\r\n              set((state) => {\r\n                state.isLoading = false;\r\n                state.error = errorMessage;\r\n              });\r\n\r\n              toast.error(errorMessage, { duration: 4000 });\r\n              throw new Error(errorMessage);\r\n            }\r\n          },\r\n\r\n          // Reset password action\r\n          resetPassword: async (email: string) => {\r\n            try {\r\n              const { error } = await supabase.auth.resetPasswordForEmail(email, {\r\n                redirectTo: `${window.location.origin}/reset-password`,\r\n              });\r\n\r\n              if (error) {\r\n                throw error;\r\n              }\r\n\r\n              toast.success('┼Şifre s─▒f─▒rlama ba─şlant─▒s─▒ email adresinize g├Ânderildi', {\r\n                duration: 5000,\r\n              });\r\n            } catch (error: unknown) {\r\n              const errorMessage = (error && typeof error === 'object' && 'message' in error) \r\n                ? (error as AuthError).message \r\n                : '┼Şifre s─▒f─▒rlama ba─şlant─▒s─▒ g├Ânderilemedi';\r\n              toast.error(errorMessage, { duration: 4000 });\r\n              throw new Error(errorMessage);\r\n            }\r\n          },\r\n\r\n          // Update profile action\r\n          updateProfile: async (userData: Partial<User>) => {\r\n            const { user } = get();\r\n            if (!user) {\r\n              throw new Error('Kullan─▒c─▒ oturumu bulunamad─▒');\r\n            }\r\n\r\n            try {\r\n              const { error } = await supabase.auth.updateUser({\r\n                data: {\r\n                  name: userData.name,\r\n                  avatar_url: userData.avatar,\r\n                  ...userData.metadata,\r\n                },\r\n              });\r\n\r\n              if (error) {\r\n                throw error;\r\n              }\r\n\r\n              const updatedUser = { ...user, ...userData, updatedAt: new Date() };\r\n              set((state) => {\r\n                state.user = updatedUser;\r\n              });\r\n\r\n              toast.success('Profil ba┼şar─▒yla g├╝ncellendi', { duration: 3000 });\r\n            } catch (error: unknown) {\r\n              const errorMessage = (error && typeof error === 'object' && 'message' in error) \r\n                ? (error as AuthError).message \r\n                : 'Profil g├╝ncellenemedi';\r\n              toast.error(errorMessage, { duration: 4000 });\r\n              throw new Error(errorMessage);\r\n            }\r\n          },\r\n\r\n          // Session management\r\n          refreshSession: async () => {\r\n            const { refreshPromise } = get();\r\n\r\n            // Prevent multiple simultaneous refresh attempts\r\n            if (refreshPromise) {\r\n              return refreshPromise;\r\n            }\r\n\r\n            const promise = (async () => {\r\n              try {\r\n                const { data, error } = await supabase.auth.refreshSession();\r\n\r\n                if (error) {\r\n                  throw error;\r\n                }\r\n\r\n                if (data.session?.user) {\r\n                  const user = buildUserFromSupabaseUser(data.session.user);\r\n                  set((state) => {\r\n                    state.user = user;\r\n                    state.session = data.session;\r\n                    state.sessionExpiresAt = data.session\r\n                      ? data.session.expires_at\r\n                        ? new Date(data.session.expires_at * 1000)\r\n                        : undefined\r\n                      : undefined;\r\n                    state.error = null;\r\n                  });\r\n                }\r\n              } catch (error) {\r\n                authLogger.error('session refresh', error);\r\n                await get().logout();\r\n              } finally {\r\n                set((state) => {\r\n                  state.refreshPromise = undefined;\r\n                });\r\n              }\r\n            })();\r\n\r\n            set((state) => {\r\n              state.refreshPromise = promise;\r\n            });\r\n\r\n            return promise;\r\n          },\r\n\r\n          checkSessionExpiry: () => {\r\n            const { session, isAuthenticated } = get();\r\n\r\n            if (!isAuthenticated || !session) return;\r\n\r\n            if (isSessionExpired(session)) {\r\n              get().logout();\r\n              toast.error('Oturumunuz sona erdi. L├╝tfen tekrar giri┼ş yap─▒n.', {\r\n                duration: 5000,\r\n              });\r\n            } else if (shouldRefreshSession(session)) {\r\n              get().refreshSession();\r\n            }\r\n          },\r\n\r\n          // Permission helpers\r\n          hasPermission: (permission: Permission) => {\r\n            const { user, isAuthenticated } = get();\r\n            if (!user || !isAuthenticated) return false;\r\n            return user.permissions.includes(permission);\r\n          },\r\n\r\n          hasRole: (role: UserRole) => {\r\n            const { user, isAuthenticated } = get();\r\n            if (!user || !isAuthenticated) return false;\r\n            return user.role === role;\r\n          },\r\n\r\n          hasAnyPermission: (permissions: Permission[]) => {\r\n            const { user, isAuthenticated } = get();\r\n            if (!user || !isAuthenticated) return false;\r\n            return permissions.some((permission) => user.permissions.includes(permission));\r\n          },\r\n\r\n          hasAllPermissions: (permissions: Permission[]) => {\r\n            const { user, isAuthenticated } = get();\r\n            if (!user || !isAuthenticated) return false;\r\n            return permissions.every((permission) => user.permissions.includes(permission));\r\n          },\r\n\r\n          // UI actions\r\n          setShowLoginModal: (show: boolean) => {\r\n            set((state) => {\r\n              state.showLoginModal = show;\r\n            });\r\n          },\r\n\r\n          clearError: () => {\r\n            set((state) => {\r\n              state.error = null;\r\n            });\r\n          },\r\n\r\n          setRememberMe: (remember: boolean) => {\r\n            set((state) => {\r\n              state.rememberMe = remember;\r\n            });\r\n          },\r\n\r\n          // Internal actions\r\n          setUser: (user: User | null) => {\r\n            set((state) => {\r\n              state.user = user;\r\n            });\r\n          },\r\n\r\n          setSession: (session: Session | null) => {\r\n            set((state) => {\r\n              state.session = session;\r\n            });\r\n          },\r\n\r\n          setLoading: (loading: boolean) => {\r\n            set((state) => {\r\n              state.isLoading = loading;\r\n            });\r\n          },\r\n\r\n          setError: (error: string | null) => {\r\n            set((state) => {\r\n              state.error = error;\r\n            });\r\n          },\r\n\r\n          incrementLoginAttempts: () => {\r\n            set((state) => {\r\n              state.loginAttempts += 1;\r\n              state.lastLoginAttempt = new Date();\r\n            });\r\n          },\r\n\r\n          resetLoginAttempts: () => {\r\n            set((state) => {\r\n              state.loginAttempts = 0;\r\n              state.lastLoginAttempt = undefined;\r\n            });\r\n          },\r\n        })),\r\n        {\r\n          name: 'auth-store',\r\n          partialize: (state) => ({\r\n            rememberMe: state.rememberMe,\r\n            loginAttempts: state.loginAttempts,\r\n            lastLoginAttempt: state.lastLoginAttempt,\r\n          }),\r\n          version: 1,\r\n        },\r\n      ),\r\n    ),\r\n  ),\r\n);\r\n\r\n// Session expiry checker - runs every minute\r\nif (typeof window !== 'undefined') {\r\n  setInterval(() => {\r\n    useAuthStore.getState().checkSessionExpiry();\r\n  }, 60 * 1000);\r\n}\r\n\r\n// Selectors for performance optimization\r\nexport const authSelectors = {\r\n  user: (state: AuthStore) => state.user,\r\n  isAuthenticated: (state: AuthStore) => state.isAuthenticated,\r\n  isLoading: (state: AuthStore) => state.isLoading,\r\n  error: (state: AuthStore) => state.error,\r\n  permissions: (state: AuthStore) => state.user?.permissions ?? [],\r\n  role: (state: AuthStore) => state.user?.role,\r\n  session: (state: AuthStore) => state.session,\r\n  sessionExpiresAt: (state: AuthStore) => state.sessionExpiresAt,\r\n};\r\n\r\n// Export authStore with getState method\r\nexport const authStore = useAuthStore;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\stores\\index.ts","messages":[{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useCallback has an unnecessary dependency: 'notificationStore'. Either exclude it or remove the dependency array.","line":52,"column":6,"nodeType":"ArrayExpression","endLine":52,"endColumn":25,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[2061,2080],"text":"[]"}}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":90,"column":13,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":90,"endColumn":21},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always falsy.","line":93,"column":13,"nodeType":"UnaryExpression","messageId":"alwaysFalsy","endLine":93,"endColumn":21},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":122,"column":13,"nodeType":"ChainExpression","messageId":"alwaysTruthy","endLine":122,"endColumn":47},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":122,"column":33,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":122,"endColumn":35,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[4361,4363],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-confusing-void-expression","severity":2,"message":"Placing a void expression inside another expression is forbidden. Move it to its own statement instead.","line":123,"column":17,"nodeType":"CallExpression","messageId":"invalidVoidExpr","endLine":123,"endColumn":52},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, value is always truthy.","line":125,"column":13,"nodeType":"ChainExpression","messageId":"alwaysTruthy","endLine":125,"endColumn":45},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":125,"column":31,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":125,"endColumn":33,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[4475,4477],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-confusing-void-expression","severity":2,"message":"Placing a void expression inside another expression is forbidden. Move it to its own statement instead.","line":126,"column":17,"nodeType":"CallExpression","messageId":"invalidVoidExpr","endLine":126,"endColumn":50},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":141,"column":28,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":141,"endColumn":63},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":141,"column":48,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":141,"endColumn":50,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[5045,5047],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":142,"column":26,"nodeType":"ChainExpression","messageId":"neverNullish","endLine":142,"endColumn":59},{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary optional chain on a non-nullish value.","line":142,"column":44,"nodeType":"MemberExpression","messageId":"neverOptionalChain","endLine":142,"endColumn":46,"suggestions":[{"messageId":"suggestRemoveOptionalChain","fix":{"range":[5114,5116],"text":"."},"desc":"Remove unnecessary optional chain"}]},{"ruleId":"react-hooks/exhaustive-deps","severity":1,"message":"React Hook useMemo has unnecessary dependencies: 'authStore', 'notificationStore', and 'uiStore'. Either exclude them or remove the dependency array.","line":145,"column":7,"nodeType":"ArrayExpression","endLine":145,"endColumn":46,"suggestions":[{"desc":"Update the dependencies array to be: []","fix":{"range":[5196,5235],"text":"[]"}}]}],"suppressedMessages":[],"errorCount":2,"fatalErrorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Store exports for easy importing\r\nexport { useAuthStore, authSelectors, authStore } from './authStore';\r\n// Mock notification store (database table not available)\r\nexport { useNotificationStore, notificationSelectors } from './notificationStore';\r\nexport { useUIStore, uiSelectors, uiStore } from './uiStore';\r\n\r\n// Import logger for proper error handling\r\nimport { storeLogger } from '../lib/logging';\r\n\r\n// Store types\r\n// Mock notification types (database table not available)\r\nexport type { NotificationState } from './notificationStore';\r\n\r\n// Store initialization hook\r\nimport { useEffect, useState, useCallback, useMemo } from 'react';\r\nimport { useAuthStore } from './authStore';\r\nimport { useNotificationStore } from './notificationStore';\r\nimport { useUIStore } from './uiStore';\r\n\r\n// Store initialization hook with improved type safety and performance\r\nexport function useStoreInitialization() {\r\n  // Store instances with proper typing\r\n  const authStore = useAuthStore();\r\n  const notificationStore = useNotificationStore();\r\n  const uiStore = useUIStore();\r\n\r\n  // Initialization state\r\n  const [isInitialized, setIsInitialized] = useState(false);\r\n  const [error, setError] = useState<Error | null>(null);\r\n\r\n  // Memoize initialization functions to prevent unnecessary re-renders\r\n  const initializeAuth = useCallback(async () => {\r\n    try {\r\n      await authStore.initializeAuth();\r\n      storeLogger.info('Auth store initialized');\r\n      return true;\r\n    } catch (err) {\r\n      storeLogger.error('Auth store initialization failed', err instanceof Error ? err : new Error('Unknown error'));\r\n      return false;\r\n    }\r\n  }, [authStore]);\r\n\r\n  const initializeNotifications = useCallback(async () => {\r\n    try {\r\n      // await notificationStore.startRealtimeSubscription();\r\n      storeLogger.info('Notification store initialized');\r\n      return true;\r\n    } catch (err) {\r\n      storeLogger.error('Notification store initialization failed', err instanceof Error ? err : new Error('Unknown error'));\r\n      return false;\r\n    }\r\n  }, [notificationStore]);\r\n\r\n  const initializeUI = useCallback(async () => {\r\n    try {\r\n      // Check if window is defined for SSR compatibility\r\n      if (typeof window !== 'undefined') {\r\n        const isMobile = window.innerWidth <= 768;\r\n        uiStore.setIsMobile(isMobile);\r\n\r\n        // Add resize listener for mobile detection\r\n        const handleResize = () => {\r\n          uiStore.setIsMobile(window.innerWidth <= 768);\r\n        };\r\n        window.addEventListener('resize', handleResize);\r\n        return () => { window.removeEventListener('resize', handleResize); };\r\n      }\r\n      storeLogger.info('UI store initialized');\r\n      return true;\r\n    } catch (err) {\r\n      storeLogger.error('UI store initialization failed', err instanceof Error ? err : new Error('Unknown error'));\r\n      return false;\r\n    }\r\n  }, [uiStore]);\r\n\r\n  // Initialize stores on mount\r\n  useEffect(() => {\r\n    let mounted = true;\r\n    let cleanup: (() => void) | undefined;\r\n\r\n    const initialize = async () => {\r\n      try {\r\n        setError(null);\r\n\r\n        // Initialize stores in sequence\r\n        const authSuccess = await initializeAuth();\r\n        if (!mounted || !authSuccess) return;\r\n\r\n        const notificationSuccess = await initializeNotifications();\r\n        if (!mounted || !notificationSuccess) return;\r\n\r\n        const uiCleanup = await initializeUI();\r\n        if (!mounted) {\r\n          if (typeof uiCleanup === 'function') uiCleanup();\r\n          return;\r\n        }\r\n        cleanup = typeof uiCleanup === 'function' ? uiCleanup : undefined;\r\n\r\n        setIsInitialized(true);\r\n        storeLogger.info('All stores initialized successfully');\r\n      } catch (err) {\r\n        if (!mounted) return;\r\n        const error = err instanceof Error ? err : new Error('Store initialization failed');\r\n        setError(error);\r\n        storeLogger.error('Store initialization failed', error);\r\n      }\r\n    };\r\n\r\n    initialize();\r\n\r\n    return () => {\r\n      mounted = false;\r\n      if (cleanup) cleanup();\r\n    };\r\n  }, [initializeAuth, initializeNotifications, initializeUI]);\r\n\r\n  // Memoize store utils to prevent unnecessary re-renders\r\n  const storeUtils = useMemo(() => ({\r\n    resetStores: async () => {\r\n      try {\r\n        // Clear persisted state\r\n        if (useAuthStore.persist?.clearStorage) {\r\n          await useAuthStore.persist.clearStorage();\r\n        }\r\n        if (useUIStore.persist?.clearStorage) {\r\n          await useUIStore.persist.clearStorage();\r\n        }\r\n        storeLogger.info('Store state cleared');\r\n        return true;\r\n      } catch (err) {\r\n        storeLogger.error('Failed to clear store state', err instanceof Error ? err : new Error('Unknown error'));\r\n        return false;\r\n      }\r\n    },\r\n    getStoreStates: () => ({\r\n      auth: useAuthStore.getState(),\r\n      notification: useNotificationStore.getState(),\r\n      ui: useUIStore.getState(),\r\n    }),\r\n    isHydrated: () => {\r\n      const authHydrated = useAuthStore.persist?.hasHydrated() ?? true;\r\n      const uiHydrated = useUIStore.persist?.hasHydrated() ?? true;\r\n      return authHydrated && uiHydrated;\r\n    },\r\n  }), [authStore, notificationStore, uiStore]);\r\n\r\n  return {\r\n    isInitialized,\r\n    error,\r\n    ...storeUtils,\r\n  };\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\stores\\notificationStore.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":29,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":32,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[522,525],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[522,525],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_state' is defined but never used.","line":106,"column":28,"nodeType":null,"messageId":"unusedVar","endLine":106,"endColumn":34},{"ruleId":"no-console","severity":1,"message":"Unexpected console statement.","line":109,"column":13,"nodeType":"MemberExpression","messageId":"unexpected","endLine":109,"endColumn":26,"suggestions":[{"fix":{"range":[3413,3473],"text":""},"messageId":"removeConsole","data":{"propertyName":"error"},"desc":"Remove the console.error()."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\r\nimport { persist, createJSONStorage } from 'zustand/middleware';\r\n\r\nimport { logger } from '../lib/logging/logger';\r\n\r\nexport interface NotificationState {\r\n  id: string;\r\n  userId: string;\r\n  title: string;\r\n  message: string;\r\n  type: 'info' | 'success' | 'warning' | 'error';\r\n  category: 'member' | 'donation' | 'aid' | 'campaign' | 'system' | 'general';\r\n  read: boolean;\r\n  readAt?: Date;\r\n  createdAt: Date;\r\n  updatedAt: Date;\r\n  actionUrl?: string;\r\n  metadata?: Record<string, any>;\r\n  expiresAt?: Date;\r\n  priority: 'low' | 'medium' | 'high' | 'urgent';\r\n  source: 'system' | 'user' | 'external';\r\n  persistent: boolean;\r\n}\r\n\r\ninterface NotificationStoreState {\r\n  notifications: NotificationState[];\r\n  unreadCount: number;\r\n  showNotificationCenter: boolean;\r\n}\r\n\r\ninterface NotificationStoreActions {\r\n  addNotification: (\r\n    notification: Omit<NotificationState, 'id' | 'createdAt' | 'updatedAt' | 'read'>,\r\n  ) => void;\r\n  markAsRead: (notificationId: string) => void;\r\n  markAllAsRead: () => void;\r\n  removeNotification: (notificationId: string) => void;\r\n  clearAllNotifications: () => void;\r\n  updateUnreadCount: () => void;\r\n  setShowNotificationCenter: (show: boolean) => void;\r\n}\r\n\r\nconst generateId = () => Math.random().toString(36).substr(2, 9);\r\n\r\nexport const useNotificationStore = create<NotificationStoreState & NotificationStoreActions>()(\r\n  persist(\r\n    (set, get) => ({\r\n      notifications: [],\r\n      unreadCount: 0,\r\n      showNotificationCenter: false,\r\n      addNotification: (notification) => {\r\n        const newNotification: NotificationState = {\r\n          ...notification,\r\n          id: generateId(),\r\n          createdAt: new Date(),\r\n          updatedAt: new Date(),\r\n          read: false,\r\n        };\r\n        set((state) => ({\r\n          notifications: [newNotification, ...state.notifications],\r\n        }));\r\n        get().updateUnreadCount();\r\n      },\r\n      markAsRead: (notificationId) => {\r\n        set((state) => ({\r\n          notifications: state.notifications.map((n) =>\r\n            n.id === notificationId\r\n              ? { ...n, read: true, readAt: new Date(), updatedAt: new Date() }\r\n              : n,\r\n          ),\r\n        }));\r\n        get().updateUnreadCount();\r\n      },\r\n      markAllAsRead: () => {\r\n        set((state) => ({\r\n          notifications: state.notifications.map((n) => ({\r\n            ...n,\r\n            read: true,\r\n            readAt: new Date(),\r\n            updatedAt: new Date(),\r\n          })),\r\n        }));\r\n        get().updateUnreadCount();\r\n      },\r\n      removeNotification: (notificationId) => {\r\n        set((state) => ({\r\n          notifications: state.notifications.filter((n) => n.id !== notificationId),\r\n        }));\r\n        get().updateUnreadCount();\r\n      },\r\n      clearAllNotifications: () => {\r\n        set({ notifications: [], unreadCount: 0 });\r\n      },\r\n      setShowNotificationCenter: (show: boolean) => {\r\n        set({ showNotificationCenter: show });\r\n      },\r\n      updateUnreadCount: () => {\r\n        set((state) => ({\r\n          unreadCount: state.notifications.filter((n) => !n.read).length,\r\n        }));\r\n      },\r\n    }),\r\n    {\r\n      name: 'notification-storage',\r\n      storage: createJSONStorage(() => localStorage),\r\n      onRehydrateStorage: (_state) => {\r\n        return (hydratedState, error) => {\r\n          if (error) {\r\n            console.error('An error occurred during hydration:', error);\r\n          } else if (hydratedState) {\r\n            hydratedState.updateUnreadCount();\r\n          }\r\n        };\r\n      },\r\n    },\r\n  ),\r\n);\r\n\r\nexport const notificationSelectors = {\r\n  getUnreadNotifications: (state: NotificationStoreState) =>\r\n    state.notifications.filter((n) => !n.read),\r\n  getNotificationsByCategory: (\r\n    state: NotificationStoreState,\r\n    category: NotificationState['category'],\r\n  ) => state.notifications.filter((n) => n.category === category),\r\n  getNotificationsByType: (state: NotificationStoreState, type: NotificationState['type']) =>\r\n    state.notifications.filter((n) => n.type === type),\r\n  getRecentNotifications: (state: NotificationStoreState, limit = 5) =>\r\n    state.notifications.slice(0, limit),\r\n  getHighPriorityNotifications: (state: NotificationStoreState) =>\r\n    state.notifications.filter((n) => ['high', 'urgent'].includes(n.priority)),\r\n  getUnreadCount: (state: NotificationStoreState) => state.unreadCount,\r\n  getTotalCount: (state: NotificationStoreState) => state.notifications.length,\r\n  startRealtimeSubscription: () => {\r\n    logger.info('Realtime subscription started (mock)');\r\n    return Promise.resolve();\r\n  },\r\n  getState: () => useNotificationStore.getState(),\r\n};\r\n\r\nexport default useNotificationStore;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\stores\\safeInit.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":9,"column":16,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":9,"endColumn":19,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[204,207],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[204,207],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_error' is defined but never used.","line":11,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":18},{"ruleId":"unused-imports/no-unused-vars","severity":1,"message":"'_error' is defined but never used.","line":11,"column":12,"nodeType":null,"messageId":"unusedVar","endLine":11,"endColumn":18},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":18,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":18,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[401,404],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[401,404],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * Production-ready store initialization\r\n * Simplified for better maintainability\r\n */\r\n\r\nexport function initializeStoresSafely() {\r\n  try {\r\n    // Mark initialization as complete\r\n    (window as any).__storeInitialized = true;\r\n    return true;\r\n  } catch (_error) {\r\n    // Error logging removed for production\r\n    return false;\r\n  }\r\n}\r\n\r\n// Auto-export for app initialization\r\n(window as any).__storeInit = initializeStoresSafely;\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\stores\\uiStore.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":33,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":36,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[960,963],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[960,963],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":103,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":103,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2915,2918],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2915,2918],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":104,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":104,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2968,2971],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2968,2971],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-unused-vars","severity":2,"message":"'_get' is defined but never used.","line":208,"column":21,"nodeType":null,"messageId":"unusedVar","endLine":208,"endColumn":25},{"ruleId":"security/detect-object-injection","severity":1,"message":"Function Call Object Injection Sink","line":280,"column":71,"nodeType":"MemberExpression","endLine":280,"endColumn":86},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":343,"column":60,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":343,"endColumn":62,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[9755,9757],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":428,"column":54,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":428,"endColumn":57,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12261,12264],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12261,12264],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":434,"column":46,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":434,"endColumn":49,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[12434,12437],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[12434,12437],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":437,"column":24,"nodeType":"MemberExpression","endLine":437,"endColumn":48},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":439,"column":17,"nodeType":"MemberExpression","endLine":439,"endColumn":41},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":446,"column":22,"nodeType":"MemberExpression","endLine":446,"endColumn":46},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":466,"column":17,"nodeType":"MemberExpression","endLine":466,"endColumn":44},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":468,"column":24,"nodeType":"MemberExpression","endLine":468,"endColumn":51},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":476,"column":17,"nodeType":"MemberExpression","endLine":476,"endColumn":50},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":478,"column":24,"nodeType":"MemberExpression","endLine":478,"endColumn":57},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":659,"column":60,"nodeType":"MemberExpression","endLine":659,"endColumn":87},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":661,"column":5,"nodeType":"MemberExpression","endLine":661,"endColumn":38}],"suppressedMessages":[],"errorCount":1,"fatalErrorCount":0,"warningCount":16,"fixableErrorCount":0,"fixableWarningCount":0,"source":"import { create } from 'zustand';\r\nimport { subscribeWithSelector, devtools, persist } from 'zustand/middleware';\r\nimport { immer } from 'zustand/middleware/immer';\r\n\r\ninterface UIState {\r\n  // Layout state\r\n  sidebarCollapsed: boolean;\r\n  sidebarWidth: number;\r\n  headerHeight: number;\r\n\r\n  // Theme and appearance\r\n  theme: 'light' | 'dark' | 'system';\r\n  accentColor: string;\r\n  fontSize: 'small' | 'medium' | 'large';\r\n  compactMode: boolean;\r\n\r\n  // Mobile specific\r\n  isMobile: boolean;\r\n  showMobileNav: boolean;\r\n  mobileNavTab: string;\r\n  keyboardHeight: number;\r\n\r\n  // Modal and overlay state\r\n  activeModal: string | null;\r\n  modalStack: string[];\r\n  overlayVisible: boolean;\r\n\r\n  // Page state\r\n  activeModule: string;\r\n  currentPage: string;\r\n  currentSubPage: string;\r\n  pageHistory: string[];\r\n\r\n  // Search and filters\r\n  globalSearchQuery: string;\r\n  globalSearchVisible: boolean;\r\n  filtersVisible: boolean;\r\n  activeFilters: Record<string, any>;\r\n\r\n  // Loading states\r\n  globalLoading: boolean;\r\n  moduleLoading: Record<string, boolean>;\r\n  componentLoading: Record<string, boolean>;\r\n\r\n  // Toast and notifications UI\r\n  toastPosition: 'top-left' | 'top-right' | 'bottom-left' | 'bottom-right';\r\n  maxToasts: number;\r\n\r\n  // Performance settings\r\n  animationsEnabled: boolean;\r\n  reducedMotion: boolean;\r\n  preloadData: boolean;\r\n  cacheEnabled: boolean;\r\n\r\n  // Accessibility\r\n  highContrast: boolean;\r\n  screenReaderMode: boolean;\r\n  keyboardNavigation: boolean;\r\n  focusVisible: boolean;\r\n\r\n  // Developer tools\r\n  debugMode: boolean;\r\n  performanceMonitoring: boolean;\r\n  showGridOverlay: boolean;\r\n}\r\n\r\ninterface UIActions {\r\n  // Layout actions\r\n  toggleSidebar: () => void;\r\n  setSidebarCollapsed: (collapsed: boolean) => void;\r\n  setSidebarWidth: (width: number) => void;\r\n  setHeaderHeight: (height: number) => void;\r\n\r\n  // Theme actions\r\n  setTheme: (theme: UIState['theme']) => void;\r\n  setAccentColor: (color: string) => void;\r\n  setFontSize: (size: UIState['fontSize']) => void;\r\n  toggleCompactMode: () => void;\r\n\r\n  // Mobile actions\r\n  setIsMobile: (isMobile: boolean) => void;\r\n  setShowMobileNav: (show: boolean) => void;\r\n  setMobileNavTab: (tab: string) => void;\r\n  setKeyboardHeight: (height: number) => void;\r\n\r\n  // Modal and overlay actions\r\n  openModal: (modalId: string) => void;\r\n  closeModal: (modalId?: string) => void;\r\n  closeAllModals: () => void;\r\n  setOverlayVisible: (visible: boolean) => void;\r\n\r\n  // Navigation actions\r\n  setActiveModule: (module: string) => void;\r\n  setCurrentPage: (page: string) => void;\r\n  setCurrentSubPage: (subPage: string) => void;\r\n  navigateBack: () => void;\r\n  clearPageHistory: () => void;\r\n\r\n  // Search and filter actions\r\n  setGlobalSearchQuery: (query: string) => void;\r\n  setGlobalSearchVisible: (visible: boolean) => void;\r\n  setFiltersVisible: (visible: boolean) => void;\r\n  setActiveFilters: (filters: Record<string, any>) => void;\r\n  updateFilter: (key: string, value: any) => void;\r\n  clearFilter: (key: string) => void;\r\n  clearAllFilters: () => void;\r\n\r\n  // Loading actions\r\n  setGlobalLoading: (loading: boolean) => void;\r\n  setModuleLoading: (module: string, loading: boolean) => void;\r\n  setComponentLoading: (component: string, loading: boolean) => void;\r\n  clearAllLoading: () => void;\r\n\r\n  // Settings actions\r\n  updateSettings: (settings: Partial<Omit<UIState, keyof UIActions>>) => void;\r\n  resetSettings: () => void;\r\n\r\n  // Toast actions\r\n  setToastPosition: (position: UIState['toastPosition']) => void;\r\n  setMaxToasts: (max: number) => void;\r\n\r\n  // Performance actions\r\n  setAnimationsEnabled: (enabled: boolean) => void;\r\n  setReducedMotion: (reduced: boolean) => void;\r\n  togglePerformanceMode: () => void;\r\n\r\n  // Accessibility actions\r\n  setHighContrast: (enabled: boolean) => void;\r\n  setScreenReaderMode: (enabled: boolean) => void;\r\n  setKeyboardNavigation: (enabled: boolean) => void;\r\n  setFocusVisible: (visible: boolean) => void;\r\n\r\n  // Developer actions\r\n  setDebugMode: (enabled: boolean) => void;\r\n  setPerformanceMonitoring: (enabled: boolean) => void;\r\n  toggleGridOverlay: () => void;\r\n}\r\n\r\ntype UIStore = UIState & UIActions;\r\n\r\n// Default settings\r\nconst defaultSettings: UIState = {\r\n  // Layout\r\n  sidebarCollapsed: false,\r\n  sidebarWidth: 280,\r\n  headerHeight: 64,\r\n\r\n  // Theme\r\n  theme: 'system',\r\n  accentColor: '#2563eb',\r\n  fontSize: 'medium',\r\n  compactMode: false,\r\n\r\n  // Mobile\r\n  isMobile: false,\r\n  showMobileNav: false,\r\n  mobileNavTab: 'genel',\r\n  keyboardHeight: 0,\r\n\r\n  // Modals\r\n  activeModal: null,\r\n  modalStack: [],\r\n  overlayVisible: false,\r\n\r\n  // Navigation\r\n  activeModule: 'genel',\r\n  currentPage: 'list',\r\n  currentSubPage: '',\r\n  pageHistory: [],\r\n\r\n  // Search\r\n  globalSearchQuery: '',\r\n  globalSearchVisible: false,\r\n  filtersVisible: false,\r\n  activeFilters: {},\r\n\r\n  // Loading\r\n  globalLoading: false,\r\n  moduleLoading: {},\r\n  componentLoading: {},\r\n\r\n  // Toast\r\n  toastPosition: 'bottom-right',\r\n  maxToasts: 5,\r\n\r\n  // Performance\r\n  animationsEnabled: true,\r\n  reducedMotion: false,\r\n  preloadData: true,\r\n  cacheEnabled: true,\r\n\r\n  // Accessibility\r\n  highContrast: false,\r\n  screenReaderMode: false,\r\n  keyboardNavigation: false,\r\n  focusVisible: false,\r\n\r\n  // Developer\r\n  debugMode: false,\r\n  performanceMonitoring: false,\r\n  showGridOverlay: false,\r\n};\r\n\r\nexport const useUIStore = create<UIStore>()(\r\n  devtools(\r\n    subscribeWithSelector(\r\n      persist(\r\n        immer((set, _get) => ({\r\n          ...defaultSettings,\r\n\r\n          // Layout actions\r\n          toggleSidebar: () => {\r\n            set((state) => {\r\n              state.sidebarCollapsed = !state.sidebarCollapsed;\r\n            });\r\n          },\r\n\r\n          setSidebarCollapsed: (collapsed: boolean) => {\r\n            set((state) => {\r\n              state.sidebarCollapsed = collapsed;\r\n            });\r\n          },\r\n\r\n          setSidebarWidth: (width: number) => {\r\n            set((state) => {\r\n              state.sidebarWidth = Math.max(200, Math.min(400, width));\r\n            });\r\n          },\r\n\r\n          setHeaderHeight: (height: number) => {\r\n            set((state) => {\r\n              state.headerHeight = Math.max(48, Math.min(80, height));\r\n            });\r\n          },\r\n\r\n          // Theme actions\r\n          setTheme: (theme: UIState['theme']) => {\r\n            set((state) => {\r\n              state.theme = theme;\r\n            });\r\n\r\n            // Apply theme to document\r\n            const root = document.documentElement;\r\n            if (theme === 'dark') {\r\n              root.classList.add('dark');\r\n            } else if (theme === 'light') {\r\n              root.classList.remove('dark');\r\n            } else {\r\n              // System theme\r\n              const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;\r\n              if (prefersDark) {\r\n                root.classList.add('dark');\r\n              } else {\r\n                root.classList.remove('dark');\r\n              }\r\n            }\r\n          },\r\n\r\n          setAccentColor: (color: string) => {\r\n            set((state) => {\r\n              state.accentColor = color;\r\n            });\r\n\r\n            // Apply accent color to CSS variables\r\n            document.documentElement.style.setProperty('--color-primary', color);\r\n            document.documentElement.style.setProperty('--color-accent', color);\r\n          },\r\n\r\n          setFontSize: (size: UIState['fontSize']) => {\r\n            set((state) => {\r\n              state.fontSize = size;\r\n            });\r\n\r\n            // Apply font size to document\r\n            const fontSizes = {\r\n              small: '14px',\r\n              medium: '16px',\r\n              large: '18px',\r\n            };\r\n            document.documentElement.style.setProperty('--font-size', fontSizes[size]);\r\n          },\r\n\r\n          toggleCompactMode: () => {\r\n            set((state) => {\r\n              state.compactMode = !state.compactMode;\r\n            });\r\n          },\r\n\r\n          // Mobile actions\r\n          setIsMobile: (isMobile: boolean) => {\r\n            set((state) => {\r\n              state.isMobile = isMobile;\r\n              // Auto-collapse sidebar on mobile\r\n              if (isMobile && !state.sidebarCollapsed) {\r\n                state.sidebarCollapsed = true;\r\n              }\r\n            });\r\n          },\r\n\r\n          setShowMobileNav: (show: boolean) => {\r\n            set((state) => {\r\n              state.showMobileNav = show;\r\n            });\r\n          },\r\n\r\n          setMobileNavTab: (tab: string) => {\r\n            set((state) => {\r\n              state.mobileNavTab = tab;\r\n            });\r\n          },\r\n\r\n          setKeyboardHeight: (height: number) => {\r\n            set((state) => {\r\n              state.keyboardHeight = Math.max(0, height);\r\n            });\r\n          },\r\n\r\n          // Modal actions\r\n          openModal: (modalId: string) => {\r\n            set((state) => {\r\n              // Close existing modal if any\r\n              if (state.activeModal) {\r\n                state.modalStack.push(state.activeModal);\r\n              }\r\n              state.activeModal = modalId;\r\n              state.overlayVisible = true;\r\n            });\r\n          },\r\n\r\n          closeModal: (modalId?: string) => {\r\n            set((state) => {\r\n              if (modalId && state.activeModal !== modalId) {\r\n                // Remove from stack if it exists\r\n                const index = state.modalStack.indexOf(modalId);\r\n                if (index > -1) {\r\n                  state.modalStack.splice(index, 1);\r\n                }\r\n                return;\r\n              }\r\n\r\n              // Close current modal\r\n              if (state.modalStack.length > 0) {\r\n                state.activeModal = state.modalStack.pop() || null;\r\n              } else {\r\n                state.activeModal = null;\r\n                state.overlayVisible = false;\r\n              }\r\n            });\r\n          },\r\n\r\n          closeAllModals: () => {\r\n            set((state) => {\r\n              state.activeModal = null;\r\n              state.modalStack = [];\r\n              state.overlayVisible = false;\r\n            });\r\n          },\r\n\r\n          setOverlayVisible: (visible: boolean) => {\r\n            set((state) => {\r\n              state.overlayVisible = visible;\r\n            });\r\n          },\r\n\r\n          // Navigation actions\r\n          setActiveModule: (module: string) => {\r\n            set((state) => {\r\n              if (state.activeModule !== module) {\r\n                state.pageHistory.push(state.activeModule);\r\n                state.activeModule = module;\r\n                state.currentPage = 'list'; // Reset to list view\r\n                state.currentSubPage = '';\r\n              }\r\n            });\r\n          },\r\n\r\n          setCurrentPage: (page: string) => {\r\n            set((state) => {\r\n              if (state.currentPage !== page) {\r\n                state.pageHistory.push(state.currentPage);\r\n                state.currentPage = page;\r\n              }\r\n            });\r\n          },\r\n\r\n          setCurrentSubPage: (subPage: string) => {\r\n            set((state) => {\r\n              state.currentSubPage = subPage;\r\n            });\r\n          },\r\n\r\n          navigateBack: () => {\r\n            set((state) => {\r\n              if (state.pageHistory.length > 0) {\r\n                const previousPage = state.pageHistory.pop();\r\n                if (previousPage) {\r\n                  state.currentPage = previousPage;\r\n                }\r\n              }\r\n            });\r\n          },\r\n\r\n          clearPageHistory: () => {\r\n            set((state) => {\r\n              state.pageHistory = [];\r\n            });\r\n          },\r\n\r\n          // Search and filter actions\r\n          setGlobalSearchQuery: (query: string) => {\r\n            set((state) => {\r\n              state.globalSearchQuery = query;\r\n            });\r\n          },\r\n\r\n          setGlobalSearchVisible: (visible: boolean) => {\r\n            set((state) => {\r\n              state.globalSearchVisible = visible;\r\n            });\r\n          },\r\n\r\n          setFiltersVisible: (visible: boolean) => {\r\n            set((state) => {\r\n              state.filtersVisible = visible;\r\n            });\r\n          },\r\n\r\n          setActiveFilters: (filters: Record<string, any>) => {\r\n            set((state) => {\r\n              state.activeFilters = { ...filters };\r\n            });\r\n          },\r\n\r\n          updateFilter: (key: string, value: any) => {\r\n            set((state) => {\r\n              if (value === null || value === undefined || value === '') {\r\n                delete state.activeFilters[key];\r\n              } else {\r\n                state.activeFilters[key] = value;\r\n              }\r\n            });\r\n          },\r\n\r\n          clearFilter: (key: string) => {\r\n            set((state) => {\r\n              delete state.activeFilters[key];\r\n            });\r\n          },\r\n\r\n          clearAllFilters: () => {\r\n            set((state) => {\r\n              state.activeFilters = {};\r\n            });\r\n          },\r\n\r\n          // Loading actions\r\n          setGlobalLoading: (loading: boolean) => {\r\n            set((state) => {\r\n              state.globalLoading = loading;\r\n            });\r\n          },\r\n\r\n          setModuleLoading: (module: string, loading: boolean) => {\r\n            set((state) => {\r\n              if (loading) {\r\n                state.moduleLoading[module] = true;\r\n              } else {\r\n                delete state.moduleLoading[module];\r\n              }\r\n            });\r\n          },\r\n\r\n          setComponentLoading: (component: string, loading: boolean) => {\r\n            set((state) => {\r\n              if (loading) {\r\n                state.componentLoading[component] = true;\r\n              } else {\r\n                delete state.componentLoading[component];\r\n              }\r\n            });\r\n          },\r\n\r\n          clearAllLoading: () => {\r\n            set((state) => {\r\n              state.globalLoading = false;\r\n              state.moduleLoading = {};\r\n              state.componentLoading = {};\r\n            });\r\n          },\r\n\r\n          // Settings actions\r\n          updateSettings: (settings: Partial<Omit<UIState, keyof UIActions>>) => {\r\n            set((state) => {\r\n              Object.assign(state, settings);\r\n            });\r\n          },\r\n\r\n          resetSettings: () => {\r\n            set((state) => {\r\n              Object.assign(state, defaultSettings);\r\n            });\r\n          },\r\n\r\n          // Toast actions\r\n          setToastPosition: (position: UIState['toastPosition']) => {\r\n            set((state) => {\r\n              state.toastPosition = position;\r\n            });\r\n          },\r\n\r\n          setMaxToasts: (max: number) => {\r\n            set((state) => {\r\n              state.maxToasts = Math.max(1, Math.min(10, max));\r\n            });\r\n          },\r\n\r\n          // Performance actions\r\n          setAnimationsEnabled: (enabled: boolean) => {\r\n            set((state) => {\r\n              state.animationsEnabled = enabled;\r\n            });\r\n          },\r\n\r\n          setReducedMotion: (reduced: boolean) => {\r\n            set((state) => {\r\n              state.reducedMotion = reduced;\r\n              state.animationsEnabled = !reduced;\r\n            });\r\n          },\r\n\r\n          togglePerformanceMode: () => {\r\n            set((state) => {\r\n              const isPerformanceMode = !state.animationsEnabled && !state.preloadData;\r\n              state.animationsEnabled = isPerformanceMode;\r\n              state.preloadData = isPerformanceMode;\r\n              state.cacheEnabled = true; // Always keep cache enabled\r\n            });\r\n          },\r\n\r\n          // Accessibility actions\r\n          setHighContrast: (enabled: boolean) => {\r\n            set((state) => {\r\n              state.highContrast = enabled;\r\n            });\r\n\r\n            // Apply high contrast mode\r\n            const root = document.documentElement;\r\n            if (enabled) {\r\n              root.classList.add('high-contrast');\r\n            } else {\r\n              root.classList.remove('high-contrast');\r\n            }\r\n          },\r\n\r\n          setScreenReaderMode: (enabled: boolean) => {\r\n            set((state) => {\r\n              state.screenReaderMode = enabled;\r\n            });\r\n          },\r\n\r\n          setKeyboardNavigation: (enabled: boolean) => {\r\n            set((state) => {\r\n              state.keyboardNavigation = enabled;\r\n            });\r\n          },\r\n\r\n          setFocusVisible: (visible: boolean) => {\r\n            set((state) => {\r\n              state.focusVisible = visible;\r\n            });\r\n          },\r\n\r\n          // Developer actions\r\n          setDebugMode: (enabled: boolean) => {\r\n            set((state) => {\r\n              state.debugMode = enabled;\r\n            });\r\n          },\r\n\r\n          setPerformanceMonitoring: (enabled: boolean) => {\r\n            set((state) => {\r\n              state.performanceMonitoring = enabled;\r\n            });\r\n          },\r\n\r\n          toggleGridOverlay: () => {\r\n            set((state) => {\r\n              state.showGridOverlay = !state.showGridOverlay;\r\n            });\r\n          },\r\n        })),\r\n        {\r\n          name: 'ui-store',\r\n          partialize: (state) => ({\r\n            // Persist user preferences\r\n            theme: state.theme,\r\n            accentColor: state.accentColor,\r\n            fontSize: state.fontSize,\r\n            compactMode: state.compactMode,\r\n            sidebarCollapsed: state.sidebarCollapsed,\r\n            sidebarWidth: state.sidebarWidth,\r\n            toastPosition: state.toastPosition,\r\n            maxToasts: state.maxToasts,\r\n            animationsEnabled: state.animationsEnabled,\r\n            reducedMotion: state.reducedMotion,\r\n            preloadData: state.preloadData,\r\n            cacheEnabled: state.cacheEnabled,\r\n            highContrast: state.highContrast,\r\n            screenReaderMode: state.screenReaderMode,\r\n            keyboardNavigation: state.keyboardNavigation,\r\n            debugMode: state.debugMode,\r\n            performanceMonitoring: state.performanceMonitoring,\r\n          }),\r\n          version: 1,\r\n        },\r\n      ),\r\n      'ui-store',\r\n    ),\r\n  ),\r\n);\r\n\r\n// Initialize theme on store creation\r\nif (typeof window !== 'undefined') {\r\n  // Listen for system theme changes\r\n  const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');\r\n  const handleThemeChange = () => {\r\n    const { theme } = useUIStore.getState();\r\n    if (theme === 'system') {\r\n      useUIStore.getState().setTheme('system');\r\n    }\r\n  };\r\n\r\n  mediaQuery.addEventListener('change', handleThemeChange);\r\n\r\n  // Listen for reduced motion preference\r\n  const reducedMotionQuery = window.matchMedia('(prefers-reduced-motion: reduce)');\r\n  const handleReducedMotionChange = () => {\r\n    useUIStore.getState().setReducedMotion(reducedMotionQuery.matches);\r\n  };\r\n\r\n  reducedMotionQuery.addEventListener('change', handleReducedMotionChange);\r\n\r\n  // Initialize reduced motion\r\n  useUIStore.getState().setReducedMotion(reducedMotionQuery.matches);\r\n}\r\n\r\n// Selectors for performance optimization\r\nexport const uiSelectors = {\r\n  theme: (state: UIStore) => state.theme,\r\n  isMobile: (state: UIStore) => state.isMobile,\r\n  sidebarCollapsed: (state: UIStore) => state.sidebarCollapsed,\r\n  activeModule: (state: UIStore) => state.activeModule,\r\n  currentPage: (state: UIStore) => state.currentPage,\r\n  globalLoading: (state: UIStore) => state.globalLoading,\r\n  activeModal: (state: UIStore) => state.activeModal,\r\n  globalSearchVisible: (state: UIStore) => state.globalSearchVisible,\r\n  activeFilters: (state: UIStore) => state.activeFilters,\r\n  animationsEnabled: (state: UIStore) => state.animationsEnabled,\r\n  isModuleLoading: (module: string) => (state: UIStore) => state.moduleLoading[module] || false,\r\n  isComponentLoading: (component: string) => (state: UIStore) =>\r\n    state.componentLoading[component] || false,\r\n};\r\n\r\n// Export uiStore with getState method\r\nexport const uiStore = useUIStore;","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\types\\__tests__\\validation.test.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\types\\auth.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\types\\beneficiary.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":361,"column":9,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":361,"endColumn":12,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[8847,8850],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[8847,8850],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview Beneficiary Types - ─░htiya├ğ sahipleri tip tan─▒mlar─▒\r\n * \r\n * @author Dernek Y├Ânetim Sistemi Team\r\n * @version 1.0.0\r\n */\r\n\r\nimport type { BaseEntity } from '../services/baseService';\r\n\r\n/**\r\n * ─░htiya├ğ sahibi durumlar─▒\r\n */\r\nexport type BeneficiaryStatus = 'active' | 'completed' | 'suspended' | 'deleted';\r\n\r\n/**\r\n * ├ûncelik seviyeleri\r\n */\r\nexport type BeneficiaryPriority = 'low' | 'medium' | 'high' | 'urgent';\r\n\r\n/**\r\n * ─░htiya├ğ t├╝rleri\r\n */\r\nexport type NeedType = \r\n  | 'food'           // G─▒da\r\n  | 'clothing'       // Giyim\r\n  | 'shelter'        // Bar─▒nma\r\n  | 'medical'        // T─▒bbi\r\n  | 'education'      // E─şitim\r\n  | 'transportation' // Ula┼ş─▒m\r\n  | 'utilities'      // Faturalar\r\n  | 'other';         // Di─şer\r\n\r\n/**\r\n * Aile durumu\r\n */\r\nexport type FamilyStatus = 'single' | 'married' | 'widowed' | 'divorced' | 'separated';\r\n\r\n/**\r\n * ─░htiya├ğ sahibi ana interface'i\r\n */\r\nexport interface Beneficiary extends BaseEntity {\r\n  /** ─░htiya├ğ sahibinin ad─▒ */\r\n  name: string;\r\n  /** ─░htiya├ğ sahibinin soyad─▒ */\r\n  surname: string;\r\n  /** Tam ad (name + surname) */\r\n  full_name: string;\r\n  /** Telefon numaras─▒ */\r\n  phone: string;\r\n  /** E-posta adresi */\r\n  email?: string;\r\n  /** Do─şum tarihi */\r\n  birth_date?: string;\r\n  /** Cinsiyet */\r\n  gender?: 'male' | 'female' | 'other';\r\n  /** Kimlik numaras─▒ */\r\n  identity_number?: string;\r\n  /** Adres bilgisi */\r\n  address: string;\r\n  /** ┼Şehir */\r\n  city: string;\r\n  /** ─░l├ğe */\r\n  district?: string;\r\n  /** Posta kodu */\r\n  postal_code?: string;\r\n  /** Aile durumu */\r\n  family_status?: FamilyStatus;\r\n  /** ├çocuk say─▒s─▒ */\r\n  children_count?: number;\r\n  /** Aile birey say─▒s─▒ */\r\n  family_members_count?: number;\r\n  /** Ayl─▒k gelir */\r\n  monthly_income?: number;\r\n  /** Gelir kayna─ş─▒ */\r\n  income_source?: string;\r\n  /** ─░htiya├ğ t├╝rleri */\r\n  need_types: NeedType[];\r\n  /** ├ûncelik seviyesi */\r\n  priority: BeneficiaryPriority;\r\n  /** Durum */\r\n  status: BeneficiaryStatus;\r\n  /** A├ğ─▒klama */\r\n  description?: string;\r\n  /** Notlar */\r\n  notes?: string;\r\n  /** Belge dosyalar─▒ */\r\n  documents?: string[];\r\n  /** Foto─şraflar */\r\n  photos?: string[];\r\n  /** ─░lk de─şerlendirme tarihi */\r\n  first_assessment_date?: string;\r\n  /** Son de─şerlendirme tarihi */\r\n  last_assessment_date?: string;\r\n  /** Sonraki de─şerlendirme tarihi */\r\n  next_assessment_date?: string;\r\n  /** Yard─▒m miktar─▒ */\r\n  assistance_amount?: number;\r\n  /** Yard─▒m t├╝r├╝ */\r\n  assistance_type?: string;\r\n  /** Yard─▒m tarihi */\r\n  assistance_date?: string;\r\n  /** Referans ki┼şi */\r\n  reference_person?: string;\r\n  /** Referans telefonu */\r\n  reference_phone?: string;\r\n  /** Sosyal medya hesaplar─▒ */\r\n  social_media?: {\r\n    facebook?: string;\r\n    instagram?: string;\r\n    twitter?: string;\r\n    linkedin?: string;\r\n  };\r\n  /** Acil durum ileti┼şim bilgileri */\r\n  emergency_contact?: {\r\n    name: string;\r\n    phone: string;\r\n    relationship: string;\r\n  };\r\n  /** ├ûzel durumlar */\r\n  special_conditions?: string[];\r\n  /** Engellilik durumu */\r\n  disability_status?: boolean;\r\n  /** Engellilik t├╝r├╝ */\r\n  disability_type?: string;\r\n  /** Sa─şl─▒k durumu */\r\n  health_status?: string;\r\n  /** ─░la├ğ kullan─▒m─▒ */\r\n  medication_usage?: string;\r\n  /** Alerjiler */\r\n  allergies?: string[];\r\n  /** Kan grubu */\r\n  blood_type?: string;\r\n  /** E─şitim durumu */\r\n  education_level?: string;\r\n  /** Meslek */\r\n  occupation?: string;\r\n  /** ─░┼ş durumu */\r\n  employment_status?: 'employed' | 'unemployed' | 'retired' | 'student' | 'disabled';\r\n  /** Dil bilgisi */\r\n  languages?: string[];\r\n  /** Hobi ve ilgi alanlar─▒ */\r\n  hobbies?: string[];\r\n  /** G├Ân├╝ll├╝ ├ğal─▒┼şma deneyimi */\r\n  volunteer_experience?: string;\r\n  /** Ba┼şvuru tarihi */\r\n  application_date: string;\r\n  /** Onay tarihi */\r\n  approval_date?: string;\r\n  /** Red tarihi */\r\n  rejection_date?: string;\r\n  /** Red sebebi */\r\n  rejection_reason?: string;\r\n  /** G├Ân├╝ll├╝ atamas─▒ */\r\n  assigned_volunteer?: string;\r\n  /** Takip eden ki┼şi */\r\n  follow_up_person?: string;\r\n  /** Son g├╝ncelleme notu */\r\n  last_update_note?: string;\r\n}\r\n\r\n/**\r\n * ─░htiya├ğ sahibi olu┼şturma i├ğin interface\r\n */\r\nexport interface BeneficiaryInsert extends Omit<Beneficiary, 'id' | 'created_at' | 'updated_at'> {\r\n  /** ID otomatik olu┼şturulur */\r\n  id?: never;\r\n  /** Olu┼şturma tarihi otomatik set edilir */\r\n  created_at?: never;\r\n  /** G├╝ncelleme tarihi otomatik set edilir */\r\n  updated_at?: never;\r\n}\r\n\r\n/**\r\n * ─░htiya├ğ sahibi g├╝ncelleme i├ğin interface\r\n */\r\nexport interface BeneficiaryUpdate extends Partial<Omit<Beneficiary, 'id' | 'created_at' | 'updated_at'>> {\r\n  /** ID de─şi┼ştirilemez */\r\n  id?: never;\r\n  /** Olu┼şturma tarihi de─şi┼ştirilemez */\r\n  created_at?: never;\r\n  /** G├╝ncelleme tarihi otomatik set edilir */\r\n  updated_at?: never;\r\n}\r\n\r\n/**\r\n * ─░htiya├ğ sahibi filtreleri\r\n */\r\nexport interface BeneficiaryFilters {\r\n  /** Arama terimi */\r\n  searchTerm?: string;\r\n  /** Durum filtresi */\r\n  status?: BeneficiaryStatus;\r\n  /** ├ûncelik filtresi */\r\n  priority?: BeneficiaryPriority;\r\n  /** ┼Şehir filtresi */\r\n  city?: string;\r\n  /** ─░l├ğe filtresi */\r\n  district?: string;\r\n  /** ─░htiya├ğ t├╝r├╝ filtresi */\r\n  needType?: NeedType;\r\n  /** Aile durumu filtresi */\r\n  familyStatus?: FamilyStatus;\r\n  /** Ya┼ş aral─▒─ş─▒ */\r\n  ageRange?: {\r\n    min: number;\r\n    max: number;\r\n  };\r\n  /** Gelir aral─▒─ş─▒ */\r\n  incomeRange?: {\r\n    min: number;\r\n    max: number;\r\n  };\r\n  /** Ba┼şvuru tarihi aral─▒─ş─▒ */\r\n  applicationDateRange?: {\r\n    from: string;\r\n    to: string;\r\n  };\r\n  /** Engellilik durumu */\r\n  hasDisability?: boolean;\r\n  /** ├çocuk say─▒s─▒ */\r\n  hasChildren?: boolean;\r\n  /** Belge durumu */\r\n  hasDocuments?: boolean;\r\n  /** Foto─şraf durumu */\r\n  hasPhotos?: boolean;\r\n  /** G├Ân├╝ll├╝ atamas─▒ */\r\n  hasAssignedVolunteer?: boolean;\r\n  /** Takip eden ki┼şi */\r\n  hasFollowUpPerson?: boolean;\r\n}\r\n\r\n/**\r\n * ─░htiya├ğ sahibi istatistikleri\r\n */\r\nexport interface BeneficiaryStats {\r\n  /** Toplam say─▒ */\r\n  total: number;\r\n  /** Aktif say─▒ */\r\n  active: number;\r\n  /** Tamamlanan say─▒ */\r\n  completed: number;\r\n  /** Ask─▒ya al─▒nan say─▒ */\r\n  suspended: number;\r\n  /** Silinen say─▒ */\r\n  deleted: number;\r\n  /** Acil durum say─▒s─▒ */\r\n  urgent: number;\r\n  /** ┼Şehir baz─▒nda da─ş─▒l─▒m */\r\n  byCity: Record<string, number>;\r\n  /** ─░htiya├ğ t├╝r├╝ baz─▒nda da─ş─▒l─▒m */\r\n  byNeedType: Record<NeedType, number>;\r\n  /** ├ûncelik baz─▒nda da─ş─▒l─▒m */\r\n  byPriority: Record<BeneficiaryPriority, number>;\r\n  /** Aile durumu baz─▒nda da─ş─▒l─▒m */\r\n  byFamilyStatus: Record<FamilyStatus, number>;\r\n  /** Ya┼ş gruplar─▒ */\r\n  byAgeGroup: Record<string, number>;\r\n  /** Gelir gruplar─▒ */\r\n  byIncomeGroup: Record<string, number>;\r\n  /** Ayl─▒k trend */\r\n  monthlyTrend: {\r\n    month: string;\r\n    count: number;\r\n  }[];\r\n}\r\n\r\n/**\r\n * ─░htiya├ğ sahibi form verisi\r\n */\r\nexport interface BeneficiaryFormData {\r\n  /** Ki┼şisel bilgiler */\r\n  personalInfo: {\r\n    name: string;\r\n    surname: string;\r\n    phone: string;\r\n    email?: string;\r\n    birthDate?: string;\r\n    gender?: 'male' | 'female' | 'other';\r\n    identityNumber?: string;\r\n  };\r\n  /** Adres bilgileri */\r\n  addressInfo: {\r\n    address: string;\r\n    city: string;\r\n    district?: string;\r\n    postalCode?: string;\r\n  };\r\n  /** Aile bilgileri */\r\n  familyInfo: {\r\n    familyStatus?: FamilyStatus;\r\n    childrenCount?: number;\r\n    familyMembersCount?: number;\r\n    monthlyIncome?: number;\r\n    incomeSource?: string;\r\n  };\r\n  /** ─░htiya├ğ bilgileri */\r\n  needInfo: {\r\n    needTypes: NeedType[];\r\n    priority: BeneficiaryPriority;\r\n    description?: string;\r\n    specialConditions?: string[];\r\n  };\r\n  /** Sa─şl─▒k bilgileri */\r\n  healthInfo?: {\r\n    healthStatus?: string;\r\n    medicationUsage?: string;\r\n    allergies?: string[];\r\n    bloodType?: string;\r\n    disabilityStatus?: boolean;\r\n    disabilityType?: string;\r\n  };\r\n  /** ─░leti┼şim bilgileri */\r\n  contactInfo?: {\r\n    referencePerson?: string;\r\n    referencePhone?: string;\r\n    emergencyContact?: {\r\n      name: string;\r\n      phone: string;\r\n      relationship: string;\r\n    };\r\n  };\r\n  /** Di─şer bilgiler */\r\n  otherInfo?: {\r\n    educationLevel?: string;\r\n    occupation?: string;\r\n    employmentStatus?: 'employed' | 'unemployed' | 'retired' | 'student' | 'disabled';\r\n    languages?: string[];\r\n    hobbies?: string[];\r\n    volunteerExperience?: string;\r\n  };\r\n  /** Belge ve foto─şraflar */\r\n  documents?: {\r\n    files: File[];\r\n    photos: File[];\r\n  };\r\n}\r\n\r\n/**\r\n * ─░htiya├ğ sahibi arama sonu├ğlar─▒\r\n */\r\nexport interface BeneficiarySearchResult {\r\n  /** ─░htiya├ğ sahibi bilgileri */\r\n  beneficiary: Beneficiary;\r\n  /** Arama skoru */\r\n  score: number;\r\n  /** E┼şle┼şen alanlar */\r\n  matchedFields: string[];\r\n}\r\n\r\n/**\r\n * ─░htiya├ğ sahibi raporu\r\n */\r\nexport interface BeneficiaryReport {\r\n  /** Rapor ID'si */\r\n  id: string;\r\n  /** Rapor t├╝r├╝ */\r\n  type: 'summary' | 'detailed' | 'statistical';\r\n  /** Olu┼şturulma tarihi */\r\n  createdAt: string;\r\n  /** Rapor verisi */\r\n  data: any;\r\n  /** Rapor format─▒ */\r\n  format: 'json' | 'csv' | 'pdf' | 'excel';\r\n  /** Rapor boyutu */\r\n  size: number;\r\n  /** ─░ndirme linki */\r\n  downloadUrl?: string;\r\n}","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\types\\consultation.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\types\\data.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\types\\database.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":1000,"column":38,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":1000,"endColumn":41,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[37462,37465],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[37462,37465],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export type Json = string | number | boolean | null | { [key: string]: Json | undefined } | Json[];\r\n\r\n// Simple API response type\r\nexport interface ApiResponse<T> {\r\n  data: T | null;\r\n  error: string | null;\r\n}\r\n\r\n// Simple beneficiary type - will be replaced by generated types below\r\n\r\nexport interface Database {\r\n  public: {\r\n    Tables: {\r\n      members: {\r\n        Row: {\r\n          id: string;\r\n          created_at: string;\r\n          updated_at: string;\r\n          name: string;\r\n          email: string;\r\n          phone: string | null;\r\n          address: string | null;\r\n          city: string | null;\r\n          birth_date: string | null;\r\n          gender: 'male' | 'female' | 'other' | null;\r\n          occupation: string | null;\r\n          membership_type: 'standard' | 'premium' | 'corporate' | 'student' | 'senior';\r\n          status: 'active' | 'inactive' | 'suspended';\r\n          join_date: string;\r\n          emergency_contact: Json | null;\r\n          notes: string | null;\r\n          tags: string[] | null;\r\n          avatar_url: string | null;\r\n          created_by: string;\r\n          updated_by: string | null;\r\n          deleted_at: string | null;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          created_at?: string;\r\n          updated_at?: string;\r\n          name: string;\r\n          email: string;\r\n          phone?: string | null;\r\n          address?: string | null;\r\n          city?: string | null;\r\n          birth_date?: string | null;\r\n          gender?: 'male' | 'female' | 'other' | null;\r\n          occupation?: string | null;\r\n          membership_type?: 'standard' | 'premium' | 'corporate' | 'student' | 'senior';\r\n          status?: 'active' | 'inactive' | 'suspended';\r\n          join_date?: string;\r\n          emergency_contact?: Json | null;\r\n          notes?: string | null;\r\n          tags?: string[] | null;\r\n          avatar_url?: string | null;\r\n          created_by: string;\r\n          updated_by?: string | null;\r\n          deleted_at?: string | null;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          created_at?: string;\r\n          updated_at?: string;\r\n          name?: string;\r\n          email?: string;\r\n          phone?: string | null;\r\n          address?: string | null;\r\n          city?: string | null;\r\n          birth_date?: string | null;\r\n          gender?: 'male' | 'female' | 'other' | null;\r\n          occupation?: string | null;\r\n          membership_type?: 'standard' | 'premium' | 'corporate' | 'student' | 'senior';\r\n          status?: 'active' | 'inactive' | 'suspended';\r\n          join_date?: string;\r\n          emergency_contact?: Json | null;\r\n          notes?: string | null;\r\n          tags?: string[] | null;\r\n          avatar_url?: string | null;\r\n          created_by?: string;\r\n          updated_by?: string | null;\r\n          deleted_at?: string | null;\r\n        };\r\n      };\r\n      donations: {\r\n        Row: {\r\n          id: string;\r\n          created_at: string;\r\n          updated_at: string;\r\n          donor_name: string;\r\n          donor_email: string | null;\r\n          donor_phone: string | null;\r\n          member_id: string | null;\r\n          amount: number;\r\n          currency: string;\r\n          donation_type: 'one_time' | 'monthly' | 'yearly';\r\n          category: 'general' | 'education' | 'health' | 'emergency' | 'other';\r\n          campaign_id: string | null;\r\n          payment_method: 'cash' | 'bank_transfer' | 'credit_card' | 'online';\r\n          reference_number: string | null;\r\n          status: 'pending' | 'completed' | 'cancelled' | 'refunded';\r\n          receipt_url: string | null;\r\n          notes: string | null;\r\n          is_anonymous: boolean;\r\n          tax_deductible: boolean;\r\n          processed_by: string | null;\r\n          approved_by: string | null;\r\n          created_by: string;\r\n          updated_by: string | null;\r\n          deleted_at: string | null;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          created_at?: string;\r\n          updated_at?: string;\r\n          donor_name: string;\r\n          donor_email?: string | null;\r\n          donor_phone?: string | null;\r\n          member_id?: string | null;\r\n          amount: number;\r\n          currency?: string;\r\n          donation_type?: 'one_time' | 'monthly' | 'yearly';\r\n          category?: 'general' | 'education' | 'health' | 'emergency' | 'other';\r\n          campaign_id?: string | null;\r\n          payment_method?: 'cash' | 'bank_transfer' | 'credit_card' | 'online';\r\n          reference_number?: string | null;\r\n          status?: 'pending' | 'completed' | 'cancelled' | 'refunded';\r\n          receipt_url?: string | null;\r\n          notes?: string | null;\r\n          is_anonymous?: boolean;\r\n          tax_deductible?: boolean;\r\n          processed_by?: string | null;\r\n          approved_by?: string | null;\r\n          created_by: string;\r\n          updated_by?: string | null;\r\n          deleted_at?: string | null;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          created_at?: string;\r\n          updated_at?: string;\r\n          donor_name?: string;\r\n          donor_email?: string | null;\r\n          donor_phone?: string | null;\r\n          member_id?: string | null;\r\n          amount?: number;\r\n          currency?: string;\r\n          donation_type?: 'one_time' | 'monthly' | 'yearly';\r\n          category?: 'general' | 'education' | 'health' | 'emergency' | 'other';\r\n          campaign_id?: string | null;\r\n          payment_method?: 'cash' | 'bank_transfer' | 'credit_card' | 'online';\r\n          reference_number?: string | null;\r\n          status?: 'pending' | 'completed' | 'cancelled' | 'refunded';\r\n          receipt_url?: string | null;\r\n          notes?: string | null;\r\n          is_anonymous?: boolean;\r\n          tax_deductible?: boolean;\r\n          processed_by?: string | null;\r\n          approved_by?: string | null;\r\n          created_by?: string;\r\n          updated_by?: string | null;\r\n          deleted_at?: string | null;\r\n        };\r\n      };\r\n      aid_requests: {\r\n        Row: {\r\n          id: string;\r\n          created_at: string;\r\n          updated_at: string;\r\n          applicant_name: string;\r\n          applicant_email: string | null;\r\n          applicant_phone: string;\r\n          applicant_address: string;\r\n          aid_type: 'financial' | 'medical' | 'education' | 'housing' | 'food' | 'other';\r\n          category: string | null;\r\n          requested_amount: number | null;\r\n          currency: string;\r\n          urgency: 'low' | 'medium' | 'high' | 'critical';\r\n          description: string;\r\n          reason: string;\r\n          family_size: number | null;\r\n          monthly_income: number | null;\r\n          supporting_documents: string[] | null;\r\n          status: 'pending' | 'under_review' | 'approved' | 'rejected' | 'completed';\r\n          assigned_to: string | null;\r\n          approved_amount: number | null;\r\n          approved_by: string | null;\r\n          approval_date: string | null;\r\n          disbursement_date: string | null;\r\n          disbursement_method: string | null;\r\n          follow_up_required: boolean;\r\n          follow_up_date: string | null;\r\n          notes: string | null;\r\n          internal_notes: string | null;\r\n          created_by: string;\r\n          updated_by: string | null;\r\n          deleted_at: string | null;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          created_at?: string;\r\n          updated_at?: string;\r\n          applicant_name: string;\r\n          applicant_email?: string | null;\r\n          applicant_phone: string;\r\n          applicant_address: string;\r\n          aid_type: 'financial' | 'medical' | 'education' | 'housing' | 'food' | 'other';\r\n          category?: string | null;\r\n          requested_amount?: number | null;\r\n          currency?: string;\r\n          urgency?: 'low' | 'medium' | 'high' | 'critical';\r\n          description: string;\r\n          reason: string;\r\n          family_size?: number | null;\r\n          monthly_income?: number | null;\r\n          supporting_documents?: string[] | null;\r\n          status?: 'pending' | 'under_review' | 'approved' | 'rejected' | 'completed';\r\n          assigned_to?: string | null;\r\n          approved_amount?: number | null;\r\n          approved_by?: string | null;\r\n          approval_date?: string | null;\r\n          disbursement_date?: string | null;\r\n          disbursement_method?: string | null;\r\n          follow_up_required?: boolean;\r\n          follow_up_date?: string | null;\r\n          notes?: string | null;\r\n          internal_notes?: string | null;\r\n          created_by: string;\r\n          updated_by?: string | null;\r\n          deleted_at?: string | null;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          created_at?: string;\r\n          updated_at?: string;\r\n          applicant_name?: string;\r\n          applicant_email?: string | null;\r\n          applicant_phone?: string;\r\n          applicant_address?: string;\r\n          aid_type?: 'financial' | 'medical' | 'education' | 'housing' | 'food' | 'other';\r\n          category?: string | null;\r\n          requested_amount?: number | null;\r\n          currency?: string;\r\n          urgency?: 'low' | 'medium' | 'high' | 'critical';\r\n          description?: string;\r\n          reason?: string;\r\n          family_size?: number | null;\r\n          monthly_income?: number | null;\r\n          supporting_documents?: string[] | null;\r\n          status?: 'pending' | 'under_review' | 'approved' | 'rejected' | 'completed';\r\n          assigned_to?: string | null;\r\n          approved_amount?: number | null;\r\n          approved_by?: string | null;\r\n          approval_date?: string | null;\r\n          disbursement_date?: string | null;\r\n          disbursement_method?: string | null;\r\n          follow_up_required?: boolean;\r\n          follow_up_date?: string | null;\r\n          notes?: string | null;\r\n          internal_notes?: string | null;\r\n          created_by?: string;\r\n          updated_by?: string | null;\r\n          deleted_at?: string | null;\r\n        };\r\n      };\r\n      campaigns: {\r\n        Row: {\r\n          id: string;\r\n          created_at: string;\r\n          updated_at: string;\r\n          name: string;\r\n          description: string;\r\n          goal_amount: number;\r\n          current_amount: number;\r\n          currency: string;\r\n          start_date: string;\r\n          end_date: string | null;\r\n          status: 'draft' | 'active' | 'paused' | 'completed' | 'cancelled';\r\n          category: string;\r\n          image_url: string | null;\r\n          featured: boolean;\r\n          created_by: string;\r\n          updated_by: string | null;\r\n          deleted_at: string | null;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          created_at?: string;\r\n          updated_at?: string;\r\n          name: string;\r\n          description: string;\r\n          goal_amount: number;\r\n          current_amount?: number;\r\n          currency?: string;\r\n          start_date: string;\r\n          end_date?: string | null;\r\n          status?: 'draft' | 'active' | 'paused' | 'completed' | 'cancelled';\r\n          category: string;\r\n          image_url?: string | null;\r\n          featured?: boolean;\r\n          created_by: string;\r\n          updated_by?: string | null;\r\n          deleted_at?: string | null;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          created_at?: string;\r\n          updated_at?: string;\r\n          name?: string;\r\n          description?: string;\r\n          goal_amount?: number;\r\n          current_amount?: number;\r\n          currency?: string;\r\n          start_date?: string;\r\n          end_date?: string | null;\r\n          status?: 'draft' | 'active' | 'paused' | 'completed' | 'cancelled';\r\n          category?: string;\r\n          image_url?: string | null;\r\n          featured?: boolean;\r\n          created_by?: string;\r\n          updated_by?: string | null;\r\n          deleted_at?: string | null;\r\n        };\r\n      };\r\n      notifications: {\r\n        Row: {\r\n          id: string;\r\n          created_at: string;\r\n          updated_at: string;\r\n          user_id: string;\r\n          title: string;\r\n          message: string;\r\n          type: 'info' | 'success' | 'warning' | 'error';\r\n          category: 'member' | 'donation' | 'aid' | 'campaign' | 'system';\r\n          read: boolean;\r\n          read_at: string | null;\r\n          action_url: string | null;\r\n          metadata: Json | null;\r\n          expires_at: string | null;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          created_at?: string;\r\n          updated_at?: string;\r\n          user_id: string;\r\n          title: string;\r\n          message: string;\r\n          type?: 'info' | 'success' | 'warning' | 'error';\r\n          category?: 'member' | 'donation' | 'aid' | 'campaign' | 'system';\r\n          read?: boolean;\r\n          read_at?: string | null;\r\n          action_url?: string | null;\r\n          metadata?: Json | null;\r\n          expires_at?: string | null;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          created_at?: string;\r\n          updated_at?: string;\r\n          user_id?: string;\r\n          title?: string;\r\n          message?: string;\r\n          type?: 'info' | 'success' | 'warning' | 'error';\r\n          category?: 'member' | 'donation' | 'aid' | 'campaign' | 'system';\r\n          read?: boolean;\r\n          read_at?: string | null;\r\n          action_url?: string | null;\r\n          metadata?: Json | null;\r\n          expires_at?: string | null;\r\n        };\r\n      };\r\n      audit_logs: {\r\n        Row: {\r\n          id: string;\r\n          created_at: string;\r\n          user_id: string;\r\n          action: string;\r\n          table_name: string;\r\n          record_id: string;\r\n          old_values: Json | null;\r\n          new_values: Json | null;\r\n          ip_address: string | null;\r\n          user_agent: string | null;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          created_at?: string;\r\n          user_id: string;\r\n          action: string;\r\n          table_name: string;\r\n          record_id: string;\r\n          old_values?: Json | null;\r\n          new_values?: Json | null;\r\n          ip_address?: string | null;\r\n          user_agent?: string | null;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          created_at?: string;\r\n          user_id?: string;\r\n          action?: string;\r\n          table_name?: string;\r\n          record_id?: string;\r\n          old_values?: Json | null;\r\n          new_values?: Json | null;\r\n          ip_address?: string | null;\r\n          user_agent?: string | null;\r\n        };\r\n      };\r\n      beneficiaries: {\r\n        Row: {\r\n          id: string;\r\n          created_at: string;\r\n          updated_at: string;\r\n          name: string;\r\n          surname: string;\r\n          id_number: string;\r\n          phone: string | null;\r\n          address: string | null;\r\n          city: string | null;\r\n          district: string | null;\r\n          birth_date: string | null;\r\n          gender: 'male' | 'female' | 'other' | null;\r\n          family_size: number | null;\r\n          monthly_income: number | null;\r\n          status: 'active' | 'passive' | 'suspended' | 'under_evaluation';\r\n          registration_date: string;\r\n          last_aid_date: string | null;\r\n          total_aid_amount: number;\r\n          priority_level: 'low' | 'medium' | 'high' | 'critical';\r\n          needs_assessment: Json | null;\r\n          notes: string | null;\r\n          emergency_contact: Json | null;\r\n          supporting_documents: string[] | null;\r\n          case_worker_id: string | null;\r\n          created_by: string;\r\n          updated_by: string | null;\r\n          deleted_at: string | null;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          created_at?: string;\r\n          updated_at?: string;\r\n          name: string;\r\n          surname: string;\r\n          id_number: string;\r\n          phone?: string | null;\r\n          address?: string | null;\r\n          city?: string | null;\r\n          district?: string | null;\r\n          birth_date?: string | null;\r\n          gender?: 'male' | 'female' | 'other' | null;\r\n          family_size?: number | null;\r\n          monthly_income?: number | null;\r\n          status?: 'active' | 'passive' | 'suspended' | 'under_evaluation';\r\n          registration_date?: string;\r\n          last_aid_date?: string | null;\r\n          total_aid_amount?: number;\r\n          priority_level?: 'low' | 'medium' | 'high' | 'critical';\r\n          needs_assessment?: Json | null;\r\n          notes?: string | null;\r\n          emergency_contact?: Json | null;\r\n          supporting_documents?: string[] | null;\r\n          case_worker_id?: string | null;\r\n          created_by: string;\r\n          updated_by?: string | null;\r\n          deleted_at?: string | null;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          created_at?: string;\r\n          updated_at?: string;\r\n          name?: string;\r\n          surname?: string;\r\n          id_number?: string;\r\n          phone?: string | null;\r\n          address?: string | null;\r\n          city?: string | null;\r\n          district?: string | null;\r\n          birth_date?: string | null;\r\n          gender?: 'male' | 'female' | 'other' | null;\r\n          family_size?: number | null;\r\n          monthly_income?: number | null;\r\n          status?: 'active' | 'passive' | 'suspended' | 'under_evaluation';\r\n          registration_date?: string;\r\n          last_aid_date?: string | null;\r\n          total_aid_amount?: number;\r\n          priority_level?: 'low' | 'medium' | 'high' | 'critical';\r\n          needs_assessment?: Json | null;\r\n          notes?: string | null;\r\n          emergency_contact?: Json | null;\r\n          supporting_documents?: string[] | null;\r\n          case_worker_id?: string | null;\r\n          created_by?: string;\r\n          updated_by?: string | null;\r\n          deleted_at?: string | null;\r\n        };\r\n      };\r\n      finance_transactions: {\r\n        Row: {\r\n          id: string;\r\n          created_at: string;\r\n          updated_at: string;\r\n          transaction_type: 'income' | 'expense';\r\n          category: string;\r\n          subcategory: string | null;\r\n          amount: number;\r\n          currency: string;\r\n          description: string;\r\n          transaction_date: string;\r\n          payment_method: 'cash' | 'bank_transfer' | 'credit_card' | 'check';\r\n          reference_number: string | null;\r\n          receipt_url: string | null;\r\n          account_id: string | null;\r\n          campaign_id: string | null;\r\n          member_id: string | null;\r\n          beneficiary_id: string | null;\r\n          status: 'pending' | 'completed' | 'cancelled';\r\n          approved_by: string | null;\r\n          approval_date: string | null;\r\n          notes: string | null;\r\n          tags: string[] | null;\r\n          created_by: string;\r\n          updated_by: string | null;\r\n          deleted_at: string | null;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          created_at?: string;\r\n          updated_at?: string;\r\n          transaction_type: 'income' | 'expense';\r\n          category: string;\r\n          subcategory?: string | null;\r\n          amount: number;\r\n          currency?: string;\r\n          description: string;\r\n          transaction_date: string;\r\n          payment_method: 'cash' | 'bank_transfer' | 'credit_card' | 'check';\r\n          reference_number?: string | null;\r\n          receipt_url?: string | null;\r\n          account_id?: string | null;\r\n          campaign_id?: string | null;\r\n          member_id?: string | null;\r\n          beneficiary_id?: string | null;\r\n          status?: 'pending' | 'completed' | 'cancelled';\r\n          approved_by?: string | null;\r\n          approval_date?: string | null;\r\n          notes?: string | null;\r\n          tags?: string[] | null;\r\n          created_by: string;\r\n          updated_by?: string | null;\r\n          deleted_at?: string | null;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          created_at?: string;\r\n          updated_at?: string;\r\n          transaction_type?: 'income' | 'expense';\r\n          category?: string;\r\n          subcategory?: string | null;\r\n          amount?: number;\r\n          currency?: string;\r\n          description?: string;\r\n          transaction_date?: string;\r\n          payment_method?: 'cash' | 'bank_transfer' | 'credit_card' | 'check';\r\n          reference_number?: string | null;\r\n          receipt_url?: string | null;\r\n          account_id?: string | null;\r\n          campaign_id?: string | null;\r\n          member_id?: string | null;\r\n          beneficiary_id?: string | null;\r\n          status?: 'pending' | 'completed' | 'cancelled';\r\n          approved_by?: string | null;\r\n          approval_date?: string | null;\r\n          notes?: string | null;\r\n          tags?: string[] | null;\r\n          created_by?: string;\r\n          updated_by?: string | null;\r\n          deleted_at?: string | null;\r\n        };\r\n      };\r\n      partners: {\r\n        Row: {\r\n          id: string;\r\n          created_at: string;\r\n          updated_at: string;\r\n          name: string;\r\n          partner_type:\r\n            | 'donor'\r\n            | 'institution'\r\n            | 'supplier'\r\n            | 'sponsor'\r\n            | 'association'\r\n            | 'volunteer';\r\n          contact_person: string | null;\r\n          email: string | null;\r\n          phone: string | null;\r\n          address: string | null;\r\n          city: string | null;\r\n          tax_number: string | null;\r\n          status: 'active' | 'inactive' | 'suspended';\r\n          relationship_start: string;\r\n          relationship_end: string | null;\r\n          contract_details: Json | null;\r\n          payment_terms: string | null;\r\n          services_provided: string[] | null;\r\n          notes: string | null;\r\n          rating: number | null;\r\n          last_contact_date: string | null;\r\n          website: string | null;\r\n          social_media: Json | null;\r\n          created_by: string;\r\n          updated_by: string | null;\r\n          deleted_at: string | null;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          created_at?: string;\r\n          updated_at?: string;\r\n          name: string;\r\n          partner_type:\r\n            | 'donor'\r\n            | 'institution'\r\n            | 'supplier'\r\n            | 'sponsor'\r\n            | 'association'\r\n            | 'volunteer';\r\n          contact_person?: string | null;\r\n          email?: string | null;\r\n          phone?: string | null;\r\n          address?: string | null;\r\n          city?: string | null;\r\n          tax_number?: string | null;\r\n          status?: 'active' | 'inactive' | 'suspended';\r\n          relationship_start: string;\r\n          relationship_end?: string | null;\r\n          contract_details?: Json | null;\r\n          payment_terms?: string | null;\r\n          services_provided?: string[] | null;\r\n          notes?: string | null;\r\n          rating?: number | null;\r\n          last_contact_date?: string | null;\r\n          website?: string | null;\r\n          social_media?: Json | null;\r\n          created_by: string;\r\n          updated_by?: string | null;\r\n          deleted_at?: string | null;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          created_at?: string;\r\n          updated_at?: string;\r\n          name?: string;\r\n          partner_type?:\r\n            | 'donor'\r\n            | 'institution'\r\n            | 'supplier'\r\n            | 'sponsor'\r\n            | 'association'\r\n            | 'volunteer';\r\n          contact_person?: string | null;\r\n          email?: string | null;\r\n          phone?: string | null;\r\n          address?: string | null;\r\n          city?: string | null;\r\n          tax_number?: string | null;\r\n          status?: 'active' | 'inactive' | 'suspended';\r\n          relationship_start?: string;\r\n          relationship_end?: string | null;\r\n          contract_details?: Json | null;\r\n          payment_terms?: string | null;\r\n          services_provided?: string[] | null;\r\n          notes?: string | null;\r\n          rating?: number | null;\r\n          last_contact_date?: string | null;\r\n          website?: string | null;\r\n          social_media?: Json | null;\r\n          created_by?: string;\r\n          updated_by?: string | null;\r\n          deleted_at?: string | null;\r\n        };\r\n      };\r\n      legal_cases: {\r\n        Row: {\r\n          id: string;\r\n          created_at: string;\r\n          updated_at: string;\r\n          case_number: string;\r\n          client_name: string;\r\n          client_id_number: string | null;\r\n          client_phone: string | null;\r\n          case_type: 'consultation' | 'representation' | 'mediation' | 'legal_aid';\r\n          subject: string;\r\n          description: string;\r\n          status: 'open' | 'in_progress' | 'closed' | 'suspended';\r\n          priority: 'low' | 'medium' | 'high' | 'urgent';\r\n          assigned_lawyer_id: string | null;\r\n          court_name: string | null;\r\n          case_date: string | null;\r\n          next_hearing: string | null;\r\n          estimated_cost: number | null;\r\n          actual_cost: number | null;\r\n          documents: string[] | null;\r\n          notes: string | null;\r\n          outcome: string | null;\r\n          satisfaction_rating: number | null;\r\n          created_by: string;\r\n          updated_by: string | null;\r\n          deleted_at: string | null;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          created_at?: string;\r\n          updated_at?: string;\r\n          case_number: string;\r\n          client_name: string;\r\n          client_id_number?: string | null;\r\n          client_phone?: string | null;\r\n          case_type: 'consultation' | 'representation' | 'mediation' | 'legal_aid';\r\n          subject: string;\r\n          description: string;\r\n          status?: 'open' | 'in_progress' | 'closed' | 'suspended';\r\n          priority?: 'low' | 'medium' | 'high' | 'urgent';\r\n          assigned_lawyer_id?: string | null;\r\n          court_name?: string | null;\r\n          case_date?: string | null;\r\n          next_hearing?: string | null;\r\n          estimated_cost?: number | null;\r\n          actual_cost?: number | null;\r\n          documents?: string[] | null;\r\n          notes?: string | null;\r\n          outcome?: string | null;\r\n          satisfaction_rating?: number | null;\r\n          created_by: string;\r\n          updated_by?: string | null;\r\n          deleted_at?: string | null;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          created_at?: string;\r\n          updated_at?: string;\r\n          case_number?: string;\r\n          client_name?: string;\r\n          client_id_number?: string | null;\r\n          client_phone?: string | null;\r\n          case_type?: 'consultation' | 'representation' | 'mediation' | 'legal_aid';\r\n          subject?: string;\r\n          description?: string;\r\n          status?: 'open' | 'in_progress' | 'closed' | 'suspended';\r\n          priority?: 'low' | 'medium' | 'high' | 'urgent';\r\n          assigned_lawyer_id?: string | null;\r\n          court_name?: string | null;\r\n          case_date?: string | null;\r\n          next_hearing?: string | null;\r\n          estimated_cost?: number | null;\r\n          actual_cost?: number | null;\r\n          documents?: string[] | null;\r\n          notes?: string | null;\r\n          outcome?: string | null;\r\n          satisfaction_rating?: number | null;\r\n          created_by?: string;\r\n          updated_by?: string | null;\r\n          deleted_at?: string | null;\r\n        };\r\n      };\r\n      scholarships: {\r\n        Row: {\r\n          id: string;\r\n          created_at: string;\r\n          updated_at: string;\r\n          student_name: string;\r\n          student_id_number: string;\r\n          student_phone: string | null;\r\n          student_email: string | null;\r\n          school_name: string;\r\n          grade_level: string;\r\n          field_of_study: string | null;\r\n          gpa: number | null;\r\n          scholarship_type: 'tuition' | 'living_allowance' | 'books' | 'transportation' | 'full';\r\n          amount: number;\r\n          currency: string;\r\n          academic_year: string;\r\n          semester: string | null;\r\n          status: 'applied' | 'approved' | 'active' | 'suspended' | 'completed' | 'cancelled';\r\n          application_date: string;\r\n          approval_date: string | null;\r\n          start_date: string | null;\r\n          end_date: string | null;\r\n          parent_name: string | null;\r\n          parent_phone: string | null;\r\n          family_income: number | null;\r\n          supporting_documents: string[] | null;\r\n          academic_documents: string[] | null;\r\n          payment_schedule: Json | null;\r\n          requirements: string[] | null;\r\n          notes: string | null;\r\n          created_by: string;\r\n          updated_by: string | null;\r\n          deleted_at: string | null;\r\n        };\r\n        Insert: {\r\n          id?: string;\r\n          created_at?: string;\r\n          updated_at?: string;\r\n          student_name: string;\r\n          student_id_number: string;\r\n          student_phone?: string | null;\r\n          student_email?: string | null;\r\n          school_name: string;\r\n          grade_level: string;\r\n          field_of_study?: string | null;\r\n          gpa?: number | null;\r\n          scholarship_type: 'tuition' | 'living_allowance' | 'books' | 'transportation' | 'full';\r\n          amount: number;\r\n          currency?: string;\r\n          academic_year: string;\r\n          semester?: string | null;\r\n          status?: 'applied' | 'approved' | 'active' | 'suspended' | 'completed' | 'cancelled';\r\n          application_date: string;\r\n          approval_date?: string | null;\r\n          start_date?: string | null;\r\n          end_date?: string | null;\r\n          parent_name?: string | null;\r\n          parent_phone?: string | null;\r\n          family_income?: number | null;\r\n          supporting_documents?: string[] | null;\r\n          academic_documents?: string[] | null;\r\n          payment_schedule?: Json | null;\r\n          requirements?: string[] | null;\r\n          notes?: string | null;\r\n          created_by: string;\r\n          updated_by?: string | null;\r\n          deleted_at?: string | null;\r\n        };\r\n        Update: {\r\n          id?: string;\r\n          created_at?: string;\r\n          updated_at?: string;\r\n          student_name?: string;\r\n          student_id_number?: string;\r\n          student_phone?: string | null;\r\n          student_email?: string | null;\r\n          school_name?: string;\r\n          grade_level?: string;\r\n          field_of_study?: string | null;\r\n          gpa?: number | null;\r\n          scholarship_type?: 'tuition' | 'living_allowance' | 'books' | 'transportation' | 'full';\r\n          amount?: number;\r\n          currency?: string;\r\n          academic_year?: string;\r\n          semester?: string | null;\r\n          status?: 'applied' | 'approved' | 'active' | 'suspended' | 'completed' | 'cancelled';\r\n          application_date?: string;\r\n          approval_date?: string | null;\r\n          start_date?: string | null;\r\n          end_date?: string | null;\r\n          parent_name?: string | null;\r\n          parent_phone?: string | null;\r\n          family_income?: number | null;\r\n          supporting_documents?: string[] | null;\r\n          academic_documents?: string[] | null;\r\n          payment_schedule?: Json | null;\r\n          requirements?: string[] | null;\r\n          notes?: string | null;\r\n          created_by?: string;\r\n          updated_by?: string | null;\r\n          deleted_at?: string | null;\r\n        };\r\n      };\r\n    };\r\n    Views: Record<never, never>;\r\n    Functions: Record<never, never>;\r\n    Enums: {\r\n      membership_type: 'standard' | 'premium' | 'corporate' | 'student' | 'senior';\r\n      member_status: 'active' | 'inactive' | 'suspended';\r\n      donation_type: 'one_time' | 'monthly' | 'yearly';\r\n      donation_category: 'general' | 'education' | 'health' | 'emergency' | 'other';\r\n      payment_method: 'cash' | 'bank_transfer' | 'credit_card' | 'online';\r\n      donation_status: 'pending' | 'completed' | 'cancelled' | 'refunded';\r\n      aid_type: 'financial' | 'medical' | 'education' | 'housing' | 'food' | 'other';\r\n      urgency_level: 'low' | 'medium' | 'high' | 'critical';\r\n      aid_status: 'pending' | 'under_review' | 'approved' | 'rejected' | 'completed';\r\n      campaign_status: 'draft' | 'active' | 'paused' | 'completed' | 'cancelled';\r\n      notification_type: 'info' | 'success' | 'warning' | 'error';\r\n      notification_category: 'member' | 'donation' | 'aid' | 'campaign' | 'system';\r\n      beneficiary_status: 'active' | 'passive' | 'suspended' | 'under_evaluation';\r\n      priority_level: 'low' | 'medium' | 'high' | 'critical';\r\n      transaction_type: 'income' | 'expense';\r\n      transaction_status: 'pending' | 'completed' | 'cancelled';\r\n      partner_type: 'donor' | 'institution' | 'supplier' | 'sponsor' | 'association' | 'volunteer';\r\n      partner_status: 'active' | 'inactive' | 'suspended';\r\n      case_type: 'consultation' | 'representation' | 'mediation' | 'legal_aid';\r\n      case_status: 'open' | 'in_progress' | 'closed' | 'suspended';\r\n      case_priority: 'low' | 'medium' | 'high' | 'urgent';\r\n      scholarship_type: 'tuition' | 'living_allowance' | 'books' | 'transportation' | 'full';\r\n      scholarship_status:\r\n        | 'applied'\r\n        | 'approved'\r\n        | 'active'\r\n        | 'suspended'\r\n        | 'completed'\r\n        | 'cancelled';\r\n    };\r\n    CompositeTypes: Record<never, never>;\r\n  };\r\n}\r\n\r\n// Type helpers\r\nexport type Member = Database['public']['Tables']['members']['Row'];\r\nexport type MemberInsert = Database['public']['Tables']['members']['Insert'];\r\nexport type MemberUpdate = Database['public']['Tables']['members']['Update'];\r\n\r\nexport type Donation = Database['public']['Tables']['donations']['Row'];\r\nexport type DonationInsert = Database['public']['Tables']['donations']['Insert'];\r\nexport type DonationUpdate = Database['public']['Tables']['donations']['Update'];\r\n\r\nexport type AidRequest = Database['public']['Tables']['aid_requests']['Row'];\r\nexport type AidRequestInsert = Database['public']['Tables']['aid_requests']['Insert'];\r\nexport type AidRequestUpdate = Database['public']['Tables']['aid_requests']['Update'];\r\n\r\nexport type Campaign = Database['public']['Tables']['campaigns']['Row'];\r\nexport type CampaignInsert = Database['public']['Tables']['campaigns']['Insert'];\r\nexport type CampaignUpdate = Database['public']['Tables']['campaigns']['Update'];\r\n\r\n// Note: Notifications table is defined in schema but may not exist in database yet\r\n// Run /supabase/migrations/001_create_notifications_table.sql to create the table\r\nexport type Notification = Database['public']['Tables']['notifications']['Row'];\r\nexport type NotificationInsert = Database['public']['Tables']['notifications']['Insert'];\r\nexport type NotificationUpdate = Database['public']['Tables']['notifications']['Update'];\r\n\r\nexport type AuditLog = Database['public']['Tables']['audit_logs']['Row'];\r\nexport type AuditLogInsert = Database['public']['Tables']['audit_logs']['Insert'];\r\n\r\nexport type Beneficiary = Database['public']['Tables']['beneficiaries']['Row'];\r\nexport type BeneficiaryInsert = Database['public']['Tables']['beneficiaries']['Insert'];\r\nexport type BeneficiaryUpdate = Database['public']['Tables']['beneficiaries']['Update'];\r\n\r\nexport type FinanceTransaction = Database['public']['Tables']['finance_transactions']['Row'];\r\nexport type FinanceTransactionInsert =\r\n  Database['public']['Tables']['finance_transactions']['Insert'];\r\nexport type FinanceTransactionUpdate =\r\n  Database['public']['Tables']['finance_transactions']['Update'];\r\n\r\nexport type Partner = Database['public']['Tables']['partners']['Row'];\r\nexport type PartnerInsert = Database['public']['Tables']['partners']['Insert'];\r\nexport type PartnerUpdate = Database['public']['Tables']['partners']['Update'];\r\n\r\nexport type LegalCase = Database['public']['Tables']['legal_cases']['Row'];\r\nexport type LegalCaseInsert = Database['public']['Tables']['legal_cases']['Insert'];\r\nexport type LegalCaseUpdate = Database['public']['Tables']['legal_cases']['Update'];\r\n\r\nexport type Scholarship = Database['public']['Tables']['scholarships']['Row'];\r\nexport type ScholarshipInsert = Database['public']['Tables']['scholarships']['Insert'];\r\nexport type ScholarshipUpdate = Database['public']['Tables']['scholarships']['Update'];\r\n\r\n// Extended types with relations\r\nexport interface MemberWithDonations extends Member {\r\n  donations: Donation[];\r\n  totalDonations: number;\r\n  lastDonation?: Donation;\r\n}\r\n\r\nexport interface DonationWithMember extends Donation {\r\n  member?: Member;\r\n  campaign?: Campaign;\r\n}\r\n\r\nexport interface AidRequestWithAssignee extends AidRequest {\r\n  assignee?: {\r\n    id: string;\r\n    name: string;\r\n    email: string;\r\n  };\r\n}\r\n\r\nexport interface CampaignWithStats extends Campaign {\r\n  donationCount: number;\r\n  progressPercentage: number;\r\n  daysRemaining?: number;\r\n}\r\n\r\n// API Response types\r\nexport interface ApiResponse<T> {\r\n  data: T | null;\r\n  error: string | null;\r\n  count?: number;\r\n}\r\n\r\nexport interface PaginatedResponse<T> {\r\n  data: T[];\r\n  count: number;\r\n  page: number;\r\n  pageSize: number;\r\n  totalPages: number;\r\n  hasNextPage: boolean;\r\n  hasPreviousPage: boolean;\r\n}\r\n\r\n// Realtime subscription types\r\nexport interface RealtimeMessage<T = any> {\r\n  eventType: 'INSERT' | 'UPDATE' | 'DELETE';\r\n  new?: T;\r\n  old?: T;\r\n  table: string;\r\n  schema: string;\r\n  commit_timestamp: string;\r\n}\r\n\r\nexport interface SubscriptionConfig {\r\n  table: string;\r\n  event: '*' | 'INSERT' | 'UPDATE' | 'DELETE';\r\n  schema?: string;\r\n  filter?: string;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\types\\ihtiyacSahipleri.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\types\\kumbara.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":408,"column":15,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":408,"endColumn":18,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9876,9879],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9876,9879],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// ­şÅĞ KUMBARA SYSTEM TYPES\r\n// Comprehensive TypeScript types for Piggy Bank management system\r\n\r\nexport interface Kumbara {\r\n  id: string;\r\n  code: string;\r\n  name: string;\r\n  location: string;\r\n  address: string;\r\n  status: KumbaraStatus;\r\n  installDate: string;\r\n  lastCollection: string | null;\r\n  totalAmount: number;\r\n  monthlyAverage: number;\r\n  qrCode: string;\r\n  contactPerson?: string;\r\n  phone?: string;\r\n  notes?: string;\r\n  coordinates?: {\r\n    lat: number;\r\n    lng: number;\r\n  };\r\n  created_at: string;\r\n  updated_at: string;\r\n  created_by: string;\r\n  updated_by?: string;\r\n  deleted_at?: string;\r\n}\r\n\r\nexport interface KumbaraInsert {\r\n  id?: string;\r\n  code?: string; // Auto-generated if not provided\r\n  name: string;\r\n  location: string;\r\n  address: string;\r\n  status?: KumbaraStatus;\r\n  installDate?: string;\r\n  contactPerson?: string;\r\n  phone?: string;\r\n  notes?: string;\r\n  coordinates?: {\r\n    lat: number;\r\n    lng: number;\r\n  };\r\n  created_by: string;\r\n}\r\n\r\nexport interface KumbaraUpdate {\r\n  name?: string;\r\n  location?: string;\r\n  address?: string;\r\n  status?: KumbaraStatus;\r\n  contactPerson?: string;\r\n  phone?: string;\r\n  notes?: string;\r\n  coordinates?: {\r\n    lat: number;\r\n    lng: number;\r\n  };\r\n  updated_by: string;\r\n}\r\n\r\nexport type KumbaraStatus = 'active' | 'inactive' | 'maintenance' | 'damaged' | 'removed';\r\n\r\n// Collection related types\r\nexport interface KumbaraCollection {\r\n  id: string;\r\n  kumbara_id: string;\r\n  collection_date: string;\r\n  amount: number;\r\n  currency: string;\r\n  collector_name: string;\r\n  collector_id?: string;\r\n  notes?: string;\r\n  receipt_url?: string;\r\n  witness_name?: string;\r\n  witness_phone?: string;\r\n  verification_photos?: string[];\r\n  weather_condition?: string;\r\n  collection_method: 'scheduled' | 'emergency' | 'maintenance';\r\n  created_at: string;\r\n  updated_at: string;\r\n  created_by: string;\r\n  updated_by?: string;\r\n}\r\n\r\nexport interface KumbaraCollectionInsert {\r\n  kumbara_id: string;\r\n  collection_date?: string;\r\n  amount: number;\r\n  currency?: string;\r\n  collector_name: string;\r\n  collector_id?: string;\r\n  notes?: string;\r\n  witness_name?: string;\r\n  witness_phone?: string;\r\n  verification_photos?: string[];\r\n  weather_condition?: string;\r\n  collection_method?: 'scheduled' | 'emergency' | 'maintenance';\r\n  created_by: string;\r\n}\r\n\r\n// QR Code related types\r\nexport interface KumbaraQRData {\r\n  kumbaraId: string;\r\n  code: string;\r\n  name: string;\r\n  location: string;\r\n  url: string;\r\n  donationUrl?: string;\r\n  contactInfo?: {\r\n    phone?: string;\r\n    person?: string;\r\n  };\r\n  metadata?: {\r\n    installDate: string;\r\n    lastUpdated: string;\r\n    version: string;\r\n  };\r\n}\r\n\r\n// Analytics and reporting types\r\nexport interface KumbaraAnalytics {\r\n  kumbara_id: string;\r\n  period_start: string;\r\n  period_end: string;\r\n  total_collections: number;\r\n  total_amount: number;\r\n  average_amount: number;\r\n  collection_frequency: number; // days between collections\r\n  performance_score: number; // 0-100\r\n  trend: 'increasing' | 'decreasing' | 'stable';\r\n  peak_months: string[];\r\n  low_months: string[];\r\n  recommendations?: string[];\r\n}\r\n\r\nexport interface KumbaraPerformanceMetrics {\r\n  daily_average: number;\r\n  weekly_average: number;\r\n  monthly_average: number;\r\n  yearly_projection: number;\r\n  efficiency_rating: 'excellent' | 'good' | 'average' | 'poor';\r\n  location_rating: number; // 1-5 stars\r\n  maintenance_score: number; // 1-5\r\n  donor_satisfaction?: number; // 1-5\r\n}\r\n\r\n// Location and mapping types\r\nexport interface KumbaraLocation {\r\n  id: string;\r\n  name: string;\r\n  type: 'mosque' | 'market' | 'restaurant' | 'shop' | 'office' | 'school' | 'hospital' | 'other';\r\n  category: 'high_traffic' | 'medium_traffic' | 'low_traffic';\r\n  coordinates: {\r\n    lat: number;\r\n    lng: number;\r\n  };\r\n  address: string;\r\n  contact_person?: string;\r\n  contact_phone?: string;\r\n  operating_hours?: {\r\n    open: string;\r\n    close: string;\r\n    days: string[];\r\n  };\r\n  accessibility: {\r\n    wheelchair_accessible: boolean;\r\n    parking_available: boolean;\r\n    public_transport_nearby: boolean;\r\n  };\r\n  security_level: 'high' | 'medium' | 'low';\r\n  foot_traffic_estimate: number; // people per day\r\n  demographic: {\r\n    age_groups: string[];\r\n    income_level: 'high' | 'medium' | 'low' | 'mixed';\r\n    cultural_background: string[];\r\n  };\r\n}\r\n\r\n// Maintenance and service types\r\nexport interface KumbaraMaintenance {\r\n  id: string;\r\n  kumbara_id: string;\r\n  maintenance_type: 'routine' | 'repair' | 'replacement' | 'cleaning' | 'security_check';\r\n  scheduled_date: string;\r\n  completed_date?: string;\r\n  technician_name: string;\r\n  technician_id?: string;\r\n  description: string;\r\n  issues_found?: string[];\r\n  actions_taken?: string[];\r\n  parts_replaced?: string[];\r\n  cost: number;\r\n  status: 'scheduled' | 'in_progress' | 'completed' | 'cancelled';\r\n  priority: 'low' | 'medium' | 'high' | 'urgent';\r\n  photos_before?: string[];\r\n  photos_after?: string[];\r\n  next_maintenance_date?: string;\r\n  warranty_info?: {\r\n    parts: string[];\r\n    expiry_date: string;\r\n    provider: string;\r\n  };\r\n  created_at: string;\r\n  updated_at: string;\r\n  created_by: string;\r\n  updated_by?: string;\r\n}\r\n\r\n// Campaign and marketing types\r\nexport interface KumbaraCampaign {\r\n  id: string;\r\n  name: string;\r\n  description: string;\r\n  start_date: string;\r\n  end_date: string;\r\n  target_amount: number;\r\n  current_amount: number;\r\n  participating_kumbaras: string[]; // kumbara IDs\r\n  campaign_type: 'seasonal' | 'emergency' | 'special_cause' | 'general';\r\n  marketing_materials: {\r\n    posters?: string[];\r\n    flyers?: string[];\r\n    digital_assets?: string[];\r\n    qr_codes?: string[];\r\n  };\r\n  status: 'draft' | 'active' | 'paused' | 'completed' | 'cancelled';\r\n  performance_metrics: {\r\n    total_donations: number;\r\n    unique_donors: number;\r\n    average_donation: number;\r\n    conversion_rate: number;\r\n  };\r\n  created_at: string;\r\n  updated_at: string;\r\n  created_by: string;\r\n  updated_by?: string;\r\n}\r\n\r\n// Dashboard and summary types\r\nexport interface KumbaraDashboardStats {\r\n  total_kumbaras: number;\r\n  active_kumbaras: number;\r\n  inactive_kumbaras: number;\r\n  maintenance_kumbaras: number;\r\n  total_collections_today: number;\r\n  total_amount_today: number;\r\n  total_collections_month: number;\r\n  total_amount_month: number;\r\n  top_performing_kumbaras: {\r\n    id: string;\r\n    name: string;\r\n    location: string;\r\n    amount: number;\r\n    collections: number;\r\n  }[];\r\n  recent_collections: {\r\n    id: string;\r\n    kumbara_name: string;\r\n    amount: number;\r\n    collection_date: string;\r\n    collector_name: string;\r\n  }[];\r\n  maintenance_alerts: {\r\n    kumbara_id: string;\r\n    kumbara_name: string;\r\n    issue: string;\r\n    priority: 'low' | 'medium' | 'high' | 'urgent';\r\n    scheduled_date?: string;\r\n  }[];\r\n  performance_trends: {\r\n    date: string;\r\n    total_amount: number;\r\n    collection_count: number;\r\n  }[];\r\n}\r\n\r\n// Form validation types\r\nexport interface KumbaraFormData {\r\n  name: string;\r\n  location: string;\r\n  address: string;\r\n  contactPerson?: string;\r\n  phone?: string;\r\n  notes?: string;\r\n  coordinates?: {\r\n    lat: number;\r\n    lng: number;\r\n  };\r\n}\r\n\r\nexport interface KumbaraCollectionFormData {\r\n  kumbara_id: string;\r\n  collection_date: string;\r\n  amount: number;\r\n  collector_name: string;\r\n  notes?: string;\r\n  witness_name?: string;\r\n  witness_phone?: string;\r\n  verification_photos?: File[];\r\n  weather_condition?: string;\r\n  collection_method: 'scheduled' | 'emergency' | 'maintenance';\r\n}\r\n\r\n// Filter and search types\r\nexport interface KumbaraFilters {\r\n  status?: KumbaraStatus[];\r\n  location_type?: string[];\r\n  date_range?: {\r\n    start: string;\r\n    end: string;\r\n  };\r\n  amount_range?: {\r\n    min: number;\r\n    max: number;\r\n  };\r\n  search_term?: string;\r\n  sort_by?: 'name' | 'location' | 'amount' | 'last_collection' | 'created_at';\r\n  sort_order?: 'asc' | 'desc';\r\n}\r\n\r\nexport interface KumbaraSearchResult {\r\n  kumbaras: Kumbara[];\r\n  total_count: number;\r\n  page: number;\r\n  page_size: number;\r\n  total_pages: number;\r\n  filters_applied: KumbaraFilters;\r\n}\r\n\r\n// Export and import types\r\nexport interface KumbaraExportData {\r\n  kumbara: Kumbara;\r\n  collections: KumbaraCollection[];\r\n  maintenance_history: KumbaraMaintenance[];\r\n  analytics: KumbaraAnalytics;\r\n  qr_data: KumbaraQRData;\r\n}\r\n\r\nexport interface KumbaraImportData {\r\n  kumbaras: KumbaraInsert[];\r\n  collections?: KumbaraCollectionInsert[];\r\n  validation_errors?: {\r\n    row: number;\r\n    field: string;\r\n    error: string;\r\n  }[];\r\n}\r\n\r\n// Notification and alert types\r\nexport interface KumbaraAlert {\r\n  id: string;\r\n  kumbara_id: string;\r\n  alert_type:\r\n    | 'maintenance_due'\r\n    | 'low_performance'\r\n    | 'security_issue'\r\n    | 'collection_overdue'\r\n    | 'damage_reported';\r\n  severity: 'info' | 'warning' | 'error' | 'critical';\r\n  title: string;\r\n  message: string;\r\n  action_required: boolean;\r\n  action_url?: string;\r\n  acknowledged: boolean;\r\n  acknowledged_by?: string;\r\n  acknowledged_at?: string;\r\n  resolved: boolean;\r\n  resolved_by?: string;\r\n  resolved_at?: string;\r\n  created_at: string;\r\n  expires_at?: string;\r\n}\r\n\r\n// Integration types (for external services)\r\nexport interface KumbaraIntegration {\r\n  payment_gateway?: {\r\n    provider: string;\r\n    api_key: string;\r\n    webhook_url: string;\r\n    supported_methods: string[];\r\n  };\r\n  mapping_service?: {\r\n    provider: 'google' | 'mapbox' | 'openstreetmap';\r\n    api_key: string;\r\n    features: string[];\r\n  };\r\n  qr_service?: {\r\n    provider: string;\r\n    api_key: string;\r\n    custom_domain?: string;\r\n  };\r\n  notification_service?: {\r\n    provider: string;\r\n    api_key: string;\r\n    channels: string[];\r\n  };\r\n}\r\n\r\n// API Response types\r\nexport interface KumbaraApiResponse<T> {\r\n  success: boolean;\r\n  data?: T;\r\n  error?: {\r\n    code: string;\r\n    message: string;\r\n    details?: any;\r\n  };\r\n  metadata?: {\r\n    timestamp: string;\r\n    request_id: string;\r\n    version: string;\r\n  };\r\n}\r\n\r\nexport type KumbaraListResponse = KumbaraApiResponse<KumbaraSearchResult>;\r\nexport type KumbaraDetailResponse = KumbaraApiResponse<Kumbara>;\r\nexport type KumbaraCollectionResponse = KumbaraApiResponse<KumbaraCollection>;\r\nexport type KumbaraDashboardResponse = KumbaraApiResponse<KumbaraDashboardStats>;\r\n\r\n// Utility types\r\nexport type KumbaraStatusBadgeVariant = Record<\r\n  KumbaraStatus,\r\n  {\r\n    className: string;\r\n    label: string;\r\n    icon?: string;\r\n  }\r\n>;\r\n\r\nexport type KumbaraActionType =\r\n  | 'create'\r\n  | 'update'\r\n  | 'delete'\r\n  | 'collect'\r\n  | 'maintain'\r\n  | 'activate'\r\n  | 'deactivate'\r\n  | 'generate_qr'\r\n  | 'export'\r\n  | 'import';\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\types\\lawyer.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\types\\monitoring.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":24,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":27,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1663,1666],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1663,1666],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2929,2932],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2929,2932],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Monitoring Types - Integration with existing monitoring system\r\nimport type { MCPMetrics, MCPHealthCheck, MCPError, MCPErrorType } from './mcp';\r\n\r\n// Base monitoring types (compatible with existing production-monitoring.js)\r\nexport interface BaseMonitoringConfig {\r\n  url: string;\r\n  interval: number;\r\n  timeout: number;\r\n  retries: number;\r\n  alertWebhook?: string;\r\n  slackWebhook?: string;\r\n  emailEndpoint?: string;\r\n}\r\n\r\nexport interface BaseMetrics {\r\n  uptime: number;\r\n  downtime: number;\r\n  totalChecks: number;\r\n  failedChecks: number;\r\n  averageResponseTime: number;\r\n  lastCheck: Date | null;\r\n  status: 'healthy' | 'degraded' | 'unhealthy' | 'unknown';\r\n}\r\n\r\nexport interface BaseAlerts {\r\n  downtime: boolean;\r\n  slowResponse: boolean;\r\n  highErrorRate: boolean;\r\n  sslExpiry: boolean;\r\n}\r\n\r\n// MCP-specific monitoring types\r\nexport interface MCPMonitoringConfig extends BaseMonitoringConfig {\r\n  mcpEndpoints: string[];\r\n  mcpMetricsInterval: number;\r\n  mcpAlertThresholds: {\r\n    errorRate: number;\r\n    responseTime: number;\r\n    authFailures: number;\r\n    rateLimitHits: number;\r\n    cacheHitRate: number;\r\n  };\r\n}\r\n\r\nexport interface MCPMonitoringMetrics extends BaseMetrics {\r\n  mcp: MCPMetrics;\r\n}\r\n\r\nexport interface MCPMonitoringAlerts extends BaseAlerts {\r\n  // MCP-specific alerts\r\n  highErrorRate: boolean;\r\n  slowResponse: boolean;\r\n  authenticationFailures: boolean;\r\n  rateLimitExceeded: boolean;\r\n  lowCacheHitRate: boolean;\r\n  componentDown: boolean;\r\n  circuitBreakerOpen: boolean;\r\n}\r\n\r\nexport interface MCPAlert {\r\n  id: string;\r\n  type: MCPAlertType;\r\n  severity: AlertSeverity;\r\n  message: string;\r\n  data: Record<string, any>;\r\n  timestamp: string;\r\n  component: 'MCP' | 'Security' | 'Pagination' | 'ErrorHandler' | 'Cache';\r\n  resolved?: boolean;\r\n  resolvedAt?: string;\r\n  resolvedBy?: string;\r\n}\r\n\r\nexport enum MCPAlertType {\r\n  HIGH_ERROR_RATE = 'mcp_high_error_rate',\r\n  SLOW_RESPONSE = 'mcp_slow_response',\r\n  AUTH_FAILURES = 'mcp_auth_failures',\r\n  RATE_LIMIT_EXCEEDED = 'mcp_rate_limit_exceeded',\r\n  LOW_CACHE_HIT_RATE = 'mcp_low_cache_hit_rate',\r\n  COMPONENT_DOWN = 'mcp_component_down',\r\n  CIRCUIT_BREAKER_OPEN = 'mcp_circuit_breaker_open',\r\n  SECURITY_BREACH = 'mcp_security_breach',\r\n  PERFORMANCE_DEGRADATION = 'mcp_performance_degradation',\r\n  RESOURCE_EXHAUSTION = 'mcp_resource_exhaustion',\r\n}\r\n\r\nexport enum AlertSeverity {\r\n  LOW = 'low',\r\n  MEDIUM = 'medium',\r\n  HIGH = 'high',\r\n  CRITICAL = 'critical',\r\n}\r\n\r\nexport interface MCPMonitoringHistory {\r\n  metrics: MCPMetricsSnapshot[];\r\n  alerts: MCPAlert[];\r\n  healthChecks: MCPHealthCheckSnapshot[];\r\n}\r\n\r\nexport interface MCPMetricsSnapshot {\r\n  timestamp: Date;\r\n  metrics: MCPMetrics;\r\n}\r\n\r\nexport interface MCPHealthCheckSnapshot {\r\n  timestamp: Date;\r\n  status: 'healthy' | 'degraded' | 'unhealthy';\r\n  components: Record<string, 'up' | 'down' | 'degraded'>;\r\n  responseTime?: number;\r\n  details?: Record<string, any>;\r\n}\r\n\r\n// Real-time monitoring dashboard types\r\nexport interface MCPDashboardData {\r\n  overview: {\r\n    status: 'healthy' | 'degraded' | 'unhealthy';\r\n    uptime: number;\r\n    totalRequests: number;\r\n    errorRate: number;\r\n    averageResponseTime: number;\r\n  };\r\n  security: {\r\n    authenticationFailures: number;\r\n    rateLimitHits: number;\r\n    activeApiKeys: number;\r\n    suspiciousActivities: number;\r\n    recentSecurityEvents: MCPSecurityEvent[];\r\n  };\r\n  performance: {\r\n    throughput: number;\r\n    responseTimeP95: number;\r\n    responseTimeP99: number;\r\n    concurrentRequests: number;\r\n    cacheHitRate: number;\r\n  };\r\n  errors: {\r\n    totalErrors: number;\r\n    errorsByType: Record<MCPErrorType, number>;\r\n    recentErrors: MCPError[];\r\n    circuitBreakerStatus: Record<string, 'closed' | 'open' | 'half-open'>;\r\n  };\r\n  alerts: {\r\n    activeAlerts: MCPAlert[];\r\n    recentAlerts: MCPAlert[];\r\n    alertsByType: Record<MCPAlertType, number>;\r\n    alertsByComponent: Record<string, number>;\r\n  };\r\n}\r\n\r\nexport interface MCPSecurityEvent {\r\n  id: string;\r\n  type: 'authentication' | 'authorization' | 'rate_limit' | 'suspicious_activity';\r\n  severity: AlertSeverity;\r\n  message: string;\r\n  timestamp: Date;\r\n  ipAddress?: string;\r\n  userAgent?: string;\r\n  apiKey?: string;\r\n  resource?: string;\r\n  action?: string;\r\n  resolved: boolean;\r\n}\r\n\r\n// Monitoring configuration presets\r\nexport const MCP_MONITORING_PRESETS = {\r\n  development: {\r\n    interval: 30000, // 30 seconds\r\n    mcpMetricsInterval: 15000, // 15 seconds\r\n    mcpAlertThresholds: {\r\n      errorRate: 0.1, // 10%\r\n      responseTime: 5000, // 5 seconds\r\n      authFailures: 20,\r\n      rateLimitHits: 100,\r\n      cacheHitRate: 0.5, // 50%\r\n    },\r\n  },\r\n  staging: {\r\n    interval: 60000, // 1 minute\r\n    mcpMetricsInterval: 30000, // 30 seconds\r\n    mcpAlertThresholds: {\r\n      errorRate: 0.05, // 5%\r\n      responseTime: 3000, // 3 seconds\r\n      authFailures: 15,\r\n      rateLimitHits: 75,\r\n      cacheHitRate: 0.7, // 70%\r\n    },\r\n  },\r\n  production: {\r\n    interval: 60000, // 1 minute\r\n    mcpMetricsInterval: 30000, // 30 seconds\r\n    mcpAlertThresholds: {\r\n      errorRate: 0.02, // 2%\r\n      responseTime: 2000, // 2 seconds\r\n      authFailures: 10,\r\n      rateLimitHits: 50,\r\n      cacheHitRate: 0.8, // 80%\r\n    },\r\n  },\r\n} as const;\r\n\r\n// Monitoring utilities\r\nexport interface MCPMonitoringUtils {\r\n  calculateUptime: (startTime: Date, downtime: number) => number;\r\n  calculateErrorRate: (totalErrors: number, totalRequests: number) => number;\r\n  calculateCacheHitRate: (hits: number, misses: number) => number;\r\n  formatDuration: (milliseconds: number) => string;\r\n  formatBytes: (bytes: number) => string;\r\n  generateAlertId: () => string;\r\n  isAlertActive: (alert: MCPAlert) => boolean;\r\n  shouldSendAlert: (alertType: MCPAlertType, lastSent?: Date) => boolean;\r\n}\r\n\r\n// Webhook and notification types\r\nexport interface MCPWebhookPayload {\r\n  event: 'alert' | 'health_check' | 'metrics_update';\r\n  timestamp: string;\r\n  data: MCPAlert | MCPHealthCheck | MCPMetrics;\r\n  metadata: {\r\n    environment: string;\r\n    version: string;\r\n    instance: string;\r\n  };\r\n}\r\n\r\nexport interface MCPSlackAlert {\r\n  channel: string;\r\n  username: string;\r\n  icon_emoji: string;\r\n  attachments: {\r\n    color: 'good' | 'warning' | 'danger';\r\n    title: string;\r\n    text: string;\r\n    fields: {\r\n      title: string;\r\n      value: string;\r\n      short: boolean;\r\n    }[];\r\n    timestamp: number;\r\n  }[];\r\n}\r\n\r\nexport interface MCPEmailAlert {\r\n  to: string[];\r\n  cc?: string[];\r\n  subject: string;\r\n  html: string;\r\n  priority: 'low' | 'normal' | 'high';\r\n  attachments?: {\r\n    filename: string;\r\n    content: string;\r\n    contentType: string;\r\n  }[];\r\n}\r\n\r\n// Monitoring report types\r\nexport interface MCPMonitoringReport {\r\n  period: {\r\n    start: Date;\r\n    end: Date;\r\n    duration: number;\r\n  };\r\n  summary: {\r\n    totalRequests: number;\r\n    successfulRequests: number;\r\n    failedRequests: number;\r\n    averageResponseTime: number;\r\n    uptime: number;\r\n    availability: number;\r\n  };\r\n  security: {\r\n    authenticationAttempts: number;\r\n    authenticationFailures: number;\r\n    rateLimitHits: number;\r\n    suspiciousActivities: number;\r\n    securityIncidents: number;\r\n  };\r\n  performance: {\r\n    throughput: number;\r\n    responseTimePercentiles: {\r\n      p50: number;\r\n      p95: number;\r\n      p99: number;\r\n    };\r\n    cachePerformance: {\r\n      hitRate: number;\r\n      missRate: number;\r\n      evictions: number;\r\n    };\r\n  };\r\n  errors: {\r\n    totalErrors: number;\r\n    errorsByType: Record<MCPErrorType, number>;\r\n    topErrors: {\r\n      type: MCPErrorType;\r\n      count: number;\r\n      percentage: number;\r\n    }[];\r\n    circuitBreakerTrips: number;\r\n  };\r\n  alerts: {\r\n    totalAlerts: number;\r\n    alertsByType: Record<MCPAlertType, number>;\r\n    alertsBySeverity: Record<AlertSeverity, number>;\r\n    meanTimeToResolution: number;\r\n  };\r\n  recommendations: string[];\r\n}\r\n\r\n// Export default monitoring configuration\r\nexport const DEFAULT_MCP_MONITORING_CONFIG: MCPMonitoringConfig = {\r\n  url: '',\r\n  interval: 60000,\r\n  timeout: 10000,\r\n  retries: 3,\r\n  mcpEndpoints: [\r\n    '/api/mcp/health',\r\n    '/api/mcp/security/status',\r\n    '/api/mcp/pagination/stats',\r\n    '/api/mcp/errors/summary',\r\n  ],\r\n  mcpMetricsInterval: 30000,\r\n  mcpAlertThresholds: {\r\n    errorRate: 0.05,\r\n    responseTime: 2000,\r\n    authFailures: 10,\r\n    rateLimitHits: 50,\r\n    cacheHitRate: 0.8,\r\n  },\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\types\\reporting.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":93,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":93,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2113,2116],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2113,2116],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":109,"column":22,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":109,"endColumn":25,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2536,2539],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2536,2539],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":110,"column":18,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":110,"endColumn":21,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[2578,2581],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[2578,2581],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":475,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":475,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[9949,9952],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[9949,9952],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Geli┼şmi┼ş Raporlama Sistemi - TypeScript Tip Tan─▒mlar─▒\r\n\r\nexport interface DateRange {\r\n  start: Date;\r\n  end: Date;\r\n}\r\n\r\n// Validation constraints\r\nexport interface DateRangeConstraints {\r\n  maxDays?: number;\r\n  minDate?: Date;\r\n  maxDate?: Date;\r\n}\r\n\r\nexport interface NumericConstraints {\r\n  min?: number;\r\n  max?: number;\r\n  step?: number;\r\n  precision?: number;\r\n}\r\n\r\nexport interface ReportFilters {\r\n  dateRange?: DateRange;\r\n  categories?: string[];\r\n  status?: string[];\r\n  amountRange?: {\r\n    min: number;\r\n    max: number;\r\n  };\r\n  searchTerm?: string;\r\n  customFilters?: Record<string, string | number | boolean | Date>;\r\n}\r\n\r\n/**\r\n * Represents a custom report configuration\r\n * @interface CustomReport\r\n */\r\nexport interface CustomReport {\r\n  /** Unique identifier for the report */\r\n  id: string;\r\n  /** Human-readable name for the report */\r\n  name: string;\r\n  /** Optional description of what the report contains */\r\n  description?: string;\r\n  /** Type of report being generated */\r\n  type: ReportType;\r\n\r\n  config: {\r\n    dataSources: DataSourceConfig[];\r\n    fields: FieldConfig[];\r\n    filters: FilterConfig[];\r\n    groupBy: string[];\r\n    sortBy: SortConfig[];\r\n    chartType: ChartType;\r\n    layout: LayoutConfig;\r\n    metrics?: string[]; // Moved here from root level\r\n  };\r\n\r\n  schedule?: {\r\n    enabled: boolean;\r\n    frequency: 'daily' | 'weekly' | 'monthly' | 'quarterly';\r\n    time: string;\r\n    recipients: string[];\r\n    format: ExportFormat;\r\n  };\r\n\r\n  metadata: {\r\n    created_by: string;\r\n    created_at: Date;\r\n    updated_by: string;\r\n    updated_at: Date;\r\n    last_run?: Date;\r\n    run_count: number;\r\n  };\r\n}\r\n\r\nexport interface DataSourceConfig {\r\n  source: 'beneficiaries' | 'donations' | 'members' | 'financial' | 'campaigns';\r\n  table: string;\r\n  joins?: JoinConfig[];\r\n  conditions?: ConditionConfig[];\r\n}\r\n\r\nexport interface JoinConfig {\r\n  table: string;\r\n  type: 'inner' | 'left' | 'right' | 'full';\r\n  on: string;\r\n}\r\n\r\nexport interface ConditionConfig {\r\n  field: string;\r\n  operator: '=' | '!=' | '>' | '<' | '>=' | '<=' | 'like' | 'in' | 'between';\r\n  value: any;\r\n}\r\n\r\nexport interface FieldConfig {\r\n  name: string;\r\n  label: string;\r\n  type: 'text' | 'number' | 'date' | 'currency' | 'percentage' | 'boolean';\r\n  format?: string;\r\n  aggregation?: 'sum' | 'avg' | 'count' | 'min' | 'max';\r\n  visible: boolean;\r\n}\r\n\r\nexport interface FilterConfig {\r\n  field: string;\r\n  type: 'text' | 'number' | 'date' | 'select' | 'multiselect' | 'range';\r\n  label: string;\r\n  options?: { value: any; label: string }[];\r\n  defaultValue?: any;\r\n}\r\n\r\nexport interface SortConfig {\r\n  field: string;\r\n  direction: 'asc' | 'desc';\r\n}\r\n\r\nexport interface LayoutConfig {\r\n  columns: number;\r\n  rows: number;\r\n  widgets: WidgetConfig[];\r\n}\r\n\r\nexport interface WidgetConfig {\r\n  id: string;\r\n  type: 'chart' | 'table' | 'metric' | 'text';\r\n  position: { x: number; y: number; w: number; h: number };\r\n  config: WidgetSpecificConfig;\r\n}\r\n\r\nexport interface WidgetSpecificConfig {\r\n  chart?: ChartConfig;\r\n  table?: {\r\n    columns: string[];\r\n    sortable?: boolean;\r\n    filterable?: boolean;\r\n  };\r\n  metric?: {\r\n    title: string;\r\n    format: 'number' | 'currency' | 'percentage';\r\n    showTrend?: boolean;\r\n  };\r\n  text?: {\r\n    content: string;\r\n    fontSize?: number;\r\n    alignment?: 'left' | 'center' | 'right';\r\n  };\r\n}\r\n\r\nexport enum ChartType {\r\n  BAR = 'bar',\r\n  LINE = 'line',\r\n  PIE = 'pie',\r\n  DOUGHNUT = 'doughnut',\r\n  AREA = 'area',\r\n  SCATTER = 'scatter',\r\n  HEATMAP = 'heatmap',\r\n  TREEMAP = 'treemap',\r\n}\r\n\r\nexport enum ReportType {\r\n  FINANCIAL = 'financial',\r\n  DONATION = 'donation',\r\n  MEMBER = 'member',\r\n  IMPACT = 'impact',\r\n  CUSTOM = 'custom',\r\n}\r\n\r\nexport enum ReportStatus {\r\n  PENDING = 'pending',\r\n  PROCESSING = 'processing',\r\n  COMPLETED = 'completed',\r\n  FAILED = 'failed',\r\n}\r\n\r\nexport enum ExportFormat {\r\n  PDF = 'pdf',\r\n  EXCEL = 'excel',\r\n  CSV = 'csv',\r\n  PNG = 'png',\r\n  SVG = 'svg',\r\n}\r\n\r\nexport interface ChartConfig {\r\n  type: ChartType;\r\n  xAxis: string;\r\n  yAxis: string | string[];\r\n  groupBy?: string;\r\n  colors?: string[];\r\n  options: ChartOptions;\r\n}\r\n\r\nexport interface ChartOptions {\r\n  title?: string;\r\n  subtitle?: string;\r\n  legend?: boolean;\r\n  grid?: boolean;\r\n  responsive?: boolean;\r\n  animation?: boolean;\r\n  tooltip?: boolean;\r\n  zoom?: boolean;\r\n  export?: boolean;\r\n}\r\n\r\n// Analitik veri modelleri\r\nexport interface AnalyticsData {\r\n  metrics: MetricData[];\r\n  timeSeries: TimeSeriesData[];\r\n  categories: CategoryData[];\r\n  comparisons: ComparisonData;\r\n}\r\n\r\nexport interface MetricData {\r\n  key: string;\r\n  value: number | string;\r\n  change?: number;\r\n  trend?: 'up' | 'down' | 'stable';\r\n  format?: 'number' | 'currency' | 'percentage';\r\n  icon?: string;\r\n  color?: string;\r\n}\r\n\r\nexport interface TimeSeriesData {\r\n  date: string;\r\n  values: Record<string, number>;\r\n}\r\n\r\nexport interface CategoryData {\r\n  name: string;\r\n  value: number;\r\n  percentage: number;\r\n  color?: string;\r\n}\r\n\r\nexport interface ComparisonData {\r\n  current: number;\r\n  previous: number;\r\n  change: number;\r\n  changePercent: number;\r\n}\r\n\r\n// Mali raporlama tipleri\r\nexport interface FinancialData {\r\n  income: {\r\n    donations: number;\r\n    membership_fees: number;\r\n    grants: number;\r\n    other: number;\r\n    total: number;\r\n  };\r\n\r\n  expenses: {\r\n    aid_payments: number;\r\n    operational: number;\r\n    staff: number;\r\n    marketing: number;\r\n    other: number;\r\n    total: number;\r\n  };\r\n\r\n  budget: {\r\n    planned_income: number;\r\n    actual_income: number;\r\n    planned_expenses: number;\r\n    actual_expenses: number;\r\n    variance: number;\r\n    variance_percent: number;\r\n  };\r\n\r\n  cashFlow: {\r\n    opening_balance: number;\r\n    cash_inflow: number;\r\n    cash_outflow: number;\r\n    closing_balance: number;\r\n    monthly_trend: MonthlyData[];\r\n  };\r\n}\r\n\r\nexport interface MonthlyData {\r\n  month: string;\r\n  income: number;\r\n  expenses: number;\r\n  net: number;\r\n}\r\n\r\n// Ba─ş─▒┼ş analitik tipleri\r\nexport interface DonationAnalytics {\r\n  trends: {\r\n    monthly_donations: MonthlyData[];\r\n    yearly_comparison: YearlyData[];\r\n    seasonal_patterns: SeasonalData[];\r\n  };\r\n\r\n  segmentation: {\r\n    by_donor_type: DonorTypeData[];\r\n    by_amount_range: AmountRangeData[];\r\n    by_frequency: FrequencyData[];\r\n    by_campaign: CampaignData[];\r\n  };\r\n\r\n  predictions: {\r\n    next_month_forecast: number;\r\n    quarterly_forecast: number;\r\n    confidence_interval: number;\r\n    trend_direction: 'up' | 'down' | 'stable';\r\n  };\r\n\r\n  performance: {\r\n    total_donations: number;\r\n    unique_donors: number;\r\n    average_donation: number;\r\n    retention_rate: number;\r\n    growth_rate: number;\r\n  };\r\n}\r\n\r\nexport interface YearlyData {\r\n  year: number;\r\n  amount: number;\r\n  count: number;\r\n  growth: number;\r\n}\r\n\r\nexport interface SeasonalData {\r\n  season: 'spring' | 'summer' | 'autumn' | 'winter';\r\n  amount: number;\r\n  count: number;\r\n  average: number;\r\n}\r\n\r\nexport interface DonorTypeData {\r\n  type: 'individual' | 'corporate' | 'foundation';\r\n  count: number;\r\n  amount: number;\r\n  percentage: number;\r\n}\r\n\r\nexport interface AmountRangeData {\r\n  range: string;\r\n  count: number;\r\n  amount: number;\r\n  percentage: number;\r\n}\r\n\r\nexport interface FrequencyData {\r\n  frequency: 'one-time' | 'monthly' | 'quarterly' | 'yearly';\r\n  count: number;\r\n  amount: number;\r\n  percentage: number;\r\n}\r\n\r\nexport interface CampaignData {\r\n  campaign_id: string;\r\n  campaign_name: string;\r\n  target_amount: number;\r\n  raised_amount: number;\r\n  donor_count: number;\r\n  success_rate: number;\r\n}\r\n\r\n// Sosyal etki ├Âl├ğ├╝m tipleri\r\nexport interface ImpactData {\r\n  beneficiaries: {\r\n    total_served: number;\r\n    by_category: CategoryData[];\r\n    by_location: LocationData[];\r\n    by_age_group: AgeGroupData[];\r\n    by_gender: GenderData[];\r\n  };\r\n\r\n  services: {\r\n    education_support: number;\r\n    healthcare_assistance: number;\r\n    food_aid: number;\r\n    emergency_relief: number;\r\n    skill_development: number;\r\n  };\r\n\r\n  outcomes: {\r\n    lives_improved: number;\r\n    families_supported: number;\r\n    communities_reached: number;\r\n    success_stories: SuccessStory[];\r\n  };\r\n\r\n  geographic: {\r\n    cities_covered: number;\r\n    districts_reached: number;\r\n    coverage_map: GeoData[];\r\n  };\r\n}\r\n\r\nexport interface LocationData {\r\n  city: string;\r\n  district?: string;\r\n  count: number;\r\n  percentage: number;\r\n}\r\n\r\nexport interface AgeGroupData {\r\n  age_group: string;\r\n  count: number;\r\n  percentage: number;\r\n}\r\n\r\nexport interface GenderData {\r\n  gender: 'male' | 'female' | 'other';\r\n  count: number;\r\n  percentage: number;\r\n}\r\n\r\nexport interface SuccessStory {\r\n  id: string;\r\n  title: string;\r\n  description: string;\r\n  beneficiary_name?: string;\r\n  impact_category: string;\r\n  date: Date;\r\n  image_url?: string;\r\n}\r\n\r\nexport interface GeoData {\r\n  location: string;\r\n  coordinates: [number, number];\r\n  value: number;\r\n  color?: string;\r\n}\r\n\r\n// Tahminleme modeli tipleri\r\nexport interface PredictionData {\r\n  forecast: {\r\n    date: string;\r\n    predicted_value: number;\r\n    confidence_lower: number;\r\n    confidence_upper: number;\r\n  }[];\r\n\r\n  accuracy: {\r\n    mae: number; // Mean Absolute Error\r\n    mape: number; // Mean Absolute Percentage Error\r\n    rmse: number; // Root Mean Square Error\r\n  };\r\n\r\n  factors: {\r\n    name: string;\r\n    importance: number;\r\n    impact: 'positive' | 'negative';\r\n  }[];\r\n}\r\n\r\n// Export ve payla┼ş─▒m tipleri\r\nexport interface ExportConfig {\r\n  format: 'pdf' | 'excel' | 'csv' | 'png' | 'svg';\r\n  filename?: string;\r\n  includeCharts?: boolean;\r\n  includeData?: boolean;\r\n  template?: string;\r\n  options?: ExportOptions;\r\n}\r\n\r\nexport interface ExportOptions {\r\n  pageSize?: 'A4' | 'A3' | 'Letter';\r\n  orientation?: 'portrait' | 'landscape';\r\n  margins?: {\r\n    top: number;\r\n    right: number;\r\n    bottom: number;\r\n    left: number;\r\n  };\r\n  compression?: boolean;\r\n  quality?: number;\r\n}\r\n\r\n// API yan─▒t tipleri\r\nexport interface ReportResponse<T = any> {\r\n  data: T;\r\n  metadata: {\r\n    total_records: number;\r\n    page: number;\r\n    page_size: number;\r\n    execution_time: number;\r\n    generated_at: Date;\r\n  };\r\n  error?: string;\r\n}\r\n\r\nexport enum ErrorType {\r\n  DATA_ERROR = 'data',\r\n  DATA_FETCH_ERROR = 'data_fetch',\r\n  PROCESSING_ERROR = 'processing',\r\n  EXPORT_ERROR = 'export',\r\n  SCHEDULE_ERROR = 'schedule',\r\n  PERMISSION_ERROR = 'permission',\r\n  VALIDATION_ERROR = 'validation',\r\n  NETWORK_ERROR = 'network',\r\n}\r\n\r\nexport enum ErrorSeverity {\r\n  LOW = 'low',\r\n  MEDIUM = 'medium',\r\n  HIGH = 'high',\r\n  CRITICAL = 'critical',\r\n}\r\n\r\nexport interface ReportingError {\r\n  code: string;\r\n  message: string;\r\n  type: ErrorType;\r\n  severity: ErrorSeverity;\r\n  context?: Record<string, string | number | boolean>;\r\n  timestamp: Date;\r\n  recoverable: boolean;\r\n  retryable: boolean;\r\n  suggestedAction?: string;\r\n}\r\n\r\n// Performans ve cache tipleri\r\nexport interface CacheConfig {\r\n  enabled: boolean;\r\n  ttl: number; // Time to live in seconds\r\n  key: string;\r\n  tags?: string[];\r\n}\r\n\r\nexport interface PerformanceMetrics {\r\n  query_time: number;\r\n  processing_time: number;\r\n  render_time: number;\r\n  total_time: number;\r\n  memory_usage: number;\r\n  cache_hit: boolean;\r\n  data_size: number;\r\n  optimization_applied: string[];\r\n}\r\n\r\nexport interface CacheStrategy {\r\n  type: 'memory' | 'localStorage' | 'sessionStorage' | 'indexedDB';\r\n  ttl: number;\r\n  maxSize?: number;\r\n  compression?: boolean;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\types\\reporting\\charts.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\types\\reporting\\core.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":16,"column":34,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":16,"endColumn":37,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[316,319],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[316,319],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":19,"column":37,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":19,"endColumn":40,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[364,367],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[364,367],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":28,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":31,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[777,780],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[777,780],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"// Core reporting types\r\nexport interface DateRange {\r\n  start: Date;\r\n  end: Date;\r\n}\r\n\r\nexport interface ReportFilters {\r\n  dateRange?: DateRange;\r\n  categories?: string[];\r\n  status?: string[];\r\n  amountRange?: {\r\n    min: number;\r\n    max: number;\r\n  };\r\n  searchTerm?: string;\r\n  customFilters?: Record<string, any>;\r\n}\r\n\r\nexport interface ReportResponse<T = any> {\r\n  data: T;\r\n  metadata: {\r\n    total_records: number;\r\n    page: number;\r\n    page_size: number;\r\n    execution_time: number;\r\n    generated_at: Date;\r\n  };\r\n  error?: string;\r\n}\r\n\r\nexport interface ReportingError {\r\n  code: string;\r\n  message: string;\r\n  type: 'data' | 'processing' | 'export' | 'schedule' | 'permission';\r\n  severity: 'low' | 'medium' | 'high' | 'critical';\r\n  context?: Record<string, any>;\r\n}\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\types\\reporting\\index.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\types\\search.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":36,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":36,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[780,783],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[780,783],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":60,"column":12,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":60,"endColumn":15,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1192,1195],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1192,1195],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":65,"column":35,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":65,"endColumn":38,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[1292,1295],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[1292,1295],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface SearchConfig {\r\n  searchableFields: string[];\r\n  filterableFields: string[];\r\n  sortableFields: string[];\r\n  defaultSort?: SortConfig;\r\n  itemsPerPage?: number;\r\n  enableFuzzySearch?: boolean;\r\n  enableTurkishSearch?: boolean;\r\n  debounceMs?: number;\r\n}\r\n\r\nexport interface SortConfig {\r\n  field: string;\r\n  direction: 'asc' | 'desc';\r\n}\r\n\r\nexport interface FilterConfig {\r\n  field: string;\r\n  type: 'text' | 'select' | 'date' | 'number' | 'boolean' | 'range';\r\n  label: string;\r\n  options?: FilterOption[];\r\n  placeholder?: string;\r\n  min?: number;\r\n  max?: number;\r\n}\r\n\r\nexport interface FilterOption {\r\n  label: string;\r\n  value: string | number | boolean;\r\n  count?: number;\r\n  color?: string;\r\n}\r\n\r\nexport interface FilterValue {\r\n  field: string;\r\n  value: any;\r\n  operator?:\r\n    | 'eq'\r\n    | 'ne'\r\n    | 'gt'\r\n    | 'gte'\r\n    | 'lt'\r\n    | 'lte'\r\n    | 'contains'\r\n    | 'startsWith'\r\n    | 'endsWith'\r\n    | 'in'\r\n    | 'between';\r\n}\r\n\r\nexport interface SearchState {\r\n  query: string;\r\n  filters: FilterValue[];\r\n  sort: SortConfig;\r\n  currentPage: number;\r\n  totalPages: number;\r\n  totalItems: number;\r\n  itemsPerPage: number;\r\n  isLoading: boolean;\r\n  results: any[];\r\n  hasMore: boolean;\r\n  lastSearchTime: Date | null;\r\n}\r\n\r\nexport interface SearchResult<T = any> {\r\n  items: T[];\r\n  totalCount: number;\r\n  filteredCount: number;\r\n  facets?: SearchFacet[];\r\n  suggestions?: string[];\r\n  searchTime?: number;\r\n}\r\n\r\nexport interface SearchFacet {\r\n  field: string;\r\n  label: string;\r\n  options: FilterOption[];\r\n}\r\n\r\nexport interface PaginationConfig {\r\n  page: number;\r\n  limit: number;\r\n  showFirstLast?: boolean;\r\n  showPrevNext?: boolean;\r\n  showPageNumbers?: boolean;\r\n  maxPageNumbers?: number;\r\n  boundaryCount?: number;\r\n  siblingCount?: number;\r\n}\r\n\r\nexport interface ExportConfig {\r\n  format: 'csv' | 'excel' | 'pdf' | 'json';\r\n  fields?: string[];\r\n  filename?: string;\r\n  includeFilters?: boolean;\r\n  dateRange?: {\r\n    start: Date;\r\n    end: Date;\r\n  };\r\n}\r\n\r\n// Turkish character mapping for search\r\nexport const TURKISH_CHAR_MAP: Record<string, string> = {\r\n  ├ğ: 'c',\r\n  ├ç: 'C',\r\n  ─ş: 'g',\r\n  ─Ş: 'G',\r\n  ─▒: 'i',\r\n  I: 'i',\r\n  ─░: 'I',\r\n  i: 'i',\r\n  ├Â: 'o',\r\n  ├û: 'O',\r\n  ┼ş: 's',\r\n  ┼Ş: 'S',\r\n  ├╝: 'u',\r\n  ├£: 'U',\r\n};\r\n\r\n// Common filter presets for Turkish entities\r\nexport const FILTER_PRESETS = {\r\n  member: {\r\n    membershipType: [\r\n      { label: 'Standart ├£ye', value: 'standard' },\r\n      { label: 'Premium ├£ye', value: 'premium' },\r\n      { label: 'Kurumsal ├£ye', value: 'corporate' },\r\n      { label: '├û─şrenci ├£yesi', value: 'student' },\r\n      { label: 'Emekli ├£yesi', value: 'senior' },\r\n    ],\r\n    status: [\r\n      { label: 'Aktif', value: 'active', color: 'green' },\r\n      { label: 'Pasif', value: 'inactive', color: 'gray' },\r\n      { label: 'Ask─▒da', value: 'suspended', color: 'yellow' },\r\n      { label: '─░ptal', value: 'cancelled', color: 'red' },\r\n    ],\r\n    gender: [\r\n      { label: 'Erkek', value: 'male' },\r\n      { label: 'Kad─▒n', value: 'female' },\r\n      { label: 'Belirtmek ─░stemiyorum', value: 'other' },\r\n    ],\r\n  },\r\n  donation: {\r\n    type: [\r\n      { label: 'Nakit Ba─ş─▒┼ş', value: 'cash' },\r\n      { label: 'Ayni Ba─ş─▒┼ş', value: 'in-kind' },\r\n      { label: 'Kurban Ba─ş─▒┼ş─▒', value: 'sacrifice' },\r\n      { label: 'Zek├ót', value: 'zakat' },\r\n      { label: 'Fitre', value: 'fitre' },\r\n    ],\r\n    status: [\r\n      { label: 'Tamamland─▒', value: 'completed', color: 'green' },\r\n      { label: 'Beklemede', value: 'pending', color: 'yellow' },\r\n      { label: '─░ptal', value: 'cancelled', color: 'red' },\r\n    ],\r\n    paymentMethod: [\r\n      { label: 'Nakit', value: 'cash' },\r\n      { label: 'Banka Havalesi', value: 'bank_transfer' },\r\n      { label: 'Kredi Kart─▒', value: 'credit_card' },\r\n      { label: '├çek', value: 'check' },\r\n    ],\r\n  },\r\n  aid: {\r\n    type: [\r\n      { label: 'Nakit Yard─▒m', value: 'cash' },\r\n      { label: 'G─▒da Yard─▒m─▒', value: 'food' },\r\n      { label: 'Giyim Yard─▒m─▒', value: 'clothing' },\r\n      { label: 'E─şitim Yard─▒m─▒', value: 'education' },\r\n      { label: 'Sa─şl─▒k Yard─▒m─▒', value: 'health' },\r\n      { label: 'Bar─▒nma Yard─▒m─▒', value: 'housing' },\r\n    ],\r\n    status: [\r\n      { label: 'Onayland─▒', value: 'approved', color: 'green' },\r\n      { label: 'Beklemede', value: 'pending', color: 'yellow' },\r\n      { label: '─░nceleniyor', value: 'under_review', color: 'blue' },\r\n      { label: 'Reddedildi', value: 'rejected', color: 'red' },\r\n      { label: 'Tamamland─▒', value: 'completed', color: 'purple' },\r\n    ],\r\n    urgency: [\r\n      { label: 'Acil', value: 'urgent', color: 'red' },\r\n      { label: 'Y├╝ksek', value: 'high', color: 'orange' },\r\n      { label: 'Normal', value: 'normal', color: 'blue' },\r\n      { label: 'D├╝┼ş├╝k', value: 'low', color: 'gray' },\r\n    ],\r\n  },\r\n};\r\n\r\n// Search operators with Turkish labels\r\nexport const SEARCH_OPERATORS = {\r\n  eq: 'E┼şittir',\r\n  ne: 'E┼şit De─şildir',\r\n  gt: 'B├╝y├╝kt├╝r',\r\n  gte: 'B├╝y├╝k E┼şittir',\r\n  lt: 'K├╝├ğ├╝kt├╝r',\r\n  lte: 'K├╝├ğ├╝k E┼şittir',\r\n  contains: '─░├ğerir',\r\n  startsWith: '─░le Ba┼şlar',\r\n  endsWith: '─░le Biter',\r\n  in: '─░├ğinde',\r\n  between: 'Aras─▒nda',\r\n};\r\n\r\n// Date range presets\r\nexport const DATE_RANGE_PRESETS = [\r\n  { label: 'Bug├╝n', value: 'today' },\r\n  { label: 'D├╝n', value: 'yesterday' },\r\n  { label: 'Bu Hafta', value: 'this_week' },\r\n  { label: 'Ge├ğen Hafta', value: 'last_week' },\r\n  { label: 'Bu Ay', value: 'this_month' },\r\n  { label: 'Ge├ğen Ay', value: 'last_month' },\r\n  { label: 'Bu Y─▒l', value: 'this_year' },\r\n  { label: 'Ge├ğen Y─▒l', value: 'last_year' },\r\n  { label: 'Son 7 G├╝n', value: 'last_7_days' },\r\n  { label: 'Son 30 G├╝n', value: 'last_30_days' },\r\n  { label: 'Son 90 G├╝n', value: 'last_90_days' },\r\n  { label: '├ûzel Aral─▒k', value: 'custom' },\r\n];\r\n\r\n// Quick search suggestions for different modules\r\nexport const SEARCH_SUGGESTIONS = {\r\n  member: [\r\n    'Aktif ├╝yeler',\r\n    'Premium ├╝yeler',\r\n    'Bu ay kat─▒lan ├╝yeler',\r\n    'Borcu olan ├╝yeler',\r\n    '─░stanbul ├╝yeleri',\r\n  ],\r\n  donation: [\r\n    'Bu ay yap─▒lan ba─ş─▒┼şlar',\r\n    'B├╝y├╝k ba─ş─▒┼şlar (>1000Ôé║)',\r\n    'Nakit ba─ş─▒┼şlar',\r\n    'Tamamlanmayan ba─ş─▒┼şlar',\r\n  ],\r\n  aid: [\r\n    'Bekleyen ba┼şvurular',\r\n    'Acil yard─▒mlar',\r\n    'Bu ay onaylanan yard─▒mlar',\r\n    'Nakit yard─▒m ba┼şvurular─▒',\r\n  ],\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\types\\stats.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\types\\supabase.ts","messages":[],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\types\\validation.ts","messages":[{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":31,"column":20,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":31,"endColumn":23,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[624,627],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[624,627],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":38,"column":10,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":38,"endColumn":13,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[860,863],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[860,863],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":107,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":107,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3166,3168],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":115,"column":56,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":115,"endColumn":58,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[3429,3431],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":129,"column":14,"nodeType":"Literal","endLine":129,"endColumn":46},{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":132,"column":28,"nodeType":"Literal","endLine":132,"endColumn":60},{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":138,"column":14,"nodeType":"Literal","endLine":138,"endColumn":46},{"ruleId":"security/detect-unsafe-regex","severity":2,"message":"Unsafe Regular Expression","line":141,"column":26,"nodeType":"Literal","endLine":141,"endColumn":58},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":156,"column":17,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":156,"endColumn":19,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[4832,4834],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":168,"column":17,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":168,"endColumn":19,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5160,5162],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":180,"column":17,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":180,"endColumn":19,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5516,5518],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":188,"column":21,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":24,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5758,5761],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5758,5761],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"@typescript-eslint/no-explicit-any","severity":1,"message":"Unexpected any. Specify a different type.","line":188,"column":52,"nodeType":"TSAnyKeyword","messageId":"unexpectedAny","endLine":188,"endColumn":55,"suggestions":[{"messageId":"suggestUnknown","fix":{"range":[5789,5792],"text":"unknown"},"desc":"Use `unknown` instead, this will force you to explicitly, and safely assert the type is correct."},{"messageId":"suggestNever","fix":{"range":[5789,5792],"text":"never"},"desc":"Use `never` instead, this is useful when instantiating generic type parameters that you don't need to know the type of."}]},{"ruleId":"security/detect-object-injection","severity":1,"message":"Generic Object Injection Sink","line":190,"column":24,"nodeType":"MemberExpression","endLine":190,"endColumn":45},{"ruleId":"@typescript-eslint/prefer-nullish-coalescing","severity":1,"message":"Prefer using nullish coalescing operator (`??`) instead of a logical or (`||`), as it is a safer operator.","line":190,"column":57,"nodeType":"Punctuator","messageId":"preferNullishOverOr","endLine":190,"endColumn":59,"suggestions":[{"messageId":"suggestNullish","data":{"equals":""},"fix":{"range":[5889,5891],"text":"??"},"desc":"Fix to nullish coalescing operator (`??`)."}]}],"suppressedMessages":[],"errorCount":4,"fatalErrorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"export interface ValidationResult {\r\n  isValid: boolean;\r\n  errors: ValidationError[];\r\n  warnings?: ValidationWarning[];\r\n}\r\n\r\nexport interface ValidationError {\r\n  field: string;\r\n  message: string;\r\n  code: string;\r\n  severity: 'error' | 'warning';\r\n}\r\n\r\nexport interface ValidationWarning {\r\n  field: string;\r\n  message: string;\r\n  code: string;\r\n}\r\n\r\nexport interface FieldValidationRule {\r\n  required?: boolean;\r\n  minLength?: number;\r\n  maxLength?: number;\r\n  pattern?: RegExp;\r\n  email?: boolean;\r\n  phone?: boolean;\r\n  tcKimlik?: boolean;\r\n  numeric?: boolean;\r\n  min?: number;\r\n  max?: number;\r\n  custom?: (value: any) => ValidationResult | boolean | string;\r\n  dependencies?: string[]; // Other fields this field depends on\r\n}\r\n\r\nexport type FormValidationSchema = Record<string, FieldValidationRule>;\r\n\r\nexport interface FormFieldState {\r\n  value: any;\r\n  touched: boolean;\r\n  dirty: boolean;\r\n  errors: ValidationError[];\r\n  warnings: ValidationWarning[];\r\n  isValidating: boolean;\r\n  lastValidated: Date | null;\r\n}\r\n\r\nexport interface FormState {\r\n  fields: Record<string, FormFieldState>;\r\n  isValid: boolean;\r\n  isSubmitting: boolean;\r\n  submitCount: number;\r\n  errors: ValidationError[];\r\n  warnings: ValidationWarning[];\r\n  isDirty: boolean;\r\n  isValidated: boolean;\r\n}\r\n\r\n// Validation rules presets for common Turkish data\r\nexport const ValidationRules = {\r\n  required: (message = 'Bu alan zorunludur'): FieldValidationRule => ({\r\n    required: true,\r\n    custom: (value) => (!value || value.toString().trim() === '' ? message : true),\r\n  }),\r\n\r\n  email: (message = 'Ge├ğerli bir e-posta adresi girin'): FieldValidationRule => ({\r\n    email: true,\r\n    pattern: /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\r\n    custom: (value) => {\r\n      if (!value) return true;\r\n      return /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/.test(value) || message;\r\n    },\r\n  }),\r\n\r\n  phone: (message = 'Ge├ğerli bir telefon numaras─▒ girin'): FieldValidationRule => ({\r\n    phone: true,\r\n    pattern: /^(\\+90|0)?5[0-9]{9}$/,\r\n    custom: (value) => {\r\n      if (!value) return true;\r\n      const cleaned = value.replace(/\\D/g, '');\r\n      const phoneRegex = /^(90)?5[0-9]{9}$/;\r\n      return phoneRegex.test(cleaned) || message;\r\n    },\r\n  }),\r\n\r\n  tcKimlik: (message = 'Ge├ğerli bir T.C. Kimlik numaras─▒ girin'): FieldValidationRule => ({\r\n    tcKimlik: true,\r\n    pattern: /^[1-9][0-9]{10}$/,\r\n    custom: (value) => {\r\n      if (!value) return true;\r\n      if (!/^[1-9][0-9]{10}$/.test(value)) return message;\r\n\r\n      // T.C. Kimlik algorithm validation\r\n      const digits = value.split('').map(Number);\r\n      const sum1 = digits[0] + digits[2] + digits[4] + digits[6] + digits[8];\r\n      const sum2 = digits[1] + digits[3] + digits[5] + digits[7];\r\n      const check1 = (sum1 * 7 - sum2) % 10;\r\n      const check2 = (sum1 + sum2 + check1) % 10;\r\n\r\n      return (check1 === digits[9] && check2 === digits[10]) || message;\r\n    },\r\n  }),\r\n\r\n  minLength: (min: number, message?: string): FieldValidationRule => ({\r\n    minLength: min,\r\n    custom: (value) => {\r\n      if (!value) return true;\r\n      return value.toString().length >= min || message || `En az ${min} karakter olmal─▒d─▒r`;\r\n    },\r\n  }),\r\n\r\n  maxLength: (max: number, message?: string): FieldValidationRule => ({\r\n    maxLength: max,\r\n    custom: (value) => {\r\n      if (!value) return true;\r\n      return value.toString().length <= max || message || `En fazla ${max} karakter olabilir`;\r\n    },\r\n  }),\r\n\r\n  numeric: (message = 'Sadece say─▒ girebilirsiniz'): FieldValidationRule => ({\r\n    numeric: true,\r\n    pattern: /^\\d+$/,\r\n    custom: (value) => {\r\n      if (!value) return true;\r\n      return /^\\d+$/.test(value.toString()) || message;\r\n    },\r\n  }),\r\n\r\n  decimal: (message = 'Ge├ğerli bir say─▒ girin'): FieldValidationRule => ({\r\n    pattern: /^[0-9]{1,15}(?:\\.[0-9]{1,2})?$/,\r\n    custom: (value) => {\r\n      if (!value) return true;\r\n      const decimalRegex = /^[0-9]{1,15}(?:\\.[0-9]{1,2})?$/;\r\n      return decimalRegex.test(value.toString()) || message;\r\n    },\r\n  }),\r\n\r\n  money: (message = 'Ge├ğerli bir tutar girin'): FieldValidationRule => ({\r\n    pattern: /^[0-9]{1,15}(?:\\.[0-9]{1,2})?$/,\r\n    custom: (value) => {\r\n      if (!value) return true;\r\n      const moneyRegex = /^[0-9]{1,15}(?:\\.[0-9]{1,2})?$/;\r\n      const numValue = parseFloat(value.toString());\r\n      return (moneyRegex.test(value.toString()) && !isNaN(numValue) && numValue >= 0) || message;\r\n    },\r\n  }),\r\n\r\n  range: (min: number, max: number, message?: string): FieldValidationRule => ({\r\n    min,\r\n    max,\r\n    custom: (value) => {\r\n      if (!value) return true;\r\n      const numValue = parseFloat(value.toString());\r\n      if (isNaN(numValue)) return 'Ge├ğerli bir say─▒ girin';\r\n      return (\r\n        (numValue >= min && numValue <= max) ||\r\n        message ||\r\n        `${min} ile ${max} aras─▒nda bir de─şer girin`\r\n      );\r\n    },\r\n  }),\r\n\r\n  dateAfter: (afterDate: Date, message?: string): FieldValidationRule => ({\r\n    custom: (value) => {\r\n      if (!value) return true;\r\n      const inputDate = new Date(value);\r\n      return (\r\n        inputDate > afterDate ||\r\n        message ||\r\n        `${afterDate.toLocaleDateString('tr-TR')} tarihinden sonra olmal─▒d─▒r`\r\n      );\r\n    },\r\n  }),\r\n\r\n  dateBefore: (beforeDate: Date, message?: string): FieldValidationRule => ({\r\n    custom: (value) => {\r\n      if (!value) return true;\r\n      const inputDate = new Date(value);\r\n      return (\r\n        inputDate < beforeDate ||\r\n        message ||\r\n        `${beforeDate.toLocaleDateString('tr-TR')} tarihinden ├Ânce olmal─▒d─▒r`\r\n      );\r\n    },\r\n  }),\r\n\r\n  matchField: (fieldName: string, message?: string): FieldValidationRule => ({\r\n    dependencies: [fieldName],\r\n    custom: (value: any, formData?: Record<string, any>) => {\r\n      if (!value) return true;\r\n      return value === formData?.[fieldName] || message || 'Alanlar e┼şle┼şmiyor';\r\n    },\r\n  }),\r\n\r\n  // Turkish specific validations\r\n  iban: (message = 'Ge├ğerli bir IBAN numaras─▒ girin'): FieldValidationRule => ({\r\n    pattern: /^TR\\d{2}\\d{4}\\d{4}\\d{4}\\d{4}\\d{4}\\d{2}$/,\r\n    custom: (value) => {\r\n      if (!value) return true;\r\n      const cleaned = value.replace(/\\s/g, '').toUpperCase();\r\n      return /^TR\\d{24}$/.test(cleaned) || message;\r\n    },\r\n  }),\r\n\r\n  vergiNo: (message = 'Ge├ğerli bir vergi numaras─▒ girin'): FieldValidationRule => ({\r\n    pattern: /^\\d{10}$/,\r\n    custom: (value) => {\r\n      if (!value) return true;\r\n      return /^\\d{10}$/.test(value) || message;\r\n    },\r\n  }),\r\n};\r\n\r\n// Form schemas for different entities\r\nexport const FormSchemas = {\r\n  member: {\r\n    firstName: ValidationRules.required('Ad alan─▒ zorunludur'),\r\n    lastName: ValidationRules.required('Soyad alan─▒ zorunludur'),\r\n    email: ValidationRules.email(),\r\n    phone: ValidationRules.phone(),\r\n    tcKimlik: ValidationRules.tcKimlik(),\r\n    address: ValidationRules.required('Adres alan─▒ zorunludur'),\r\n  },\r\n\r\n  donation: {\r\n    donorName: ValidationRules.required('Ba─ş─▒┼ş├ğ─▒ ad─▒ zorunludur'),\r\n    amount: ValidationRules.money('Ge├ğerli bir tutar girin'),\r\n    donationType: ValidationRules.required('Ba─ş─▒┼ş t├╝r├╝ se├ğin'),\r\n    date: ValidationRules.required('Tarih se├ğin'),\r\n  },\r\n\r\n  aidApplication: {\r\n    applicantName: ValidationRules.required('Ba┼şvuru sahibi ad─▒ zorunludur'),\r\n    tcKimlik: ValidationRules.tcKimlik(),\r\n    phone: ValidationRules.phone(),\r\n    aidType: ValidationRules.required('Yard─▒m t├╝r├╝ se├ğin'),\r\n    description: ValidationRules.required('A├ğ─▒klama yaz─▒n'),\r\n    requestedAmount: ValidationRules.money('Ge├ğerli bir tutar girin'),\r\n  },\r\n\r\n  login: {\r\n    email: ValidationRules.email('Ge├ğerli bir e-posta adresi girin'),\r\n    password: ValidationRules.required('┼Şifre zorunludur'),\r\n  },\r\n\r\n  profile: {\r\n    name: ValidationRules.required('Ad zorunludur'),\r\n    email: ValidationRules.email(),\r\n    currentPassword: ValidationRules.required('Mevcut ┼şifre zorunludur'),\r\n    newPassword: ValidationRules.minLength(6, '┼Şifre en az 6 karakter olmal─▒d─▒r'),\r\n    confirmPassword: ValidationRules.matchField('newPassword', '┼Şifreler e┼şle┼şmiyor'),\r\n  },\r\n};\r\n","usedDeprecatedRules":[]},{"filePath":"C:\\Users\\isaha\\panel-3\\utils\\validation.ts","messages":[{"ruleId":"@typescript-eslint/no-unnecessary-condition","severity":1,"message":"Unnecessary conditional, expected left-hand side of `??` operator to be possibly null or undefined.","line":519,"column":8,"nodeType":"LogicalExpression","messageId":"neverNullish","endLine":519,"endColumn":40}],"suppressedMessages":[],"errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"/**\r\n * @fileoverview Comprehensive Validation Utilities\r\n * @description Centralized validation functions for forms, data, and business logic\r\n */\r\n\r\nimport { z } from 'zod';\r\n\r\n// =============================================================================\r\n// TYPE DEFINITIONS\r\n// =============================================================================\r\n\r\n/**\r\n * ValidationResult Interface\r\n * \r\n * @interface ValidationResult\r\n */\r\nexport interface ValidationResult<T = unknown> {\r\n  success: boolean;\r\n  data?: T;\r\n  errors?: ValidationError[];\r\n}\r\n\r\n/**\r\n * ValidationError Interface\r\n * \r\n * @interface ValidationError\r\n */\r\nexport interface ValidationError {\r\n  field: string;\r\n  message: string;\r\n  code: string;\r\n  value?: unknown;\r\n}\r\n\r\n/**\r\n * ValidationOptions Interface\r\n * \r\n * @interface ValidationOptions\r\n */\r\nexport interface ValidationOptions {\r\n  strict?: boolean;\r\n  sanitize?: boolean;\r\n  trim?: boolean;\r\n  allowEmpty?: boolean;\r\n}\r\n\r\n// =============================================================================\r\n// ZOD SCHEMAS\r\n// =============================================================================\r\n\r\n// Common validation schemas\r\nexport const commonSchemas = {\r\n  // Email validation\r\n  email: z\r\n    .string()\r\n    .email('Ge├ğersiz email format─▒')\r\n    .min(5, 'Email en az 5 karakter olmal─▒')\r\n    .max(254, 'Email ├ğok uzun'),\r\n\r\n  // Phone validation (Turkish)\r\n  phone: z\r\n    .string()\r\n    .regex(/^(\\+90|90|0)?[0-9]{10}$/, 'Ge├ğersiz telefon numaras─▒ format─▒')\r\n    .transform((val) => val.replace(/\\s/g, '')),\r\n\r\n  // TC Kimlik No validation\r\n  tcKimlik: z\r\n    .string()\r\n    .regex(/^[1-9][0-9]{10}$/, 'TC Kimlik No 11 haneli olmal─▒ ve 0 ile ba┼şlamamal─▒')\r\n    .refine((val) => {\r\n      if (val.length !== 11) return false;\r\n      const digits = val.split('').map(Number);\r\n\r\n      // Check if all digits are the same\r\n      if (digits.every((d) => d === digits[0])) return false;\r\n\r\n      // Checksum validation\r\n      const checksum1 = ((digits[0] ?? 0) + (digits[2] ?? 0) + (digits[4] ?? 0) + (digits[6] ?? 0) + (digits[8] ?? 0)) * 7;\r\n      const checksum2 = (digits[1] ?? 0) + (digits[3] ?? 0) + (digits[5] ?? 0) + (digits[7] ?? 0);\r\n      const digit10 = (checksum1 - checksum2) % 10;\r\n      const digit11 =\r\n        ((digits[0] ?? 0) +\r\n          (digits[1] ?? 0) +\r\n          (digits[2] ?? 0) +\r\n          (digits[3] ?? 0) +\r\n          (digits[4] ?? 0) +\r\n          (digits[5] ?? 0) +\r\n          (digits[6] ?? 0) +\r\n          (digits[7] ?? 0) +\r\n          (digits[8] ?? 0) +\r\n          (digits[9] ?? 0)) %\r\n        10;\r\n\r\n      return digit10 === (digits[9] ?? 0) && digit11 === (digits[10] ?? 0);\r\n    }, 'Ge├ğersiz TC Kimlik No'),\r\n\r\n  // IBAN validation (Turkish)\r\n  iban: z\r\n    .string()\r\n    .regex(/^TR[0-9]{24}$/, 'Ge├ğersiz IBAN format─▒ (TR ile ba┼şlamal─▒ ve 26 karakter olmal─▒)')\r\n    .transform((val) => val.toUpperCase()),\r\n\r\n  // Password validation\r\n  password: z\r\n    .string()\r\n    .min(8, '┼Şifre en az 8 karakter olmal─▒')\r\n    .regex(\r\n      /^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/,\r\n      '┼Şifre en az bir k├╝├ğ├╝k harf, bir b├╝y├╝k harf ve bir rakam i├ğermeli',\r\n    ),\r\n\r\n  // Name validation\r\n  name: z\r\n    .string()\r\n    .min(2, '─░sim en az 2 karakter olmal─▒')\r\n    .max(50, '─░sim ├ğok uzun')\r\n    .regex(/^[a-zA-Z─ş├╝┼ş─▒├Â├ğ─Ş├£┼Ş─░├û├ç\\s]+$/, '─░sim sadece harf ve bo┼şluk i├ğerebilir'),\r\n\r\n  // Amount validation\r\n  amount: z.number().min(0.01, \"Tutar 0.01'den k├╝├ğ├╝k olamaz\").max(1000000, 'Tutar ├ğok b├╝y├╝k'),\r\n\r\n  // Date validation\r\n  date: z\r\n    .date()\r\n    .refine((date) => date <= new Date(), 'Ge├ğmi┼ş bir tarih se├ğin')\r\n    .refine((date) => date >= new Date('1900-01-01'), 'Ge├ğersiz tarih'),\r\n\r\n  // URL validation\r\n  url: z.string().url('Ge├ğersiz URL format─▒'),\r\n\r\n  // File size validation (in bytes)\r\n  fileSize: z.number().max(10 * 1024 * 1024, \"Dosya boyutu 10MB'dan b├╝y├╝k olamaz\"),\r\n\r\n  // File type validation\r\n  fileType: z\r\n    .string()\r\n    .refine(\r\n      (type) => ['image/jpeg', 'image/png', 'image/gif', 'application/pdf'].includes(type),\r\n      'Desteklenmeyen dosya t├╝r├╝',\r\n    ),\r\n};\r\n\r\n// =============================================================================\r\n// VALIDATION FUNCTIONS\r\n// =============================================================================\r\n\r\n/**\r\n * ValidationService Service\r\n * \r\n * Service class for handling validationservice operations\r\n * \r\n * @class ValidationService\r\n */\r\nexport class ValidationService {\r\n  /**\r\n   * Validate email address\r\n   */\r\n  static validateEmail(email: string, options?: ValidationOptions): ValidationResult<string> {\r\n    try {\r\n      const result = commonSchemas.email.parse(ValidationService.preprocess(email, options));\r\n      return { success: true, data: result };\r\n    } catch (error: unknown) {\r\n      if (error instanceof z.ZodError) {\r\n        return {\r\n          success: false,\r\n          errors: error.errors.map((err) => ({\r\n            field: 'email',\r\n            message: err.message,\r\n            code: err.code,\r\n            value: email,\r\n          })),\r\n        };\r\n      }\r\n      return {\r\n        success: false,\r\n        errors: [\r\n          { field: 'email', message: 'Email validation failed', code: 'UNKNOWN', value: email },\r\n        ],\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate phone number\r\n   */\r\n  static validatePhone(phone: string, options?: ValidationOptions): ValidationResult<string> {\r\n    try {\r\n      const result = commonSchemas.phone.parse(ValidationService.preprocess(phone, options));\r\n      return { success: true, data: result };\r\n    } catch (error: unknown) {\r\n      if (error instanceof z.ZodError) {\r\n        return {\r\n          success: false,\r\n          errors: error.errors.map((err) => ({\r\n            field: 'phone',\r\n            message: err.message,\r\n            code: err.code,\r\n            value: phone,\r\n          })),\r\n        };\r\n      }\r\n      return {\r\n        success: false,\r\n        errors: [\r\n          { field: 'phone', message: 'Phone validation failed', code: 'UNKNOWN', value: phone },\r\n        ],\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate TC Kimlik No\r\n   */\r\n  static validateTcKimlik(tcKimlik: string, options?: ValidationOptions): ValidationResult<string> {\r\n    try {\r\n      const result = commonSchemas.tcKimlik.parse(ValidationService.preprocess(tcKimlik, options));\r\n      return { success: true, data: result };\r\n    } catch (error: unknown) {\r\n      if (error instanceof z.ZodError) {\r\n        return {\r\n          success: false,\r\n          errors: error.errors.map((err) => ({\r\n            field: 'tcKimlik',\r\n            message: err.message,\r\n            code: err.code,\r\n            value: tcKimlik,\r\n          })),\r\n        };\r\n      }\r\n      return {\r\n        success: false,\r\n        errors: [\r\n          {\r\n            field: 'tcKimlik',\r\n            message: 'TC Kimlik validation failed',\r\n            code: 'UNKNOWN',\r\n            value: tcKimlik,\r\n          },\r\n        ],\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate IBAN\r\n   */\r\n  static validateIban(iban: string, options?: ValidationOptions): ValidationResult<string> {\r\n    try {\r\n      const result = commonSchemas.iban.parse(ValidationService.preprocess(iban, options));\r\n      return { success: true, data: result };\r\n    } catch (error: unknown) {\r\n      if (error instanceof z.ZodError) {\r\n        return {\r\n          success: false,\r\n          errors: error.errors.map((err) => ({\r\n            field: 'iban',\r\n            message: err.message,\r\n            code: err.code,\r\n            value: iban,\r\n          })),\r\n        };\r\n      }\r\n      return {\r\n        success: false,\r\n        errors: [\r\n          { field: 'iban', message: 'IBAN validation failed', code: 'UNKNOWN', value: iban },\r\n        ],\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate password\r\n   */\r\n  static validatePassword(password: string, options?: ValidationOptions): ValidationResult<string> {\r\n    try {\r\n      const result = commonSchemas.password.parse(ValidationService.preprocess(password, options));\r\n      return { success: true, data: result };\r\n    } catch (error: unknown) {\r\n      if (error instanceof z.ZodError) {\r\n        return {\r\n          success: false,\r\n          errors: error.errors.map((err) => ({\r\n            field: 'password',\r\n            message: err.message,\r\n            code: err.code,\r\n            value: password,\r\n          })),\r\n        };\r\n      }\r\n      return {\r\n        success: false,\r\n        errors: [\r\n          {\r\n            field: 'password',\r\n            message: 'Password validation failed',\r\n            code: 'UNKNOWN',\r\n            value: password,\r\n          },\r\n        ],\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate amount\r\n   */\r\n  static validateAmount(amount: number): ValidationResult<number> {\r\n    try {\r\n      const result = commonSchemas.amount.parse(amount);\r\n      return { success: true, data: result };\r\n    } catch (error: unknown) {\r\n      if (error instanceof z.ZodError) {\r\n        return {\r\n          success: false,\r\n          errors: error.errors.map((err) => ({\r\n            field: 'amount',\r\n            message: err.message,\r\n            code: err.code,\r\n            value: amount,\r\n          })),\r\n        };\r\n      }\r\n      return {\r\n        success: false,\r\n        errors: [\r\n          { field: 'amount', message: 'Amount validation failed', code: 'UNKNOWN', value: amount },\r\n        ],\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Validate file\r\n   */\r\n  static validateFile(file: File, maxSize: number = 10 * 1024 * 1024): ValidationResult<File> {\r\n    const errors: ValidationError[] = [];\r\n\r\n    // Size validation\r\n    if (file.size > maxSize) {\r\n      errors.push({\r\n        field: 'file',\r\n        message: `Dosya boyutu ${String(maxSize / (1024 * 1024))}MB'dan b├╝y├╝k olamaz`,\r\n        code: 'FILE_TOO_LARGE',\r\n        value: file.size,\r\n      });\r\n    }\r\n\r\n    // Type validation\r\n    const allowedTypes = ['image/jpeg', 'image/png', 'image/gif', 'application/pdf'];\r\n    if (!allowedTypes.includes(file.type)) {\r\n      errors.push({\r\n        field: 'file',\r\n        message: 'Desteklenmeyen dosya t├╝r├╝',\r\n        code: 'INVALID_FILE_TYPE',\r\n        value: file.type,\r\n      });\r\n    }\r\n\r\n    return errors.length > 0 ? { success: false, errors } : { success: true, data: file };\r\n  }\r\n\r\n  /**\r\n   * Validate form data\r\n   */\r\n  static validateForm<T>(data: T, schema: z.ZodSchema<T>): ValidationResult<T> {\r\n    try {\r\n      const result = schema.parse(data);\r\n      return { success: true, data: result };\r\n    } catch (error: unknown) {\r\n      if (error instanceof z.ZodError) {\r\n        return {\r\n          success: false,\r\n          errors: error.errors.map((err) => ({\r\n            field: err.path.join('.'),\r\n            message: err.message,\r\n            code: err.code,\r\n            value: err.path.reduce(\r\n              (obj: unknown, key: unknown) => (obj as Record<string, unknown>)[String(key)],\r\n              data,\r\n            ),\r\n          })),\r\n        };\r\n      }\r\n      return {\r\n        success: false,\r\n        errors: [\r\n          { field: 'form', message: 'Form validation failed', code: 'UNKNOWN', value: data },\r\n        ],\r\n      };\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sanitize string input\r\n   */\r\n  static sanitize(input: string): string {\r\n    const scriptRegex = /<script[^>]*>.*?<\\/script>/gi;\r\n    const htmlRegex = /<[^>]*>/g;\r\n    const jsProtocolRegex = /javascript:/gi;\r\n    const eventHandlerRegex = /on\\w+\\s*=/gi;\r\n    \r\n    return input\r\n      .trim()\r\n      .replace(scriptRegex, '') // Remove script tags\r\n      .replace(htmlRegex, '') // Remove HTML tags\r\n      .replace(jsProtocolRegex, '') // Remove javascript: protocols\r\n      .replace(eventHandlerRegex, '') // Remove event handlers\r\n      .slice(0, 1000); // Limit length\r\n  }\r\n\r\n  /**\r\n   * Preprocess string for validation\r\n   */\r\n  private static preprocess(input: string, options?: ValidationOptions): string {\r\n    let processed = input;\r\n\r\n    if (options?.trim !== false) {\r\n      processed = processed.trim();\r\n    }\r\n\r\n    if (options?.sanitize) {\r\n      processed = ValidationService.sanitize(processed);\r\n    }\r\n\r\n    return processed;\r\n  }\r\n\r\n  /**\r\n   * Validate multiple fields at once\r\n   */\r\n  static validateMultiple(\r\n    validations: {\r\n      value: unknown;\r\n      validator: (value: unknown) => ValidationResult;\r\n      field: string;\r\n    }[],\r\n  ): ValidationResult {\r\n    const allErrors: ValidationError[] = [];\r\n\r\n    for (const validation of validations) {\r\n      const result = validation.validator(validation.value);\r\n      if (!result.success && result.errors) {\r\n        allErrors.push(\r\n          ...result.errors.map((error) => ({\r\n            ...error,\r\n            field: `${validation.field}.${(error as { field?: string }).field ?? 'unknown'}`,\r\n          })),\r\n        );\r\n      }\r\n    }\r\n\r\n    return allErrors.length > 0 ? { success: false, errors: allErrors } : { success: true };\r\n  }\r\n}\r\n\r\n// =============================================================================\r\n// BUSINESS LOGIC VALIDATION SCHEMAS\r\n// =============================================================================\r\n\r\n// Member validation schema\r\nexport const memberSchema = z.object({\r\n  adSoyad: commonSchemas.name,\r\n  email: commonSchemas.email.optional(),\r\n  telefon: commonSchemas.phone.optional(),\r\n  tcKimlik: commonSchemas.tcKimlik.optional(),\r\n  dogumTarihi: commonSchemas.date.optional(),\r\n  adres: z.string().min(10, 'Adres en az 10 karakter olmal─▒').optional(),\r\n  uyeTuru: z.enum(['bireysel', 'kurumsal', 'onur']),\r\n  aktif: z.boolean().default(true),\r\n});\r\n\r\n// Aid request validation schema\r\nexport const aidRequestSchema = z.object({\r\n  baslik: z.string().min(5, 'Ba┼şl─▒k en az 5 karakter olmal─▒').max(100, 'Ba┼şl─▒k ├ğok uzun'),\r\n  aciklama: z.string().min(20, 'A├ğ─▒klama en az 20 karakter olmal─▒').max(1000, 'A├ğ─▒klama ├ğok uzun'),\r\n  kategori: z.enum(['gida', 'barinma', 'saglik', 'egitim', 'diger']),\r\n  oncelik: z.enum(['dusuk', 'orta', 'yuksek', 'acil']).default('orta'),\r\n  tahminiMaliyet: commonSchemas.amount.optional(),\r\n  durum: z\r\n    .enum(['beklemede', 'degerlendiriliyor', 'onaylandi', 'reddedildi', 'tamamlandi'])\r\n    .default('beklemede'),\r\n  basvuranId: z.string().min(1, 'Ba┼şvuran ID gerekli'),\r\n  iban: commonSchemas.iban.optional(),\r\n});\r\n\r\n// Donation validation schema\r\nexport const donationSchema = z.object({\r\n  miktar: commonSchemas.amount,\r\n  bagisTuru: z.enum(['nakdi', 'ayni']),\r\n  kategori: z.enum(['genel', 'yardim', 'proje', 'zekat', 'fitre']),\r\n  aciklama: z.string().max(500, 'A├ğ─▒klama ├ğok uzun').optional(),\r\n  bagisciId: z.string().min(1, 'Ba─ş─▒┼ş├ğ─▒ ID gerekli'),\r\n  anonim: z.boolean().default(false),\r\n  vergiIndirimi: z.boolean().default(false),\r\n});\r\n\r\n// =============================================================================\r\n// UTILITY FUNCTIONS\r\n// =============================================================================\r\n\r\nexport const validateMember = (data: unknown) => ValidationService.validateForm(data, memberSchema);\r\nexport const validateAidRequest = (data: unknown) =>\r\n  ValidationService.validateForm(data, aidRequestSchema);\r\nexport const validateDonation = (data: unknown) =>\r\n  ValidationService.validateForm(data, donationSchema);\r\n\r\n// Helper function to get validation error messages\r\nexport const getValidationErrors = (result: ValidationResult): string[] => {\r\n  if (result.success || !result.errors) return [];\r\n  return result.errors.map((error) => `${error.field}: ${error.message}`);\r\n};\r\n\r\n// Helper function to check if validation passed\r\nexport const isValid = (result: ValidationResult): boolean => result.success;\r\n\r\n// Helper function to get first error message\r\nexport const getFirstError = (result: ValidationResult): string | null => {\r\n  if ((result.success || !result.errors) ?? result.errors.length === 0) return null;\r\n  return result.errors[0]?.message ?? 'Validation error';\r\n};\r\n\r\nexport default ValidationService;\r\n","usedDeprecatedRules":[]}]
